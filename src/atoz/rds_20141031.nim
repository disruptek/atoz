
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772581 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772581](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772581): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_773190 = ref object of OpenApiRestCall_772581
proc url_PostAddRoleToDBCluster_773192(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToDBCluster_773191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773193 = query.getOrDefault("Action")
  valid_773193 = validateParameter(valid_773193, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_773193 != nil:
    section.add "Action", valid_773193
  var valid_773194 = query.getOrDefault("Version")
  valid_773194 = validateParameter(valid_773194, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773194 != nil:
    section.add "Version", valid_773194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773195 = header.getOrDefault("X-Amz-Date")
  valid_773195 = validateParameter(valid_773195, JString, required = false,
                                 default = nil)
  if valid_773195 != nil:
    section.add "X-Amz-Date", valid_773195
  var valid_773196 = header.getOrDefault("X-Amz-Security-Token")
  valid_773196 = validateParameter(valid_773196, JString, required = false,
                                 default = nil)
  if valid_773196 != nil:
    section.add "X-Amz-Security-Token", valid_773196
  var valid_773197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773197 = validateParameter(valid_773197, JString, required = false,
                                 default = nil)
  if valid_773197 != nil:
    section.add "X-Amz-Content-Sha256", valid_773197
  var valid_773198 = header.getOrDefault("X-Amz-Algorithm")
  valid_773198 = validateParameter(valid_773198, JString, required = false,
                                 default = nil)
  if valid_773198 != nil:
    section.add "X-Amz-Algorithm", valid_773198
  var valid_773199 = header.getOrDefault("X-Amz-Signature")
  valid_773199 = validateParameter(valid_773199, JString, required = false,
                                 default = nil)
  if valid_773199 != nil:
    section.add "X-Amz-Signature", valid_773199
  var valid_773200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773200 = validateParameter(valid_773200, JString, required = false,
                                 default = nil)
  if valid_773200 != nil:
    section.add "X-Amz-SignedHeaders", valid_773200
  var valid_773201 = header.getOrDefault("X-Amz-Credential")
  valid_773201 = validateParameter(valid_773201, JString, required = false,
                                 default = nil)
  if valid_773201 != nil:
    section.add "X-Amz-Credential", valid_773201
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_773202 = formData.getOrDefault("RoleArn")
  valid_773202 = validateParameter(valid_773202, JString, required = true,
                                 default = nil)
  if valid_773202 != nil:
    section.add "RoleArn", valid_773202
  var valid_773203 = formData.getOrDefault("DBClusterIdentifier")
  valid_773203 = validateParameter(valid_773203, JString, required = true,
                                 default = nil)
  if valid_773203 != nil:
    section.add "DBClusterIdentifier", valid_773203
  var valid_773204 = formData.getOrDefault("FeatureName")
  valid_773204 = validateParameter(valid_773204, JString, required = false,
                                 default = nil)
  if valid_773204 != nil:
    section.add "FeatureName", valid_773204
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773205: Call_PostAddRoleToDBCluster_773190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773205.validator(path, query, header, formData, body)
  let scheme = call_773205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773205.url(scheme.get, call_773205.host, call_773205.base,
                         call_773205.route, valid.getOrDefault("path"))
  result = hook(call_773205, url, valid)

proc call*(call_773206: Call_PostAddRoleToDBCluster_773190; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_773207 = newJObject()
  var formData_773208 = newJObject()
  add(formData_773208, "RoleArn", newJString(RoleArn))
  add(query_773207, "Action", newJString(Action))
  add(formData_773208, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773207, "Version", newJString(Version))
  add(formData_773208, "FeatureName", newJString(FeatureName))
  result = call_773206.call(nil, query_773207, nil, formData_773208, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_773190(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_773191, base: "/",
    url: url_PostAddRoleToDBCluster_773192, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_772917 = ref object of OpenApiRestCall_772581
proc url_GetAddRoleToDBCluster_772919(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToDBCluster_772918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773031 = query.getOrDefault("DBClusterIdentifier")
  valid_773031 = validateParameter(valid_773031, JString, required = true,
                                 default = nil)
  if valid_773031 != nil:
    section.add "DBClusterIdentifier", valid_773031
  var valid_773032 = query.getOrDefault("RoleArn")
  valid_773032 = validateParameter(valid_773032, JString, required = true,
                                 default = nil)
  if valid_773032 != nil:
    section.add "RoleArn", valid_773032
  var valid_773046 = query.getOrDefault("Action")
  valid_773046 = validateParameter(valid_773046, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_773046 != nil:
    section.add "Action", valid_773046
  var valid_773047 = query.getOrDefault("FeatureName")
  valid_773047 = validateParameter(valid_773047, JString, required = false,
                                 default = nil)
  if valid_773047 != nil:
    section.add "FeatureName", valid_773047
  var valid_773048 = query.getOrDefault("Version")
  valid_773048 = validateParameter(valid_773048, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773048 != nil:
    section.add "Version", valid_773048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773049 = header.getOrDefault("X-Amz-Date")
  valid_773049 = validateParameter(valid_773049, JString, required = false,
                                 default = nil)
  if valid_773049 != nil:
    section.add "X-Amz-Date", valid_773049
  var valid_773050 = header.getOrDefault("X-Amz-Security-Token")
  valid_773050 = validateParameter(valid_773050, JString, required = false,
                                 default = nil)
  if valid_773050 != nil:
    section.add "X-Amz-Security-Token", valid_773050
  var valid_773051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773051 = validateParameter(valid_773051, JString, required = false,
                                 default = nil)
  if valid_773051 != nil:
    section.add "X-Amz-Content-Sha256", valid_773051
  var valid_773052 = header.getOrDefault("X-Amz-Algorithm")
  valid_773052 = validateParameter(valid_773052, JString, required = false,
                                 default = nil)
  if valid_773052 != nil:
    section.add "X-Amz-Algorithm", valid_773052
  var valid_773053 = header.getOrDefault("X-Amz-Signature")
  valid_773053 = validateParameter(valid_773053, JString, required = false,
                                 default = nil)
  if valid_773053 != nil:
    section.add "X-Amz-Signature", valid_773053
  var valid_773054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773054 = validateParameter(valid_773054, JString, required = false,
                                 default = nil)
  if valid_773054 != nil:
    section.add "X-Amz-SignedHeaders", valid_773054
  var valid_773055 = header.getOrDefault("X-Amz-Credential")
  valid_773055 = validateParameter(valid_773055, JString, required = false,
                                 default = nil)
  if valid_773055 != nil:
    section.add "X-Amz-Credential", valid_773055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773078: Call_GetAddRoleToDBCluster_772917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773078.validator(path, query, header, formData, body)
  let scheme = call_773078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773078.url(scheme.get, call_773078.host, call_773078.base,
                         call_773078.route, valid.getOrDefault("path"))
  result = hook(call_773078, url, valid)

proc call*(call_773149: Call_GetAddRoleToDBCluster_772917;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_773150 = newJObject()
  add(query_773150, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773150, "RoleArn", newJString(RoleArn))
  add(query_773150, "Action", newJString(Action))
  add(query_773150, "FeatureName", newJString(FeatureName))
  add(query_773150, "Version", newJString(Version))
  result = call_773149.call(nil, query_773150, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_772917(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_772918, base: "/",
    url: url_GetAddRoleToDBCluster_772919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_773227 = ref object of OpenApiRestCall_772581
proc url_PostAddRoleToDBInstance_773229(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToDBInstance_773228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773230 = query.getOrDefault("Action")
  valid_773230 = validateParameter(valid_773230, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_773230 != nil:
    section.add "Action", valid_773230
  var valid_773231 = query.getOrDefault("Version")
  valid_773231 = validateParameter(valid_773231, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773231 != nil:
    section.add "Version", valid_773231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773232 = header.getOrDefault("X-Amz-Date")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Date", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Security-Token")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Security-Token", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-Content-Sha256", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-Algorithm")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-Algorithm", valid_773235
  var valid_773236 = header.getOrDefault("X-Amz-Signature")
  valid_773236 = validateParameter(valid_773236, JString, required = false,
                                 default = nil)
  if valid_773236 != nil:
    section.add "X-Amz-Signature", valid_773236
  var valid_773237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773237 = validateParameter(valid_773237, JString, required = false,
                                 default = nil)
  if valid_773237 != nil:
    section.add "X-Amz-SignedHeaders", valid_773237
  var valid_773238 = header.getOrDefault("X-Amz-Credential")
  valid_773238 = validateParameter(valid_773238, JString, required = false,
                                 default = nil)
  if valid_773238 != nil:
    section.add "X-Amz-Credential", valid_773238
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_773239 = formData.getOrDefault("DBInstanceIdentifier")
  valid_773239 = validateParameter(valid_773239, JString, required = true,
                                 default = nil)
  if valid_773239 != nil:
    section.add "DBInstanceIdentifier", valid_773239
  var valid_773240 = formData.getOrDefault("RoleArn")
  valid_773240 = validateParameter(valid_773240, JString, required = true,
                                 default = nil)
  if valid_773240 != nil:
    section.add "RoleArn", valid_773240
  var valid_773241 = formData.getOrDefault("FeatureName")
  valid_773241 = validateParameter(valid_773241, JString, required = true,
                                 default = nil)
  if valid_773241 != nil:
    section.add "FeatureName", valid_773241
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773242: Call_PostAddRoleToDBInstance_773227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_773242.validator(path, query, header, formData, body)
  let scheme = call_773242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773242.url(scheme.get, call_773242.host, call_773242.base,
                         call_773242.route, valid.getOrDefault("path"))
  result = hook(call_773242, url, valid)

proc call*(call_773243: Call_PostAddRoleToDBInstance_773227;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  var query_773244 = newJObject()
  var formData_773245 = newJObject()
  add(formData_773245, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_773245, "RoleArn", newJString(RoleArn))
  add(query_773244, "Action", newJString(Action))
  add(query_773244, "Version", newJString(Version))
  add(formData_773245, "FeatureName", newJString(FeatureName))
  result = call_773243.call(nil, query_773244, nil, formData_773245, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_773227(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_773228, base: "/",
    url: url_PostAddRoleToDBInstance_773229, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_773209 = ref object of OpenApiRestCall_772581
proc url_GetAddRoleToDBInstance_773211(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToDBInstance_773210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_773212 = query.getOrDefault("RoleArn")
  valid_773212 = validateParameter(valid_773212, JString, required = true,
                                 default = nil)
  if valid_773212 != nil:
    section.add "RoleArn", valid_773212
  var valid_773213 = query.getOrDefault("Action")
  valid_773213 = validateParameter(valid_773213, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_773213 != nil:
    section.add "Action", valid_773213
  var valid_773214 = query.getOrDefault("FeatureName")
  valid_773214 = validateParameter(valid_773214, JString, required = true,
                                 default = nil)
  if valid_773214 != nil:
    section.add "FeatureName", valid_773214
  var valid_773215 = query.getOrDefault("Version")
  valid_773215 = validateParameter(valid_773215, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773215 != nil:
    section.add "Version", valid_773215
  var valid_773216 = query.getOrDefault("DBInstanceIdentifier")
  valid_773216 = validateParameter(valid_773216, JString, required = true,
                                 default = nil)
  if valid_773216 != nil:
    section.add "DBInstanceIdentifier", valid_773216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773217 = header.getOrDefault("X-Amz-Date")
  valid_773217 = validateParameter(valid_773217, JString, required = false,
                                 default = nil)
  if valid_773217 != nil:
    section.add "X-Amz-Date", valid_773217
  var valid_773218 = header.getOrDefault("X-Amz-Security-Token")
  valid_773218 = validateParameter(valid_773218, JString, required = false,
                                 default = nil)
  if valid_773218 != nil:
    section.add "X-Amz-Security-Token", valid_773218
  var valid_773219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773219 = validateParameter(valid_773219, JString, required = false,
                                 default = nil)
  if valid_773219 != nil:
    section.add "X-Amz-Content-Sha256", valid_773219
  var valid_773220 = header.getOrDefault("X-Amz-Algorithm")
  valid_773220 = validateParameter(valid_773220, JString, required = false,
                                 default = nil)
  if valid_773220 != nil:
    section.add "X-Amz-Algorithm", valid_773220
  var valid_773221 = header.getOrDefault("X-Amz-Signature")
  valid_773221 = validateParameter(valid_773221, JString, required = false,
                                 default = nil)
  if valid_773221 != nil:
    section.add "X-Amz-Signature", valid_773221
  var valid_773222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773222 = validateParameter(valid_773222, JString, required = false,
                                 default = nil)
  if valid_773222 != nil:
    section.add "X-Amz-SignedHeaders", valid_773222
  var valid_773223 = header.getOrDefault("X-Amz-Credential")
  valid_773223 = validateParameter(valid_773223, JString, required = false,
                                 default = nil)
  if valid_773223 != nil:
    section.add "X-Amz-Credential", valid_773223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773224: Call_GetAddRoleToDBInstance_773209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_773224.validator(path, query, header, formData, body)
  let scheme = call_773224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773224.url(scheme.get, call_773224.host, call_773224.base,
                         call_773224.route, valid.getOrDefault("path"))
  result = hook(call_773224, url, valid)

proc call*(call_773225: Call_GetAddRoleToDBInstance_773209; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  var query_773226 = newJObject()
  add(query_773226, "RoleArn", newJString(RoleArn))
  add(query_773226, "Action", newJString(Action))
  add(query_773226, "FeatureName", newJString(FeatureName))
  add(query_773226, "Version", newJString(Version))
  add(query_773226, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_773225.call(nil, query_773226, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_773209(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_773210, base: "/",
    url: url_GetAddRoleToDBInstance_773211, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_773263 = ref object of OpenApiRestCall_772581
proc url_PostAddSourceIdentifierToSubscription_773265(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddSourceIdentifierToSubscription_773264(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773266 = query.getOrDefault("Action")
  valid_773266 = validateParameter(valid_773266, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_773266 != nil:
    section.add "Action", valid_773266
  var valid_773267 = query.getOrDefault("Version")
  valid_773267 = validateParameter(valid_773267, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773267 != nil:
    section.add "Version", valid_773267
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773268 = header.getOrDefault("X-Amz-Date")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Date", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-Security-Token")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-Security-Token", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-Content-Sha256", valid_773270
  var valid_773271 = header.getOrDefault("X-Amz-Algorithm")
  valid_773271 = validateParameter(valid_773271, JString, required = false,
                                 default = nil)
  if valid_773271 != nil:
    section.add "X-Amz-Algorithm", valid_773271
  var valid_773272 = header.getOrDefault("X-Amz-Signature")
  valid_773272 = validateParameter(valid_773272, JString, required = false,
                                 default = nil)
  if valid_773272 != nil:
    section.add "X-Amz-Signature", valid_773272
  var valid_773273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773273 = validateParameter(valid_773273, JString, required = false,
                                 default = nil)
  if valid_773273 != nil:
    section.add "X-Amz-SignedHeaders", valid_773273
  var valid_773274 = header.getOrDefault("X-Amz-Credential")
  valid_773274 = validateParameter(valid_773274, JString, required = false,
                                 default = nil)
  if valid_773274 != nil:
    section.add "X-Amz-Credential", valid_773274
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_773275 = formData.getOrDefault("SourceIdentifier")
  valid_773275 = validateParameter(valid_773275, JString, required = true,
                                 default = nil)
  if valid_773275 != nil:
    section.add "SourceIdentifier", valid_773275
  var valid_773276 = formData.getOrDefault("SubscriptionName")
  valid_773276 = validateParameter(valid_773276, JString, required = true,
                                 default = nil)
  if valid_773276 != nil:
    section.add "SubscriptionName", valid_773276
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773277: Call_PostAddSourceIdentifierToSubscription_773263;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_773277.validator(path, query, header, formData, body)
  let scheme = call_773277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773277.url(scheme.get, call_773277.host, call_773277.base,
                         call_773277.route, valid.getOrDefault("path"))
  result = hook(call_773277, url, valid)

proc call*(call_773278: Call_PostAddSourceIdentifierToSubscription_773263;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773279 = newJObject()
  var formData_773280 = newJObject()
  add(formData_773280, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_773280, "SubscriptionName", newJString(SubscriptionName))
  add(query_773279, "Action", newJString(Action))
  add(query_773279, "Version", newJString(Version))
  result = call_773278.call(nil, query_773279, nil, formData_773280, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_773263(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_773264, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_773265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_773246 = ref object of OpenApiRestCall_772581
proc url_GetAddSourceIdentifierToSubscription_773248(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddSourceIdentifierToSubscription_773247(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773249 = query.getOrDefault("Action")
  valid_773249 = validateParameter(valid_773249, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_773249 != nil:
    section.add "Action", valid_773249
  var valid_773250 = query.getOrDefault("SourceIdentifier")
  valid_773250 = validateParameter(valid_773250, JString, required = true,
                                 default = nil)
  if valid_773250 != nil:
    section.add "SourceIdentifier", valid_773250
  var valid_773251 = query.getOrDefault("SubscriptionName")
  valid_773251 = validateParameter(valid_773251, JString, required = true,
                                 default = nil)
  if valid_773251 != nil:
    section.add "SubscriptionName", valid_773251
  var valid_773252 = query.getOrDefault("Version")
  valid_773252 = validateParameter(valid_773252, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773252 != nil:
    section.add "Version", valid_773252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773253 = header.getOrDefault("X-Amz-Date")
  valid_773253 = validateParameter(valid_773253, JString, required = false,
                                 default = nil)
  if valid_773253 != nil:
    section.add "X-Amz-Date", valid_773253
  var valid_773254 = header.getOrDefault("X-Amz-Security-Token")
  valid_773254 = validateParameter(valid_773254, JString, required = false,
                                 default = nil)
  if valid_773254 != nil:
    section.add "X-Amz-Security-Token", valid_773254
  var valid_773255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773255 = validateParameter(valid_773255, JString, required = false,
                                 default = nil)
  if valid_773255 != nil:
    section.add "X-Amz-Content-Sha256", valid_773255
  var valid_773256 = header.getOrDefault("X-Amz-Algorithm")
  valid_773256 = validateParameter(valid_773256, JString, required = false,
                                 default = nil)
  if valid_773256 != nil:
    section.add "X-Amz-Algorithm", valid_773256
  var valid_773257 = header.getOrDefault("X-Amz-Signature")
  valid_773257 = validateParameter(valid_773257, JString, required = false,
                                 default = nil)
  if valid_773257 != nil:
    section.add "X-Amz-Signature", valid_773257
  var valid_773258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773258 = validateParameter(valid_773258, JString, required = false,
                                 default = nil)
  if valid_773258 != nil:
    section.add "X-Amz-SignedHeaders", valid_773258
  var valid_773259 = header.getOrDefault("X-Amz-Credential")
  valid_773259 = validateParameter(valid_773259, JString, required = false,
                                 default = nil)
  if valid_773259 != nil:
    section.add "X-Amz-Credential", valid_773259
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773260: Call_GetAddSourceIdentifierToSubscription_773246;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_773260.validator(path, query, header, formData, body)
  let scheme = call_773260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773260.url(scheme.get, call_773260.host, call_773260.base,
                         call_773260.route, valid.getOrDefault("path"))
  result = hook(call_773260, url, valid)

proc call*(call_773261: Call_GetAddSourceIdentifierToSubscription_773246;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_773262 = newJObject()
  add(query_773262, "Action", newJString(Action))
  add(query_773262, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_773262, "SubscriptionName", newJString(SubscriptionName))
  add(query_773262, "Version", newJString(Version))
  result = call_773261.call(nil, query_773262, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_773246(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_773247, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_773248,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_773298 = ref object of OpenApiRestCall_772581
proc url_PostAddTagsToResource_773300(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddTagsToResource_773299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773301 = query.getOrDefault("Action")
  valid_773301 = validateParameter(valid_773301, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773301 != nil:
    section.add "Action", valid_773301
  var valid_773302 = query.getOrDefault("Version")
  valid_773302 = validateParameter(valid_773302, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773302 != nil:
    section.add "Version", valid_773302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773303 = header.getOrDefault("X-Amz-Date")
  valid_773303 = validateParameter(valid_773303, JString, required = false,
                                 default = nil)
  if valid_773303 != nil:
    section.add "X-Amz-Date", valid_773303
  var valid_773304 = header.getOrDefault("X-Amz-Security-Token")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "X-Amz-Security-Token", valid_773304
  var valid_773305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773305 = validateParameter(valid_773305, JString, required = false,
                                 default = nil)
  if valid_773305 != nil:
    section.add "X-Amz-Content-Sha256", valid_773305
  var valid_773306 = header.getOrDefault("X-Amz-Algorithm")
  valid_773306 = validateParameter(valid_773306, JString, required = false,
                                 default = nil)
  if valid_773306 != nil:
    section.add "X-Amz-Algorithm", valid_773306
  var valid_773307 = header.getOrDefault("X-Amz-Signature")
  valid_773307 = validateParameter(valid_773307, JString, required = false,
                                 default = nil)
  if valid_773307 != nil:
    section.add "X-Amz-Signature", valid_773307
  var valid_773308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773308 = validateParameter(valid_773308, JString, required = false,
                                 default = nil)
  if valid_773308 != nil:
    section.add "X-Amz-SignedHeaders", valid_773308
  var valid_773309 = header.getOrDefault("X-Amz-Credential")
  valid_773309 = validateParameter(valid_773309, JString, required = false,
                                 default = nil)
  if valid_773309 != nil:
    section.add "X-Amz-Credential", valid_773309
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_773310 = formData.getOrDefault("Tags")
  valid_773310 = validateParameter(valid_773310, JArray, required = true, default = nil)
  if valid_773310 != nil:
    section.add "Tags", valid_773310
  var valid_773311 = formData.getOrDefault("ResourceName")
  valid_773311 = validateParameter(valid_773311, JString, required = true,
                                 default = nil)
  if valid_773311 != nil:
    section.add "ResourceName", valid_773311
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773312: Call_PostAddTagsToResource_773298; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_773312.validator(path, query, header, formData, body)
  let scheme = call_773312.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773312.url(scheme.get, call_773312.host, call_773312.base,
                         call_773312.route, valid.getOrDefault("path"))
  result = hook(call_773312, url, valid)

proc call*(call_773313: Call_PostAddTagsToResource_773298; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_773314 = newJObject()
  var formData_773315 = newJObject()
  if Tags != nil:
    formData_773315.add "Tags", Tags
  add(query_773314, "Action", newJString(Action))
  add(formData_773315, "ResourceName", newJString(ResourceName))
  add(query_773314, "Version", newJString(Version))
  result = call_773313.call(nil, query_773314, nil, formData_773315, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_773298(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_773299, base: "/",
    url: url_PostAddTagsToResource_773300, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_773281 = ref object of OpenApiRestCall_772581
proc url_GetAddTagsToResource_773283(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddTagsToResource_773282(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_773284 = query.getOrDefault("Tags")
  valid_773284 = validateParameter(valid_773284, JArray, required = true, default = nil)
  if valid_773284 != nil:
    section.add "Tags", valid_773284
  var valid_773285 = query.getOrDefault("ResourceName")
  valid_773285 = validateParameter(valid_773285, JString, required = true,
                                 default = nil)
  if valid_773285 != nil:
    section.add "ResourceName", valid_773285
  var valid_773286 = query.getOrDefault("Action")
  valid_773286 = validateParameter(valid_773286, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773286 != nil:
    section.add "Action", valid_773286
  var valid_773287 = query.getOrDefault("Version")
  valid_773287 = validateParameter(valid_773287, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773287 != nil:
    section.add "Version", valid_773287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773288 = header.getOrDefault("X-Amz-Date")
  valid_773288 = validateParameter(valid_773288, JString, required = false,
                                 default = nil)
  if valid_773288 != nil:
    section.add "X-Amz-Date", valid_773288
  var valid_773289 = header.getOrDefault("X-Amz-Security-Token")
  valid_773289 = validateParameter(valid_773289, JString, required = false,
                                 default = nil)
  if valid_773289 != nil:
    section.add "X-Amz-Security-Token", valid_773289
  var valid_773290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773290 = validateParameter(valid_773290, JString, required = false,
                                 default = nil)
  if valid_773290 != nil:
    section.add "X-Amz-Content-Sha256", valid_773290
  var valid_773291 = header.getOrDefault("X-Amz-Algorithm")
  valid_773291 = validateParameter(valid_773291, JString, required = false,
                                 default = nil)
  if valid_773291 != nil:
    section.add "X-Amz-Algorithm", valid_773291
  var valid_773292 = header.getOrDefault("X-Amz-Signature")
  valid_773292 = validateParameter(valid_773292, JString, required = false,
                                 default = nil)
  if valid_773292 != nil:
    section.add "X-Amz-Signature", valid_773292
  var valid_773293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773293 = validateParameter(valid_773293, JString, required = false,
                                 default = nil)
  if valid_773293 != nil:
    section.add "X-Amz-SignedHeaders", valid_773293
  var valid_773294 = header.getOrDefault("X-Amz-Credential")
  valid_773294 = validateParameter(valid_773294, JString, required = false,
                                 default = nil)
  if valid_773294 != nil:
    section.add "X-Amz-Credential", valid_773294
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773295: Call_GetAddTagsToResource_773281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_773295.validator(path, query, header, formData, body)
  let scheme = call_773295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773295.url(scheme.get, call_773295.host, call_773295.base,
                         call_773295.route, valid.getOrDefault("path"))
  result = hook(call_773295, url, valid)

proc call*(call_773296: Call_GetAddTagsToResource_773281; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773297 = newJObject()
  if Tags != nil:
    query_773297.add "Tags", Tags
  add(query_773297, "ResourceName", newJString(ResourceName))
  add(query_773297, "Action", newJString(Action))
  add(query_773297, "Version", newJString(Version))
  result = call_773296.call(nil, query_773297, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_773281(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_773282, base: "/",
    url: url_GetAddTagsToResource_773283, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_773334 = ref object of OpenApiRestCall_772581
proc url_PostApplyPendingMaintenanceAction_773336(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostApplyPendingMaintenanceAction_773335(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773337 = query.getOrDefault("Action")
  valid_773337 = validateParameter(valid_773337, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_773337 != nil:
    section.add "Action", valid_773337
  var valid_773338 = query.getOrDefault("Version")
  valid_773338 = validateParameter(valid_773338, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773338 != nil:
    section.add "Version", valid_773338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773339 = header.getOrDefault("X-Amz-Date")
  valid_773339 = validateParameter(valid_773339, JString, required = false,
                                 default = nil)
  if valid_773339 != nil:
    section.add "X-Amz-Date", valid_773339
  var valid_773340 = header.getOrDefault("X-Amz-Security-Token")
  valid_773340 = validateParameter(valid_773340, JString, required = false,
                                 default = nil)
  if valid_773340 != nil:
    section.add "X-Amz-Security-Token", valid_773340
  var valid_773341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773341 = validateParameter(valid_773341, JString, required = false,
                                 default = nil)
  if valid_773341 != nil:
    section.add "X-Amz-Content-Sha256", valid_773341
  var valid_773342 = header.getOrDefault("X-Amz-Algorithm")
  valid_773342 = validateParameter(valid_773342, JString, required = false,
                                 default = nil)
  if valid_773342 != nil:
    section.add "X-Amz-Algorithm", valid_773342
  var valid_773343 = header.getOrDefault("X-Amz-Signature")
  valid_773343 = validateParameter(valid_773343, JString, required = false,
                                 default = nil)
  if valid_773343 != nil:
    section.add "X-Amz-Signature", valid_773343
  var valid_773344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773344 = validateParameter(valid_773344, JString, required = false,
                                 default = nil)
  if valid_773344 != nil:
    section.add "X-Amz-SignedHeaders", valid_773344
  var valid_773345 = header.getOrDefault("X-Amz-Credential")
  valid_773345 = validateParameter(valid_773345, JString, required = false,
                                 default = nil)
  if valid_773345 != nil:
    section.add "X-Amz-Credential", valid_773345
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_773346 = formData.getOrDefault("ApplyAction")
  valid_773346 = validateParameter(valid_773346, JString, required = true,
                                 default = nil)
  if valid_773346 != nil:
    section.add "ApplyAction", valid_773346
  var valid_773347 = formData.getOrDefault("ResourceIdentifier")
  valid_773347 = validateParameter(valid_773347, JString, required = true,
                                 default = nil)
  if valid_773347 != nil:
    section.add "ResourceIdentifier", valid_773347
  var valid_773348 = formData.getOrDefault("OptInType")
  valid_773348 = validateParameter(valid_773348, JString, required = true,
                                 default = nil)
  if valid_773348 != nil:
    section.add "OptInType", valid_773348
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773349: Call_PostApplyPendingMaintenanceAction_773334;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_773349.validator(path, query, header, formData, body)
  let scheme = call_773349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773349.url(scheme.get, call_773349.host, call_773349.base,
                         call_773349.route, valid.getOrDefault("path"))
  result = hook(call_773349, url, valid)

proc call*(call_773350: Call_PostApplyPendingMaintenanceAction_773334;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_773351 = newJObject()
  var formData_773352 = newJObject()
  add(query_773351, "Action", newJString(Action))
  add(formData_773352, "ApplyAction", newJString(ApplyAction))
  add(formData_773352, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_773352, "OptInType", newJString(OptInType))
  add(query_773351, "Version", newJString(Version))
  result = call_773350.call(nil, query_773351, nil, formData_773352, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_773334(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_773335, base: "/",
    url: url_PostApplyPendingMaintenanceAction_773336,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_773316 = ref object of OpenApiRestCall_772581
proc url_GetApplyPendingMaintenanceAction_773318(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetApplyPendingMaintenanceAction_773317(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_773319 = query.getOrDefault("ApplyAction")
  valid_773319 = validateParameter(valid_773319, JString, required = true,
                                 default = nil)
  if valid_773319 != nil:
    section.add "ApplyAction", valid_773319
  var valid_773320 = query.getOrDefault("ResourceIdentifier")
  valid_773320 = validateParameter(valid_773320, JString, required = true,
                                 default = nil)
  if valid_773320 != nil:
    section.add "ResourceIdentifier", valid_773320
  var valid_773321 = query.getOrDefault("Action")
  valid_773321 = validateParameter(valid_773321, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_773321 != nil:
    section.add "Action", valid_773321
  var valid_773322 = query.getOrDefault("OptInType")
  valid_773322 = validateParameter(valid_773322, JString, required = true,
                                 default = nil)
  if valid_773322 != nil:
    section.add "OptInType", valid_773322
  var valid_773323 = query.getOrDefault("Version")
  valid_773323 = validateParameter(valid_773323, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773323 != nil:
    section.add "Version", valid_773323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773324 = header.getOrDefault("X-Amz-Date")
  valid_773324 = validateParameter(valid_773324, JString, required = false,
                                 default = nil)
  if valid_773324 != nil:
    section.add "X-Amz-Date", valid_773324
  var valid_773325 = header.getOrDefault("X-Amz-Security-Token")
  valid_773325 = validateParameter(valid_773325, JString, required = false,
                                 default = nil)
  if valid_773325 != nil:
    section.add "X-Amz-Security-Token", valid_773325
  var valid_773326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773326 = validateParameter(valid_773326, JString, required = false,
                                 default = nil)
  if valid_773326 != nil:
    section.add "X-Amz-Content-Sha256", valid_773326
  var valid_773327 = header.getOrDefault("X-Amz-Algorithm")
  valid_773327 = validateParameter(valid_773327, JString, required = false,
                                 default = nil)
  if valid_773327 != nil:
    section.add "X-Amz-Algorithm", valid_773327
  var valid_773328 = header.getOrDefault("X-Amz-Signature")
  valid_773328 = validateParameter(valid_773328, JString, required = false,
                                 default = nil)
  if valid_773328 != nil:
    section.add "X-Amz-Signature", valid_773328
  var valid_773329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773329 = validateParameter(valid_773329, JString, required = false,
                                 default = nil)
  if valid_773329 != nil:
    section.add "X-Amz-SignedHeaders", valid_773329
  var valid_773330 = header.getOrDefault("X-Amz-Credential")
  valid_773330 = validateParameter(valid_773330, JString, required = false,
                                 default = nil)
  if valid_773330 != nil:
    section.add "X-Amz-Credential", valid_773330
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773331: Call_GetApplyPendingMaintenanceAction_773316;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_773331.validator(path, query, header, formData, body)
  let scheme = call_773331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773331.url(scheme.get, call_773331.host, call_773331.base,
                         call_773331.route, valid.getOrDefault("path"))
  result = hook(call_773331, url, valid)

proc call*(call_773332: Call_GetApplyPendingMaintenanceAction_773316;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_773333 = newJObject()
  add(query_773333, "ApplyAction", newJString(ApplyAction))
  add(query_773333, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_773333, "Action", newJString(Action))
  add(query_773333, "OptInType", newJString(OptInType))
  add(query_773333, "Version", newJString(Version))
  result = call_773332.call(nil, query_773333, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_773316(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_773317, base: "/",
    url: url_GetApplyPendingMaintenanceAction_773318,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_773373 = ref object of OpenApiRestCall_772581
proc url_PostAuthorizeDBSecurityGroupIngress_773375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_773374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773376 = query.getOrDefault("Action")
  valid_773376 = validateParameter(valid_773376, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_773376 != nil:
    section.add "Action", valid_773376
  var valid_773377 = query.getOrDefault("Version")
  valid_773377 = validateParameter(valid_773377, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773377 != nil:
    section.add "Version", valid_773377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773378 = header.getOrDefault("X-Amz-Date")
  valid_773378 = validateParameter(valid_773378, JString, required = false,
                                 default = nil)
  if valid_773378 != nil:
    section.add "X-Amz-Date", valid_773378
  var valid_773379 = header.getOrDefault("X-Amz-Security-Token")
  valid_773379 = validateParameter(valid_773379, JString, required = false,
                                 default = nil)
  if valid_773379 != nil:
    section.add "X-Amz-Security-Token", valid_773379
  var valid_773380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773380 = validateParameter(valid_773380, JString, required = false,
                                 default = nil)
  if valid_773380 != nil:
    section.add "X-Amz-Content-Sha256", valid_773380
  var valid_773381 = header.getOrDefault("X-Amz-Algorithm")
  valid_773381 = validateParameter(valid_773381, JString, required = false,
                                 default = nil)
  if valid_773381 != nil:
    section.add "X-Amz-Algorithm", valid_773381
  var valid_773382 = header.getOrDefault("X-Amz-Signature")
  valid_773382 = validateParameter(valid_773382, JString, required = false,
                                 default = nil)
  if valid_773382 != nil:
    section.add "X-Amz-Signature", valid_773382
  var valid_773383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773383 = validateParameter(valid_773383, JString, required = false,
                                 default = nil)
  if valid_773383 != nil:
    section.add "X-Amz-SignedHeaders", valid_773383
  var valid_773384 = header.getOrDefault("X-Amz-Credential")
  valid_773384 = validateParameter(valid_773384, JString, required = false,
                                 default = nil)
  if valid_773384 != nil:
    section.add "X-Amz-Credential", valid_773384
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_773385 = formData.getOrDefault("DBSecurityGroupName")
  valid_773385 = validateParameter(valid_773385, JString, required = true,
                                 default = nil)
  if valid_773385 != nil:
    section.add "DBSecurityGroupName", valid_773385
  var valid_773386 = formData.getOrDefault("EC2SecurityGroupName")
  valid_773386 = validateParameter(valid_773386, JString, required = false,
                                 default = nil)
  if valid_773386 != nil:
    section.add "EC2SecurityGroupName", valid_773386
  var valid_773387 = formData.getOrDefault("EC2SecurityGroupId")
  valid_773387 = validateParameter(valid_773387, JString, required = false,
                                 default = nil)
  if valid_773387 != nil:
    section.add "EC2SecurityGroupId", valid_773387
  var valid_773388 = formData.getOrDefault("CIDRIP")
  valid_773388 = validateParameter(valid_773388, JString, required = false,
                                 default = nil)
  if valid_773388 != nil:
    section.add "CIDRIP", valid_773388
  var valid_773389 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_773389 = validateParameter(valid_773389, JString, required = false,
                                 default = nil)
  if valid_773389 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_773389
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773390: Call_PostAuthorizeDBSecurityGroupIngress_773373;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_773390.validator(path, query, header, formData, body)
  let scheme = call_773390.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773390.url(scheme.get, call_773390.host, call_773390.base,
                         call_773390.route, valid.getOrDefault("path"))
  result = hook(call_773390, url, valid)

proc call*(call_773391: Call_PostAuthorizeDBSecurityGroupIngress_773373;
          DBSecurityGroupName: string;
          Action: string = "AuthorizeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_773392 = newJObject()
  var formData_773393 = newJObject()
  add(formData_773393, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_773392, "Action", newJString(Action))
  add(formData_773393, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_773393, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_773393, "CIDRIP", newJString(CIDRIP))
  add(query_773392, "Version", newJString(Version))
  add(formData_773393, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_773391.call(nil, query_773392, nil, formData_773393, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_773373(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_773374, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_773375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_773353 = ref object of OpenApiRestCall_772581
proc url_GetAuthorizeDBSecurityGroupIngress_773355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_773354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_773356 = query.getOrDefault("EC2SecurityGroupId")
  valid_773356 = validateParameter(valid_773356, JString, required = false,
                                 default = nil)
  if valid_773356 != nil:
    section.add "EC2SecurityGroupId", valid_773356
  var valid_773357 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_773357 = validateParameter(valid_773357, JString, required = false,
                                 default = nil)
  if valid_773357 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_773357
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_773358 = query.getOrDefault("DBSecurityGroupName")
  valid_773358 = validateParameter(valid_773358, JString, required = true,
                                 default = nil)
  if valid_773358 != nil:
    section.add "DBSecurityGroupName", valid_773358
  var valid_773359 = query.getOrDefault("Action")
  valid_773359 = validateParameter(valid_773359, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_773359 != nil:
    section.add "Action", valid_773359
  var valid_773360 = query.getOrDefault("CIDRIP")
  valid_773360 = validateParameter(valid_773360, JString, required = false,
                                 default = nil)
  if valid_773360 != nil:
    section.add "CIDRIP", valid_773360
  var valid_773361 = query.getOrDefault("EC2SecurityGroupName")
  valid_773361 = validateParameter(valid_773361, JString, required = false,
                                 default = nil)
  if valid_773361 != nil:
    section.add "EC2SecurityGroupName", valid_773361
  var valid_773362 = query.getOrDefault("Version")
  valid_773362 = validateParameter(valid_773362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773362 != nil:
    section.add "Version", valid_773362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773363 = header.getOrDefault("X-Amz-Date")
  valid_773363 = validateParameter(valid_773363, JString, required = false,
                                 default = nil)
  if valid_773363 != nil:
    section.add "X-Amz-Date", valid_773363
  var valid_773364 = header.getOrDefault("X-Amz-Security-Token")
  valid_773364 = validateParameter(valid_773364, JString, required = false,
                                 default = nil)
  if valid_773364 != nil:
    section.add "X-Amz-Security-Token", valid_773364
  var valid_773365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773365 = validateParameter(valid_773365, JString, required = false,
                                 default = nil)
  if valid_773365 != nil:
    section.add "X-Amz-Content-Sha256", valid_773365
  var valid_773366 = header.getOrDefault("X-Amz-Algorithm")
  valid_773366 = validateParameter(valid_773366, JString, required = false,
                                 default = nil)
  if valid_773366 != nil:
    section.add "X-Amz-Algorithm", valid_773366
  var valid_773367 = header.getOrDefault("X-Amz-Signature")
  valid_773367 = validateParameter(valid_773367, JString, required = false,
                                 default = nil)
  if valid_773367 != nil:
    section.add "X-Amz-Signature", valid_773367
  var valid_773368 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773368 = validateParameter(valid_773368, JString, required = false,
                                 default = nil)
  if valid_773368 != nil:
    section.add "X-Amz-SignedHeaders", valid_773368
  var valid_773369 = header.getOrDefault("X-Amz-Credential")
  valid_773369 = validateParameter(valid_773369, JString, required = false,
                                 default = nil)
  if valid_773369 != nil:
    section.add "X-Amz-Credential", valid_773369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773370: Call_GetAuthorizeDBSecurityGroupIngress_773353;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_773370.validator(path, query, header, formData, body)
  let scheme = call_773370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773370.url(scheme.get, call_773370.host, call_773370.base,
                         call_773370.route, valid.getOrDefault("path"))
  result = hook(call_773370, url, valid)

proc call*(call_773371: Call_GetAuthorizeDBSecurityGroupIngress_773353;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_773372 = newJObject()
  add(query_773372, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_773372, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_773372, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_773372, "Action", newJString(Action))
  add(query_773372, "CIDRIP", newJString(CIDRIP))
  add(query_773372, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_773372, "Version", newJString(Version))
  result = call_773371.call(nil, query_773372, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_773353(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_773354, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_773355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_773413 = ref object of OpenApiRestCall_772581
proc url_PostBacktrackDBCluster_773415(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostBacktrackDBCluster_773414(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773416 = query.getOrDefault("Action")
  valid_773416 = validateParameter(valid_773416, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_773416 != nil:
    section.add "Action", valid_773416
  var valid_773417 = query.getOrDefault("Version")
  valid_773417 = validateParameter(valid_773417, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773417 != nil:
    section.add "Version", valid_773417
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773418 = header.getOrDefault("X-Amz-Date")
  valid_773418 = validateParameter(valid_773418, JString, required = false,
                                 default = nil)
  if valid_773418 != nil:
    section.add "X-Amz-Date", valid_773418
  var valid_773419 = header.getOrDefault("X-Amz-Security-Token")
  valid_773419 = validateParameter(valid_773419, JString, required = false,
                                 default = nil)
  if valid_773419 != nil:
    section.add "X-Amz-Security-Token", valid_773419
  var valid_773420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773420 = validateParameter(valid_773420, JString, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "X-Amz-Content-Sha256", valid_773420
  var valid_773421 = header.getOrDefault("X-Amz-Algorithm")
  valid_773421 = validateParameter(valid_773421, JString, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "X-Amz-Algorithm", valid_773421
  var valid_773422 = header.getOrDefault("X-Amz-Signature")
  valid_773422 = validateParameter(valid_773422, JString, required = false,
                                 default = nil)
  if valid_773422 != nil:
    section.add "X-Amz-Signature", valid_773422
  var valid_773423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773423 = validateParameter(valid_773423, JString, required = false,
                                 default = nil)
  if valid_773423 != nil:
    section.add "X-Amz-SignedHeaders", valid_773423
  var valid_773424 = header.getOrDefault("X-Amz-Credential")
  valid_773424 = validateParameter(valid_773424, JString, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "X-Amz-Credential", valid_773424
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_773425 = formData.getOrDefault("Force")
  valid_773425 = validateParameter(valid_773425, JBool, required = false, default = nil)
  if valid_773425 != nil:
    section.add "Force", valid_773425
  var valid_773426 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_773426 = validateParameter(valid_773426, JBool, required = false, default = nil)
  if valid_773426 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_773426
  assert formData != nil,
        "formData argument is necessary due to required `BacktrackTo` field"
  var valid_773427 = formData.getOrDefault("BacktrackTo")
  valid_773427 = validateParameter(valid_773427, JString, required = true,
                                 default = nil)
  if valid_773427 != nil:
    section.add "BacktrackTo", valid_773427
  var valid_773428 = formData.getOrDefault("DBClusterIdentifier")
  valid_773428 = validateParameter(valid_773428, JString, required = true,
                                 default = nil)
  if valid_773428 != nil:
    section.add "DBClusterIdentifier", valid_773428
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773429: Call_PostBacktrackDBCluster_773413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773429.validator(path, query, header, formData, body)
  let scheme = call_773429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773429.url(scheme.get, call_773429.host, call_773429.base,
                         call_773429.route, valid.getOrDefault("path"))
  result = hook(call_773429, url, valid)

proc call*(call_773430: Call_PostBacktrackDBCluster_773413; BacktrackTo: string;
          DBClusterIdentifier: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_773431 = newJObject()
  var formData_773432 = newJObject()
  add(formData_773432, "Force", newJBool(Force))
  add(formData_773432, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(formData_773432, "BacktrackTo", newJString(BacktrackTo))
  add(query_773431, "Action", newJString(Action))
  add(formData_773432, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773431, "Version", newJString(Version))
  result = call_773430.call(nil, query_773431, nil, formData_773432, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_773413(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_773414, base: "/",
    url: url_PostBacktrackDBCluster_773415, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_773394 = ref object of OpenApiRestCall_772581
proc url_GetBacktrackDBCluster_773396(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetBacktrackDBCluster_773395(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `BacktrackTo` field"
  var valid_773397 = query.getOrDefault("BacktrackTo")
  valid_773397 = validateParameter(valid_773397, JString, required = true,
                                 default = nil)
  if valid_773397 != nil:
    section.add "BacktrackTo", valid_773397
  var valid_773398 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_773398 = validateParameter(valid_773398, JBool, required = false, default = nil)
  if valid_773398 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_773398
  var valid_773399 = query.getOrDefault("DBClusterIdentifier")
  valid_773399 = validateParameter(valid_773399, JString, required = true,
                                 default = nil)
  if valid_773399 != nil:
    section.add "DBClusterIdentifier", valid_773399
  var valid_773400 = query.getOrDefault("Action")
  valid_773400 = validateParameter(valid_773400, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_773400 != nil:
    section.add "Action", valid_773400
  var valid_773401 = query.getOrDefault("Version")
  valid_773401 = validateParameter(valid_773401, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773401 != nil:
    section.add "Version", valid_773401
  var valid_773402 = query.getOrDefault("Force")
  valid_773402 = validateParameter(valid_773402, JBool, required = false, default = nil)
  if valid_773402 != nil:
    section.add "Force", valid_773402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773403 = header.getOrDefault("X-Amz-Date")
  valid_773403 = validateParameter(valid_773403, JString, required = false,
                                 default = nil)
  if valid_773403 != nil:
    section.add "X-Amz-Date", valid_773403
  var valid_773404 = header.getOrDefault("X-Amz-Security-Token")
  valid_773404 = validateParameter(valid_773404, JString, required = false,
                                 default = nil)
  if valid_773404 != nil:
    section.add "X-Amz-Security-Token", valid_773404
  var valid_773405 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773405 = validateParameter(valid_773405, JString, required = false,
                                 default = nil)
  if valid_773405 != nil:
    section.add "X-Amz-Content-Sha256", valid_773405
  var valid_773406 = header.getOrDefault("X-Amz-Algorithm")
  valid_773406 = validateParameter(valid_773406, JString, required = false,
                                 default = nil)
  if valid_773406 != nil:
    section.add "X-Amz-Algorithm", valid_773406
  var valid_773407 = header.getOrDefault("X-Amz-Signature")
  valid_773407 = validateParameter(valid_773407, JString, required = false,
                                 default = nil)
  if valid_773407 != nil:
    section.add "X-Amz-Signature", valid_773407
  var valid_773408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773408 = validateParameter(valid_773408, JString, required = false,
                                 default = nil)
  if valid_773408 != nil:
    section.add "X-Amz-SignedHeaders", valid_773408
  var valid_773409 = header.getOrDefault("X-Amz-Credential")
  valid_773409 = validateParameter(valid_773409, JString, required = false,
                                 default = nil)
  if valid_773409 != nil:
    section.add "X-Amz-Credential", valid_773409
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773410: Call_GetBacktrackDBCluster_773394; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773410.validator(path, query, header, formData, body)
  let scheme = call_773410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773410.url(scheme.get, call_773410.host, call_773410.base,
                         call_773410.route, valid.getOrDefault("path"))
  result = hook(call_773410, url, valid)

proc call*(call_773411: Call_GetBacktrackDBCluster_773394; BacktrackTo: string;
          DBClusterIdentifier: string;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31";
          Force: bool = false): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  var query_773412 = newJObject()
  add(query_773412, "BacktrackTo", newJString(BacktrackTo))
  add(query_773412, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_773412, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773412, "Action", newJString(Action))
  add(query_773412, "Version", newJString(Version))
  add(query_773412, "Force", newJBool(Force))
  result = call_773411.call(nil, query_773412, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_773394(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_773395, base: "/",
    url: url_GetBacktrackDBCluster_773396, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_773452 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBClusterParameterGroup_773454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBClusterParameterGroup_773453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773455 = query.getOrDefault("Action")
  valid_773455 = validateParameter(valid_773455, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_773455 != nil:
    section.add "Action", valid_773455
  var valid_773456 = query.getOrDefault("Version")
  valid_773456 = validateParameter(valid_773456, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773456 != nil:
    section.add "Version", valid_773456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773457 = header.getOrDefault("X-Amz-Date")
  valid_773457 = validateParameter(valid_773457, JString, required = false,
                                 default = nil)
  if valid_773457 != nil:
    section.add "X-Amz-Date", valid_773457
  var valid_773458 = header.getOrDefault("X-Amz-Security-Token")
  valid_773458 = validateParameter(valid_773458, JString, required = false,
                                 default = nil)
  if valid_773458 != nil:
    section.add "X-Amz-Security-Token", valid_773458
  var valid_773459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773459 = validateParameter(valid_773459, JString, required = false,
                                 default = nil)
  if valid_773459 != nil:
    section.add "X-Amz-Content-Sha256", valid_773459
  var valid_773460 = header.getOrDefault("X-Amz-Algorithm")
  valid_773460 = validateParameter(valid_773460, JString, required = false,
                                 default = nil)
  if valid_773460 != nil:
    section.add "X-Amz-Algorithm", valid_773460
  var valid_773461 = header.getOrDefault("X-Amz-Signature")
  valid_773461 = validateParameter(valid_773461, JString, required = false,
                                 default = nil)
  if valid_773461 != nil:
    section.add "X-Amz-Signature", valid_773461
  var valid_773462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773462 = validateParameter(valid_773462, JString, required = false,
                                 default = nil)
  if valid_773462 != nil:
    section.add "X-Amz-SignedHeaders", valid_773462
  var valid_773463 = header.getOrDefault("X-Amz-Credential")
  valid_773463 = validateParameter(valid_773463, JString, required = false,
                                 default = nil)
  if valid_773463 != nil:
    section.add "X-Amz-Credential", valid_773463
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_773464 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_773464 = validateParameter(valid_773464, JString, required = true,
                                 default = nil)
  if valid_773464 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_773464
  var valid_773465 = formData.getOrDefault("Tags")
  valid_773465 = validateParameter(valid_773465, JArray, required = false,
                                 default = nil)
  if valid_773465 != nil:
    section.add "Tags", valid_773465
  var valid_773466 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_773466 = validateParameter(valid_773466, JString, required = true,
                                 default = nil)
  if valid_773466 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_773466
  var valid_773467 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_773467 = validateParameter(valid_773467, JString, required = true,
                                 default = nil)
  if valid_773467 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_773467
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773468: Call_PostCopyDBClusterParameterGroup_773452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773468.validator(path, query, header, formData, body)
  let scheme = call_773468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773468.url(scheme.get, call_773468.host, call_773468.base,
                         call_773468.route, valid.getOrDefault("path"))
  result = hook(call_773468, url, valid)

proc call*(call_773469: Call_PostCopyDBClusterParameterGroup_773452;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_773470 = newJObject()
  var formData_773471 = newJObject()
  add(formData_773471, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_773471.add "Tags", Tags
  add(query_773470, "Action", newJString(Action))
  add(formData_773471, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_773471, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_773470, "Version", newJString(Version))
  result = call_773469.call(nil, query_773470, nil, formData_773471, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_773452(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_773453, base: "/",
    url: url_PostCopyDBClusterParameterGroup_773454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_773433 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBClusterParameterGroup_773435(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBClusterParameterGroup_773434(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_773436 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_773436 = validateParameter(valid_773436, JString, required = true,
                                 default = nil)
  if valid_773436 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_773436
  var valid_773437 = query.getOrDefault("Tags")
  valid_773437 = validateParameter(valid_773437, JArray, required = false,
                                 default = nil)
  if valid_773437 != nil:
    section.add "Tags", valid_773437
  var valid_773438 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_773438 = validateParameter(valid_773438, JString, required = true,
                                 default = nil)
  if valid_773438 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_773438
  var valid_773439 = query.getOrDefault("Action")
  valid_773439 = validateParameter(valid_773439, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_773439 != nil:
    section.add "Action", valid_773439
  var valid_773440 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_773440 = validateParameter(valid_773440, JString, required = true,
                                 default = nil)
  if valid_773440 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_773440
  var valid_773441 = query.getOrDefault("Version")
  valid_773441 = validateParameter(valid_773441, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773441 != nil:
    section.add "Version", valid_773441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773442 = header.getOrDefault("X-Amz-Date")
  valid_773442 = validateParameter(valid_773442, JString, required = false,
                                 default = nil)
  if valid_773442 != nil:
    section.add "X-Amz-Date", valid_773442
  var valid_773443 = header.getOrDefault("X-Amz-Security-Token")
  valid_773443 = validateParameter(valid_773443, JString, required = false,
                                 default = nil)
  if valid_773443 != nil:
    section.add "X-Amz-Security-Token", valid_773443
  var valid_773444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773444 = validateParameter(valid_773444, JString, required = false,
                                 default = nil)
  if valid_773444 != nil:
    section.add "X-Amz-Content-Sha256", valid_773444
  var valid_773445 = header.getOrDefault("X-Amz-Algorithm")
  valid_773445 = validateParameter(valid_773445, JString, required = false,
                                 default = nil)
  if valid_773445 != nil:
    section.add "X-Amz-Algorithm", valid_773445
  var valid_773446 = header.getOrDefault("X-Amz-Signature")
  valid_773446 = validateParameter(valid_773446, JString, required = false,
                                 default = nil)
  if valid_773446 != nil:
    section.add "X-Amz-Signature", valid_773446
  var valid_773447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773447 = validateParameter(valid_773447, JString, required = false,
                                 default = nil)
  if valid_773447 != nil:
    section.add "X-Amz-SignedHeaders", valid_773447
  var valid_773448 = header.getOrDefault("X-Amz-Credential")
  valid_773448 = validateParameter(valid_773448, JString, required = false,
                                 default = nil)
  if valid_773448 != nil:
    section.add "X-Amz-Credential", valid_773448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773449: Call_GetCopyDBClusterParameterGroup_773433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773449.validator(path, query, header, formData, body)
  let scheme = call_773449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773449.url(scheme.get, call_773449.host, call_773449.base,
                         call_773449.route, valid.getOrDefault("path"))
  result = hook(call_773449, url, valid)

proc call*(call_773450: Call_GetCopyDBClusterParameterGroup_773433;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_773451 = newJObject()
  add(query_773451, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_773451.add "Tags", Tags
  add(query_773451, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_773451, "Action", newJString(Action))
  add(query_773451, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_773451, "Version", newJString(Version))
  result = call_773450.call(nil, query_773451, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_773433(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_773434, base: "/",
    url: url_GetCopyDBClusterParameterGroup_773435,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_773494 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBClusterSnapshot_773496(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBClusterSnapshot_773495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773497 = query.getOrDefault("Action")
  valid_773497 = validateParameter(valid_773497, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_773497 != nil:
    section.add "Action", valid_773497
  var valid_773498 = query.getOrDefault("Version")
  valid_773498 = validateParameter(valid_773498, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773498 != nil:
    section.add "Version", valid_773498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773499 = header.getOrDefault("X-Amz-Date")
  valid_773499 = validateParameter(valid_773499, JString, required = false,
                                 default = nil)
  if valid_773499 != nil:
    section.add "X-Amz-Date", valid_773499
  var valid_773500 = header.getOrDefault("X-Amz-Security-Token")
  valid_773500 = validateParameter(valid_773500, JString, required = false,
                                 default = nil)
  if valid_773500 != nil:
    section.add "X-Amz-Security-Token", valid_773500
  var valid_773501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773501 = validateParameter(valid_773501, JString, required = false,
                                 default = nil)
  if valid_773501 != nil:
    section.add "X-Amz-Content-Sha256", valid_773501
  var valid_773502 = header.getOrDefault("X-Amz-Algorithm")
  valid_773502 = validateParameter(valid_773502, JString, required = false,
                                 default = nil)
  if valid_773502 != nil:
    section.add "X-Amz-Algorithm", valid_773502
  var valid_773503 = header.getOrDefault("X-Amz-Signature")
  valid_773503 = validateParameter(valid_773503, JString, required = false,
                                 default = nil)
  if valid_773503 != nil:
    section.add "X-Amz-Signature", valid_773503
  var valid_773504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773504 = validateParameter(valid_773504, JString, required = false,
                                 default = nil)
  if valid_773504 != nil:
    section.add "X-Amz-SignedHeaders", valid_773504
  var valid_773505 = header.getOrDefault("X-Amz-Credential")
  valid_773505 = validateParameter(valid_773505, JString, required = false,
                                 default = nil)
  if valid_773505 != nil:
    section.add "X-Amz-Credential", valid_773505
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  section = newJObject()
  var valid_773506 = formData.getOrDefault("PreSignedUrl")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "PreSignedUrl", valid_773506
  var valid_773507 = formData.getOrDefault("Tags")
  valid_773507 = validateParameter(valid_773507, JArray, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "Tags", valid_773507
  var valid_773508 = formData.getOrDefault("SourceRegion")
  valid_773508 = validateParameter(valid_773508, JString, required = false,
                                 default = nil)
  if valid_773508 != nil:
    section.add "SourceRegion", valid_773508
  var valid_773509 = formData.getOrDefault("CopyTags")
  valid_773509 = validateParameter(valid_773509, JBool, required = false, default = nil)
  if valid_773509 != nil:
    section.add "CopyTags", valid_773509
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_773510 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_773510 = validateParameter(valid_773510, JString, required = true,
                                 default = nil)
  if valid_773510 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_773510
  var valid_773511 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_773511 = validateParameter(valid_773511, JString, required = true,
                                 default = nil)
  if valid_773511 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_773511
  var valid_773512 = formData.getOrDefault("KmsKeyId")
  valid_773512 = validateParameter(valid_773512, JString, required = false,
                                 default = nil)
  if valid_773512 != nil:
    section.add "KmsKeyId", valid_773512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773513: Call_PostCopyDBClusterSnapshot_773494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773513.validator(path, query, header, formData, body)
  let scheme = call_773513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773513.url(scheme.get, call_773513.host, call_773513.base,
                         call_773513.route, valid.getOrDefault("path"))
  result = hook(call_773513, url, valid)

proc call*(call_773514: Call_PostCopyDBClusterSnapshot_773494;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   Version: string (required)
  var query_773515 = newJObject()
  var formData_773516 = newJObject()
  add(formData_773516, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_773516.add "Tags", Tags
  add(formData_773516, "SourceRegion", newJString(SourceRegion))
  add(formData_773516, "CopyTags", newJBool(CopyTags))
  add(formData_773516, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_773516, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_773515, "Action", newJString(Action))
  add(formData_773516, "KmsKeyId", newJString(KmsKeyId))
  add(query_773515, "Version", newJString(Version))
  result = call_773514.call(nil, query_773515, nil, formData_773516, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_773494(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_773495, base: "/",
    url: url_PostCopyDBClusterSnapshot_773496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_773472 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBClusterSnapshot_773474(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBClusterSnapshot_773473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_773475 = query.getOrDefault("SourceRegion")
  valid_773475 = validateParameter(valid_773475, JString, required = false,
                                 default = nil)
  if valid_773475 != nil:
    section.add "SourceRegion", valid_773475
  var valid_773476 = query.getOrDefault("PreSignedUrl")
  valid_773476 = validateParameter(valid_773476, JString, required = false,
                                 default = nil)
  if valid_773476 != nil:
    section.add "PreSignedUrl", valid_773476
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_773477 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_773477 = validateParameter(valid_773477, JString, required = true,
                                 default = nil)
  if valid_773477 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_773477
  var valid_773478 = query.getOrDefault("Tags")
  valid_773478 = validateParameter(valid_773478, JArray, required = false,
                                 default = nil)
  if valid_773478 != nil:
    section.add "Tags", valid_773478
  var valid_773479 = query.getOrDefault("Action")
  valid_773479 = validateParameter(valid_773479, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_773479 != nil:
    section.add "Action", valid_773479
  var valid_773480 = query.getOrDefault("KmsKeyId")
  valid_773480 = validateParameter(valid_773480, JString, required = false,
                                 default = nil)
  if valid_773480 != nil:
    section.add "KmsKeyId", valid_773480
  var valid_773481 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_773481 = validateParameter(valid_773481, JString, required = true,
                                 default = nil)
  if valid_773481 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_773481
  var valid_773482 = query.getOrDefault("Version")
  valid_773482 = validateParameter(valid_773482, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773482 != nil:
    section.add "Version", valid_773482
  var valid_773483 = query.getOrDefault("CopyTags")
  valid_773483 = validateParameter(valid_773483, JBool, required = false, default = nil)
  if valid_773483 != nil:
    section.add "CopyTags", valid_773483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773484 = header.getOrDefault("X-Amz-Date")
  valid_773484 = validateParameter(valid_773484, JString, required = false,
                                 default = nil)
  if valid_773484 != nil:
    section.add "X-Amz-Date", valid_773484
  var valid_773485 = header.getOrDefault("X-Amz-Security-Token")
  valid_773485 = validateParameter(valid_773485, JString, required = false,
                                 default = nil)
  if valid_773485 != nil:
    section.add "X-Amz-Security-Token", valid_773485
  var valid_773486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773486 = validateParameter(valid_773486, JString, required = false,
                                 default = nil)
  if valid_773486 != nil:
    section.add "X-Amz-Content-Sha256", valid_773486
  var valid_773487 = header.getOrDefault("X-Amz-Algorithm")
  valid_773487 = validateParameter(valid_773487, JString, required = false,
                                 default = nil)
  if valid_773487 != nil:
    section.add "X-Amz-Algorithm", valid_773487
  var valid_773488 = header.getOrDefault("X-Amz-Signature")
  valid_773488 = validateParameter(valid_773488, JString, required = false,
                                 default = nil)
  if valid_773488 != nil:
    section.add "X-Amz-Signature", valid_773488
  var valid_773489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773489 = validateParameter(valid_773489, JString, required = false,
                                 default = nil)
  if valid_773489 != nil:
    section.add "X-Amz-SignedHeaders", valid_773489
  var valid_773490 = header.getOrDefault("X-Amz-Credential")
  valid_773490 = validateParameter(valid_773490, JString, required = false,
                                 default = nil)
  if valid_773490 != nil:
    section.add "X-Amz-Credential", valid_773490
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773491: Call_GetCopyDBClusterSnapshot_773472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773491.validator(path, query, header, formData, body)
  let scheme = call_773491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773491.url(scheme.get, call_773491.host, call_773491.base,
                         call_773491.route, valid.getOrDefault("path"))
  result = hook(call_773491, url, valid)

proc call*(call_773492: Call_GetCopyDBClusterSnapshot_773472;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  var query_773493 = newJObject()
  add(query_773493, "SourceRegion", newJString(SourceRegion))
  add(query_773493, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_773493, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_773493.add "Tags", Tags
  add(query_773493, "Action", newJString(Action))
  add(query_773493, "KmsKeyId", newJString(KmsKeyId))
  add(query_773493, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_773493, "Version", newJString(Version))
  add(query_773493, "CopyTags", newJBool(CopyTags))
  result = call_773492.call(nil, query_773493, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_773472(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_773473, base: "/",
    url: url_GetCopyDBClusterSnapshot_773474, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_773536 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBParameterGroup_773538(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBParameterGroup_773537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773539 = query.getOrDefault("Action")
  valid_773539 = validateParameter(valid_773539, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_773539 != nil:
    section.add "Action", valid_773539
  var valid_773540 = query.getOrDefault("Version")
  valid_773540 = validateParameter(valid_773540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773540 != nil:
    section.add "Version", valid_773540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773541 = header.getOrDefault("X-Amz-Date")
  valid_773541 = validateParameter(valid_773541, JString, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "X-Amz-Date", valid_773541
  var valid_773542 = header.getOrDefault("X-Amz-Security-Token")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "X-Amz-Security-Token", valid_773542
  var valid_773543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773543 = validateParameter(valid_773543, JString, required = false,
                                 default = nil)
  if valid_773543 != nil:
    section.add "X-Amz-Content-Sha256", valid_773543
  var valid_773544 = header.getOrDefault("X-Amz-Algorithm")
  valid_773544 = validateParameter(valid_773544, JString, required = false,
                                 default = nil)
  if valid_773544 != nil:
    section.add "X-Amz-Algorithm", valid_773544
  var valid_773545 = header.getOrDefault("X-Amz-Signature")
  valid_773545 = validateParameter(valid_773545, JString, required = false,
                                 default = nil)
  if valid_773545 != nil:
    section.add "X-Amz-Signature", valid_773545
  var valid_773546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773546 = validateParameter(valid_773546, JString, required = false,
                                 default = nil)
  if valid_773546 != nil:
    section.add "X-Amz-SignedHeaders", valid_773546
  var valid_773547 = header.getOrDefault("X-Amz-Credential")
  valid_773547 = validateParameter(valid_773547, JString, required = false,
                                 default = nil)
  if valid_773547 != nil:
    section.add "X-Amz-Credential", valid_773547
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_773548 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_773548 = validateParameter(valid_773548, JString, required = true,
                                 default = nil)
  if valid_773548 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_773548
  var valid_773549 = formData.getOrDefault("Tags")
  valid_773549 = validateParameter(valid_773549, JArray, required = false,
                                 default = nil)
  if valid_773549 != nil:
    section.add "Tags", valid_773549
  var valid_773550 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_773550 = validateParameter(valid_773550, JString, required = true,
                                 default = nil)
  if valid_773550 != nil:
    section.add "TargetDBParameterGroupDescription", valid_773550
  var valid_773551 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_773551 = validateParameter(valid_773551, JString, required = true,
                                 default = nil)
  if valid_773551 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_773551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773552: Call_PostCopyDBParameterGroup_773536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_773552.validator(path, query, header, formData, body)
  let scheme = call_773552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773552.url(scheme.get, call_773552.host, call_773552.base,
                         call_773552.route, valid.getOrDefault("path"))
  result = hook(call_773552, url, valid)

proc call*(call_773553: Call_PostCopyDBParameterGroup_773536;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_773554 = newJObject()
  var formData_773555 = newJObject()
  add(formData_773555, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_773555.add "Tags", Tags
  add(query_773554, "Action", newJString(Action))
  add(formData_773555, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_773555, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_773554, "Version", newJString(Version))
  result = call_773553.call(nil, query_773554, nil, formData_773555, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_773536(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_773537, base: "/",
    url: url_PostCopyDBParameterGroup_773538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_773517 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBParameterGroup_773519(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBParameterGroup_773518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_773520 = query.getOrDefault("Tags")
  valid_773520 = validateParameter(valid_773520, JArray, required = false,
                                 default = nil)
  if valid_773520 != nil:
    section.add "Tags", valid_773520
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773521 = query.getOrDefault("Action")
  valid_773521 = validateParameter(valid_773521, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_773521 != nil:
    section.add "Action", valid_773521
  var valid_773522 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_773522 = validateParameter(valid_773522, JString, required = true,
                                 default = nil)
  if valid_773522 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_773522
  var valid_773523 = query.getOrDefault("Version")
  valid_773523 = validateParameter(valid_773523, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773523 != nil:
    section.add "Version", valid_773523
  var valid_773524 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_773524 = validateParameter(valid_773524, JString, required = true,
                                 default = nil)
  if valid_773524 != nil:
    section.add "TargetDBParameterGroupDescription", valid_773524
  var valid_773525 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_773525 = validateParameter(valid_773525, JString, required = true,
                                 default = nil)
  if valid_773525 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_773525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773526 = header.getOrDefault("X-Amz-Date")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "X-Amz-Date", valid_773526
  var valid_773527 = header.getOrDefault("X-Amz-Security-Token")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "X-Amz-Security-Token", valid_773527
  var valid_773528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773528 = validateParameter(valid_773528, JString, required = false,
                                 default = nil)
  if valid_773528 != nil:
    section.add "X-Amz-Content-Sha256", valid_773528
  var valid_773529 = header.getOrDefault("X-Amz-Algorithm")
  valid_773529 = validateParameter(valid_773529, JString, required = false,
                                 default = nil)
  if valid_773529 != nil:
    section.add "X-Amz-Algorithm", valid_773529
  var valid_773530 = header.getOrDefault("X-Amz-Signature")
  valid_773530 = validateParameter(valid_773530, JString, required = false,
                                 default = nil)
  if valid_773530 != nil:
    section.add "X-Amz-Signature", valid_773530
  var valid_773531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773531 = validateParameter(valid_773531, JString, required = false,
                                 default = nil)
  if valid_773531 != nil:
    section.add "X-Amz-SignedHeaders", valid_773531
  var valid_773532 = header.getOrDefault("X-Amz-Credential")
  valid_773532 = validateParameter(valid_773532, JString, required = false,
                                 default = nil)
  if valid_773532 != nil:
    section.add "X-Amz-Credential", valid_773532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773533: Call_GetCopyDBParameterGroup_773517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_773533.validator(path, query, header, formData, body)
  let scheme = call_773533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773533.url(scheme.get, call_773533.host, call_773533.base,
                         call_773533.route, valid.getOrDefault("path"))
  result = hook(call_773533, url, valid)

proc call*(call_773534: Call_GetCopyDBParameterGroup_773517;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_773535 = newJObject()
  if Tags != nil:
    query_773535.add "Tags", Tags
  add(query_773535, "Action", newJString(Action))
  add(query_773535, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_773535, "Version", newJString(Version))
  add(query_773535, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_773535, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_773534.call(nil, query_773535, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_773517(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_773518, base: "/",
    url: url_GetCopyDBParameterGroup_773519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_773579 = ref object of OpenApiRestCall_772581
proc url_PostCopyDBSnapshot_773581(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyDBSnapshot_773580(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773582 = query.getOrDefault("Action")
  valid_773582 = validateParameter(valid_773582, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_773582 != nil:
    section.add "Action", valid_773582
  var valid_773583 = query.getOrDefault("Version")
  valid_773583 = validateParameter(valid_773583, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773583 != nil:
    section.add "Version", valid_773583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773584 = header.getOrDefault("X-Amz-Date")
  valid_773584 = validateParameter(valid_773584, JString, required = false,
                                 default = nil)
  if valid_773584 != nil:
    section.add "X-Amz-Date", valid_773584
  var valid_773585 = header.getOrDefault("X-Amz-Security-Token")
  valid_773585 = validateParameter(valid_773585, JString, required = false,
                                 default = nil)
  if valid_773585 != nil:
    section.add "X-Amz-Security-Token", valid_773585
  var valid_773586 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773586 = validateParameter(valid_773586, JString, required = false,
                                 default = nil)
  if valid_773586 != nil:
    section.add "X-Amz-Content-Sha256", valid_773586
  var valid_773587 = header.getOrDefault("X-Amz-Algorithm")
  valid_773587 = validateParameter(valid_773587, JString, required = false,
                                 default = nil)
  if valid_773587 != nil:
    section.add "X-Amz-Algorithm", valid_773587
  var valid_773588 = header.getOrDefault("X-Amz-Signature")
  valid_773588 = validateParameter(valid_773588, JString, required = false,
                                 default = nil)
  if valid_773588 != nil:
    section.add "X-Amz-Signature", valid_773588
  var valid_773589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773589 = validateParameter(valid_773589, JString, required = false,
                                 default = nil)
  if valid_773589 != nil:
    section.add "X-Amz-SignedHeaders", valid_773589
  var valid_773590 = header.getOrDefault("X-Amz-Credential")
  valid_773590 = validateParameter(valid_773590, JString, required = false,
                                 default = nil)
  if valid_773590 != nil:
    section.add "X-Amz-Credential", valid_773590
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_773591 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_773591 = validateParameter(valid_773591, JString, required = true,
                                 default = nil)
  if valid_773591 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_773591
  var valid_773592 = formData.getOrDefault("PreSignedUrl")
  valid_773592 = validateParameter(valid_773592, JString, required = false,
                                 default = nil)
  if valid_773592 != nil:
    section.add "PreSignedUrl", valid_773592
  var valid_773593 = formData.getOrDefault("OptionGroupName")
  valid_773593 = validateParameter(valid_773593, JString, required = false,
                                 default = nil)
  if valid_773593 != nil:
    section.add "OptionGroupName", valid_773593
  var valid_773594 = formData.getOrDefault("Tags")
  valid_773594 = validateParameter(valid_773594, JArray, required = false,
                                 default = nil)
  if valid_773594 != nil:
    section.add "Tags", valid_773594
  var valid_773595 = formData.getOrDefault("SourceRegion")
  valid_773595 = validateParameter(valid_773595, JString, required = false,
                                 default = nil)
  if valid_773595 != nil:
    section.add "SourceRegion", valid_773595
  var valid_773596 = formData.getOrDefault("CopyTags")
  valid_773596 = validateParameter(valid_773596, JBool, required = false, default = nil)
  if valid_773596 != nil:
    section.add "CopyTags", valid_773596
  var valid_773597 = formData.getOrDefault("KmsKeyId")
  valid_773597 = validateParameter(valid_773597, JString, required = false,
                                 default = nil)
  if valid_773597 != nil:
    section.add "KmsKeyId", valid_773597
  var valid_773598 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_773598 = validateParameter(valid_773598, JString, required = true,
                                 default = nil)
  if valid_773598 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_773598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773599: Call_PostCopyDBSnapshot_773579; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_773599.validator(path, query, header, formData, body)
  let scheme = call_773599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773599.url(scheme.get, call_773599.host, call_773599.base,
                         call_773599.route, valid.getOrDefault("path"))
  result = hook(call_773599, url, valid)

proc call*(call_773600: Call_PostCopyDBSnapshot_773579;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          PreSignedUrl: string = ""; OptionGroupName: string = ""; Tags: JsonNode = nil;
          SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Version: string (required)
  var query_773601 = newJObject()
  var formData_773602 = newJObject()
  add(formData_773602, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_773602, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_773602, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_773602.add "Tags", Tags
  add(formData_773602, "SourceRegion", newJString(SourceRegion))
  add(formData_773602, "CopyTags", newJBool(CopyTags))
  add(query_773601, "Action", newJString(Action))
  add(formData_773602, "KmsKeyId", newJString(KmsKeyId))
  add(formData_773602, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_773601, "Version", newJString(Version))
  result = call_773600.call(nil, query_773601, nil, formData_773602, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_773579(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_773580, base: "/",
    url: url_PostCopyDBSnapshot_773581, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_773556 = ref object of OpenApiRestCall_772581
proc url_GetCopyDBSnapshot_773558(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyDBSnapshot_773557(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: JString (required)
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_773559 = query.getOrDefault("SourceRegion")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "SourceRegion", valid_773559
  var valid_773560 = query.getOrDefault("OptionGroupName")
  valid_773560 = validateParameter(valid_773560, JString, required = false,
                                 default = nil)
  if valid_773560 != nil:
    section.add "OptionGroupName", valid_773560
  var valid_773561 = query.getOrDefault("PreSignedUrl")
  valid_773561 = validateParameter(valid_773561, JString, required = false,
                                 default = nil)
  if valid_773561 != nil:
    section.add "PreSignedUrl", valid_773561
  var valid_773562 = query.getOrDefault("Tags")
  valid_773562 = validateParameter(valid_773562, JArray, required = false,
                                 default = nil)
  if valid_773562 != nil:
    section.add "Tags", valid_773562
  assert query != nil, "query argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_773563 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_773563 = validateParameter(valid_773563, JString, required = true,
                                 default = nil)
  if valid_773563 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_773563
  var valid_773564 = query.getOrDefault("Action")
  valid_773564 = validateParameter(valid_773564, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_773564 != nil:
    section.add "Action", valid_773564
  var valid_773565 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_773565 = validateParameter(valid_773565, JString, required = true,
                                 default = nil)
  if valid_773565 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_773565
  var valid_773566 = query.getOrDefault("KmsKeyId")
  valid_773566 = validateParameter(valid_773566, JString, required = false,
                                 default = nil)
  if valid_773566 != nil:
    section.add "KmsKeyId", valid_773566
  var valid_773567 = query.getOrDefault("Version")
  valid_773567 = validateParameter(valid_773567, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773567 != nil:
    section.add "Version", valid_773567
  var valid_773568 = query.getOrDefault("CopyTags")
  valid_773568 = validateParameter(valid_773568, JBool, required = false, default = nil)
  if valid_773568 != nil:
    section.add "CopyTags", valid_773568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773569 = header.getOrDefault("X-Amz-Date")
  valid_773569 = validateParameter(valid_773569, JString, required = false,
                                 default = nil)
  if valid_773569 != nil:
    section.add "X-Amz-Date", valid_773569
  var valid_773570 = header.getOrDefault("X-Amz-Security-Token")
  valid_773570 = validateParameter(valid_773570, JString, required = false,
                                 default = nil)
  if valid_773570 != nil:
    section.add "X-Amz-Security-Token", valid_773570
  var valid_773571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773571 = validateParameter(valid_773571, JString, required = false,
                                 default = nil)
  if valid_773571 != nil:
    section.add "X-Amz-Content-Sha256", valid_773571
  var valid_773572 = header.getOrDefault("X-Amz-Algorithm")
  valid_773572 = validateParameter(valid_773572, JString, required = false,
                                 default = nil)
  if valid_773572 != nil:
    section.add "X-Amz-Algorithm", valid_773572
  var valid_773573 = header.getOrDefault("X-Amz-Signature")
  valid_773573 = validateParameter(valid_773573, JString, required = false,
                                 default = nil)
  if valid_773573 != nil:
    section.add "X-Amz-Signature", valid_773573
  var valid_773574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773574 = validateParameter(valid_773574, JString, required = false,
                                 default = nil)
  if valid_773574 != nil:
    section.add "X-Amz-SignedHeaders", valid_773574
  var valid_773575 = header.getOrDefault("X-Amz-Credential")
  valid_773575 = validateParameter(valid_773575, JString, required = false,
                                 default = nil)
  if valid_773575 != nil:
    section.add "X-Amz-Credential", valid_773575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773576: Call_GetCopyDBSnapshot_773556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_773576.validator(path, query, header, formData, body)
  let scheme = call_773576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773576.url(scheme.get, call_773576.host, call_773576.base,
                         call_773576.route, valid.getOrDefault("path"))
  result = hook(call_773576, url, valid)

proc call*(call_773577: Call_GetCopyDBSnapshot_773556;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          SourceRegion: string = ""; OptionGroupName: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopyDBSnapshot.html">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: string (required)
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  var query_773578 = newJObject()
  add(query_773578, "SourceRegion", newJString(SourceRegion))
  add(query_773578, "OptionGroupName", newJString(OptionGroupName))
  add(query_773578, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    query_773578.add "Tags", Tags
  add(query_773578, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_773578, "Action", newJString(Action))
  add(query_773578, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_773578, "KmsKeyId", newJString(KmsKeyId))
  add(query_773578, "Version", newJString(Version))
  add(query_773578, "CopyTags", newJBool(CopyTags))
  result = call_773577.call(nil, query_773578, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_773556(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_773557,
    base: "/", url: url_GetCopyDBSnapshot_773558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_773622 = ref object of OpenApiRestCall_772581
proc url_PostCopyOptionGroup_773624(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopyOptionGroup_773623(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773625 = query.getOrDefault("Action")
  valid_773625 = validateParameter(valid_773625, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_773625 != nil:
    section.add "Action", valid_773625
  var valid_773626 = query.getOrDefault("Version")
  valid_773626 = validateParameter(valid_773626, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773626 != nil:
    section.add "Version", valid_773626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773627 = header.getOrDefault("X-Amz-Date")
  valid_773627 = validateParameter(valid_773627, JString, required = false,
                                 default = nil)
  if valid_773627 != nil:
    section.add "X-Amz-Date", valid_773627
  var valid_773628 = header.getOrDefault("X-Amz-Security-Token")
  valid_773628 = validateParameter(valid_773628, JString, required = false,
                                 default = nil)
  if valid_773628 != nil:
    section.add "X-Amz-Security-Token", valid_773628
  var valid_773629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773629 = validateParameter(valid_773629, JString, required = false,
                                 default = nil)
  if valid_773629 != nil:
    section.add "X-Amz-Content-Sha256", valid_773629
  var valid_773630 = header.getOrDefault("X-Amz-Algorithm")
  valid_773630 = validateParameter(valid_773630, JString, required = false,
                                 default = nil)
  if valid_773630 != nil:
    section.add "X-Amz-Algorithm", valid_773630
  var valid_773631 = header.getOrDefault("X-Amz-Signature")
  valid_773631 = validateParameter(valid_773631, JString, required = false,
                                 default = nil)
  if valid_773631 != nil:
    section.add "X-Amz-Signature", valid_773631
  var valid_773632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773632 = validateParameter(valid_773632, JString, required = false,
                                 default = nil)
  if valid_773632 != nil:
    section.add "X-Amz-SignedHeaders", valid_773632
  var valid_773633 = header.getOrDefault("X-Amz-Credential")
  valid_773633 = validateParameter(valid_773633, JString, required = false,
                                 default = nil)
  if valid_773633 != nil:
    section.add "X-Amz-Credential", valid_773633
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_773634 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_773634 = validateParameter(valid_773634, JString, required = true,
                                 default = nil)
  if valid_773634 != nil:
    section.add "TargetOptionGroupDescription", valid_773634
  var valid_773635 = formData.getOrDefault("Tags")
  valid_773635 = validateParameter(valid_773635, JArray, required = false,
                                 default = nil)
  if valid_773635 != nil:
    section.add "Tags", valid_773635
  var valid_773636 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_773636 = validateParameter(valid_773636, JString, required = true,
                                 default = nil)
  if valid_773636 != nil:
    section.add "SourceOptionGroupIdentifier", valid_773636
  var valid_773637 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_773637 = validateParameter(valid_773637, JString, required = true,
                                 default = nil)
  if valid_773637 != nil:
    section.add "TargetOptionGroupIdentifier", valid_773637
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773638: Call_PostCopyOptionGroup_773622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_773638.validator(path, query, header, formData, body)
  let scheme = call_773638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773638.url(scheme.get, call_773638.host, call_773638.base,
                         call_773638.route, valid.getOrDefault("path"))
  result = hook(call_773638, url, valid)

proc call*(call_773639: Call_PostCopyOptionGroup_773622;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  var query_773640 = newJObject()
  var formData_773641 = newJObject()
  add(formData_773641, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  if Tags != nil:
    formData_773641.add "Tags", Tags
  add(formData_773641, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_773640, "Action", newJString(Action))
  add(formData_773641, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_773640, "Version", newJString(Version))
  result = call_773639.call(nil, query_773640, nil, formData_773641, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_773622(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_773623, base: "/",
    url: url_PostCopyOptionGroup_773624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_773603 = ref object of OpenApiRestCall_772581
proc url_GetCopyOptionGroup_773605(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopyOptionGroup_773604(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Version: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceOptionGroupIdentifier` field"
  var valid_773606 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_773606 = validateParameter(valid_773606, JString, required = true,
                                 default = nil)
  if valid_773606 != nil:
    section.add "SourceOptionGroupIdentifier", valid_773606
  var valid_773607 = query.getOrDefault("Tags")
  valid_773607 = validateParameter(valid_773607, JArray, required = false,
                                 default = nil)
  if valid_773607 != nil:
    section.add "Tags", valid_773607
  var valid_773608 = query.getOrDefault("Action")
  valid_773608 = validateParameter(valid_773608, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_773608 != nil:
    section.add "Action", valid_773608
  var valid_773609 = query.getOrDefault("TargetOptionGroupDescription")
  valid_773609 = validateParameter(valid_773609, JString, required = true,
                                 default = nil)
  if valid_773609 != nil:
    section.add "TargetOptionGroupDescription", valid_773609
  var valid_773610 = query.getOrDefault("Version")
  valid_773610 = validateParameter(valid_773610, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773610 != nil:
    section.add "Version", valid_773610
  var valid_773611 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_773611 = validateParameter(valid_773611, JString, required = true,
                                 default = nil)
  if valid_773611 != nil:
    section.add "TargetOptionGroupIdentifier", valid_773611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773612 = header.getOrDefault("X-Amz-Date")
  valid_773612 = validateParameter(valid_773612, JString, required = false,
                                 default = nil)
  if valid_773612 != nil:
    section.add "X-Amz-Date", valid_773612
  var valid_773613 = header.getOrDefault("X-Amz-Security-Token")
  valid_773613 = validateParameter(valid_773613, JString, required = false,
                                 default = nil)
  if valid_773613 != nil:
    section.add "X-Amz-Security-Token", valid_773613
  var valid_773614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773614 = validateParameter(valid_773614, JString, required = false,
                                 default = nil)
  if valid_773614 != nil:
    section.add "X-Amz-Content-Sha256", valid_773614
  var valid_773615 = header.getOrDefault("X-Amz-Algorithm")
  valid_773615 = validateParameter(valid_773615, JString, required = false,
                                 default = nil)
  if valid_773615 != nil:
    section.add "X-Amz-Algorithm", valid_773615
  var valid_773616 = header.getOrDefault("X-Amz-Signature")
  valid_773616 = validateParameter(valid_773616, JString, required = false,
                                 default = nil)
  if valid_773616 != nil:
    section.add "X-Amz-Signature", valid_773616
  var valid_773617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773617 = validateParameter(valid_773617, JString, required = false,
                                 default = nil)
  if valid_773617 != nil:
    section.add "X-Amz-SignedHeaders", valid_773617
  var valid_773618 = header.getOrDefault("X-Amz-Credential")
  valid_773618 = validateParameter(valid_773618, JString, required = false,
                                 default = nil)
  if valid_773618 != nil:
    section.add "X-Amz-Credential", valid_773618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773619: Call_GetCopyOptionGroup_773603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_773619.validator(path, query, header, formData, body)
  let scheme = call_773619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773619.url(scheme.get, call_773619.host, call_773619.base,
                         call_773619.route, valid.getOrDefault("path"))
  result = hook(call_773619, url, valid)

proc call*(call_773620: Call_GetCopyOptionGroup_773603;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Version: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  var query_773621 = newJObject()
  add(query_773621, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  if Tags != nil:
    query_773621.add "Tags", Tags
  add(query_773621, "Action", newJString(Action))
  add(query_773621, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_773621, "Version", newJString(Version))
  add(query_773621, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  result = call_773620.call(nil, query_773621, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_773603(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_773604,
    base: "/", url: url_GetCopyOptionGroup_773605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_773710 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBCluster_773712(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBCluster_773711(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773713 = query.getOrDefault("Action")
  valid_773713 = validateParameter(valid_773713, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_773713 != nil:
    section.add "Action", valid_773713
  var valid_773714 = query.getOrDefault("Version")
  valid_773714 = validateParameter(valid_773714, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773714 != nil:
    section.add "Version", valid_773714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773715 = header.getOrDefault("X-Amz-Date")
  valid_773715 = validateParameter(valid_773715, JString, required = false,
                                 default = nil)
  if valid_773715 != nil:
    section.add "X-Amz-Date", valid_773715
  var valid_773716 = header.getOrDefault("X-Amz-Security-Token")
  valid_773716 = validateParameter(valid_773716, JString, required = false,
                                 default = nil)
  if valid_773716 != nil:
    section.add "X-Amz-Security-Token", valid_773716
  var valid_773717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773717 = validateParameter(valid_773717, JString, required = false,
                                 default = nil)
  if valid_773717 != nil:
    section.add "X-Amz-Content-Sha256", valid_773717
  var valid_773718 = header.getOrDefault("X-Amz-Algorithm")
  valid_773718 = validateParameter(valid_773718, JString, required = false,
                                 default = nil)
  if valid_773718 != nil:
    section.add "X-Amz-Algorithm", valid_773718
  var valid_773719 = header.getOrDefault("X-Amz-Signature")
  valid_773719 = validateParameter(valid_773719, JString, required = false,
                                 default = nil)
  if valid_773719 != nil:
    section.add "X-Amz-Signature", valid_773719
  var valid_773720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773720 = validateParameter(valid_773720, JString, required = false,
                                 default = nil)
  if valid_773720 != nil:
    section.add "X-Amz-SignedHeaders", valid_773720
  var valid_773721 = header.getOrDefault("X-Amz-Credential")
  valid_773721 = validateParameter(valid_773721, JString, required = false,
                                 default = nil)
  if valid_773721 != nil:
    section.add "X-Amz-Credential", valid_773721
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_773722 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_773722 = validateParameter(valid_773722, JString, required = false,
                                 default = nil)
  if valid_773722 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_773722
  var valid_773723 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_773723 = validateParameter(valid_773723, JString, required = false,
                                 default = nil)
  if valid_773723 != nil:
    section.add "GlobalClusterIdentifier", valid_773723
  var valid_773724 = formData.getOrDefault("EnableHttpEndpoint")
  valid_773724 = validateParameter(valid_773724, JBool, required = false, default = nil)
  if valid_773724 != nil:
    section.add "EnableHttpEndpoint", valid_773724
  var valid_773725 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_773725 = validateParameter(valid_773725, JArray, required = false,
                                 default = nil)
  if valid_773725 != nil:
    section.add "VpcSecurityGroupIds", valid_773725
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_773726 = formData.getOrDefault("Engine")
  valid_773726 = validateParameter(valid_773726, JString, required = true,
                                 default = nil)
  if valid_773726 != nil:
    section.add "Engine", valid_773726
  var valid_773727 = formData.getOrDefault("PreSignedUrl")
  valid_773727 = validateParameter(valid_773727, JString, required = false,
                                 default = nil)
  if valid_773727 != nil:
    section.add "PreSignedUrl", valid_773727
  var valid_773728 = formData.getOrDefault("BackupRetentionPeriod")
  valid_773728 = validateParameter(valid_773728, JInt, required = false, default = nil)
  if valid_773728 != nil:
    section.add "BackupRetentionPeriod", valid_773728
  var valid_773729 = formData.getOrDefault("BacktrackWindow")
  valid_773729 = validateParameter(valid_773729, JInt, required = false, default = nil)
  if valid_773729 != nil:
    section.add "BacktrackWindow", valid_773729
  var valid_773730 = formData.getOrDefault("Tags")
  valid_773730 = validateParameter(valid_773730, JArray, required = false,
                                 default = nil)
  if valid_773730 != nil:
    section.add "Tags", valid_773730
  var valid_773731 = formData.getOrDefault("SourceRegion")
  valid_773731 = validateParameter(valid_773731, JString, required = false,
                                 default = nil)
  if valid_773731 != nil:
    section.add "SourceRegion", valid_773731
  var valid_773732 = formData.getOrDefault("DeletionProtection")
  valid_773732 = validateParameter(valid_773732, JBool, required = false, default = nil)
  if valid_773732 != nil:
    section.add "DeletionProtection", valid_773732
  var valid_773733 = formData.getOrDefault("DBSubnetGroupName")
  valid_773733 = validateParameter(valid_773733, JString, required = false,
                                 default = nil)
  if valid_773733 != nil:
    section.add "DBSubnetGroupName", valid_773733
  var valid_773734 = formData.getOrDefault("AvailabilityZones")
  valid_773734 = validateParameter(valid_773734, JArray, required = false,
                                 default = nil)
  if valid_773734 != nil:
    section.add "AvailabilityZones", valid_773734
  var valid_773735 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_773735 = validateParameter(valid_773735, JString, required = false,
                                 default = nil)
  if valid_773735 != nil:
    section.add "DBClusterParameterGroupName", valid_773735
  var valid_773736 = formData.getOrDefault("DatabaseName")
  valid_773736 = validateParameter(valid_773736, JString, required = false,
                                 default = nil)
  if valid_773736 != nil:
    section.add "DatabaseName", valid_773736
  var valid_773737 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_773737 = validateParameter(valid_773737, JArray, required = false,
                                 default = nil)
  if valid_773737 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773737
  var valid_773738 = formData.getOrDefault("CharacterSetName")
  valid_773738 = validateParameter(valid_773738, JString, required = false,
                                 default = nil)
  if valid_773738 != nil:
    section.add "CharacterSetName", valid_773738
  var valid_773739 = formData.getOrDefault("KmsKeyId")
  valid_773739 = validateParameter(valid_773739, JString, required = false,
                                 default = nil)
  if valid_773739 != nil:
    section.add "KmsKeyId", valid_773739
  var valid_773740 = formData.getOrDefault("StorageEncrypted")
  valid_773740 = validateParameter(valid_773740, JBool, required = false, default = nil)
  if valid_773740 != nil:
    section.add "StorageEncrypted", valid_773740
  var valid_773741 = formData.getOrDefault("DBClusterIdentifier")
  valid_773741 = validateParameter(valid_773741, JString, required = true,
                                 default = nil)
  if valid_773741 != nil:
    section.add "DBClusterIdentifier", valid_773741
  var valid_773742 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_773742 = validateParameter(valid_773742, JString, required = false,
                                 default = nil)
  if valid_773742 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_773742
  var valid_773743 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_773743 = validateParameter(valid_773743, JString, required = false,
                                 default = nil)
  if valid_773743 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_773743
  var valid_773744 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_773744 = validateParameter(valid_773744, JBool, required = false, default = nil)
  if valid_773744 != nil:
    section.add "CopyTagsToSnapshot", valid_773744
  var valid_773745 = formData.getOrDefault("Port")
  valid_773745 = validateParameter(valid_773745, JInt, required = false, default = nil)
  if valid_773745 != nil:
    section.add "Port", valid_773745
  var valid_773746 = formData.getOrDefault("EngineMode")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "EngineMode", valid_773746
  var valid_773747 = formData.getOrDefault("OptionGroupName")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "OptionGroupName", valid_773747
  var valid_773748 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_773748 = validateParameter(valid_773748, JString, required = false,
                                 default = nil)
  if valid_773748 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_773748
  var valid_773749 = formData.getOrDefault("MasterUserPassword")
  valid_773749 = validateParameter(valid_773749, JString, required = false,
                                 default = nil)
  if valid_773749 != nil:
    section.add "MasterUserPassword", valid_773749
  var valid_773750 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_773750 = validateParameter(valid_773750, JString, required = false,
                                 default = nil)
  if valid_773750 != nil:
    section.add "ReplicationSourceIdentifier", valid_773750
  var valid_773751 = formData.getOrDefault("MasterUsername")
  valid_773751 = validateParameter(valid_773751, JString, required = false,
                                 default = nil)
  if valid_773751 != nil:
    section.add "MasterUsername", valid_773751
  var valid_773752 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_773752 = validateParameter(valid_773752, JString, required = false,
                                 default = nil)
  if valid_773752 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_773752
  var valid_773753 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773753 = validateParameter(valid_773753, JBool, required = false, default = nil)
  if valid_773753 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773753
  var valid_773754 = formData.getOrDefault("PreferredBackupWindow")
  valid_773754 = validateParameter(valid_773754, JString, required = false,
                                 default = nil)
  if valid_773754 != nil:
    section.add "PreferredBackupWindow", valid_773754
  var valid_773755 = formData.getOrDefault("EngineVersion")
  valid_773755 = validateParameter(valid_773755, JString, required = false,
                                 default = nil)
  if valid_773755 != nil:
    section.add "EngineVersion", valid_773755
  var valid_773756 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773756 = validateParameter(valid_773756, JString, required = false,
                                 default = nil)
  if valid_773756 != nil:
    section.add "PreferredMaintenanceWindow", valid_773756
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773757: Call_PostCreateDBCluster_773710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773757.validator(path, query, header, formData, body)
  let scheme = call_773757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773757.url(scheme.get, call_773757.host, call_773757.base,
                         call_773757.route, valid.getOrDefault("path"))
  result = hook(call_773757, url, valid)

proc call*(call_773758: Call_PostCreateDBCluster_773710; Engine: string;
          DBClusterIdentifier: string;
          ScalingConfigurationMaxCapacity: string = "";
          GlobalClusterIdentifier: string = ""; EnableHttpEndpoint: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; ReplicationSourceIdentifier: string = "";
          Action: string = "CreateDBCluster"; MasterUsername: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Action: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_773759 = newJObject()
  var formData_773760 = newJObject()
  add(formData_773760, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_773760, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_773760, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  if VpcSecurityGroupIds != nil:
    formData_773760.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_773760, "Engine", newJString(Engine))
  add(formData_773760, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_773760, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_773760, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_773760.add "Tags", Tags
  add(formData_773760, "SourceRegion", newJString(SourceRegion))
  add(formData_773760, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_773760, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if AvailabilityZones != nil:
    formData_773760.add "AvailabilityZones", AvailabilityZones
  add(formData_773760, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_773760, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_773760.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_773760, "CharacterSetName", newJString(CharacterSetName))
  add(formData_773760, "KmsKeyId", newJString(KmsKeyId))
  add(formData_773760, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_773760, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_773760, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_773760, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_773760, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_773760, "Port", newJInt(Port))
  add(formData_773760, "EngineMode", newJString(EngineMode))
  add(formData_773760, "OptionGroupName", newJString(OptionGroupName))
  add(formData_773760, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_773760, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_773760, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_773759, "Action", newJString(Action))
  add(formData_773760, "MasterUsername", newJString(MasterUsername))
  add(formData_773760, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_773760, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_773760, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_773760, "EngineVersion", newJString(EngineVersion))
  add(query_773759, "Version", newJString(Version))
  add(formData_773760, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773758.call(nil, query_773759, nil, formData_773760, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_773710(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_773711, base: "/",
    url: url_PostCreateDBCluster_773712, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_773642 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBCluster_773644(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBCluster_773643(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_773663 = query.getOrDefault("Engine")
  valid_773663 = validateParameter(valid_773663, JString, required = true,
                                 default = nil)
  if valid_773663 != nil:
    section.add "Engine", valid_773663
  var valid_773664 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_773664 = validateParameter(valid_773664, JString, required = false,
                                 default = nil)
  if valid_773664 != nil:
    section.add "ReplicationSourceIdentifier", valid_773664
  var valid_773665 = query.getOrDefault("DBClusterParameterGroupName")
  valid_773665 = validateParameter(valid_773665, JString, required = false,
                                 default = nil)
  if valid_773665 != nil:
    section.add "DBClusterParameterGroupName", valid_773665
  var valid_773666 = query.getOrDefault("StorageEncrypted")
  valid_773666 = validateParameter(valid_773666, JBool, required = false, default = nil)
  if valid_773666 != nil:
    section.add "StorageEncrypted", valid_773666
  var valid_773667 = query.getOrDefault("AvailabilityZones")
  valid_773667 = validateParameter(valid_773667, JArray, required = false,
                                 default = nil)
  if valid_773667 != nil:
    section.add "AvailabilityZones", valid_773667
  var valid_773668 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773668 = validateParameter(valid_773668, JBool, required = false, default = nil)
  if valid_773668 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773668
  var valid_773669 = query.getOrDefault("DBClusterIdentifier")
  valid_773669 = validateParameter(valid_773669, JString, required = true,
                                 default = nil)
  if valid_773669 != nil:
    section.add "DBClusterIdentifier", valid_773669
  var valid_773670 = query.getOrDefault("MasterUserPassword")
  valid_773670 = validateParameter(valid_773670, JString, required = false,
                                 default = nil)
  if valid_773670 != nil:
    section.add "MasterUserPassword", valid_773670
  var valid_773671 = query.getOrDefault("BackupRetentionPeriod")
  valid_773671 = validateParameter(valid_773671, JInt, required = false, default = nil)
  if valid_773671 != nil:
    section.add "BackupRetentionPeriod", valid_773671
  var valid_773672 = query.getOrDefault("CopyTagsToSnapshot")
  valid_773672 = validateParameter(valid_773672, JBool, required = false, default = nil)
  if valid_773672 != nil:
    section.add "CopyTagsToSnapshot", valid_773672
  var valid_773673 = query.getOrDefault("DeletionProtection")
  valid_773673 = validateParameter(valid_773673, JBool, required = false, default = nil)
  if valid_773673 != nil:
    section.add "DeletionProtection", valid_773673
  var valid_773674 = query.getOrDefault("EnableHttpEndpoint")
  valid_773674 = validateParameter(valid_773674, JBool, required = false, default = nil)
  if valid_773674 != nil:
    section.add "EnableHttpEndpoint", valid_773674
  var valid_773675 = query.getOrDefault("DBSubnetGroupName")
  valid_773675 = validateParameter(valid_773675, JString, required = false,
                                 default = nil)
  if valid_773675 != nil:
    section.add "DBSubnetGroupName", valid_773675
  var valid_773676 = query.getOrDefault("KmsKeyId")
  valid_773676 = validateParameter(valid_773676, JString, required = false,
                                 default = nil)
  if valid_773676 != nil:
    section.add "KmsKeyId", valid_773676
  var valid_773677 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_773677 = validateParameter(valid_773677, JString, required = false,
                                 default = nil)
  if valid_773677 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_773677
  var valid_773678 = query.getOrDefault("EngineVersion")
  valid_773678 = validateParameter(valid_773678, JString, required = false,
                                 default = nil)
  if valid_773678 != nil:
    section.add "EngineVersion", valid_773678
  var valid_773679 = query.getOrDefault("PreferredBackupWindow")
  valid_773679 = validateParameter(valid_773679, JString, required = false,
                                 default = nil)
  if valid_773679 != nil:
    section.add "PreferredBackupWindow", valid_773679
  var valid_773680 = query.getOrDefault("MasterUsername")
  valid_773680 = validateParameter(valid_773680, JString, required = false,
                                 default = nil)
  if valid_773680 != nil:
    section.add "MasterUsername", valid_773680
  var valid_773681 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_773681 = validateParameter(valid_773681, JString, required = false,
                                 default = nil)
  if valid_773681 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_773681
  var valid_773682 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773682 = validateParameter(valid_773682, JString, required = false,
                                 default = nil)
  if valid_773682 != nil:
    section.add "PreferredMaintenanceWindow", valid_773682
  var valid_773683 = query.getOrDefault("SourceRegion")
  valid_773683 = validateParameter(valid_773683, JString, required = false,
                                 default = nil)
  if valid_773683 != nil:
    section.add "SourceRegion", valid_773683
  var valid_773684 = query.getOrDefault("DatabaseName")
  valid_773684 = validateParameter(valid_773684, JString, required = false,
                                 default = nil)
  if valid_773684 != nil:
    section.add "DatabaseName", valid_773684
  var valid_773685 = query.getOrDefault("OptionGroupName")
  valid_773685 = validateParameter(valid_773685, JString, required = false,
                                 default = nil)
  if valid_773685 != nil:
    section.add "OptionGroupName", valid_773685
  var valid_773686 = query.getOrDefault("EngineMode")
  valid_773686 = validateParameter(valid_773686, JString, required = false,
                                 default = nil)
  if valid_773686 != nil:
    section.add "EngineMode", valid_773686
  var valid_773687 = query.getOrDefault("PreSignedUrl")
  valid_773687 = validateParameter(valid_773687, JString, required = false,
                                 default = nil)
  if valid_773687 != nil:
    section.add "PreSignedUrl", valid_773687
  var valid_773688 = query.getOrDefault("VpcSecurityGroupIds")
  valid_773688 = validateParameter(valid_773688, JArray, required = false,
                                 default = nil)
  if valid_773688 != nil:
    section.add "VpcSecurityGroupIds", valid_773688
  var valid_773689 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_773689 = validateParameter(valid_773689, JArray, required = false,
                                 default = nil)
  if valid_773689 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773689
  var valid_773690 = query.getOrDefault("Tags")
  valid_773690 = validateParameter(valid_773690, JArray, required = false,
                                 default = nil)
  if valid_773690 != nil:
    section.add "Tags", valid_773690
  var valid_773691 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_773691 = validateParameter(valid_773691, JString, required = false,
                                 default = nil)
  if valid_773691 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_773691
  var valid_773692 = query.getOrDefault("Action")
  valid_773692 = validateParameter(valid_773692, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_773692 != nil:
    section.add "Action", valid_773692
  var valid_773693 = query.getOrDefault("CharacterSetName")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "CharacterSetName", valid_773693
  var valid_773694 = query.getOrDefault("BacktrackWindow")
  valid_773694 = validateParameter(valid_773694, JInt, required = false, default = nil)
  if valid_773694 != nil:
    section.add "BacktrackWindow", valid_773694
  var valid_773695 = query.getOrDefault("GlobalClusterIdentifier")
  valid_773695 = validateParameter(valid_773695, JString, required = false,
                                 default = nil)
  if valid_773695 != nil:
    section.add "GlobalClusterIdentifier", valid_773695
  var valid_773696 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_773696 = validateParameter(valid_773696, JString, required = false,
                                 default = nil)
  if valid_773696 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_773696
  var valid_773697 = query.getOrDefault("Port")
  valid_773697 = validateParameter(valid_773697, JInt, required = false, default = nil)
  if valid_773697 != nil:
    section.add "Port", valid_773697
  var valid_773698 = query.getOrDefault("Version")
  valid_773698 = validateParameter(valid_773698, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773698 != nil:
    section.add "Version", valid_773698
  var valid_773699 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_773699 = validateParameter(valid_773699, JString, required = false,
                                 default = nil)
  if valid_773699 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_773699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773700 = header.getOrDefault("X-Amz-Date")
  valid_773700 = validateParameter(valid_773700, JString, required = false,
                                 default = nil)
  if valid_773700 != nil:
    section.add "X-Amz-Date", valid_773700
  var valid_773701 = header.getOrDefault("X-Amz-Security-Token")
  valid_773701 = validateParameter(valid_773701, JString, required = false,
                                 default = nil)
  if valid_773701 != nil:
    section.add "X-Amz-Security-Token", valid_773701
  var valid_773702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773702 = validateParameter(valid_773702, JString, required = false,
                                 default = nil)
  if valid_773702 != nil:
    section.add "X-Amz-Content-Sha256", valid_773702
  var valid_773703 = header.getOrDefault("X-Amz-Algorithm")
  valid_773703 = validateParameter(valid_773703, JString, required = false,
                                 default = nil)
  if valid_773703 != nil:
    section.add "X-Amz-Algorithm", valid_773703
  var valid_773704 = header.getOrDefault("X-Amz-Signature")
  valid_773704 = validateParameter(valid_773704, JString, required = false,
                                 default = nil)
  if valid_773704 != nil:
    section.add "X-Amz-Signature", valid_773704
  var valid_773705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773705 = validateParameter(valid_773705, JString, required = false,
                                 default = nil)
  if valid_773705 != nil:
    section.add "X-Amz-SignedHeaders", valid_773705
  var valid_773706 = header.getOrDefault("X-Amz-Credential")
  valid_773706 = validateParameter(valid_773706, JString, required = false,
                                 default = nil)
  if valid_773706 != nil:
    section.add "X-Amz-Credential", valid_773706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773707: Call_GetCreateDBCluster_773642; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773707.validator(path, query, header, formData, body)
  let scheme = call_773707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773707.url(scheme.get, call_773707.host, call_773707.base,
                         call_773707.route, valid.getOrDefault("path"))
  result = hook(call_773707, url, valid)

proc call*(call_773708: Call_GetCreateDBCluster_773642; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          MasterUserPassword: string = ""; BackupRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          EnableHttpEndpoint: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; ScalingConfigurationMaxCapacity: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = ""; SourceRegion: string = "";
          DatabaseName: string = ""; OptionGroupName: string = "";
          EngineMode: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          Action: string = "CreateDBCluster"; CharacterSetName: string = "";
          BacktrackWindow: int = 0; GlobalClusterIdentifier: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = ""; Port: int = 0;
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_773709 = newJObject()
  add(query_773709, "Engine", newJString(Engine))
  add(query_773709, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_773709, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773709, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_773709.add "AvailabilityZones", AvailabilityZones
  add(query_773709, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_773709, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773709, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_773709, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_773709, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_773709, "DeletionProtection", newJBool(DeletionProtection))
  add(query_773709, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_773709, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_773709, "KmsKeyId", newJString(KmsKeyId))
  add(query_773709, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_773709, "EngineVersion", newJString(EngineVersion))
  add(query_773709, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_773709, "MasterUsername", newJString(MasterUsername))
  add(query_773709, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_773709, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_773709, "SourceRegion", newJString(SourceRegion))
  add(query_773709, "DatabaseName", newJString(DatabaseName))
  add(query_773709, "OptionGroupName", newJString(OptionGroupName))
  add(query_773709, "EngineMode", newJString(EngineMode))
  add(query_773709, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_773709.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_773709.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_773709.add "Tags", Tags
  add(query_773709, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_773709, "Action", newJString(Action))
  add(query_773709, "CharacterSetName", newJString(CharacterSetName))
  add(query_773709, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_773709, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_773709, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_773709, "Port", newJInt(Port))
  add(query_773709, "Version", newJString(Version))
  add(query_773709, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_773708.call(nil, query_773709, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_773642(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_773643,
    base: "/", url: url_GetCreateDBCluster_773644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_773781 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBClusterEndpoint_773783(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBClusterEndpoint_773782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773784 = query.getOrDefault("Action")
  valid_773784 = validateParameter(valid_773784, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_773784 != nil:
    section.add "Action", valid_773784
  var valid_773785 = query.getOrDefault("Version")
  valid_773785 = validateParameter(valid_773785, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773785 != nil:
    section.add "Version", valid_773785
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773786 = header.getOrDefault("X-Amz-Date")
  valid_773786 = validateParameter(valid_773786, JString, required = false,
                                 default = nil)
  if valid_773786 != nil:
    section.add "X-Amz-Date", valid_773786
  var valid_773787 = header.getOrDefault("X-Amz-Security-Token")
  valid_773787 = validateParameter(valid_773787, JString, required = false,
                                 default = nil)
  if valid_773787 != nil:
    section.add "X-Amz-Security-Token", valid_773787
  var valid_773788 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773788 = validateParameter(valid_773788, JString, required = false,
                                 default = nil)
  if valid_773788 != nil:
    section.add "X-Amz-Content-Sha256", valid_773788
  var valid_773789 = header.getOrDefault("X-Amz-Algorithm")
  valid_773789 = validateParameter(valid_773789, JString, required = false,
                                 default = nil)
  if valid_773789 != nil:
    section.add "X-Amz-Algorithm", valid_773789
  var valid_773790 = header.getOrDefault("X-Amz-Signature")
  valid_773790 = validateParameter(valid_773790, JString, required = false,
                                 default = nil)
  if valid_773790 != nil:
    section.add "X-Amz-Signature", valid_773790
  var valid_773791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773791 = validateParameter(valid_773791, JString, required = false,
                                 default = nil)
  if valid_773791 != nil:
    section.add "X-Amz-SignedHeaders", valid_773791
  var valid_773792 = header.getOrDefault("X-Amz-Credential")
  valid_773792 = validateParameter(valid_773792, JString, required = false,
                                 default = nil)
  if valid_773792 != nil:
    section.add "X-Amz-Credential", valid_773792
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_773793 = formData.getOrDefault("ExcludedMembers")
  valid_773793 = validateParameter(valid_773793, JArray, required = false,
                                 default = nil)
  if valid_773793 != nil:
    section.add "ExcludedMembers", valid_773793
  assert formData != nil,
        "formData argument is necessary due to required `EndpointType` field"
  var valid_773794 = formData.getOrDefault("EndpointType")
  valid_773794 = validateParameter(valid_773794, JString, required = true,
                                 default = nil)
  if valid_773794 != nil:
    section.add "EndpointType", valid_773794
  var valid_773795 = formData.getOrDefault("DBClusterIdentifier")
  valid_773795 = validateParameter(valid_773795, JString, required = true,
                                 default = nil)
  if valid_773795 != nil:
    section.add "DBClusterIdentifier", valid_773795
  var valid_773796 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_773796 = validateParameter(valid_773796, JString, required = true,
                                 default = nil)
  if valid_773796 != nil:
    section.add "DBClusterEndpointIdentifier", valid_773796
  var valid_773797 = formData.getOrDefault("StaticMembers")
  valid_773797 = validateParameter(valid_773797, JArray, required = false,
                                 default = nil)
  if valid_773797 != nil:
    section.add "StaticMembers", valid_773797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773798: Call_PostCreateDBClusterEndpoint_773781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773798.validator(path, query, header, formData, body)
  let scheme = call_773798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773798.url(scheme.get, call_773798.host, call_773798.base,
                         call_773798.route, valid.getOrDefault("path"))
  result = hook(call_773798, url, valid)

proc call*(call_773799: Call_PostCreateDBClusterEndpoint_773781;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint"; StaticMembers: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_773800 = newJObject()
  var formData_773801 = newJObject()
  if ExcludedMembers != nil:
    formData_773801.add "ExcludedMembers", ExcludedMembers
  add(formData_773801, "EndpointType", newJString(EndpointType))
  add(query_773800, "Action", newJString(Action))
  add(formData_773801, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_773801, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_773801.add "StaticMembers", StaticMembers
  add(query_773800, "Version", newJString(Version))
  result = call_773799.call(nil, query_773800, nil, formData_773801, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_773781(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_773782, base: "/",
    url: url_PostCreateDBClusterEndpoint_773783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_773761 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBClusterEndpoint_773763(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBClusterEndpoint_773762(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EndpointType` field"
  var valid_773764 = query.getOrDefault("EndpointType")
  valid_773764 = validateParameter(valid_773764, JString, required = true,
                                 default = nil)
  if valid_773764 != nil:
    section.add "EndpointType", valid_773764
  var valid_773765 = query.getOrDefault("DBClusterIdentifier")
  valid_773765 = validateParameter(valid_773765, JString, required = true,
                                 default = nil)
  if valid_773765 != nil:
    section.add "DBClusterIdentifier", valid_773765
  var valid_773766 = query.getOrDefault("StaticMembers")
  valid_773766 = validateParameter(valid_773766, JArray, required = false,
                                 default = nil)
  if valid_773766 != nil:
    section.add "StaticMembers", valid_773766
  var valid_773767 = query.getOrDefault("Action")
  valid_773767 = validateParameter(valid_773767, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_773767 != nil:
    section.add "Action", valid_773767
  var valid_773768 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_773768 = validateParameter(valid_773768, JString, required = true,
                                 default = nil)
  if valid_773768 != nil:
    section.add "DBClusterEndpointIdentifier", valid_773768
  var valid_773769 = query.getOrDefault("ExcludedMembers")
  valid_773769 = validateParameter(valid_773769, JArray, required = false,
                                 default = nil)
  if valid_773769 != nil:
    section.add "ExcludedMembers", valid_773769
  var valid_773770 = query.getOrDefault("Version")
  valid_773770 = validateParameter(valid_773770, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773770 != nil:
    section.add "Version", valid_773770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773771 = header.getOrDefault("X-Amz-Date")
  valid_773771 = validateParameter(valid_773771, JString, required = false,
                                 default = nil)
  if valid_773771 != nil:
    section.add "X-Amz-Date", valid_773771
  var valid_773772 = header.getOrDefault("X-Amz-Security-Token")
  valid_773772 = validateParameter(valid_773772, JString, required = false,
                                 default = nil)
  if valid_773772 != nil:
    section.add "X-Amz-Security-Token", valid_773772
  var valid_773773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773773 = validateParameter(valid_773773, JString, required = false,
                                 default = nil)
  if valid_773773 != nil:
    section.add "X-Amz-Content-Sha256", valid_773773
  var valid_773774 = header.getOrDefault("X-Amz-Algorithm")
  valid_773774 = validateParameter(valid_773774, JString, required = false,
                                 default = nil)
  if valid_773774 != nil:
    section.add "X-Amz-Algorithm", valid_773774
  var valid_773775 = header.getOrDefault("X-Amz-Signature")
  valid_773775 = validateParameter(valid_773775, JString, required = false,
                                 default = nil)
  if valid_773775 != nil:
    section.add "X-Amz-Signature", valid_773775
  var valid_773776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773776 = validateParameter(valid_773776, JString, required = false,
                                 default = nil)
  if valid_773776 != nil:
    section.add "X-Amz-SignedHeaders", valid_773776
  var valid_773777 = header.getOrDefault("X-Amz-Credential")
  valid_773777 = validateParameter(valid_773777, JString, required = false,
                                 default = nil)
  if valid_773777 != nil:
    section.add "X-Amz-Credential", valid_773777
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773778: Call_GetCreateDBClusterEndpoint_773761; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773778.validator(path, query, header, formData, body)
  let scheme = call_773778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773778.url(scheme.get, call_773778.host, call_773778.base,
                         call_773778.route, valid.getOrDefault("path"))
  result = hook(call_773778, url, valid)

proc call*(call_773779: Call_GetCreateDBClusterEndpoint_773761;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_773780 = newJObject()
  add(query_773780, "EndpointType", newJString(EndpointType))
  add(query_773780, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if StaticMembers != nil:
    query_773780.add "StaticMembers", StaticMembers
  add(query_773780, "Action", newJString(Action))
  add(query_773780, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_773780.add "ExcludedMembers", ExcludedMembers
  add(query_773780, "Version", newJString(Version))
  result = call_773779.call(nil, query_773780, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_773761(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_773762, base: "/",
    url: url_GetCreateDBClusterEndpoint_773763,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_773821 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBClusterParameterGroup_773823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBClusterParameterGroup_773822(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773824 = query.getOrDefault("Action")
  valid_773824 = validateParameter(valid_773824, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_773824 != nil:
    section.add "Action", valid_773824
  var valid_773825 = query.getOrDefault("Version")
  valid_773825 = validateParameter(valid_773825, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773825 != nil:
    section.add "Version", valid_773825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773826 = header.getOrDefault("X-Amz-Date")
  valid_773826 = validateParameter(valid_773826, JString, required = false,
                                 default = nil)
  if valid_773826 != nil:
    section.add "X-Amz-Date", valid_773826
  var valid_773827 = header.getOrDefault("X-Amz-Security-Token")
  valid_773827 = validateParameter(valid_773827, JString, required = false,
                                 default = nil)
  if valid_773827 != nil:
    section.add "X-Amz-Security-Token", valid_773827
  var valid_773828 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773828 = validateParameter(valid_773828, JString, required = false,
                                 default = nil)
  if valid_773828 != nil:
    section.add "X-Amz-Content-Sha256", valid_773828
  var valid_773829 = header.getOrDefault("X-Amz-Algorithm")
  valid_773829 = validateParameter(valid_773829, JString, required = false,
                                 default = nil)
  if valid_773829 != nil:
    section.add "X-Amz-Algorithm", valid_773829
  var valid_773830 = header.getOrDefault("X-Amz-Signature")
  valid_773830 = validateParameter(valid_773830, JString, required = false,
                                 default = nil)
  if valid_773830 != nil:
    section.add "X-Amz-Signature", valid_773830
  var valid_773831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773831 = validateParameter(valid_773831, JString, required = false,
                                 default = nil)
  if valid_773831 != nil:
    section.add "X-Amz-SignedHeaders", valid_773831
  var valid_773832 = header.getOrDefault("X-Amz-Credential")
  valid_773832 = validateParameter(valid_773832, JString, required = false,
                                 default = nil)
  if valid_773832 != nil:
    section.add "X-Amz-Credential", valid_773832
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_773833 = formData.getOrDefault("Tags")
  valid_773833 = validateParameter(valid_773833, JArray, required = false,
                                 default = nil)
  if valid_773833 != nil:
    section.add "Tags", valid_773833
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773834 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_773834 = validateParameter(valid_773834, JString, required = true,
                                 default = nil)
  if valid_773834 != nil:
    section.add "DBClusterParameterGroupName", valid_773834
  var valid_773835 = formData.getOrDefault("DBParameterGroupFamily")
  valid_773835 = validateParameter(valid_773835, JString, required = true,
                                 default = nil)
  if valid_773835 != nil:
    section.add "DBParameterGroupFamily", valid_773835
  var valid_773836 = formData.getOrDefault("Description")
  valid_773836 = validateParameter(valid_773836, JString, required = true,
                                 default = nil)
  if valid_773836 != nil:
    section.add "Description", valid_773836
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773837: Call_PostCreateDBClusterParameterGroup_773821;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773837.validator(path, query, header, formData, body)
  let scheme = call_773837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773837.url(scheme.get, call_773837.host, call_773837.base,
                         call_773837.route, valid.getOrDefault("path"))
  result = hook(call_773837, url, valid)

proc call*(call_773838: Call_PostCreateDBClusterParameterGroup_773821;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_773839 = newJObject()
  var formData_773840 = newJObject()
  if Tags != nil:
    formData_773840.add "Tags", Tags
  add(query_773839, "Action", newJString(Action))
  add(formData_773840, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_773840, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_773839, "Version", newJString(Version))
  add(formData_773840, "Description", newJString(Description))
  result = call_773838.call(nil, query_773839, nil, formData_773840, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_773821(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_773822, base: "/",
    url: url_PostCreateDBClusterParameterGroup_773823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_773802 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBClusterParameterGroup_773804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBClusterParameterGroup_773803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_773805 = query.getOrDefault("DBClusterParameterGroupName")
  valid_773805 = validateParameter(valid_773805, JString, required = true,
                                 default = nil)
  if valid_773805 != nil:
    section.add "DBClusterParameterGroupName", valid_773805
  var valid_773806 = query.getOrDefault("Description")
  valid_773806 = validateParameter(valid_773806, JString, required = true,
                                 default = nil)
  if valid_773806 != nil:
    section.add "Description", valid_773806
  var valid_773807 = query.getOrDefault("DBParameterGroupFamily")
  valid_773807 = validateParameter(valid_773807, JString, required = true,
                                 default = nil)
  if valid_773807 != nil:
    section.add "DBParameterGroupFamily", valid_773807
  var valid_773808 = query.getOrDefault("Tags")
  valid_773808 = validateParameter(valid_773808, JArray, required = false,
                                 default = nil)
  if valid_773808 != nil:
    section.add "Tags", valid_773808
  var valid_773809 = query.getOrDefault("Action")
  valid_773809 = validateParameter(valid_773809, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_773809 != nil:
    section.add "Action", valid_773809
  var valid_773810 = query.getOrDefault("Version")
  valid_773810 = validateParameter(valid_773810, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773810 != nil:
    section.add "Version", valid_773810
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773811 = header.getOrDefault("X-Amz-Date")
  valid_773811 = validateParameter(valid_773811, JString, required = false,
                                 default = nil)
  if valid_773811 != nil:
    section.add "X-Amz-Date", valid_773811
  var valid_773812 = header.getOrDefault("X-Amz-Security-Token")
  valid_773812 = validateParameter(valid_773812, JString, required = false,
                                 default = nil)
  if valid_773812 != nil:
    section.add "X-Amz-Security-Token", valid_773812
  var valid_773813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Content-Sha256", valid_773813
  var valid_773814 = header.getOrDefault("X-Amz-Algorithm")
  valid_773814 = validateParameter(valid_773814, JString, required = false,
                                 default = nil)
  if valid_773814 != nil:
    section.add "X-Amz-Algorithm", valid_773814
  var valid_773815 = header.getOrDefault("X-Amz-Signature")
  valid_773815 = validateParameter(valid_773815, JString, required = false,
                                 default = nil)
  if valid_773815 != nil:
    section.add "X-Amz-Signature", valid_773815
  var valid_773816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773816 = validateParameter(valid_773816, JString, required = false,
                                 default = nil)
  if valid_773816 != nil:
    section.add "X-Amz-SignedHeaders", valid_773816
  var valid_773817 = header.getOrDefault("X-Amz-Credential")
  valid_773817 = validateParameter(valid_773817, JString, required = false,
                                 default = nil)
  if valid_773817 != nil:
    section.add "X-Amz-Credential", valid_773817
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773818: Call_GetCreateDBClusterParameterGroup_773802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773818.validator(path, query, header, formData, body)
  let scheme = call_773818.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773818.url(scheme.get, call_773818.host, call_773818.base,
                         call_773818.route, valid.getOrDefault("path"))
  result = hook(call_773818, url, valid)

proc call*(call_773819: Call_GetCreateDBClusterParameterGroup_773802;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773820 = newJObject()
  add(query_773820, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_773820, "Description", newJString(Description))
  add(query_773820, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_773820.add "Tags", Tags
  add(query_773820, "Action", newJString(Action))
  add(query_773820, "Version", newJString(Version))
  result = call_773819.call(nil, query_773820, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_773802(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_773803, base: "/",
    url: url_GetCreateDBClusterParameterGroup_773804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_773859 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBClusterSnapshot_773861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBClusterSnapshot_773860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773862 = query.getOrDefault("Action")
  valid_773862 = validateParameter(valid_773862, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_773862 != nil:
    section.add "Action", valid_773862
  var valid_773863 = query.getOrDefault("Version")
  valid_773863 = validateParameter(valid_773863, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773863 != nil:
    section.add "Version", valid_773863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773864 = header.getOrDefault("X-Amz-Date")
  valid_773864 = validateParameter(valid_773864, JString, required = false,
                                 default = nil)
  if valid_773864 != nil:
    section.add "X-Amz-Date", valid_773864
  var valid_773865 = header.getOrDefault("X-Amz-Security-Token")
  valid_773865 = validateParameter(valid_773865, JString, required = false,
                                 default = nil)
  if valid_773865 != nil:
    section.add "X-Amz-Security-Token", valid_773865
  var valid_773866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773866 = validateParameter(valid_773866, JString, required = false,
                                 default = nil)
  if valid_773866 != nil:
    section.add "X-Amz-Content-Sha256", valid_773866
  var valid_773867 = header.getOrDefault("X-Amz-Algorithm")
  valid_773867 = validateParameter(valid_773867, JString, required = false,
                                 default = nil)
  if valid_773867 != nil:
    section.add "X-Amz-Algorithm", valid_773867
  var valid_773868 = header.getOrDefault("X-Amz-Signature")
  valid_773868 = validateParameter(valid_773868, JString, required = false,
                                 default = nil)
  if valid_773868 != nil:
    section.add "X-Amz-Signature", valid_773868
  var valid_773869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773869 = validateParameter(valid_773869, JString, required = false,
                                 default = nil)
  if valid_773869 != nil:
    section.add "X-Amz-SignedHeaders", valid_773869
  var valid_773870 = header.getOrDefault("X-Amz-Credential")
  valid_773870 = validateParameter(valid_773870, JString, required = false,
                                 default = nil)
  if valid_773870 != nil:
    section.add "X-Amz-Credential", valid_773870
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_773871 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773871 = validateParameter(valid_773871, JString, required = true,
                                 default = nil)
  if valid_773871 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773871
  var valid_773872 = formData.getOrDefault("Tags")
  valid_773872 = validateParameter(valid_773872, JArray, required = false,
                                 default = nil)
  if valid_773872 != nil:
    section.add "Tags", valid_773872
  var valid_773873 = formData.getOrDefault("DBClusterIdentifier")
  valid_773873 = validateParameter(valid_773873, JString, required = true,
                                 default = nil)
  if valid_773873 != nil:
    section.add "DBClusterIdentifier", valid_773873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773874: Call_PostCreateDBClusterSnapshot_773859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773874.validator(path, query, header, formData, body)
  let scheme = call_773874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773874.url(scheme.get, call_773874.host, call_773874.base,
                         call_773874.route, valid.getOrDefault("path"))
  result = hook(call_773874, url, valid)

proc call*(call_773875: Call_PostCreateDBClusterSnapshot_773859;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_773876 = newJObject()
  var formData_773877 = newJObject()
  add(formData_773877, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_773877.add "Tags", Tags
  add(query_773876, "Action", newJString(Action))
  add(formData_773877, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773876, "Version", newJString(Version))
  result = call_773875.call(nil, query_773876, nil, formData_773877, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_773859(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_773860, base: "/",
    url: url_PostCreateDBClusterSnapshot_773861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_773841 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBClusterSnapshot_773843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBClusterSnapshot_773842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_773844 = query.getOrDefault("DBClusterIdentifier")
  valid_773844 = validateParameter(valid_773844, JString, required = true,
                                 default = nil)
  if valid_773844 != nil:
    section.add "DBClusterIdentifier", valid_773844
  var valid_773845 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_773845 = validateParameter(valid_773845, JString, required = true,
                                 default = nil)
  if valid_773845 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_773845
  var valid_773846 = query.getOrDefault("Tags")
  valid_773846 = validateParameter(valid_773846, JArray, required = false,
                                 default = nil)
  if valid_773846 != nil:
    section.add "Tags", valid_773846
  var valid_773847 = query.getOrDefault("Action")
  valid_773847 = validateParameter(valid_773847, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_773847 != nil:
    section.add "Action", valid_773847
  var valid_773848 = query.getOrDefault("Version")
  valid_773848 = validateParameter(valid_773848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773848 != nil:
    section.add "Version", valid_773848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773849 = header.getOrDefault("X-Amz-Date")
  valid_773849 = validateParameter(valid_773849, JString, required = false,
                                 default = nil)
  if valid_773849 != nil:
    section.add "X-Amz-Date", valid_773849
  var valid_773850 = header.getOrDefault("X-Amz-Security-Token")
  valid_773850 = validateParameter(valid_773850, JString, required = false,
                                 default = nil)
  if valid_773850 != nil:
    section.add "X-Amz-Security-Token", valid_773850
  var valid_773851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773851 = validateParameter(valid_773851, JString, required = false,
                                 default = nil)
  if valid_773851 != nil:
    section.add "X-Amz-Content-Sha256", valid_773851
  var valid_773852 = header.getOrDefault("X-Amz-Algorithm")
  valid_773852 = validateParameter(valid_773852, JString, required = false,
                                 default = nil)
  if valid_773852 != nil:
    section.add "X-Amz-Algorithm", valid_773852
  var valid_773853 = header.getOrDefault("X-Amz-Signature")
  valid_773853 = validateParameter(valid_773853, JString, required = false,
                                 default = nil)
  if valid_773853 != nil:
    section.add "X-Amz-Signature", valid_773853
  var valid_773854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773854 = validateParameter(valid_773854, JString, required = false,
                                 default = nil)
  if valid_773854 != nil:
    section.add "X-Amz-SignedHeaders", valid_773854
  var valid_773855 = header.getOrDefault("X-Amz-Credential")
  valid_773855 = validateParameter(valid_773855, JString, required = false,
                                 default = nil)
  if valid_773855 != nil:
    section.add "X-Amz-Credential", valid_773855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773856: Call_GetCreateDBClusterSnapshot_773841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_773856.validator(path, query, header, formData, body)
  let scheme = call_773856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773856.url(scheme.get, call_773856.host, call_773856.base,
                         call_773856.route, valid.getOrDefault("path"))
  result = hook(call_773856, url, valid)

proc call*(call_773857: Call_GetCreateDBClusterSnapshot_773841;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773858 = newJObject()
  add(query_773858, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_773858, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_773858.add "Tags", Tags
  add(query_773858, "Action", newJString(Action))
  add(query_773858, "Version", newJString(Version))
  result = call_773857.call(nil, query_773858, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_773841(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_773842, base: "/",
    url: url_GetCreateDBClusterSnapshot_773843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_773939 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBInstance_773941(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBInstance_773940(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773942 = query.getOrDefault("Action")
  valid_773942 = validateParameter(valid_773942, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_773942 != nil:
    section.add "Action", valid_773942
  var valid_773943 = query.getOrDefault("Version")
  valid_773943 = validateParameter(valid_773943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773943 != nil:
    section.add "Version", valid_773943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773944 = header.getOrDefault("X-Amz-Date")
  valid_773944 = validateParameter(valid_773944, JString, required = false,
                                 default = nil)
  if valid_773944 != nil:
    section.add "X-Amz-Date", valid_773944
  var valid_773945 = header.getOrDefault("X-Amz-Security-Token")
  valid_773945 = validateParameter(valid_773945, JString, required = false,
                                 default = nil)
  if valid_773945 != nil:
    section.add "X-Amz-Security-Token", valid_773945
  var valid_773946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773946 = validateParameter(valid_773946, JString, required = false,
                                 default = nil)
  if valid_773946 != nil:
    section.add "X-Amz-Content-Sha256", valid_773946
  var valid_773947 = header.getOrDefault("X-Amz-Algorithm")
  valid_773947 = validateParameter(valid_773947, JString, required = false,
                                 default = nil)
  if valid_773947 != nil:
    section.add "X-Amz-Algorithm", valid_773947
  var valid_773948 = header.getOrDefault("X-Amz-Signature")
  valid_773948 = validateParameter(valid_773948, JString, required = false,
                                 default = nil)
  if valid_773948 != nil:
    section.add "X-Amz-Signature", valid_773948
  var valid_773949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773949 = validateParameter(valid_773949, JString, required = false,
                                 default = nil)
  if valid_773949 != nil:
    section.add "X-Amz-SignedHeaders", valid_773949
  var valid_773950 = header.getOrDefault("X-Amz-Credential")
  valid_773950 = validateParameter(valid_773950, JString, required = false,
                                 default = nil)
  if valid_773950 != nil:
    section.add "X-Amz-Credential", valid_773950
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: JString
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_773951 = formData.getOrDefault("ProcessorFeatures")
  valid_773951 = validateParameter(valid_773951, JArray, required = false,
                                 default = nil)
  if valid_773951 != nil:
    section.add "ProcessorFeatures", valid_773951
  var valid_773952 = formData.getOrDefault("EnablePerformanceInsights")
  valid_773952 = validateParameter(valid_773952, JBool, required = false, default = nil)
  if valid_773952 != nil:
    section.add "EnablePerformanceInsights", valid_773952
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_773953 = formData.getOrDefault("Engine")
  valid_773953 = validateParameter(valid_773953, JString, required = true,
                                 default = nil)
  if valid_773953 != nil:
    section.add "Engine", valid_773953
  var valid_773954 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_773954 = validateParameter(valid_773954, JArray, required = false,
                                 default = nil)
  if valid_773954 != nil:
    section.add "VpcSecurityGroupIds", valid_773954
  var valid_773955 = formData.getOrDefault("Iops")
  valid_773955 = validateParameter(valid_773955, JInt, required = false, default = nil)
  if valid_773955 != nil:
    section.add "Iops", valid_773955
  var valid_773956 = formData.getOrDefault("BackupRetentionPeriod")
  valid_773956 = validateParameter(valid_773956, JInt, required = false, default = nil)
  if valid_773956 != nil:
    section.add "BackupRetentionPeriod", valid_773956
  var valid_773957 = formData.getOrDefault("MaxAllocatedStorage")
  valid_773957 = validateParameter(valid_773957, JInt, required = false, default = nil)
  if valid_773957 != nil:
    section.add "MaxAllocatedStorage", valid_773957
  var valid_773958 = formData.getOrDefault("Tags")
  valid_773958 = validateParameter(valid_773958, JArray, required = false,
                                 default = nil)
  if valid_773958 != nil:
    section.add "Tags", valid_773958
  var valid_773959 = formData.getOrDefault("TdeCredentialArn")
  valid_773959 = validateParameter(valid_773959, JString, required = false,
                                 default = nil)
  if valid_773959 != nil:
    section.add "TdeCredentialArn", valid_773959
  var valid_773960 = formData.getOrDefault("DeletionProtection")
  valid_773960 = validateParameter(valid_773960, JBool, required = false, default = nil)
  if valid_773960 != nil:
    section.add "DeletionProtection", valid_773960
  var valid_773961 = formData.getOrDefault("DBSubnetGroupName")
  valid_773961 = validateParameter(valid_773961, JString, required = false,
                                 default = nil)
  if valid_773961 != nil:
    section.add "DBSubnetGroupName", valid_773961
  var valid_773962 = formData.getOrDefault("MultiAZ")
  valid_773962 = validateParameter(valid_773962, JBool, required = false, default = nil)
  if valid_773962 != nil:
    section.add "MultiAZ", valid_773962
  var valid_773963 = formData.getOrDefault("PubliclyAccessible")
  valid_773963 = validateParameter(valid_773963, JBool, required = false, default = nil)
  if valid_773963 != nil:
    section.add "PubliclyAccessible", valid_773963
  var valid_773964 = formData.getOrDefault("StorageType")
  valid_773964 = validateParameter(valid_773964, JString, required = false,
                                 default = nil)
  if valid_773964 != nil:
    section.add "StorageType", valid_773964
  var valid_773965 = formData.getOrDefault("Timezone")
  valid_773965 = validateParameter(valid_773965, JString, required = false,
                                 default = nil)
  if valid_773965 != nil:
    section.add "Timezone", valid_773965
  var valid_773966 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_773966 = validateParameter(valid_773966, JArray, required = false,
                                 default = nil)
  if valid_773966 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773966
  var valid_773967 = formData.getOrDefault("CharacterSetName")
  valid_773967 = validateParameter(valid_773967, JString, required = false,
                                 default = nil)
  if valid_773967 != nil:
    section.add "CharacterSetName", valid_773967
  var valid_773968 = formData.getOrDefault("Domain")
  valid_773968 = validateParameter(valid_773968, JString, required = false,
                                 default = nil)
  if valid_773968 != nil:
    section.add "Domain", valid_773968
  var valid_773969 = formData.getOrDefault("LicenseModel")
  valid_773969 = validateParameter(valid_773969, JString, required = false,
                                 default = nil)
  if valid_773969 != nil:
    section.add "LicenseModel", valid_773969
  var valid_773970 = formData.getOrDefault("KmsKeyId")
  valid_773970 = validateParameter(valid_773970, JString, required = false,
                                 default = nil)
  if valid_773970 != nil:
    section.add "KmsKeyId", valid_773970
  var valid_773971 = formData.getOrDefault("StorageEncrypted")
  valid_773971 = validateParameter(valid_773971, JBool, required = false, default = nil)
  if valid_773971 != nil:
    section.add "StorageEncrypted", valid_773971
  var valid_773972 = formData.getOrDefault("DBClusterIdentifier")
  valid_773972 = validateParameter(valid_773972, JString, required = false,
                                 default = nil)
  if valid_773972 != nil:
    section.add "DBClusterIdentifier", valid_773972
  var valid_773973 = formData.getOrDefault("MonitoringRoleArn")
  valid_773973 = validateParameter(valid_773973, JString, required = false,
                                 default = nil)
  if valid_773973 != nil:
    section.add "MonitoringRoleArn", valid_773973
  var valid_773974 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_773974 = validateParameter(valid_773974, JInt, required = false, default = nil)
  if valid_773974 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_773974
  var valid_773975 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_773975 = validateParameter(valid_773975, JString, required = false,
                                 default = nil)
  if valid_773975 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_773975
  var valid_773976 = formData.getOrDefault("DBSecurityGroups")
  valid_773976 = validateParameter(valid_773976, JArray, required = false,
                                 default = nil)
  if valid_773976 != nil:
    section.add "DBSecurityGroups", valid_773976
  var valid_773977 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_773977 = validateParameter(valid_773977, JBool, required = false, default = nil)
  if valid_773977 != nil:
    section.add "CopyTagsToSnapshot", valid_773977
  var valid_773978 = formData.getOrDefault("Port")
  valid_773978 = validateParameter(valid_773978, JInt, required = false, default = nil)
  if valid_773978 != nil:
    section.add "Port", valid_773978
  var valid_773979 = formData.getOrDefault("DBName")
  valid_773979 = validateParameter(valid_773979, JString, required = false,
                                 default = nil)
  if valid_773979 != nil:
    section.add "DBName", valid_773979
  var valid_773980 = formData.getOrDefault("DBInstanceIdentifier")
  valid_773980 = validateParameter(valid_773980, JString, required = true,
                                 default = nil)
  if valid_773980 != nil:
    section.add "DBInstanceIdentifier", valid_773980
  var valid_773981 = formData.getOrDefault("OptionGroupName")
  valid_773981 = validateParameter(valid_773981, JString, required = false,
                                 default = nil)
  if valid_773981 != nil:
    section.add "OptionGroupName", valid_773981
  var valid_773982 = formData.getOrDefault("DBParameterGroupName")
  valid_773982 = validateParameter(valid_773982, JString, required = false,
                                 default = nil)
  if valid_773982 != nil:
    section.add "DBParameterGroupName", valid_773982
  var valid_773983 = formData.getOrDefault("MasterUserPassword")
  valid_773983 = validateParameter(valid_773983, JString, required = false,
                                 default = nil)
  if valid_773983 != nil:
    section.add "MasterUserPassword", valid_773983
  var valid_773984 = formData.getOrDefault("TdeCredentialPassword")
  valid_773984 = validateParameter(valid_773984, JString, required = false,
                                 default = nil)
  if valid_773984 != nil:
    section.add "TdeCredentialPassword", valid_773984
  var valid_773985 = formData.getOrDefault("AvailabilityZone")
  valid_773985 = validateParameter(valid_773985, JString, required = false,
                                 default = nil)
  if valid_773985 != nil:
    section.add "AvailabilityZone", valid_773985
  var valid_773986 = formData.getOrDefault("MonitoringInterval")
  valid_773986 = validateParameter(valid_773986, JInt, required = false, default = nil)
  if valid_773986 != nil:
    section.add "MonitoringInterval", valid_773986
  var valid_773987 = formData.getOrDefault("DomainIAMRoleName")
  valid_773987 = validateParameter(valid_773987, JString, required = false,
                                 default = nil)
  if valid_773987 != nil:
    section.add "DomainIAMRoleName", valid_773987
  var valid_773988 = formData.getOrDefault("AllocatedStorage")
  valid_773988 = validateParameter(valid_773988, JInt, required = false, default = nil)
  if valid_773988 != nil:
    section.add "AllocatedStorage", valid_773988
  var valid_773989 = formData.getOrDefault("MasterUsername")
  valid_773989 = validateParameter(valid_773989, JString, required = false,
                                 default = nil)
  if valid_773989 != nil:
    section.add "MasterUsername", valid_773989
  var valid_773990 = formData.getOrDefault("PromotionTier")
  valid_773990 = validateParameter(valid_773990, JInt, required = false, default = nil)
  if valid_773990 != nil:
    section.add "PromotionTier", valid_773990
  var valid_773991 = formData.getOrDefault("DBInstanceClass")
  valid_773991 = validateParameter(valid_773991, JString, required = true,
                                 default = nil)
  if valid_773991 != nil:
    section.add "DBInstanceClass", valid_773991
  var valid_773992 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773992 = validateParameter(valid_773992, JBool, required = false, default = nil)
  if valid_773992 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773992
  var valid_773993 = formData.getOrDefault("PreferredBackupWindow")
  valid_773993 = validateParameter(valid_773993, JString, required = false,
                                 default = nil)
  if valid_773993 != nil:
    section.add "PreferredBackupWindow", valid_773993
  var valid_773994 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_773994 = validateParameter(valid_773994, JBool, required = false, default = nil)
  if valid_773994 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773994
  var valid_773995 = formData.getOrDefault("EngineVersion")
  valid_773995 = validateParameter(valid_773995, JString, required = false,
                                 default = nil)
  if valid_773995 != nil:
    section.add "EngineVersion", valid_773995
  var valid_773996 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773996 = validateParameter(valid_773996, JString, required = false,
                                 default = nil)
  if valid_773996 != nil:
    section.add "PreferredMaintenanceWindow", valid_773996
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773997: Call_PostCreateDBInstance_773939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_773997.validator(path, query, header, formData, body)
  let scheme = call_773997.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773997.url(scheme.get, call_773997.host, call_773997.base,
                         call_773997.route, valid.getOrDefault("path"))
  result = hook(call_773997, url, valid)

proc call*(call_773998: Call_PostCreateDBInstance_773939; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; Timezone: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: string
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_773999 = newJObject()
  var formData_774000 = newJObject()
  if ProcessorFeatures != nil:
    formData_774000.add "ProcessorFeatures", ProcessorFeatures
  add(formData_774000, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_774000, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_774000.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_774000, "Iops", newJInt(Iops))
  add(formData_774000, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_774000, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  if Tags != nil:
    formData_774000.add "Tags", Tags
  add(formData_774000, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_774000, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_774000, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_774000, "MultiAZ", newJBool(MultiAZ))
  add(formData_774000, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_774000, "StorageType", newJString(StorageType))
  add(formData_774000, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_774000.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_774000, "CharacterSetName", newJString(CharacterSetName))
  add(formData_774000, "Domain", newJString(Domain))
  add(formData_774000, "LicenseModel", newJString(LicenseModel))
  add(formData_774000, "KmsKeyId", newJString(KmsKeyId))
  add(formData_774000, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_774000, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_774000, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_774000, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_774000, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_774000.add "DBSecurityGroups", DBSecurityGroups
  add(formData_774000, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_774000, "Port", newJInt(Port))
  add(formData_774000, "DBName", newJString(DBName))
  add(formData_774000, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_774000, "OptionGroupName", newJString(OptionGroupName))
  add(formData_774000, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_774000, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_774000, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_774000, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_774000, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_774000, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_773999, "Action", newJString(Action))
  add(formData_774000, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_774000, "MasterUsername", newJString(MasterUsername))
  add(formData_774000, "PromotionTier", newJInt(PromotionTier))
  add(formData_774000, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_774000, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_774000, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_774000, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_774000, "EngineVersion", newJString(EngineVersion))
  add(query_773999, "Version", newJString(Version))
  add(formData_774000, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773998.call(nil, query_773999, nil, formData_774000, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_773939(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_773940, base: "/",
    url: url_PostCreateDBInstance_773941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_773878 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBInstance_773880(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBInstance_773879(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_773881 = query.getOrDefault("MonitoringInterval")
  valid_773881 = validateParameter(valid_773881, JInt, required = false, default = nil)
  if valid_773881 != nil:
    section.add "MonitoringInterval", valid_773881
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_773882 = query.getOrDefault("Engine")
  valid_773882 = validateParameter(valid_773882, JString, required = true,
                                 default = nil)
  if valid_773882 != nil:
    section.add "Engine", valid_773882
  var valid_773883 = query.getOrDefault("PromotionTier")
  valid_773883 = validateParameter(valid_773883, JInt, required = false, default = nil)
  if valid_773883 != nil:
    section.add "PromotionTier", valid_773883
  var valid_773884 = query.getOrDefault("MaxAllocatedStorage")
  valid_773884 = validateParameter(valid_773884, JInt, required = false, default = nil)
  if valid_773884 != nil:
    section.add "MaxAllocatedStorage", valid_773884
  var valid_773885 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_773885 = validateParameter(valid_773885, JInt, required = false, default = nil)
  if valid_773885 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_773885
  var valid_773886 = query.getOrDefault("StorageEncrypted")
  valid_773886 = validateParameter(valid_773886, JBool, required = false, default = nil)
  if valid_773886 != nil:
    section.add "StorageEncrypted", valid_773886
  var valid_773887 = query.getOrDefault("AllocatedStorage")
  valid_773887 = validateParameter(valid_773887, JInt, required = false, default = nil)
  if valid_773887 != nil:
    section.add "AllocatedStorage", valid_773887
  var valid_773888 = query.getOrDefault("StorageType")
  valid_773888 = validateParameter(valid_773888, JString, required = false,
                                 default = nil)
  if valid_773888 != nil:
    section.add "StorageType", valid_773888
  var valid_773889 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_773889 = validateParameter(valid_773889, JBool, required = false, default = nil)
  if valid_773889 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_773889
  var valid_773890 = query.getOrDefault("DBClusterIdentifier")
  valid_773890 = validateParameter(valid_773890, JString, required = false,
                                 default = nil)
  if valid_773890 != nil:
    section.add "DBClusterIdentifier", valid_773890
  var valid_773891 = query.getOrDefault("DBSecurityGroups")
  valid_773891 = validateParameter(valid_773891, JArray, required = false,
                                 default = nil)
  if valid_773891 != nil:
    section.add "DBSecurityGroups", valid_773891
  var valid_773892 = query.getOrDefault("MasterUserPassword")
  valid_773892 = validateParameter(valid_773892, JString, required = false,
                                 default = nil)
  if valid_773892 != nil:
    section.add "MasterUserPassword", valid_773892
  var valid_773893 = query.getOrDefault("MonitoringRoleArn")
  valid_773893 = validateParameter(valid_773893, JString, required = false,
                                 default = nil)
  if valid_773893 != nil:
    section.add "MonitoringRoleArn", valid_773893
  var valid_773894 = query.getOrDefault("MultiAZ")
  valid_773894 = validateParameter(valid_773894, JBool, required = false, default = nil)
  if valid_773894 != nil:
    section.add "MultiAZ", valid_773894
  var valid_773895 = query.getOrDefault("TdeCredentialPassword")
  valid_773895 = validateParameter(valid_773895, JString, required = false,
                                 default = nil)
  if valid_773895 != nil:
    section.add "TdeCredentialPassword", valid_773895
  var valid_773896 = query.getOrDefault("DomainIAMRoleName")
  valid_773896 = validateParameter(valid_773896, JString, required = false,
                                 default = nil)
  if valid_773896 != nil:
    section.add "DomainIAMRoleName", valid_773896
  var valid_773897 = query.getOrDefault("BackupRetentionPeriod")
  valid_773897 = validateParameter(valid_773897, JInt, required = false, default = nil)
  if valid_773897 != nil:
    section.add "BackupRetentionPeriod", valid_773897
  var valid_773898 = query.getOrDefault("DBName")
  valid_773898 = validateParameter(valid_773898, JString, required = false,
                                 default = nil)
  if valid_773898 != nil:
    section.add "DBName", valid_773898
  var valid_773899 = query.getOrDefault("CopyTagsToSnapshot")
  valid_773899 = validateParameter(valid_773899, JBool, required = false, default = nil)
  if valid_773899 != nil:
    section.add "CopyTagsToSnapshot", valid_773899
  var valid_773900 = query.getOrDefault("DeletionProtection")
  valid_773900 = validateParameter(valid_773900, JBool, required = false, default = nil)
  if valid_773900 != nil:
    section.add "DeletionProtection", valid_773900
  var valid_773901 = query.getOrDefault("DBSubnetGroupName")
  valid_773901 = validateParameter(valid_773901, JString, required = false,
                                 default = nil)
  if valid_773901 != nil:
    section.add "DBSubnetGroupName", valid_773901
  var valid_773902 = query.getOrDefault("KmsKeyId")
  valid_773902 = validateParameter(valid_773902, JString, required = false,
                                 default = nil)
  if valid_773902 != nil:
    section.add "KmsKeyId", valid_773902
  var valid_773903 = query.getOrDefault("Domain")
  valid_773903 = validateParameter(valid_773903, JString, required = false,
                                 default = nil)
  if valid_773903 != nil:
    section.add "Domain", valid_773903
  var valid_773904 = query.getOrDefault("EngineVersion")
  valid_773904 = validateParameter(valid_773904, JString, required = false,
                                 default = nil)
  if valid_773904 != nil:
    section.add "EngineVersion", valid_773904
  var valid_773905 = query.getOrDefault("PreferredBackupWindow")
  valid_773905 = validateParameter(valid_773905, JString, required = false,
                                 default = nil)
  if valid_773905 != nil:
    section.add "PreferredBackupWindow", valid_773905
  var valid_773906 = query.getOrDefault("DBInstanceIdentifier")
  valid_773906 = validateParameter(valid_773906, JString, required = true,
                                 default = nil)
  if valid_773906 != nil:
    section.add "DBInstanceIdentifier", valid_773906
  var valid_773907 = query.getOrDefault("MasterUsername")
  valid_773907 = validateParameter(valid_773907, JString, required = false,
                                 default = nil)
  if valid_773907 != nil:
    section.add "MasterUsername", valid_773907
  var valid_773908 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773908 = validateParameter(valid_773908, JString, required = false,
                                 default = nil)
  if valid_773908 != nil:
    section.add "PreferredMaintenanceWindow", valid_773908
  var valid_773909 = query.getOrDefault("ProcessorFeatures")
  valid_773909 = validateParameter(valid_773909, JArray, required = false,
                                 default = nil)
  if valid_773909 != nil:
    section.add "ProcessorFeatures", valid_773909
  var valid_773910 = query.getOrDefault("OptionGroupName")
  valid_773910 = validateParameter(valid_773910, JString, required = false,
                                 default = nil)
  if valid_773910 != nil:
    section.add "OptionGroupName", valid_773910
  var valid_773911 = query.getOrDefault("AvailabilityZone")
  valid_773911 = validateParameter(valid_773911, JString, required = false,
                                 default = nil)
  if valid_773911 != nil:
    section.add "AvailabilityZone", valid_773911
  var valid_773912 = query.getOrDefault("Iops")
  valid_773912 = validateParameter(valid_773912, JInt, required = false, default = nil)
  if valid_773912 != nil:
    section.add "Iops", valid_773912
  var valid_773913 = query.getOrDefault("VpcSecurityGroupIds")
  valid_773913 = validateParameter(valid_773913, JArray, required = false,
                                 default = nil)
  if valid_773913 != nil:
    section.add "VpcSecurityGroupIds", valid_773913
  var valid_773914 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_773914 = validateParameter(valid_773914, JArray, required = false,
                                 default = nil)
  if valid_773914 != nil:
    section.add "EnableCloudwatchLogsExports", valid_773914
  var valid_773915 = query.getOrDefault("LicenseModel")
  valid_773915 = validateParameter(valid_773915, JString, required = false,
                                 default = nil)
  if valid_773915 != nil:
    section.add "LicenseModel", valid_773915
  var valid_773916 = query.getOrDefault("Tags")
  valid_773916 = validateParameter(valid_773916, JArray, required = false,
                                 default = nil)
  if valid_773916 != nil:
    section.add "Tags", valid_773916
  var valid_773917 = query.getOrDefault("DBParameterGroupName")
  valid_773917 = validateParameter(valid_773917, JString, required = false,
                                 default = nil)
  if valid_773917 != nil:
    section.add "DBParameterGroupName", valid_773917
  var valid_773918 = query.getOrDefault("DBInstanceClass")
  valid_773918 = validateParameter(valid_773918, JString, required = true,
                                 default = nil)
  if valid_773918 != nil:
    section.add "DBInstanceClass", valid_773918
  var valid_773919 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_773919 = validateParameter(valid_773919, JString, required = false,
                                 default = nil)
  if valid_773919 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_773919
  var valid_773920 = query.getOrDefault("Action")
  valid_773920 = validateParameter(valid_773920, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_773920 != nil:
    section.add "Action", valid_773920
  var valid_773921 = query.getOrDefault("CharacterSetName")
  valid_773921 = validateParameter(valid_773921, JString, required = false,
                                 default = nil)
  if valid_773921 != nil:
    section.add "CharacterSetName", valid_773921
  var valid_773922 = query.getOrDefault("TdeCredentialArn")
  valid_773922 = validateParameter(valid_773922, JString, required = false,
                                 default = nil)
  if valid_773922 != nil:
    section.add "TdeCredentialArn", valid_773922
  var valid_773923 = query.getOrDefault("PubliclyAccessible")
  valid_773923 = validateParameter(valid_773923, JBool, required = false, default = nil)
  if valid_773923 != nil:
    section.add "PubliclyAccessible", valid_773923
  var valid_773924 = query.getOrDefault("Timezone")
  valid_773924 = validateParameter(valid_773924, JString, required = false,
                                 default = nil)
  if valid_773924 != nil:
    section.add "Timezone", valid_773924
  var valid_773925 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_773925 = validateParameter(valid_773925, JBool, required = false, default = nil)
  if valid_773925 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773925
  var valid_773926 = query.getOrDefault("Port")
  valid_773926 = validateParameter(valid_773926, JInt, required = false, default = nil)
  if valid_773926 != nil:
    section.add "Port", valid_773926
  var valid_773927 = query.getOrDefault("EnablePerformanceInsights")
  valid_773927 = validateParameter(valid_773927, JBool, required = false, default = nil)
  if valid_773927 != nil:
    section.add "EnablePerformanceInsights", valid_773927
  var valid_773928 = query.getOrDefault("Version")
  valid_773928 = validateParameter(valid_773928, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_773928 != nil:
    section.add "Version", valid_773928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773929 = header.getOrDefault("X-Amz-Date")
  valid_773929 = validateParameter(valid_773929, JString, required = false,
                                 default = nil)
  if valid_773929 != nil:
    section.add "X-Amz-Date", valid_773929
  var valid_773930 = header.getOrDefault("X-Amz-Security-Token")
  valid_773930 = validateParameter(valid_773930, JString, required = false,
                                 default = nil)
  if valid_773930 != nil:
    section.add "X-Amz-Security-Token", valid_773930
  var valid_773931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773931 = validateParameter(valid_773931, JString, required = false,
                                 default = nil)
  if valid_773931 != nil:
    section.add "X-Amz-Content-Sha256", valid_773931
  var valid_773932 = header.getOrDefault("X-Amz-Algorithm")
  valid_773932 = validateParameter(valid_773932, JString, required = false,
                                 default = nil)
  if valid_773932 != nil:
    section.add "X-Amz-Algorithm", valid_773932
  var valid_773933 = header.getOrDefault("X-Amz-Signature")
  valid_773933 = validateParameter(valid_773933, JString, required = false,
                                 default = nil)
  if valid_773933 != nil:
    section.add "X-Amz-Signature", valid_773933
  var valid_773934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773934 = validateParameter(valid_773934, JString, required = false,
                                 default = nil)
  if valid_773934 != nil:
    section.add "X-Amz-SignedHeaders", valid_773934
  var valid_773935 = header.getOrDefault("X-Amz-Credential")
  valid_773935 = validateParameter(valid_773935, JString, required = false,
                                 default = nil)
  if valid_773935 != nil:
    section.add "X-Amz-Credential", valid_773935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773936: Call_GetCreateDBInstance_773878; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_773936.validator(path, query, header, formData, body)
  let scheme = call_773936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773936.url(scheme.get, call_773936.host, call_773936.base,
                         call_773936.route, valid.getOrDefault("path"))
  result = hook(call_773936, url, valid)

proc call*(call_773937: Call_GetCreateDBInstance_773878; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; MasterUsername: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it is not encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : For an Amazon RDS DB instance that's running Microsoft SQL Server, this parameter specifies the Active Directory directory ID to create the instance in. Amazon RDS uses Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/DeveloperGuide/USER_SQLServerWinAuth.html">Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>. 
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> is not specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> is not specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_773938 = newJObject()
  add(query_773938, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_773938, "Engine", newJString(Engine))
  add(query_773938, "PromotionTier", newJInt(PromotionTier))
  add(query_773938, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_773938, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_773938, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_773938, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_773938, "StorageType", newJString(StorageType))
  add(query_773938, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_773938, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_773938.add "DBSecurityGroups", DBSecurityGroups
  add(query_773938, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_773938, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_773938, "MultiAZ", newJBool(MultiAZ))
  add(query_773938, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_773938, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_773938, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_773938, "DBName", newJString(DBName))
  add(query_773938, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_773938, "DeletionProtection", newJBool(DeletionProtection))
  add(query_773938, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_773938, "KmsKeyId", newJString(KmsKeyId))
  add(query_773938, "Domain", newJString(Domain))
  add(query_773938, "EngineVersion", newJString(EngineVersion))
  add(query_773938, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_773938, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_773938, "MasterUsername", newJString(MasterUsername))
  add(query_773938, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_773938.add "ProcessorFeatures", ProcessorFeatures
  add(query_773938, "OptionGroupName", newJString(OptionGroupName))
  add(query_773938, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_773938, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_773938.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_773938.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_773938, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_773938.add "Tags", Tags
  add(query_773938, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_773938, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_773938, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_773938, "Action", newJString(Action))
  add(query_773938, "CharacterSetName", newJString(CharacterSetName))
  add(query_773938, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_773938, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_773938, "Timezone", newJString(Timezone))
  add(query_773938, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_773938, "Port", newJInt(Port))
  add(query_773938, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_773938, "Version", newJString(Version))
  result = call_773937.call(nil, query_773938, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_773878(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_773879, base: "/",
    url: url_GetCreateDBInstance_773880, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_774045 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBInstanceReadReplica_774047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBInstanceReadReplica_774046(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774048 = query.getOrDefault("Action")
  valid_774048 = validateParameter(valid_774048, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_774048 != nil:
    section.add "Action", valid_774048
  var valid_774049 = query.getOrDefault("Version")
  valid_774049 = validateParameter(valid_774049, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774049 != nil:
    section.add "Version", valid_774049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774050 = header.getOrDefault("X-Amz-Date")
  valid_774050 = validateParameter(valid_774050, JString, required = false,
                                 default = nil)
  if valid_774050 != nil:
    section.add "X-Amz-Date", valid_774050
  var valid_774051 = header.getOrDefault("X-Amz-Security-Token")
  valid_774051 = validateParameter(valid_774051, JString, required = false,
                                 default = nil)
  if valid_774051 != nil:
    section.add "X-Amz-Security-Token", valid_774051
  var valid_774052 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774052 = validateParameter(valid_774052, JString, required = false,
                                 default = nil)
  if valid_774052 != nil:
    section.add "X-Amz-Content-Sha256", valid_774052
  var valid_774053 = header.getOrDefault("X-Amz-Algorithm")
  valid_774053 = validateParameter(valid_774053, JString, required = false,
                                 default = nil)
  if valid_774053 != nil:
    section.add "X-Amz-Algorithm", valid_774053
  var valid_774054 = header.getOrDefault("X-Amz-Signature")
  valid_774054 = validateParameter(valid_774054, JString, required = false,
                                 default = nil)
  if valid_774054 != nil:
    section.add "X-Amz-Signature", valid_774054
  var valid_774055 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774055 = validateParameter(valid_774055, JString, required = false,
                                 default = nil)
  if valid_774055 != nil:
    section.add "X-Amz-SignedHeaders", valid_774055
  var valid_774056 = header.getOrDefault("X-Amz-Credential")
  valid_774056 = validateParameter(valid_774056, JString, required = false,
                                 default = nil)
  if valid_774056 != nil:
    section.add "X-Amz-Credential", valid_774056
  result.add "header", section
  ## parameters in `formData` object:
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_774057 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_774057 = validateParameter(valid_774057, JString, required = false,
                                 default = nil)
  if valid_774057 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_774057
  var valid_774058 = formData.getOrDefault("ProcessorFeatures")
  valid_774058 = validateParameter(valid_774058, JArray, required = false,
                                 default = nil)
  if valid_774058 != nil:
    section.add "ProcessorFeatures", valid_774058
  var valid_774059 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_774059 = validateParameter(valid_774059, JBool, required = false, default = nil)
  if valid_774059 != nil:
    section.add "CopyTagsToSnapshot", valid_774059
  var valid_774060 = formData.getOrDefault("Port")
  valid_774060 = validateParameter(valid_774060, JInt, required = false, default = nil)
  if valid_774060 != nil:
    section.add "Port", valid_774060
  var valid_774061 = formData.getOrDefault("EnablePerformanceInsights")
  valid_774061 = validateParameter(valid_774061, JBool, required = false, default = nil)
  if valid_774061 != nil:
    section.add "EnablePerformanceInsights", valid_774061
  var valid_774062 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_774062 = validateParameter(valid_774062, JArray, required = false,
                                 default = nil)
  if valid_774062 != nil:
    section.add "VpcSecurityGroupIds", valid_774062
  var valid_774063 = formData.getOrDefault("Iops")
  valid_774063 = validateParameter(valid_774063, JInt, required = false, default = nil)
  if valid_774063 != nil:
    section.add "Iops", valid_774063
  var valid_774064 = formData.getOrDefault("PreSignedUrl")
  valid_774064 = validateParameter(valid_774064, JString, required = false,
                                 default = nil)
  if valid_774064 != nil:
    section.add "PreSignedUrl", valid_774064
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_774065 = formData.getOrDefault("DBInstanceIdentifier")
  valid_774065 = validateParameter(valid_774065, JString, required = true,
                                 default = nil)
  if valid_774065 != nil:
    section.add "DBInstanceIdentifier", valid_774065
  var valid_774066 = formData.getOrDefault("OptionGroupName")
  valid_774066 = validateParameter(valid_774066, JString, required = false,
                                 default = nil)
  if valid_774066 != nil:
    section.add "OptionGroupName", valid_774066
  var valid_774067 = formData.getOrDefault("DBParameterGroupName")
  valid_774067 = validateParameter(valid_774067, JString, required = false,
                                 default = nil)
  if valid_774067 != nil:
    section.add "DBParameterGroupName", valid_774067
  var valid_774068 = formData.getOrDefault("Tags")
  valid_774068 = validateParameter(valid_774068, JArray, required = false,
                                 default = nil)
  if valid_774068 != nil:
    section.add "Tags", valid_774068
  var valid_774069 = formData.getOrDefault("SourceRegion")
  valid_774069 = validateParameter(valid_774069, JString, required = false,
                                 default = nil)
  if valid_774069 != nil:
    section.add "SourceRegion", valid_774069
  var valid_774070 = formData.getOrDefault("DeletionProtection")
  valid_774070 = validateParameter(valid_774070, JBool, required = false, default = nil)
  if valid_774070 != nil:
    section.add "DeletionProtection", valid_774070
  var valid_774071 = formData.getOrDefault("DBSubnetGroupName")
  valid_774071 = validateParameter(valid_774071, JString, required = false,
                                 default = nil)
  if valid_774071 != nil:
    section.add "DBSubnetGroupName", valid_774071
  var valid_774072 = formData.getOrDefault("AvailabilityZone")
  valid_774072 = validateParameter(valid_774072, JString, required = false,
                                 default = nil)
  if valid_774072 != nil:
    section.add "AvailabilityZone", valid_774072
  var valid_774073 = formData.getOrDefault("MonitoringInterval")
  valid_774073 = validateParameter(valid_774073, JInt, required = false, default = nil)
  if valid_774073 != nil:
    section.add "MonitoringInterval", valid_774073
  var valid_774074 = formData.getOrDefault("MultiAZ")
  valid_774074 = validateParameter(valid_774074, JBool, required = false, default = nil)
  if valid_774074 != nil:
    section.add "MultiAZ", valid_774074
  var valid_774075 = formData.getOrDefault("PubliclyAccessible")
  valid_774075 = validateParameter(valid_774075, JBool, required = false, default = nil)
  if valid_774075 != nil:
    section.add "PubliclyAccessible", valid_774075
  var valid_774076 = formData.getOrDefault("StorageType")
  valid_774076 = validateParameter(valid_774076, JString, required = false,
                                 default = nil)
  if valid_774076 != nil:
    section.add "StorageType", valid_774076
  var valid_774077 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_774077 = validateParameter(valid_774077, JArray, required = false,
                                 default = nil)
  if valid_774077 != nil:
    section.add "EnableCloudwatchLogsExports", valid_774077
  var valid_774078 = formData.getOrDefault("DBInstanceClass")
  valid_774078 = validateParameter(valid_774078, JString, required = false,
                                 default = nil)
  if valid_774078 != nil:
    section.add "DBInstanceClass", valid_774078
  var valid_774079 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_774079 = validateParameter(valid_774079, JString, required = true,
                                 default = nil)
  if valid_774079 != nil:
    section.add "SourceDBInstanceIdentifier", valid_774079
  var valid_774080 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_774080 = validateParameter(valid_774080, JBool, required = false, default = nil)
  if valid_774080 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_774080
  var valid_774081 = formData.getOrDefault("KmsKeyId")
  valid_774081 = validateParameter(valid_774081, JString, required = false,
                                 default = nil)
  if valid_774081 != nil:
    section.add "KmsKeyId", valid_774081
  var valid_774082 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_774082 = validateParameter(valid_774082, JBool, required = false, default = nil)
  if valid_774082 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774082
  var valid_774083 = formData.getOrDefault("MonitoringRoleArn")
  valid_774083 = validateParameter(valid_774083, JString, required = false,
                                 default = nil)
  if valid_774083 != nil:
    section.add "MonitoringRoleArn", valid_774083
  var valid_774084 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_774084 = validateParameter(valid_774084, JInt, required = false, default = nil)
  if valid_774084 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_774084
  var valid_774085 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_774085 = validateParameter(valid_774085, JBool, required = false, default = nil)
  if valid_774085 != nil:
    section.add "UseDefaultProcessorFeatures", valid_774085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774086: Call_PostCreateDBInstanceReadReplica_774045;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_774086.validator(path, query, header, formData, body)
  let scheme = call_774086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774086.url(scheme.get, call_774086.host, call_774086.base,
                         call_774086.route, valid.getOrDefault("path"))
  result = hook(call_774086, url, valid)

proc call*(call_774087: Call_PostCreateDBInstanceReadReplica_774045;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          PerformanceInsightsKMSKeyId: string = "";
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0; PreSignedUrl: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZone: string = ""; MonitoringInterval: int = 0;
          MultiAZ: bool = false; Action: string = "CreateDBInstanceReadReplica";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; MonitoringRoleArn: string = "";
          Version: string = "2014-10-31";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   Version: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_774088 = newJObject()
  var formData_774089 = newJObject()
  add(formData_774089, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if ProcessorFeatures != nil:
    formData_774089.add "ProcessorFeatures", ProcessorFeatures
  add(formData_774089, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_774089, "Port", newJInt(Port))
  add(formData_774089, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_774089.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_774089, "Iops", newJInt(Iops))
  add(formData_774089, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_774089, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_774089, "OptionGroupName", newJString(OptionGroupName))
  add(formData_774089, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_774089.add "Tags", Tags
  add(formData_774089, "SourceRegion", newJString(SourceRegion))
  add(formData_774089, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_774089, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_774089, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_774089, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_774089, "MultiAZ", newJBool(MultiAZ))
  add(query_774088, "Action", newJString(Action))
  add(formData_774089, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_774089, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_774089.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_774089, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_774089, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_774089, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_774089, "KmsKeyId", newJString(KmsKeyId))
  add(formData_774089, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_774089, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_774088, "Version", newJString(Version))
  add(formData_774089, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_774089, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_774087.call(nil, query_774088, nil, formData_774089, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_774045(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_774046, base: "/",
    url: url_PostCreateDBInstanceReadReplica_774047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_774001 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBInstanceReadReplica_774003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBInstanceReadReplica_774002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_774004 = query.getOrDefault("MonitoringInterval")
  valid_774004 = validateParameter(valid_774004, JInt, required = false, default = nil)
  if valid_774004 != nil:
    section.add "MonitoringInterval", valid_774004
  var valid_774005 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_774005 = validateParameter(valid_774005, JBool, required = false, default = nil)
  if valid_774005 != nil:
    section.add "UseDefaultProcessorFeatures", valid_774005
  var valid_774006 = query.getOrDefault("ProcessorFeatures")
  valid_774006 = validateParameter(valid_774006, JArray, required = false,
                                 default = nil)
  if valid_774006 != nil:
    section.add "ProcessorFeatures", valid_774006
  assert query != nil, "query argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_774007 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_774007 = validateParameter(valid_774007, JString, required = true,
                                 default = nil)
  if valid_774007 != nil:
    section.add "SourceDBInstanceIdentifier", valid_774007
  var valid_774008 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_774008 = validateParameter(valid_774008, JInt, required = false, default = nil)
  if valid_774008 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_774008
  var valid_774009 = query.getOrDefault("SourceRegion")
  valid_774009 = validateParameter(valid_774009, JString, required = false,
                                 default = nil)
  if valid_774009 != nil:
    section.add "SourceRegion", valid_774009
  var valid_774010 = query.getOrDefault("StorageType")
  valid_774010 = validateParameter(valid_774010, JString, required = false,
                                 default = nil)
  if valid_774010 != nil:
    section.add "StorageType", valid_774010
  var valid_774011 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_774011 = validateParameter(valid_774011, JBool, required = false, default = nil)
  if valid_774011 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_774011
  var valid_774012 = query.getOrDefault("OptionGroupName")
  valid_774012 = validateParameter(valid_774012, JString, required = false,
                                 default = nil)
  if valid_774012 != nil:
    section.add "OptionGroupName", valid_774012
  var valid_774013 = query.getOrDefault("AvailabilityZone")
  valid_774013 = validateParameter(valid_774013, JString, required = false,
                                 default = nil)
  if valid_774013 != nil:
    section.add "AvailabilityZone", valid_774013
  var valid_774014 = query.getOrDefault("Iops")
  valid_774014 = validateParameter(valid_774014, JInt, required = false, default = nil)
  if valid_774014 != nil:
    section.add "Iops", valid_774014
  var valid_774015 = query.getOrDefault("MonitoringRoleArn")
  valid_774015 = validateParameter(valid_774015, JString, required = false,
                                 default = nil)
  if valid_774015 != nil:
    section.add "MonitoringRoleArn", valid_774015
  var valid_774016 = query.getOrDefault("PreSignedUrl")
  valid_774016 = validateParameter(valid_774016, JString, required = false,
                                 default = nil)
  if valid_774016 != nil:
    section.add "PreSignedUrl", valid_774016
  var valid_774017 = query.getOrDefault("VpcSecurityGroupIds")
  valid_774017 = validateParameter(valid_774017, JArray, required = false,
                                 default = nil)
  if valid_774017 != nil:
    section.add "VpcSecurityGroupIds", valid_774017
  var valid_774018 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_774018 = validateParameter(valid_774018, JArray, required = false,
                                 default = nil)
  if valid_774018 != nil:
    section.add "EnableCloudwatchLogsExports", valid_774018
  var valid_774019 = query.getOrDefault("MultiAZ")
  valid_774019 = validateParameter(valid_774019, JBool, required = false, default = nil)
  if valid_774019 != nil:
    section.add "MultiAZ", valid_774019
  var valid_774020 = query.getOrDefault("Tags")
  valid_774020 = validateParameter(valid_774020, JArray, required = false,
                                 default = nil)
  if valid_774020 != nil:
    section.add "Tags", valid_774020
  var valid_774021 = query.getOrDefault("CopyTagsToSnapshot")
  valid_774021 = validateParameter(valid_774021, JBool, required = false, default = nil)
  if valid_774021 != nil:
    section.add "CopyTagsToSnapshot", valid_774021
  var valid_774022 = query.getOrDefault("DBParameterGroupName")
  valid_774022 = validateParameter(valid_774022, JString, required = false,
                                 default = nil)
  if valid_774022 != nil:
    section.add "DBParameterGroupName", valid_774022
  var valid_774023 = query.getOrDefault("DBInstanceClass")
  valid_774023 = validateParameter(valid_774023, JString, required = false,
                                 default = nil)
  if valid_774023 != nil:
    section.add "DBInstanceClass", valid_774023
  var valid_774024 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_774024 = validateParameter(valid_774024, JString, required = false,
                                 default = nil)
  if valid_774024 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_774024
  var valid_774025 = query.getOrDefault("DeletionProtection")
  valid_774025 = validateParameter(valid_774025, JBool, required = false, default = nil)
  if valid_774025 != nil:
    section.add "DeletionProtection", valid_774025
  var valid_774026 = query.getOrDefault("Action")
  valid_774026 = validateParameter(valid_774026, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_774026 != nil:
    section.add "Action", valid_774026
  var valid_774027 = query.getOrDefault("DBSubnetGroupName")
  valid_774027 = validateParameter(valid_774027, JString, required = false,
                                 default = nil)
  if valid_774027 != nil:
    section.add "DBSubnetGroupName", valid_774027
  var valid_774028 = query.getOrDefault("KmsKeyId")
  valid_774028 = validateParameter(valid_774028, JString, required = false,
                                 default = nil)
  if valid_774028 != nil:
    section.add "KmsKeyId", valid_774028
  var valid_774029 = query.getOrDefault("PubliclyAccessible")
  valid_774029 = validateParameter(valid_774029, JBool, required = false, default = nil)
  if valid_774029 != nil:
    section.add "PubliclyAccessible", valid_774029
  var valid_774030 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_774030 = validateParameter(valid_774030, JBool, required = false, default = nil)
  if valid_774030 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774030
  var valid_774031 = query.getOrDefault("Port")
  valid_774031 = validateParameter(valid_774031, JInt, required = false, default = nil)
  if valid_774031 != nil:
    section.add "Port", valid_774031
  var valid_774032 = query.getOrDefault("EnablePerformanceInsights")
  valid_774032 = validateParameter(valid_774032, JBool, required = false, default = nil)
  if valid_774032 != nil:
    section.add "EnablePerformanceInsights", valid_774032
  var valid_774033 = query.getOrDefault("Version")
  valid_774033 = validateParameter(valid_774033, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774033 != nil:
    section.add "Version", valid_774033
  var valid_774034 = query.getOrDefault("DBInstanceIdentifier")
  valid_774034 = validateParameter(valid_774034, JString, required = true,
                                 default = nil)
  if valid_774034 != nil:
    section.add "DBInstanceIdentifier", valid_774034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774035 = header.getOrDefault("X-Amz-Date")
  valid_774035 = validateParameter(valid_774035, JString, required = false,
                                 default = nil)
  if valid_774035 != nil:
    section.add "X-Amz-Date", valid_774035
  var valid_774036 = header.getOrDefault("X-Amz-Security-Token")
  valid_774036 = validateParameter(valid_774036, JString, required = false,
                                 default = nil)
  if valid_774036 != nil:
    section.add "X-Amz-Security-Token", valid_774036
  var valid_774037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774037 = validateParameter(valid_774037, JString, required = false,
                                 default = nil)
  if valid_774037 != nil:
    section.add "X-Amz-Content-Sha256", valid_774037
  var valid_774038 = header.getOrDefault("X-Amz-Algorithm")
  valid_774038 = validateParameter(valid_774038, JString, required = false,
                                 default = nil)
  if valid_774038 != nil:
    section.add "X-Amz-Algorithm", valid_774038
  var valid_774039 = header.getOrDefault("X-Amz-Signature")
  valid_774039 = validateParameter(valid_774039, JString, required = false,
                                 default = nil)
  if valid_774039 != nil:
    section.add "X-Amz-Signature", valid_774039
  var valid_774040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774040 = validateParameter(valid_774040, JString, required = false,
                                 default = nil)
  if valid_774040 != nil:
    section.add "X-Amz-SignedHeaders", valid_774040
  var valid_774041 = header.getOrDefault("X-Amz-Credential")
  valid_774041 = validateParameter(valid_774041, JString, required = false,
                                 default = nil)
  if valid_774041 != nil:
    section.add "X-Amz-Credential", valid_774041
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774042: Call_GetCreateDBInstanceReadReplica_774001; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_774042.validator(path, query, header, formData, body)
  let scheme = call_774042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774042.url(scheme.get, call_774042.host, call_774042.base,
                         call_774042.route, valid.getOrDefault("path"))
  result = hook(call_774042, url, valid)

proc call*(call_774043: Call_GetCreateDBInstanceReadReplica_774001;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          PerformanceInsightsRetentionPeriod: int = 0; SourceRegion: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          MonitoringRoleArn: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          Tags: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          DeletionProtection: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the <code>--source-region</code> option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  var query_774044 = newJObject()
  add(query_774044, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_774044, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_774044.add "ProcessorFeatures", ProcessorFeatures
  add(query_774044, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_774044, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_774044, "SourceRegion", newJString(SourceRegion))
  add(query_774044, "StorageType", newJString(StorageType))
  add(query_774044, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_774044, "OptionGroupName", newJString(OptionGroupName))
  add(query_774044, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_774044, "Iops", newJInt(Iops))
  add(query_774044, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_774044, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_774044.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_774044.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_774044, "MultiAZ", newJBool(MultiAZ))
  if Tags != nil:
    query_774044.add "Tags", Tags
  add(query_774044, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_774044, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774044, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_774044, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_774044, "DeletionProtection", newJBool(DeletionProtection))
  add(query_774044, "Action", newJString(Action))
  add(query_774044, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774044, "KmsKeyId", newJString(KmsKeyId))
  add(query_774044, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_774044, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_774044, "Port", newJInt(Port))
  add(query_774044, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_774044, "Version", newJString(Version))
  add(query_774044, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_774043.call(nil, query_774044, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_774001(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_774002, base: "/",
    url: url_GetCreateDBInstanceReadReplica_774003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_774109 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBParameterGroup_774111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBParameterGroup_774110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774112 = query.getOrDefault("Action")
  valid_774112 = validateParameter(valid_774112, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_774112 != nil:
    section.add "Action", valid_774112
  var valid_774113 = query.getOrDefault("Version")
  valid_774113 = validateParameter(valid_774113, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774113 != nil:
    section.add "Version", valid_774113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774114 = header.getOrDefault("X-Amz-Date")
  valid_774114 = validateParameter(valid_774114, JString, required = false,
                                 default = nil)
  if valid_774114 != nil:
    section.add "X-Amz-Date", valid_774114
  var valid_774115 = header.getOrDefault("X-Amz-Security-Token")
  valid_774115 = validateParameter(valid_774115, JString, required = false,
                                 default = nil)
  if valid_774115 != nil:
    section.add "X-Amz-Security-Token", valid_774115
  var valid_774116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774116 = validateParameter(valid_774116, JString, required = false,
                                 default = nil)
  if valid_774116 != nil:
    section.add "X-Amz-Content-Sha256", valid_774116
  var valid_774117 = header.getOrDefault("X-Amz-Algorithm")
  valid_774117 = validateParameter(valid_774117, JString, required = false,
                                 default = nil)
  if valid_774117 != nil:
    section.add "X-Amz-Algorithm", valid_774117
  var valid_774118 = header.getOrDefault("X-Amz-Signature")
  valid_774118 = validateParameter(valid_774118, JString, required = false,
                                 default = nil)
  if valid_774118 != nil:
    section.add "X-Amz-Signature", valid_774118
  var valid_774119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774119 = validateParameter(valid_774119, JString, required = false,
                                 default = nil)
  if valid_774119 != nil:
    section.add "X-Amz-SignedHeaders", valid_774119
  var valid_774120 = header.getOrDefault("X-Amz-Credential")
  valid_774120 = validateParameter(valid_774120, JString, required = false,
                                 default = nil)
  if valid_774120 != nil:
    section.add "X-Amz-Credential", valid_774120
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_774121 = formData.getOrDefault("DBParameterGroupName")
  valid_774121 = validateParameter(valid_774121, JString, required = true,
                                 default = nil)
  if valid_774121 != nil:
    section.add "DBParameterGroupName", valid_774121
  var valid_774122 = formData.getOrDefault("Tags")
  valid_774122 = validateParameter(valid_774122, JArray, required = false,
                                 default = nil)
  if valid_774122 != nil:
    section.add "Tags", valid_774122
  var valid_774123 = formData.getOrDefault("DBParameterGroupFamily")
  valid_774123 = validateParameter(valid_774123, JString, required = true,
                                 default = nil)
  if valid_774123 != nil:
    section.add "DBParameterGroupFamily", valid_774123
  var valid_774124 = formData.getOrDefault("Description")
  valid_774124 = validateParameter(valid_774124, JString, required = true,
                                 default = nil)
  if valid_774124 != nil:
    section.add "Description", valid_774124
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774125: Call_PostCreateDBParameterGroup_774109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_774125.validator(path, query, header, formData, body)
  let scheme = call_774125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774125.url(scheme.get, call_774125.host, call_774125.base,
                         call_774125.route, valid.getOrDefault("path"))
  result = hook(call_774125, url, valid)

proc call*(call_774126: Call_PostCreateDBParameterGroup_774109;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_774127 = newJObject()
  var formData_774128 = newJObject()
  add(formData_774128, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_774128.add "Tags", Tags
  add(query_774127, "Action", newJString(Action))
  add(formData_774128, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_774127, "Version", newJString(Version))
  add(formData_774128, "Description", newJString(Description))
  result = call_774126.call(nil, query_774127, nil, formData_774128, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_774109(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_774110, base: "/",
    url: url_PostCreateDBParameterGroup_774111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_774090 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBParameterGroup_774092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBParameterGroup_774091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_774093 = query.getOrDefault("Description")
  valid_774093 = validateParameter(valid_774093, JString, required = true,
                                 default = nil)
  if valid_774093 != nil:
    section.add "Description", valid_774093
  var valid_774094 = query.getOrDefault("DBParameterGroupFamily")
  valid_774094 = validateParameter(valid_774094, JString, required = true,
                                 default = nil)
  if valid_774094 != nil:
    section.add "DBParameterGroupFamily", valid_774094
  var valid_774095 = query.getOrDefault("Tags")
  valid_774095 = validateParameter(valid_774095, JArray, required = false,
                                 default = nil)
  if valid_774095 != nil:
    section.add "Tags", valid_774095
  var valid_774096 = query.getOrDefault("DBParameterGroupName")
  valid_774096 = validateParameter(valid_774096, JString, required = true,
                                 default = nil)
  if valid_774096 != nil:
    section.add "DBParameterGroupName", valid_774096
  var valid_774097 = query.getOrDefault("Action")
  valid_774097 = validateParameter(valid_774097, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_774097 != nil:
    section.add "Action", valid_774097
  var valid_774098 = query.getOrDefault("Version")
  valid_774098 = validateParameter(valid_774098, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774098 != nil:
    section.add "Version", valid_774098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774099 = header.getOrDefault("X-Amz-Date")
  valid_774099 = validateParameter(valid_774099, JString, required = false,
                                 default = nil)
  if valid_774099 != nil:
    section.add "X-Amz-Date", valid_774099
  var valid_774100 = header.getOrDefault("X-Amz-Security-Token")
  valid_774100 = validateParameter(valid_774100, JString, required = false,
                                 default = nil)
  if valid_774100 != nil:
    section.add "X-Amz-Security-Token", valid_774100
  var valid_774101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774101 = validateParameter(valid_774101, JString, required = false,
                                 default = nil)
  if valid_774101 != nil:
    section.add "X-Amz-Content-Sha256", valid_774101
  var valid_774102 = header.getOrDefault("X-Amz-Algorithm")
  valid_774102 = validateParameter(valid_774102, JString, required = false,
                                 default = nil)
  if valid_774102 != nil:
    section.add "X-Amz-Algorithm", valid_774102
  var valid_774103 = header.getOrDefault("X-Amz-Signature")
  valid_774103 = validateParameter(valid_774103, JString, required = false,
                                 default = nil)
  if valid_774103 != nil:
    section.add "X-Amz-Signature", valid_774103
  var valid_774104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774104 = validateParameter(valid_774104, JString, required = false,
                                 default = nil)
  if valid_774104 != nil:
    section.add "X-Amz-SignedHeaders", valid_774104
  var valid_774105 = header.getOrDefault("X-Amz-Credential")
  valid_774105 = validateParameter(valid_774105, JString, required = false,
                                 default = nil)
  if valid_774105 != nil:
    section.add "X-Amz-Credential", valid_774105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774106: Call_GetCreateDBParameterGroup_774090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_774106.validator(path, query, header, formData, body)
  let scheme = call_774106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774106.url(scheme.get, call_774106.host, call_774106.base,
                         call_774106.route, valid.getOrDefault("path"))
  result = hook(call_774106, url, valid)

proc call*(call_774107: Call_GetCreateDBParameterGroup_774090; Description: string;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774108 = newJObject()
  add(query_774108, "Description", newJString(Description))
  add(query_774108, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_774108.add "Tags", Tags
  add(query_774108, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774108, "Action", newJString(Action))
  add(query_774108, "Version", newJString(Version))
  result = call_774107.call(nil, query_774108, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_774090(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_774091, base: "/",
    url: url_GetCreateDBParameterGroup_774092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_774147 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBSecurityGroup_774149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBSecurityGroup_774148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774150 = query.getOrDefault("Action")
  valid_774150 = validateParameter(valid_774150, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_774150 != nil:
    section.add "Action", valid_774150
  var valid_774151 = query.getOrDefault("Version")
  valid_774151 = validateParameter(valid_774151, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774151 != nil:
    section.add "Version", valid_774151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774152 = header.getOrDefault("X-Amz-Date")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-Date", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-Security-Token")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-Security-Token", valid_774153
  var valid_774154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "X-Amz-Content-Sha256", valid_774154
  var valid_774155 = header.getOrDefault("X-Amz-Algorithm")
  valid_774155 = validateParameter(valid_774155, JString, required = false,
                                 default = nil)
  if valid_774155 != nil:
    section.add "X-Amz-Algorithm", valid_774155
  var valid_774156 = header.getOrDefault("X-Amz-Signature")
  valid_774156 = validateParameter(valid_774156, JString, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "X-Amz-Signature", valid_774156
  var valid_774157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774157 = validateParameter(valid_774157, JString, required = false,
                                 default = nil)
  if valid_774157 != nil:
    section.add "X-Amz-SignedHeaders", valid_774157
  var valid_774158 = header.getOrDefault("X-Amz-Credential")
  valid_774158 = validateParameter(valid_774158, JString, required = false,
                                 default = nil)
  if valid_774158 != nil:
    section.add "X-Amz-Credential", valid_774158
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_774159 = formData.getOrDefault("DBSecurityGroupName")
  valid_774159 = validateParameter(valid_774159, JString, required = true,
                                 default = nil)
  if valid_774159 != nil:
    section.add "DBSecurityGroupName", valid_774159
  var valid_774160 = formData.getOrDefault("Tags")
  valid_774160 = validateParameter(valid_774160, JArray, required = false,
                                 default = nil)
  if valid_774160 != nil:
    section.add "Tags", valid_774160
  var valid_774161 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_774161 = validateParameter(valid_774161, JString, required = true,
                                 default = nil)
  if valid_774161 != nil:
    section.add "DBSecurityGroupDescription", valid_774161
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774162: Call_PostCreateDBSecurityGroup_774147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_774162.validator(path, query, header, formData, body)
  let scheme = call_774162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774162.url(scheme.get, call_774162.host, call_774162.base,
                         call_774162.route, valid.getOrDefault("path"))
  result = hook(call_774162, url, valid)

proc call*(call_774163: Call_PostCreateDBSecurityGroup_774147;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Version: string (required)
  var query_774164 = newJObject()
  var formData_774165 = newJObject()
  add(formData_774165, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    formData_774165.add "Tags", Tags
  add(query_774164, "Action", newJString(Action))
  add(formData_774165, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_774164, "Version", newJString(Version))
  result = call_774163.call(nil, query_774164, nil, formData_774165, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_774147(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_774148, base: "/",
    url: url_PostCreateDBSecurityGroup_774149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_774129 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBSecurityGroup_774131(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBSecurityGroup_774130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_774132 = query.getOrDefault("DBSecurityGroupName")
  valid_774132 = validateParameter(valid_774132, JString, required = true,
                                 default = nil)
  if valid_774132 != nil:
    section.add "DBSecurityGroupName", valid_774132
  var valid_774133 = query.getOrDefault("DBSecurityGroupDescription")
  valid_774133 = validateParameter(valid_774133, JString, required = true,
                                 default = nil)
  if valid_774133 != nil:
    section.add "DBSecurityGroupDescription", valid_774133
  var valid_774134 = query.getOrDefault("Tags")
  valid_774134 = validateParameter(valid_774134, JArray, required = false,
                                 default = nil)
  if valid_774134 != nil:
    section.add "Tags", valid_774134
  var valid_774135 = query.getOrDefault("Action")
  valid_774135 = validateParameter(valid_774135, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_774135 != nil:
    section.add "Action", valid_774135
  var valid_774136 = query.getOrDefault("Version")
  valid_774136 = validateParameter(valid_774136, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774136 != nil:
    section.add "Version", valid_774136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774137 = header.getOrDefault("X-Amz-Date")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-Date", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-Security-Token")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-Security-Token", valid_774138
  var valid_774139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774139 = validateParameter(valid_774139, JString, required = false,
                                 default = nil)
  if valid_774139 != nil:
    section.add "X-Amz-Content-Sha256", valid_774139
  var valid_774140 = header.getOrDefault("X-Amz-Algorithm")
  valid_774140 = validateParameter(valid_774140, JString, required = false,
                                 default = nil)
  if valid_774140 != nil:
    section.add "X-Amz-Algorithm", valid_774140
  var valid_774141 = header.getOrDefault("X-Amz-Signature")
  valid_774141 = validateParameter(valid_774141, JString, required = false,
                                 default = nil)
  if valid_774141 != nil:
    section.add "X-Amz-Signature", valid_774141
  var valid_774142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774142 = validateParameter(valid_774142, JString, required = false,
                                 default = nil)
  if valid_774142 != nil:
    section.add "X-Amz-SignedHeaders", valid_774142
  var valid_774143 = header.getOrDefault("X-Amz-Credential")
  valid_774143 = validateParameter(valid_774143, JString, required = false,
                                 default = nil)
  if valid_774143 != nil:
    section.add "X-Amz-Credential", valid_774143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774144: Call_GetCreateDBSecurityGroup_774129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_774144.validator(path, query, header, formData, body)
  let scheme = call_774144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774144.url(scheme.get, call_774144.host, call_774144.base,
                         call_774144.route, valid.getOrDefault("path"))
  result = hook(call_774144, url, valid)

proc call*(call_774145: Call_GetCreateDBSecurityGroup_774129;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774146 = newJObject()
  add(query_774146, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_774146, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  if Tags != nil:
    query_774146.add "Tags", Tags
  add(query_774146, "Action", newJString(Action))
  add(query_774146, "Version", newJString(Version))
  result = call_774145.call(nil, query_774146, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_774129(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_774130, base: "/",
    url: url_GetCreateDBSecurityGroup_774131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_774184 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBSnapshot_774186(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBSnapshot_774185(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774187 = query.getOrDefault("Action")
  valid_774187 = validateParameter(valid_774187, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_774187 != nil:
    section.add "Action", valid_774187
  var valid_774188 = query.getOrDefault("Version")
  valid_774188 = validateParameter(valid_774188, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774188 != nil:
    section.add "Version", valid_774188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774189 = header.getOrDefault("X-Amz-Date")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-Date", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-Security-Token")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-Security-Token", valid_774190
  var valid_774191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774191 = validateParameter(valid_774191, JString, required = false,
                                 default = nil)
  if valid_774191 != nil:
    section.add "X-Amz-Content-Sha256", valid_774191
  var valid_774192 = header.getOrDefault("X-Amz-Algorithm")
  valid_774192 = validateParameter(valid_774192, JString, required = false,
                                 default = nil)
  if valid_774192 != nil:
    section.add "X-Amz-Algorithm", valid_774192
  var valid_774193 = header.getOrDefault("X-Amz-Signature")
  valid_774193 = validateParameter(valid_774193, JString, required = false,
                                 default = nil)
  if valid_774193 != nil:
    section.add "X-Amz-Signature", valid_774193
  var valid_774194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774194 = validateParameter(valid_774194, JString, required = false,
                                 default = nil)
  if valid_774194 != nil:
    section.add "X-Amz-SignedHeaders", valid_774194
  var valid_774195 = header.getOrDefault("X-Amz-Credential")
  valid_774195 = validateParameter(valid_774195, JString, required = false,
                                 default = nil)
  if valid_774195 != nil:
    section.add "X-Amz-Credential", valid_774195
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_774196 = formData.getOrDefault("DBInstanceIdentifier")
  valid_774196 = validateParameter(valid_774196, JString, required = true,
                                 default = nil)
  if valid_774196 != nil:
    section.add "DBInstanceIdentifier", valid_774196
  var valid_774197 = formData.getOrDefault("Tags")
  valid_774197 = validateParameter(valid_774197, JArray, required = false,
                                 default = nil)
  if valid_774197 != nil:
    section.add "Tags", valid_774197
  var valid_774198 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_774198 = validateParameter(valid_774198, JString, required = true,
                                 default = nil)
  if valid_774198 != nil:
    section.add "DBSnapshotIdentifier", valid_774198
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774199: Call_PostCreateDBSnapshot_774184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_774199.validator(path, query, header, formData, body)
  let scheme = call_774199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774199.url(scheme.get, call_774199.host, call_774199.base,
                         call_774199.route, valid.getOrDefault("path"))
  result = hook(call_774199, url, valid)

proc call*(call_774200: Call_PostCreateDBSnapshot_774184;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774201 = newJObject()
  var formData_774202 = newJObject()
  add(formData_774202, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if Tags != nil:
    formData_774202.add "Tags", Tags
  add(formData_774202, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_774201, "Action", newJString(Action))
  add(query_774201, "Version", newJString(Version))
  result = call_774200.call(nil, query_774201, nil, formData_774202, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_774184(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_774185, base: "/",
    url: url_PostCreateDBSnapshot_774186, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_774166 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBSnapshot_774168(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBSnapshot_774167(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  var valid_774169 = query.getOrDefault("Tags")
  valid_774169 = validateParameter(valid_774169, JArray, required = false,
                                 default = nil)
  if valid_774169 != nil:
    section.add "Tags", valid_774169
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774170 = query.getOrDefault("Action")
  valid_774170 = validateParameter(valid_774170, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_774170 != nil:
    section.add "Action", valid_774170
  var valid_774171 = query.getOrDefault("Version")
  valid_774171 = validateParameter(valid_774171, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774171 != nil:
    section.add "Version", valid_774171
  var valid_774172 = query.getOrDefault("DBInstanceIdentifier")
  valid_774172 = validateParameter(valid_774172, JString, required = true,
                                 default = nil)
  if valid_774172 != nil:
    section.add "DBInstanceIdentifier", valid_774172
  var valid_774173 = query.getOrDefault("DBSnapshotIdentifier")
  valid_774173 = validateParameter(valid_774173, JString, required = true,
                                 default = nil)
  if valid_774173 != nil:
    section.add "DBSnapshotIdentifier", valid_774173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774174 = header.getOrDefault("X-Amz-Date")
  valid_774174 = validateParameter(valid_774174, JString, required = false,
                                 default = nil)
  if valid_774174 != nil:
    section.add "X-Amz-Date", valid_774174
  var valid_774175 = header.getOrDefault("X-Amz-Security-Token")
  valid_774175 = validateParameter(valid_774175, JString, required = false,
                                 default = nil)
  if valid_774175 != nil:
    section.add "X-Amz-Security-Token", valid_774175
  var valid_774176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774176 = validateParameter(valid_774176, JString, required = false,
                                 default = nil)
  if valid_774176 != nil:
    section.add "X-Amz-Content-Sha256", valid_774176
  var valid_774177 = header.getOrDefault("X-Amz-Algorithm")
  valid_774177 = validateParameter(valid_774177, JString, required = false,
                                 default = nil)
  if valid_774177 != nil:
    section.add "X-Amz-Algorithm", valid_774177
  var valid_774178 = header.getOrDefault("X-Amz-Signature")
  valid_774178 = validateParameter(valid_774178, JString, required = false,
                                 default = nil)
  if valid_774178 != nil:
    section.add "X-Amz-Signature", valid_774178
  var valid_774179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774179 = validateParameter(valid_774179, JString, required = false,
                                 default = nil)
  if valid_774179 != nil:
    section.add "X-Amz-SignedHeaders", valid_774179
  var valid_774180 = header.getOrDefault("X-Amz-Credential")
  valid_774180 = validateParameter(valid_774180, JString, required = false,
                                 default = nil)
  if valid_774180 != nil:
    section.add "X-Amz-Credential", valid_774180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774181: Call_GetCreateDBSnapshot_774166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_774181.validator(path, query, header, formData, body)
  let scheme = call_774181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774181.url(scheme.get, call_774181.host, call_774181.base,
                         call_774181.route, valid.getOrDefault("path"))
  result = hook(call_774181, url, valid)

proc call*(call_774182: Call_GetCreateDBSnapshot_774166;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  var query_774183 = newJObject()
  if Tags != nil:
    query_774183.add "Tags", Tags
  add(query_774183, "Action", newJString(Action))
  add(query_774183, "Version", newJString(Version))
  add(query_774183, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_774183, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_774182.call(nil, query_774183, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_774166(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_774167, base: "/",
    url: url_GetCreateDBSnapshot_774168, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_774222 = ref object of OpenApiRestCall_772581
proc url_PostCreateDBSubnetGroup_774224(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateDBSubnetGroup_774223(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774225 = query.getOrDefault("Action")
  valid_774225 = validateParameter(valid_774225, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_774225 != nil:
    section.add "Action", valid_774225
  var valid_774226 = query.getOrDefault("Version")
  valid_774226 = validateParameter(valid_774226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774226 != nil:
    section.add "Version", valid_774226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774227 = header.getOrDefault("X-Amz-Date")
  valid_774227 = validateParameter(valid_774227, JString, required = false,
                                 default = nil)
  if valid_774227 != nil:
    section.add "X-Amz-Date", valid_774227
  var valid_774228 = header.getOrDefault("X-Amz-Security-Token")
  valid_774228 = validateParameter(valid_774228, JString, required = false,
                                 default = nil)
  if valid_774228 != nil:
    section.add "X-Amz-Security-Token", valid_774228
  var valid_774229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774229 = validateParameter(valid_774229, JString, required = false,
                                 default = nil)
  if valid_774229 != nil:
    section.add "X-Amz-Content-Sha256", valid_774229
  var valid_774230 = header.getOrDefault("X-Amz-Algorithm")
  valid_774230 = validateParameter(valid_774230, JString, required = false,
                                 default = nil)
  if valid_774230 != nil:
    section.add "X-Amz-Algorithm", valid_774230
  var valid_774231 = header.getOrDefault("X-Amz-Signature")
  valid_774231 = validateParameter(valid_774231, JString, required = false,
                                 default = nil)
  if valid_774231 != nil:
    section.add "X-Amz-Signature", valid_774231
  var valid_774232 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774232 = validateParameter(valid_774232, JString, required = false,
                                 default = nil)
  if valid_774232 != nil:
    section.add "X-Amz-SignedHeaders", valid_774232
  var valid_774233 = header.getOrDefault("X-Amz-Credential")
  valid_774233 = validateParameter(valid_774233, JString, required = false,
                                 default = nil)
  if valid_774233 != nil:
    section.add "X-Amz-Credential", valid_774233
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_774234 = formData.getOrDefault("Tags")
  valid_774234 = validateParameter(valid_774234, JArray, required = false,
                                 default = nil)
  if valid_774234 != nil:
    section.add "Tags", valid_774234
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_774235 = formData.getOrDefault("DBSubnetGroupName")
  valid_774235 = validateParameter(valid_774235, JString, required = true,
                                 default = nil)
  if valid_774235 != nil:
    section.add "DBSubnetGroupName", valid_774235
  var valid_774236 = formData.getOrDefault("SubnetIds")
  valid_774236 = validateParameter(valid_774236, JArray, required = true, default = nil)
  if valid_774236 != nil:
    section.add "SubnetIds", valid_774236
  var valid_774237 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_774237 = validateParameter(valid_774237, JString, required = true,
                                 default = nil)
  if valid_774237 != nil:
    section.add "DBSubnetGroupDescription", valid_774237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774238: Call_PostCreateDBSubnetGroup_774222; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_774238.validator(path, query, header, formData, body)
  let scheme = call_774238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774238.url(scheme.get, call_774238.host, call_774238.base,
                         call_774238.route, valid.getOrDefault("path"))
  result = hook(call_774238, url, valid)

proc call*(call_774239: Call_PostCreateDBSubnetGroup_774222;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_774240 = newJObject()
  var formData_774241 = newJObject()
  if Tags != nil:
    formData_774241.add "Tags", Tags
  add(formData_774241, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_774241.add "SubnetIds", SubnetIds
  add(query_774240, "Action", newJString(Action))
  add(formData_774241, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_774240, "Version", newJString(Version))
  result = call_774239.call(nil, query_774240, nil, formData_774241, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_774222(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_774223, base: "/",
    url: url_PostCreateDBSubnetGroup_774224, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_774203 = ref object of OpenApiRestCall_772581
proc url_GetCreateDBSubnetGroup_774205(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateDBSubnetGroup_774204(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774206 = query.getOrDefault("Tags")
  valid_774206 = validateParameter(valid_774206, JArray, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "Tags", valid_774206
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774207 = query.getOrDefault("Action")
  valid_774207 = validateParameter(valid_774207, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_774207 != nil:
    section.add "Action", valid_774207
  var valid_774208 = query.getOrDefault("DBSubnetGroupName")
  valid_774208 = validateParameter(valid_774208, JString, required = true,
                                 default = nil)
  if valid_774208 != nil:
    section.add "DBSubnetGroupName", valid_774208
  var valid_774209 = query.getOrDefault("SubnetIds")
  valid_774209 = validateParameter(valid_774209, JArray, required = true, default = nil)
  if valid_774209 != nil:
    section.add "SubnetIds", valid_774209
  var valid_774210 = query.getOrDefault("DBSubnetGroupDescription")
  valid_774210 = validateParameter(valid_774210, JString, required = true,
                                 default = nil)
  if valid_774210 != nil:
    section.add "DBSubnetGroupDescription", valid_774210
  var valid_774211 = query.getOrDefault("Version")
  valid_774211 = validateParameter(valid_774211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774211 != nil:
    section.add "Version", valid_774211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774212 = header.getOrDefault("X-Amz-Date")
  valid_774212 = validateParameter(valid_774212, JString, required = false,
                                 default = nil)
  if valid_774212 != nil:
    section.add "X-Amz-Date", valid_774212
  var valid_774213 = header.getOrDefault("X-Amz-Security-Token")
  valid_774213 = validateParameter(valid_774213, JString, required = false,
                                 default = nil)
  if valid_774213 != nil:
    section.add "X-Amz-Security-Token", valid_774213
  var valid_774214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774214 = validateParameter(valid_774214, JString, required = false,
                                 default = nil)
  if valid_774214 != nil:
    section.add "X-Amz-Content-Sha256", valid_774214
  var valid_774215 = header.getOrDefault("X-Amz-Algorithm")
  valid_774215 = validateParameter(valid_774215, JString, required = false,
                                 default = nil)
  if valid_774215 != nil:
    section.add "X-Amz-Algorithm", valid_774215
  var valid_774216 = header.getOrDefault("X-Amz-Signature")
  valid_774216 = validateParameter(valid_774216, JString, required = false,
                                 default = nil)
  if valid_774216 != nil:
    section.add "X-Amz-Signature", valid_774216
  var valid_774217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774217 = validateParameter(valid_774217, JString, required = false,
                                 default = nil)
  if valid_774217 != nil:
    section.add "X-Amz-SignedHeaders", valid_774217
  var valid_774218 = header.getOrDefault("X-Amz-Credential")
  valid_774218 = validateParameter(valid_774218, JString, required = false,
                                 default = nil)
  if valid_774218 != nil:
    section.add "X-Amz-Credential", valid_774218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774219: Call_GetCreateDBSubnetGroup_774203; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_774219.validator(path, query, header, formData, body)
  let scheme = call_774219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774219.url(scheme.get, call_774219.host, call_774219.base,
                         call_774219.route, valid.getOrDefault("path"))
  result = hook(call_774219, url, valid)

proc call*(call_774220: Call_GetCreateDBSubnetGroup_774203;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_774221 = newJObject()
  if Tags != nil:
    query_774221.add "Tags", Tags
  add(query_774221, "Action", newJString(Action))
  add(query_774221, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_774221.add "SubnetIds", SubnetIds
  add(query_774221, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_774221, "Version", newJString(Version))
  result = call_774220.call(nil, query_774221, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_774203(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_774204, base: "/",
    url: url_GetCreateDBSubnetGroup_774205, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_774264 = ref object of OpenApiRestCall_772581
proc url_PostCreateEventSubscription_774266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateEventSubscription_774265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774267 = query.getOrDefault("Action")
  valid_774267 = validateParameter(valid_774267, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_774267 != nil:
    section.add "Action", valid_774267
  var valid_774268 = query.getOrDefault("Version")
  valid_774268 = validateParameter(valid_774268, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774268 != nil:
    section.add "Version", valid_774268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774269 = header.getOrDefault("X-Amz-Date")
  valid_774269 = validateParameter(valid_774269, JString, required = false,
                                 default = nil)
  if valid_774269 != nil:
    section.add "X-Amz-Date", valid_774269
  var valid_774270 = header.getOrDefault("X-Amz-Security-Token")
  valid_774270 = validateParameter(valid_774270, JString, required = false,
                                 default = nil)
  if valid_774270 != nil:
    section.add "X-Amz-Security-Token", valid_774270
  var valid_774271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774271 = validateParameter(valid_774271, JString, required = false,
                                 default = nil)
  if valid_774271 != nil:
    section.add "X-Amz-Content-Sha256", valid_774271
  var valid_774272 = header.getOrDefault("X-Amz-Algorithm")
  valid_774272 = validateParameter(valid_774272, JString, required = false,
                                 default = nil)
  if valid_774272 != nil:
    section.add "X-Amz-Algorithm", valid_774272
  var valid_774273 = header.getOrDefault("X-Amz-Signature")
  valid_774273 = validateParameter(valid_774273, JString, required = false,
                                 default = nil)
  if valid_774273 != nil:
    section.add "X-Amz-Signature", valid_774273
  var valid_774274 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774274 = validateParameter(valid_774274, JString, required = false,
                                 default = nil)
  if valid_774274 != nil:
    section.add "X-Amz-SignedHeaders", valid_774274
  var valid_774275 = header.getOrDefault("X-Amz-Credential")
  valid_774275 = validateParameter(valid_774275, JString, required = false,
                                 default = nil)
  if valid_774275 != nil:
    section.add "X-Amz-Credential", valid_774275
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_774276 = formData.getOrDefault("Enabled")
  valid_774276 = validateParameter(valid_774276, JBool, required = false, default = nil)
  if valid_774276 != nil:
    section.add "Enabled", valid_774276
  var valid_774277 = formData.getOrDefault("EventCategories")
  valid_774277 = validateParameter(valid_774277, JArray, required = false,
                                 default = nil)
  if valid_774277 != nil:
    section.add "EventCategories", valid_774277
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_774278 = formData.getOrDefault("SnsTopicArn")
  valid_774278 = validateParameter(valid_774278, JString, required = true,
                                 default = nil)
  if valid_774278 != nil:
    section.add "SnsTopicArn", valid_774278
  var valid_774279 = formData.getOrDefault("SourceIds")
  valid_774279 = validateParameter(valid_774279, JArray, required = false,
                                 default = nil)
  if valid_774279 != nil:
    section.add "SourceIds", valid_774279
  var valid_774280 = formData.getOrDefault("Tags")
  valid_774280 = validateParameter(valid_774280, JArray, required = false,
                                 default = nil)
  if valid_774280 != nil:
    section.add "Tags", valid_774280
  var valid_774281 = formData.getOrDefault("SubscriptionName")
  valid_774281 = validateParameter(valid_774281, JString, required = true,
                                 default = nil)
  if valid_774281 != nil:
    section.add "SubscriptionName", valid_774281
  var valid_774282 = formData.getOrDefault("SourceType")
  valid_774282 = validateParameter(valid_774282, JString, required = false,
                                 default = nil)
  if valid_774282 != nil:
    section.add "SourceType", valid_774282
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774283: Call_PostCreateEventSubscription_774264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_774283.validator(path, query, header, formData, body)
  let scheme = call_774283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774283.url(scheme.get, call_774283.host, call_774283.base,
                         call_774283.route, valid.getOrDefault("path"))
  result = hook(call_774283, url, valid)

proc call*(call_774284: Call_PostCreateEventSubscription_774264;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_774285 = newJObject()
  var formData_774286 = newJObject()
  add(formData_774286, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_774286.add "EventCategories", EventCategories
  add(formData_774286, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_774286.add "SourceIds", SourceIds
  if Tags != nil:
    formData_774286.add "Tags", Tags
  add(formData_774286, "SubscriptionName", newJString(SubscriptionName))
  add(query_774285, "Action", newJString(Action))
  add(query_774285, "Version", newJString(Version))
  add(formData_774286, "SourceType", newJString(SourceType))
  result = call_774284.call(nil, query_774285, nil, formData_774286, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_774264(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_774265, base: "/",
    url: url_PostCreateEventSubscription_774266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_774242 = ref object of OpenApiRestCall_772581
proc url_GetCreateEventSubscription_774244(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateEventSubscription_774243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774245 = query.getOrDefault("SourceType")
  valid_774245 = validateParameter(valid_774245, JString, required = false,
                                 default = nil)
  if valid_774245 != nil:
    section.add "SourceType", valid_774245
  var valid_774246 = query.getOrDefault("SourceIds")
  valid_774246 = validateParameter(valid_774246, JArray, required = false,
                                 default = nil)
  if valid_774246 != nil:
    section.add "SourceIds", valid_774246
  var valid_774247 = query.getOrDefault("Enabled")
  valid_774247 = validateParameter(valid_774247, JBool, required = false, default = nil)
  if valid_774247 != nil:
    section.add "Enabled", valid_774247
  var valid_774248 = query.getOrDefault("Tags")
  valid_774248 = validateParameter(valid_774248, JArray, required = false,
                                 default = nil)
  if valid_774248 != nil:
    section.add "Tags", valid_774248
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774249 = query.getOrDefault("Action")
  valid_774249 = validateParameter(valid_774249, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_774249 != nil:
    section.add "Action", valid_774249
  var valid_774250 = query.getOrDefault("SnsTopicArn")
  valid_774250 = validateParameter(valid_774250, JString, required = true,
                                 default = nil)
  if valid_774250 != nil:
    section.add "SnsTopicArn", valid_774250
  var valid_774251 = query.getOrDefault("EventCategories")
  valid_774251 = validateParameter(valid_774251, JArray, required = false,
                                 default = nil)
  if valid_774251 != nil:
    section.add "EventCategories", valid_774251
  var valid_774252 = query.getOrDefault("SubscriptionName")
  valid_774252 = validateParameter(valid_774252, JString, required = true,
                                 default = nil)
  if valid_774252 != nil:
    section.add "SubscriptionName", valid_774252
  var valid_774253 = query.getOrDefault("Version")
  valid_774253 = validateParameter(valid_774253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774253 != nil:
    section.add "Version", valid_774253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774254 = header.getOrDefault("X-Amz-Date")
  valid_774254 = validateParameter(valid_774254, JString, required = false,
                                 default = nil)
  if valid_774254 != nil:
    section.add "X-Amz-Date", valid_774254
  var valid_774255 = header.getOrDefault("X-Amz-Security-Token")
  valid_774255 = validateParameter(valid_774255, JString, required = false,
                                 default = nil)
  if valid_774255 != nil:
    section.add "X-Amz-Security-Token", valid_774255
  var valid_774256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-Content-Sha256", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-Algorithm")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-Algorithm", valid_774257
  var valid_774258 = header.getOrDefault("X-Amz-Signature")
  valid_774258 = validateParameter(valid_774258, JString, required = false,
                                 default = nil)
  if valid_774258 != nil:
    section.add "X-Amz-Signature", valid_774258
  var valid_774259 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774259 = validateParameter(valid_774259, JString, required = false,
                                 default = nil)
  if valid_774259 != nil:
    section.add "X-Amz-SignedHeaders", valid_774259
  var valid_774260 = header.getOrDefault("X-Amz-Credential")
  valid_774260 = validateParameter(valid_774260, JString, required = false,
                                 default = nil)
  if valid_774260 != nil:
    section.add "X-Amz-Credential", valid_774260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774261: Call_GetCreateEventSubscription_774242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ## 
  let valid = call_774261.validator(path, query, header, formData, body)
  let scheme = call_774261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774261.url(scheme.get, call_774261.host, call_774261.base,
                         call_774261.route, valid.getOrDefault("path"))
  result = hook(call_774261, url, valid)

proc call*(call_774262: Call_GetCreateEventSubscription_774242;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription is not activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_774263 = newJObject()
  add(query_774263, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_774263.add "SourceIds", SourceIds
  add(query_774263, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_774263.add "Tags", Tags
  add(query_774263, "Action", newJString(Action))
  add(query_774263, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_774263.add "EventCategories", EventCategories
  add(query_774263, "SubscriptionName", newJString(SubscriptionName))
  add(query_774263, "Version", newJString(Version))
  result = call_774262.call(nil, query_774263, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_774242(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_774243, base: "/",
    url: url_GetCreateEventSubscription_774244,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_774309 = ref object of OpenApiRestCall_772581
proc url_PostCreateGlobalCluster_774311(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateGlobalCluster_774310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774312 = query.getOrDefault("Action")
  valid_774312 = validateParameter(valid_774312, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_774312 != nil:
    section.add "Action", valid_774312
  var valid_774313 = query.getOrDefault("Version")
  valid_774313 = validateParameter(valid_774313, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774313 != nil:
    section.add "Version", valid_774313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774314 = header.getOrDefault("X-Amz-Date")
  valid_774314 = validateParameter(valid_774314, JString, required = false,
                                 default = nil)
  if valid_774314 != nil:
    section.add "X-Amz-Date", valid_774314
  var valid_774315 = header.getOrDefault("X-Amz-Security-Token")
  valid_774315 = validateParameter(valid_774315, JString, required = false,
                                 default = nil)
  if valid_774315 != nil:
    section.add "X-Amz-Security-Token", valid_774315
  var valid_774316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774316 = validateParameter(valid_774316, JString, required = false,
                                 default = nil)
  if valid_774316 != nil:
    section.add "X-Amz-Content-Sha256", valid_774316
  var valid_774317 = header.getOrDefault("X-Amz-Algorithm")
  valid_774317 = validateParameter(valid_774317, JString, required = false,
                                 default = nil)
  if valid_774317 != nil:
    section.add "X-Amz-Algorithm", valid_774317
  var valid_774318 = header.getOrDefault("X-Amz-Signature")
  valid_774318 = validateParameter(valid_774318, JString, required = false,
                                 default = nil)
  if valid_774318 != nil:
    section.add "X-Amz-Signature", valid_774318
  var valid_774319 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "X-Amz-SignedHeaders", valid_774319
  var valid_774320 = header.getOrDefault("X-Amz-Credential")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "X-Amz-Credential", valid_774320
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  section = newJObject()
  var valid_774321 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "SourceDBClusterIdentifier", valid_774321
  var valid_774322 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_774322 = validateParameter(valid_774322, JString, required = false,
                                 default = nil)
  if valid_774322 != nil:
    section.add "GlobalClusterIdentifier", valid_774322
  var valid_774323 = formData.getOrDefault("Engine")
  valid_774323 = validateParameter(valid_774323, JString, required = false,
                                 default = nil)
  if valid_774323 != nil:
    section.add "Engine", valid_774323
  var valid_774324 = formData.getOrDefault("DeletionProtection")
  valid_774324 = validateParameter(valid_774324, JBool, required = false, default = nil)
  if valid_774324 != nil:
    section.add "DeletionProtection", valid_774324
  var valid_774325 = formData.getOrDefault("DatabaseName")
  valid_774325 = validateParameter(valid_774325, JString, required = false,
                                 default = nil)
  if valid_774325 != nil:
    section.add "DatabaseName", valid_774325
  var valid_774326 = formData.getOrDefault("StorageEncrypted")
  valid_774326 = validateParameter(valid_774326, JBool, required = false, default = nil)
  if valid_774326 != nil:
    section.add "StorageEncrypted", valid_774326
  var valid_774327 = formData.getOrDefault("EngineVersion")
  valid_774327 = validateParameter(valid_774327, JString, required = false,
                                 default = nil)
  if valid_774327 != nil:
    section.add "EngineVersion", valid_774327
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774328: Call_PostCreateGlobalCluster_774309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774328.validator(path, query, header, formData, body)
  let scheme = call_774328.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774328.url(scheme.get, call_774328.host, call_774328.base,
                         call_774328.route, valid.getOrDefault("path"))
  result = hook(call_774328, url, valid)

proc call*(call_774329: Call_PostCreateGlobalCluster_774309;
          SourceDBClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; Engine: string = "";
          DeletionProtection: bool = false; Action: string = "CreateGlobalCluster";
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Version: string (required)
  var query_774330 = newJObject()
  var formData_774331 = newJObject()
  add(formData_774331, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_774331, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_774331, "Engine", newJString(Engine))
  add(formData_774331, "DeletionProtection", newJBool(DeletionProtection))
  add(query_774330, "Action", newJString(Action))
  add(formData_774331, "DatabaseName", newJString(DatabaseName))
  add(formData_774331, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_774331, "EngineVersion", newJString(EngineVersion))
  add(query_774330, "Version", newJString(Version))
  result = call_774329.call(nil, query_774330, nil, formData_774331, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_774309(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_774310, base: "/",
    url: url_PostCreateGlobalCluster_774311, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_774287 = ref object of OpenApiRestCall_772581
proc url_GetCreateGlobalCluster_774289(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateGlobalCluster_774288(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_774290 = query.getOrDefault("Engine")
  valid_774290 = validateParameter(valid_774290, JString, required = false,
                                 default = nil)
  if valid_774290 != nil:
    section.add "Engine", valid_774290
  var valid_774291 = query.getOrDefault("StorageEncrypted")
  valid_774291 = validateParameter(valid_774291, JBool, required = false, default = nil)
  if valid_774291 != nil:
    section.add "StorageEncrypted", valid_774291
  var valid_774292 = query.getOrDefault("DatabaseName")
  valid_774292 = validateParameter(valid_774292, JString, required = false,
                                 default = nil)
  if valid_774292 != nil:
    section.add "DatabaseName", valid_774292
  var valid_774293 = query.getOrDefault("DeletionProtection")
  valid_774293 = validateParameter(valid_774293, JBool, required = false, default = nil)
  if valid_774293 != nil:
    section.add "DeletionProtection", valid_774293
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774294 = query.getOrDefault("Action")
  valid_774294 = validateParameter(valid_774294, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_774294 != nil:
    section.add "Action", valid_774294
  var valid_774295 = query.getOrDefault("GlobalClusterIdentifier")
  valid_774295 = validateParameter(valid_774295, JString, required = false,
                                 default = nil)
  if valid_774295 != nil:
    section.add "GlobalClusterIdentifier", valid_774295
  var valid_774296 = query.getOrDefault("EngineVersion")
  valid_774296 = validateParameter(valid_774296, JString, required = false,
                                 default = nil)
  if valid_774296 != nil:
    section.add "EngineVersion", valid_774296
  var valid_774297 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_774297 = validateParameter(valid_774297, JString, required = false,
                                 default = nil)
  if valid_774297 != nil:
    section.add "SourceDBClusterIdentifier", valid_774297
  var valid_774298 = query.getOrDefault("Version")
  valid_774298 = validateParameter(valid_774298, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774298 != nil:
    section.add "Version", valid_774298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774299 = header.getOrDefault("X-Amz-Date")
  valid_774299 = validateParameter(valid_774299, JString, required = false,
                                 default = nil)
  if valid_774299 != nil:
    section.add "X-Amz-Date", valid_774299
  var valid_774300 = header.getOrDefault("X-Amz-Security-Token")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Security-Token", valid_774300
  var valid_774301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774301 = validateParameter(valid_774301, JString, required = false,
                                 default = nil)
  if valid_774301 != nil:
    section.add "X-Amz-Content-Sha256", valid_774301
  var valid_774302 = header.getOrDefault("X-Amz-Algorithm")
  valid_774302 = validateParameter(valid_774302, JString, required = false,
                                 default = nil)
  if valid_774302 != nil:
    section.add "X-Amz-Algorithm", valid_774302
  var valid_774303 = header.getOrDefault("X-Amz-Signature")
  valid_774303 = validateParameter(valid_774303, JString, required = false,
                                 default = nil)
  if valid_774303 != nil:
    section.add "X-Amz-Signature", valid_774303
  var valid_774304 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774304 = validateParameter(valid_774304, JString, required = false,
                                 default = nil)
  if valid_774304 != nil:
    section.add "X-Amz-SignedHeaders", valid_774304
  var valid_774305 = header.getOrDefault("X-Amz-Credential")
  valid_774305 = validateParameter(valid_774305, JString, required = false,
                                 default = nil)
  if valid_774305 != nil:
    section.add "X-Amz-Credential", valid_774305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774306: Call_GetCreateGlobalCluster_774287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774306.validator(path, query, header, formData, body)
  let scheme = call_774306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774306.url(scheme.get, call_774306.host, call_774306.base,
                         call_774306.route, valid.getOrDefault("path"))
  result = hook(call_774306, url, valid)

proc call*(call_774307: Call_GetCreateGlobalCluster_774287; Engine: string = "";
          StorageEncrypted: bool = false; DatabaseName: string = "";
          DeletionProtection: bool = false; Action: string = "CreateGlobalCluster";
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          SourceDBClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: string (required)
  var query_774308 = newJObject()
  add(query_774308, "Engine", newJString(Engine))
  add(query_774308, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_774308, "DatabaseName", newJString(DatabaseName))
  add(query_774308, "DeletionProtection", newJBool(DeletionProtection))
  add(query_774308, "Action", newJString(Action))
  add(query_774308, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_774308, "EngineVersion", newJString(EngineVersion))
  add(query_774308, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_774308, "Version", newJString(Version))
  result = call_774307.call(nil, query_774308, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_774287(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_774288, base: "/",
    url: url_GetCreateGlobalCluster_774289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_774352 = ref object of OpenApiRestCall_772581
proc url_PostCreateOptionGroup_774354(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateOptionGroup_774353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774355 = query.getOrDefault("Action")
  valid_774355 = validateParameter(valid_774355, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_774355 != nil:
    section.add "Action", valid_774355
  var valid_774356 = query.getOrDefault("Version")
  valid_774356 = validateParameter(valid_774356, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774356 != nil:
    section.add "Version", valid_774356
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774357 = header.getOrDefault("X-Amz-Date")
  valid_774357 = validateParameter(valid_774357, JString, required = false,
                                 default = nil)
  if valid_774357 != nil:
    section.add "X-Amz-Date", valid_774357
  var valid_774358 = header.getOrDefault("X-Amz-Security-Token")
  valid_774358 = validateParameter(valid_774358, JString, required = false,
                                 default = nil)
  if valid_774358 != nil:
    section.add "X-Amz-Security-Token", valid_774358
  var valid_774359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774359 = validateParameter(valid_774359, JString, required = false,
                                 default = nil)
  if valid_774359 != nil:
    section.add "X-Amz-Content-Sha256", valid_774359
  var valid_774360 = header.getOrDefault("X-Amz-Algorithm")
  valid_774360 = validateParameter(valid_774360, JString, required = false,
                                 default = nil)
  if valid_774360 != nil:
    section.add "X-Amz-Algorithm", valid_774360
  var valid_774361 = header.getOrDefault("X-Amz-Signature")
  valid_774361 = validateParameter(valid_774361, JString, required = false,
                                 default = nil)
  if valid_774361 != nil:
    section.add "X-Amz-Signature", valid_774361
  var valid_774362 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774362 = validateParameter(valid_774362, JString, required = false,
                                 default = nil)
  if valid_774362 != nil:
    section.add "X-Amz-SignedHeaders", valid_774362
  var valid_774363 = header.getOrDefault("X-Amz-Credential")
  valid_774363 = validateParameter(valid_774363, JString, required = false,
                                 default = nil)
  if valid_774363 != nil:
    section.add "X-Amz-Credential", valid_774363
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `MajorEngineVersion` field"
  var valid_774364 = formData.getOrDefault("MajorEngineVersion")
  valid_774364 = validateParameter(valid_774364, JString, required = true,
                                 default = nil)
  if valid_774364 != nil:
    section.add "MajorEngineVersion", valid_774364
  var valid_774365 = formData.getOrDefault("OptionGroupName")
  valid_774365 = validateParameter(valid_774365, JString, required = true,
                                 default = nil)
  if valid_774365 != nil:
    section.add "OptionGroupName", valid_774365
  var valid_774366 = formData.getOrDefault("Tags")
  valid_774366 = validateParameter(valid_774366, JArray, required = false,
                                 default = nil)
  if valid_774366 != nil:
    section.add "Tags", valid_774366
  var valid_774367 = formData.getOrDefault("EngineName")
  valid_774367 = validateParameter(valid_774367, JString, required = true,
                                 default = nil)
  if valid_774367 != nil:
    section.add "EngineName", valid_774367
  var valid_774368 = formData.getOrDefault("OptionGroupDescription")
  valid_774368 = validateParameter(valid_774368, JString, required = true,
                                 default = nil)
  if valid_774368 != nil:
    section.add "OptionGroupDescription", valid_774368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774369: Call_PostCreateOptionGroup_774352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_774369.validator(path, query, header, formData, body)
  let scheme = call_774369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774369.url(scheme.get, call_774369.host, call_774369.base,
                         call_774369.route, valid.getOrDefault("path"))
  result = hook(call_774369, url, valid)

proc call*(call_774370: Call_PostCreateOptionGroup_774352;
          MajorEngineVersion: string; OptionGroupName: string; EngineName: string;
          OptionGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Version: string (required)
  var query_774371 = newJObject()
  var formData_774372 = newJObject()
  add(formData_774372, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_774372, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_774372.add "Tags", Tags
  add(query_774371, "Action", newJString(Action))
  add(formData_774372, "EngineName", newJString(EngineName))
  add(formData_774372, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(query_774371, "Version", newJString(Version))
  result = call_774370.call(nil, query_774371, nil, formData_774372, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_774352(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_774353, base: "/",
    url: url_PostCreateOptionGroup_774354, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_774332 = ref object of OpenApiRestCall_772581
proc url_GetCreateOptionGroup_774334(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateOptionGroup_774333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_774335 = query.getOrDefault("OptionGroupName")
  valid_774335 = validateParameter(valid_774335, JString, required = true,
                                 default = nil)
  if valid_774335 != nil:
    section.add "OptionGroupName", valid_774335
  var valid_774336 = query.getOrDefault("Tags")
  valid_774336 = validateParameter(valid_774336, JArray, required = false,
                                 default = nil)
  if valid_774336 != nil:
    section.add "Tags", valid_774336
  var valid_774337 = query.getOrDefault("OptionGroupDescription")
  valid_774337 = validateParameter(valid_774337, JString, required = true,
                                 default = nil)
  if valid_774337 != nil:
    section.add "OptionGroupDescription", valid_774337
  var valid_774338 = query.getOrDefault("Action")
  valid_774338 = validateParameter(valid_774338, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_774338 != nil:
    section.add "Action", valid_774338
  var valid_774339 = query.getOrDefault("Version")
  valid_774339 = validateParameter(valid_774339, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774339 != nil:
    section.add "Version", valid_774339
  var valid_774340 = query.getOrDefault("EngineName")
  valid_774340 = validateParameter(valid_774340, JString, required = true,
                                 default = nil)
  if valid_774340 != nil:
    section.add "EngineName", valid_774340
  var valid_774341 = query.getOrDefault("MajorEngineVersion")
  valid_774341 = validateParameter(valid_774341, JString, required = true,
                                 default = nil)
  if valid_774341 != nil:
    section.add "MajorEngineVersion", valid_774341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774342 = header.getOrDefault("X-Amz-Date")
  valid_774342 = validateParameter(valid_774342, JString, required = false,
                                 default = nil)
  if valid_774342 != nil:
    section.add "X-Amz-Date", valid_774342
  var valid_774343 = header.getOrDefault("X-Amz-Security-Token")
  valid_774343 = validateParameter(valid_774343, JString, required = false,
                                 default = nil)
  if valid_774343 != nil:
    section.add "X-Amz-Security-Token", valid_774343
  var valid_774344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774344 = validateParameter(valid_774344, JString, required = false,
                                 default = nil)
  if valid_774344 != nil:
    section.add "X-Amz-Content-Sha256", valid_774344
  var valid_774345 = header.getOrDefault("X-Amz-Algorithm")
  valid_774345 = validateParameter(valid_774345, JString, required = false,
                                 default = nil)
  if valid_774345 != nil:
    section.add "X-Amz-Algorithm", valid_774345
  var valid_774346 = header.getOrDefault("X-Amz-Signature")
  valid_774346 = validateParameter(valid_774346, JString, required = false,
                                 default = nil)
  if valid_774346 != nil:
    section.add "X-Amz-Signature", valid_774346
  var valid_774347 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774347 = validateParameter(valid_774347, JString, required = false,
                                 default = nil)
  if valid_774347 != nil:
    section.add "X-Amz-SignedHeaders", valid_774347
  var valid_774348 = header.getOrDefault("X-Amz-Credential")
  valid_774348 = validateParameter(valid_774348, JString, required = false,
                                 default = nil)
  if valid_774348 != nil:
    section.add "X-Amz-Credential", valid_774348
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774349: Call_GetCreateOptionGroup_774332; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_774349.validator(path, query, header, formData, body)
  let scheme = call_774349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774349.url(scheme.get, call_774349.host, call_774349.base,
                         call_774349.route, valid.getOrDefault("path"))
  result = hook(call_774349, url, valid)

proc call*(call_774350: Call_GetCreateOptionGroup_774332; OptionGroupName: string;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_774351 = newJObject()
  add(query_774351, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    query_774351.add "Tags", Tags
  add(query_774351, "OptionGroupDescription", newJString(OptionGroupDescription))
  add(query_774351, "Action", newJString(Action))
  add(query_774351, "Version", newJString(Version))
  add(query_774351, "EngineName", newJString(EngineName))
  add(query_774351, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_774350.call(nil, query_774351, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_774332(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_774333, base: "/",
    url: url_GetCreateOptionGroup_774334, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_774391 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBCluster_774393(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBCluster_774392(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774394 = query.getOrDefault("Action")
  valid_774394 = validateParameter(valid_774394, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_774394 != nil:
    section.add "Action", valid_774394
  var valid_774395 = query.getOrDefault("Version")
  valid_774395 = validateParameter(valid_774395, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774395 != nil:
    section.add "Version", valid_774395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774396 = header.getOrDefault("X-Amz-Date")
  valid_774396 = validateParameter(valid_774396, JString, required = false,
                                 default = nil)
  if valid_774396 != nil:
    section.add "X-Amz-Date", valid_774396
  var valid_774397 = header.getOrDefault("X-Amz-Security-Token")
  valid_774397 = validateParameter(valid_774397, JString, required = false,
                                 default = nil)
  if valid_774397 != nil:
    section.add "X-Amz-Security-Token", valid_774397
  var valid_774398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774398 = validateParameter(valid_774398, JString, required = false,
                                 default = nil)
  if valid_774398 != nil:
    section.add "X-Amz-Content-Sha256", valid_774398
  var valid_774399 = header.getOrDefault("X-Amz-Algorithm")
  valid_774399 = validateParameter(valid_774399, JString, required = false,
                                 default = nil)
  if valid_774399 != nil:
    section.add "X-Amz-Algorithm", valid_774399
  var valid_774400 = header.getOrDefault("X-Amz-Signature")
  valid_774400 = validateParameter(valid_774400, JString, required = false,
                                 default = nil)
  if valid_774400 != nil:
    section.add "X-Amz-Signature", valid_774400
  var valid_774401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774401 = validateParameter(valid_774401, JString, required = false,
                                 default = nil)
  if valid_774401 != nil:
    section.add "X-Amz-SignedHeaders", valid_774401
  var valid_774402 = header.getOrDefault("X-Amz-Credential")
  valid_774402 = validateParameter(valid_774402, JString, required = false,
                                 default = nil)
  if valid_774402 != nil:
    section.add "X-Amz-Credential", valid_774402
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  section = newJObject()
  var valid_774403 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_774403 = validateParameter(valid_774403, JString, required = false,
                                 default = nil)
  if valid_774403 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_774403
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774404 = formData.getOrDefault("DBClusterIdentifier")
  valid_774404 = validateParameter(valid_774404, JString, required = true,
                                 default = nil)
  if valid_774404 != nil:
    section.add "DBClusterIdentifier", valid_774404
  var valid_774405 = formData.getOrDefault("SkipFinalSnapshot")
  valid_774405 = validateParameter(valid_774405, JBool, required = false, default = nil)
  if valid_774405 != nil:
    section.add "SkipFinalSnapshot", valid_774405
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774406: Call_PostDeleteDBCluster_774391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774406.validator(path, query, header, formData, body)
  let scheme = call_774406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774406.url(scheme.get, call_774406.host, call_774406.base,
                         call_774406.route, valid.getOrDefault("path"))
  result = hook(call_774406, url, valid)

proc call*(call_774407: Call_PostDeleteDBCluster_774391;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  var query_774408 = newJObject()
  var formData_774409 = newJObject()
  add(formData_774409, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_774408, "Action", newJString(Action))
  add(formData_774409, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774408, "Version", newJString(Version))
  add(formData_774409, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_774407.call(nil, query_774408, nil, formData_774409, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_774391(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_774392, base: "/",
    url: url_PostDeleteDBCluster_774393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_774373 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBCluster_774375(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBCluster_774374(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774376 = query.getOrDefault("DBClusterIdentifier")
  valid_774376 = validateParameter(valid_774376, JString, required = true,
                                 default = nil)
  if valid_774376 != nil:
    section.add "DBClusterIdentifier", valid_774376
  var valid_774377 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_774377 = validateParameter(valid_774377, JString, required = false,
                                 default = nil)
  if valid_774377 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_774377
  var valid_774378 = query.getOrDefault("Action")
  valid_774378 = validateParameter(valid_774378, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_774378 != nil:
    section.add "Action", valid_774378
  var valid_774379 = query.getOrDefault("SkipFinalSnapshot")
  valid_774379 = validateParameter(valid_774379, JBool, required = false, default = nil)
  if valid_774379 != nil:
    section.add "SkipFinalSnapshot", valid_774379
  var valid_774380 = query.getOrDefault("Version")
  valid_774380 = validateParameter(valid_774380, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774380 != nil:
    section.add "Version", valid_774380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774381 = header.getOrDefault("X-Amz-Date")
  valid_774381 = validateParameter(valid_774381, JString, required = false,
                                 default = nil)
  if valid_774381 != nil:
    section.add "X-Amz-Date", valid_774381
  var valid_774382 = header.getOrDefault("X-Amz-Security-Token")
  valid_774382 = validateParameter(valid_774382, JString, required = false,
                                 default = nil)
  if valid_774382 != nil:
    section.add "X-Amz-Security-Token", valid_774382
  var valid_774383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774383 = validateParameter(valid_774383, JString, required = false,
                                 default = nil)
  if valid_774383 != nil:
    section.add "X-Amz-Content-Sha256", valid_774383
  var valid_774384 = header.getOrDefault("X-Amz-Algorithm")
  valid_774384 = validateParameter(valid_774384, JString, required = false,
                                 default = nil)
  if valid_774384 != nil:
    section.add "X-Amz-Algorithm", valid_774384
  var valid_774385 = header.getOrDefault("X-Amz-Signature")
  valid_774385 = validateParameter(valid_774385, JString, required = false,
                                 default = nil)
  if valid_774385 != nil:
    section.add "X-Amz-Signature", valid_774385
  var valid_774386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774386 = validateParameter(valid_774386, JString, required = false,
                                 default = nil)
  if valid_774386 != nil:
    section.add "X-Amz-SignedHeaders", valid_774386
  var valid_774387 = header.getOrDefault("X-Amz-Credential")
  valid_774387 = validateParameter(valid_774387, JString, required = false,
                                 default = nil)
  if valid_774387 != nil:
    section.add "X-Amz-Credential", valid_774387
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774388: Call_GetDeleteDBCluster_774373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774388.validator(path, query, header, formData, body)
  let scheme = call_774388.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774388.url(scheme.get, call_774388.host, call_774388.base,
                         call_774388.route, valid.getOrDefault("path"))
  result = hook(call_774388, url, valid)

proc call*(call_774389: Call_GetDeleteDBCluster_774373;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip is not specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip is not specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: string (required)
  var query_774390 = newJObject()
  add(query_774390, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774390, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_774390, "Action", newJString(Action))
  add(query_774390, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_774390, "Version", newJString(Version))
  result = call_774389.call(nil, query_774390, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_774373(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_774374,
    base: "/", url: url_GetDeleteDBCluster_774375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_774426 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBClusterEndpoint_774428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBClusterEndpoint_774427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774429 = query.getOrDefault("Action")
  valid_774429 = validateParameter(valid_774429, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_774429 != nil:
    section.add "Action", valid_774429
  var valid_774430 = query.getOrDefault("Version")
  valid_774430 = validateParameter(valid_774430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774430 != nil:
    section.add "Version", valid_774430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774431 = header.getOrDefault("X-Amz-Date")
  valid_774431 = validateParameter(valid_774431, JString, required = false,
                                 default = nil)
  if valid_774431 != nil:
    section.add "X-Amz-Date", valid_774431
  var valid_774432 = header.getOrDefault("X-Amz-Security-Token")
  valid_774432 = validateParameter(valid_774432, JString, required = false,
                                 default = nil)
  if valid_774432 != nil:
    section.add "X-Amz-Security-Token", valid_774432
  var valid_774433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774433 = validateParameter(valid_774433, JString, required = false,
                                 default = nil)
  if valid_774433 != nil:
    section.add "X-Amz-Content-Sha256", valid_774433
  var valid_774434 = header.getOrDefault("X-Amz-Algorithm")
  valid_774434 = validateParameter(valid_774434, JString, required = false,
                                 default = nil)
  if valid_774434 != nil:
    section.add "X-Amz-Algorithm", valid_774434
  var valid_774435 = header.getOrDefault("X-Amz-Signature")
  valid_774435 = validateParameter(valid_774435, JString, required = false,
                                 default = nil)
  if valid_774435 != nil:
    section.add "X-Amz-Signature", valid_774435
  var valid_774436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774436 = validateParameter(valid_774436, JString, required = false,
                                 default = nil)
  if valid_774436 != nil:
    section.add "X-Amz-SignedHeaders", valid_774436
  var valid_774437 = header.getOrDefault("X-Amz-Credential")
  valid_774437 = validateParameter(valid_774437, JString, required = false,
                                 default = nil)
  if valid_774437 != nil:
    section.add "X-Amz-Credential", valid_774437
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_774438 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_774438 = validateParameter(valid_774438, JString, required = true,
                                 default = nil)
  if valid_774438 != nil:
    section.add "DBClusterEndpointIdentifier", valid_774438
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774439: Call_PostDeleteDBClusterEndpoint_774426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774439.validator(path, query, header, formData, body)
  let scheme = call_774439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774439.url(scheme.get, call_774439.host, call_774439.base,
                         call_774439.route, valid.getOrDefault("path"))
  result = hook(call_774439, url, valid)

proc call*(call_774440: Call_PostDeleteDBClusterEndpoint_774426;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_774441 = newJObject()
  var formData_774442 = newJObject()
  add(query_774441, "Action", newJString(Action))
  add(formData_774442, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_774441, "Version", newJString(Version))
  result = call_774440.call(nil, query_774441, nil, formData_774442, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_774426(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_774427, base: "/",
    url: url_PostDeleteDBClusterEndpoint_774428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_774410 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBClusterEndpoint_774412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBClusterEndpoint_774411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774413 = query.getOrDefault("Action")
  valid_774413 = validateParameter(valid_774413, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_774413 != nil:
    section.add "Action", valid_774413
  var valid_774414 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_774414 = validateParameter(valid_774414, JString, required = true,
                                 default = nil)
  if valid_774414 != nil:
    section.add "DBClusterEndpointIdentifier", valid_774414
  var valid_774415 = query.getOrDefault("Version")
  valid_774415 = validateParameter(valid_774415, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774415 != nil:
    section.add "Version", valid_774415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774416 = header.getOrDefault("X-Amz-Date")
  valid_774416 = validateParameter(valid_774416, JString, required = false,
                                 default = nil)
  if valid_774416 != nil:
    section.add "X-Amz-Date", valid_774416
  var valid_774417 = header.getOrDefault("X-Amz-Security-Token")
  valid_774417 = validateParameter(valid_774417, JString, required = false,
                                 default = nil)
  if valid_774417 != nil:
    section.add "X-Amz-Security-Token", valid_774417
  var valid_774418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774418 = validateParameter(valid_774418, JString, required = false,
                                 default = nil)
  if valid_774418 != nil:
    section.add "X-Amz-Content-Sha256", valid_774418
  var valid_774419 = header.getOrDefault("X-Amz-Algorithm")
  valid_774419 = validateParameter(valid_774419, JString, required = false,
                                 default = nil)
  if valid_774419 != nil:
    section.add "X-Amz-Algorithm", valid_774419
  var valid_774420 = header.getOrDefault("X-Amz-Signature")
  valid_774420 = validateParameter(valid_774420, JString, required = false,
                                 default = nil)
  if valid_774420 != nil:
    section.add "X-Amz-Signature", valid_774420
  var valid_774421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774421 = validateParameter(valid_774421, JString, required = false,
                                 default = nil)
  if valid_774421 != nil:
    section.add "X-Amz-SignedHeaders", valid_774421
  var valid_774422 = header.getOrDefault("X-Amz-Credential")
  valid_774422 = validateParameter(valid_774422, JString, required = false,
                                 default = nil)
  if valid_774422 != nil:
    section.add "X-Amz-Credential", valid_774422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774423: Call_GetDeleteDBClusterEndpoint_774410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774423.validator(path, query, header, formData, body)
  let scheme = call_774423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774423.url(scheme.get, call_774423.host, call_774423.base,
                         call_774423.route, valid.getOrDefault("path"))
  result = hook(call_774423, url, valid)

proc call*(call_774424: Call_GetDeleteDBClusterEndpoint_774410;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_774425 = newJObject()
  add(query_774425, "Action", newJString(Action))
  add(query_774425, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_774425, "Version", newJString(Version))
  result = call_774424.call(nil, query_774425, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_774410(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_774411, base: "/",
    url: url_GetDeleteDBClusterEndpoint_774412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_774459 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBClusterParameterGroup_774461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBClusterParameterGroup_774460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774462 = query.getOrDefault("Action")
  valid_774462 = validateParameter(valid_774462, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_774462 != nil:
    section.add "Action", valid_774462
  var valid_774463 = query.getOrDefault("Version")
  valid_774463 = validateParameter(valid_774463, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774463 != nil:
    section.add "Version", valid_774463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774464 = header.getOrDefault("X-Amz-Date")
  valid_774464 = validateParameter(valid_774464, JString, required = false,
                                 default = nil)
  if valid_774464 != nil:
    section.add "X-Amz-Date", valid_774464
  var valid_774465 = header.getOrDefault("X-Amz-Security-Token")
  valid_774465 = validateParameter(valid_774465, JString, required = false,
                                 default = nil)
  if valid_774465 != nil:
    section.add "X-Amz-Security-Token", valid_774465
  var valid_774466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774466 = validateParameter(valid_774466, JString, required = false,
                                 default = nil)
  if valid_774466 != nil:
    section.add "X-Amz-Content-Sha256", valid_774466
  var valid_774467 = header.getOrDefault("X-Amz-Algorithm")
  valid_774467 = validateParameter(valid_774467, JString, required = false,
                                 default = nil)
  if valid_774467 != nil:
    section.add "X-Amz-Algorithm", valid_774467
  var valid_774468 = header.getOrDefault("X-Amz-Signature")
  valid_774468 = validateParameter(valid_774468, JString, required = false,
                                 default = nil)
  if valid_774468 != nil:
    section.add "X-Amz-Signature", valid_774468
  var valid_774469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774469 = validateParameter(valid_774469, JString, required = false,
                                 default = nil)
  if valid_774469 != nil:
    section.add "X-Amz-SignedHeaders", valid_774469
  var valid_774470 = header.getOrDefault("X-Amz-Credential")
  valid_774470 = validateParameter(valid_774470, JString, required = false,
                                 default = nil)
  if valid_774470 != nil:
    section.add "X-Amz-Credential", valid_774470
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_774471 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774471 = validateParameter(valid_774471, JString, required = true,
                                 default = nil)
  if valid_774471 != nil:
    section.add "DBClusterParameterGroupName", valid_774471
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774472: Call_PostDeleteDBClusterParameterGroup_774459;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774472.validator(path, query, header, formData, body)
  let scheme = call_774472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774472.url(scheme.get, call_774472.host, call_774472.base,
                         call_774472.route, valid.getOrDefault("path"))
  result = hook(call_774472, url, valid)

proc call*(call_774473: Call_PostDeleteDBClusterParameterGroup_774459;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_774474 = newJObject()
  var formData_774475 = newJObject()
  add(query_774474, "Action", newJString(Action))
  add(formData_774475, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_774474, "Version", newJString(Version))
  result = call_774473.call(nil, query_774474, nil, formData_774475, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_774459(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_774460, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_774461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_774443 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBClusterParameterGroup_774445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBClusterParameterGroup_774444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_774446 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774446 = validateParameter(valid_774446, JString, required = true,
                                 default = nil)
  if valid_774446 != nil:
    section.add "DBClusterParameterGroupName", valid_774446
  var valid_774447 = query.getOrDefault("Action")
  valid_774447 = validateParameter(valid_774447, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_774447 != nil:
    section.add "Action", valid_774447
  var valid_774448 = query.getOrDefault("Version")
  valid_774448 = validateParameter(valid_774448, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774448 != nil:
    section.add "Version", valid_774448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774449 = header.getOrDefault("X-Amz-Date")
  valid_774449 = validateParameter(valid_774449, JString, required = false,
                                 default = nil)
  if valid_774449 != nil:
    section.add "X-Amz-Date", valid_774449
  var valid_774450 = header.getOrDefault("X-Amz-Security-Token")
  valid_774450 = validateParameter(valid_774450, JString, required = false,
                                 default = nil)
  if valid_774450 != nil:
    section.add "X-Amz-Security-Token", valid_774450
  var valid_774451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774451 = validateParameter(valid_774451, JString, required = false,
                                 default = nil)
  if valid_774451 != nil:
    section.add "X-Amz-Content-Sha256", valid_774451
  var valid_774452 = header.getOrDefault("X-Amz-Algorithm")
  valid_774452 = validateParameter(valid_774452, JString, required = false,
                                 default = nil)
  if valid_774452 != nil:
    section.add "X-Amz-Algorithm", valid_774452
  var valid_774453 = header.getOrDefault("X-Amz-Signature")
  valid_774453 = validateParameter(valid_774453, JString, required = false,
                                 default = nil)
  if valid_774453 != nil:
    section.add "X-Amz-Signature", valid_774453
  var valid_774454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774454 = validateParameter(valid_774454, JString, required = false,
                                 default = nil)
  if valid_774454 != nil:
    section.add "X-Amz-SignedHeaders", valid_774454
  var valid_774455 = header.getOrDefault("X-Amz-Credential")
  valid_774455 = validateParameter(valid_774455, JString, required = false,
                                 default = nil)
  if valid_774455 != nil:
    section.add "X-Amz-Credential", valid_774455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774456: Call_GetDeleteDBClusterParameterGroup_774443;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774456.validator(path, query, header, formData, body)
  let scheme = call_774456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774456.url(scheme.get, call_774456.host, call_774456.base,
                         call_774456.route, valid.getOrDefault("path"))
  result = hook(call_774456, url, valid)

proc call*(call_774457: Call_GetDeleteDBClusterParameterGroup_774443;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774458 = newJObject()
  add(query_774458, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_774458, "Action", newJString(Action))
  add(query_774458, "Version", newJString(Version))
  result = call_774457.call(nil, query_774458, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_774443(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_774444, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_774445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_774492 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBClusterSnapshot_774494(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBClusterSnapshot_774493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774495 = query.getOrDefault("Action")
  valid_774495 = validateParameter(valid_774495, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_774495 != nil:
    section.add "Action", valid_774495
  var valid_774496 = query.getOrDefault("Version")
  valid_774496 = validateParameter(valid_774496, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774496 != nil:
    section.add "Version", valid_774496
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774497 = header.getOrDefault("X-Amz-Date")
  valid_774497 = validateParameter(valid_774497, JString, required = false,
                                 default = nil)
  if valid_774497 != nil:
    section.add "X-Amz-Date", valid_774497
  var valid_774498 = header.getOrDefault("X-Amz-Security-Token")
  valid_774498 = validateParameter(valid_774498, JString, required = false,
                                 default = nil)
  if valid_774498 != nil:
    section.add "X-Amz-Security-Token", valid_774498
  var valid_774499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774499 = validateParameter(valid_774499, JString, required = false,
                                 default = nil)
  if valid_774499 != nil:
    section.add "X-Amz-Content-Sha256", valid_774499
  var valid_774500 = header.getOrDefault("X-Amz-Algorithm")
  valid_774500 = validateParameter(valid_774500, JString, required = false,
                                 default = nil)
  if valid_774500 != nil:
    section.add "X-Amz-Algorithm", valid_774500
  var valid_774501 = header.getOrDefault("X-Amz-Signature")
  valid_774501 = validateParameter(valid_774501, JString, required = false,
                                 default = nil)
  if valid_774501 != nil:
    section.add "X-Amz-Signature", valid_774501
  var valid_774502 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774502 = validateParameter(valid_774502, JString, required = false,
                                 default = nil)
  if valid_774502 != nil:
    section.add "X-Amz-SignedHeaders", valid_774502
  var valid_774503 = header.getOrDefault("X-Amz-Credential")
  valid_774503 = validateParameter(valid_774503, JString, required = false,
                                 default = nil)
  if valid_774503 != nil:
    section.add "X-Amz-Credential", valid_774503
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_774504 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774504 = validateParameter(valid_774504, JString, required = true,
                                 default = nil)
  if valid_774504 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774504
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774505: Call_PostDeleteDBClusterSnapshot_774492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774505.validator(path, query, header, formData, body)
  let scheme = call_774505.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774505.url(scheme.get, call_774505.host, call_774505.base,
                         call_774505.route, valid.getOrDefault("path"))
  result = hook(call_774505, url, valid)

proc call*(call_774506: Call_PostDeleteDBClusterSnapshot_774492;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774507 = newJObject()
  var formData_774508 = newJObject()
  add(formData_774508, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_774507, "Action", newJString(Action))
  add(query_774507, "Version", newJString(Version))
  result = call_774506.call(nil, query_774507, nil, formData_774508, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_774492(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_774493, base: "/",
    url: url_PostDeleteDBClusterSnapshot_774494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_774476 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBClusterSnapshot_774478(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBClusterSnapshot_774477(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_774479 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_774479 = validateParameter(valid_774479, JString, required = true,
                                 default = nil)
  if valid_774479 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_774479
  var valid_774480 = query.getOrDefault("Action")
  valid_774480 = validateParameter(valid_774480, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_774480 != nil:
    section.add "Action", valid_774480
  var valid_774481 = query.getOrDefault("Version")
  valid_774481 = validateParameter(valid_774481, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774481 != nil:
    section.add "Version", valid_774481
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774482 = header.getOrDefault("X-Amz-Date")
  valid_774482 = validateParameter(valid_774482, JString, required = false,
                                 default = nil)
  if valid_774482 != nil:
    section.add "X-Amz-Date", valid_774482
  var valid_774483 = header.getOrDefault("X-Amz-Security-Token")
  valid_774483 = validateParameter(valid_774483, JString, required = false,
                                 default = nil)
  if valid_774483 != nil:
    section.add "X-Amz-Security-Token", valid_774483
  var valid_774484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774484 = validateParameter(valid_774484, JString, required = false,
                                 default = nil)
  if valid_774484 != nil:
    section.add "X-Amz-Content-Sha256", valid_774484
  var valid_774485 = header.getOrDefault("X-Amz-Algorithm")
  valid_774485 = validateParameter(valid_774485, JString, required = false,
                                 default = nil)
  if valid_774485 != nil:
    section.add "X-Amz-Algorithm", valid_774485
  var valid_774486 = header.getOrDefault("X-Amz-Signature")
  valid_774486 = validateParameter(valid_774486, JString, required = false,
                                 default = nil)
  if valid_774486 != nil:
    section.add "X-Amz-Signature", valid_774486
  var valid_774487 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774487 = validateParameter(valid_774487, JString, required = false,
                                 default = nil)
  if valid_774487 != nil:
    section.add "X-Amz-SignedHeaders", valid_774487
  var valid_774488 = header.getOrDefault("X-Amz-Credential")
  valid_774488 = validateParameter(valid_774488, JString, required = false,
                                 default = nil)
  if valid_774488 != nil:
    section.add "X-Amz-Credential", valid_774488
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774489: Call_GetDeleteDBClusterSnapshot_774476; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774489.validator(path, query, header, formData, body)
  let scheme = call_774489.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774489.url(scheme.get, call_774489.host, call_774489.base,
                         call_774489.route, valid.getOrDefault("path"))
  result = hook(call_774489, url, valid)

proc call*(call_774490: Call_GetDeleteDBClusterSnapshot_774476;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774491 = newJObject()
  add(query_774491, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_774491, "Action", newJString(Action))
  add(query_774491, "Version", newJString(Version))
  result = call_774490.call(nil, query_774491, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_774476(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_774477, base: "/",
    url: url_GetDeleteDBClusterSnapshot_774478,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_774528 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBInstance_774530(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBInstance_774529(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774531 = query.getOrDefault("Action")
  valid_774531 = validateParameter(valid_774531, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_774531 != nil:
    section.add "Action", valid_774531
  var valid_774532 = query.getOrDefault("Version")
  valid_774532 = validateParameter(valid_774532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774532 != nil:
    section.add "Version", valid_774532
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774533 = header.getOrDefault("X-Amz-Date")
  valid_774533 = validateParameter(valid_774533, JString, required = false,
                                 default = nil)
  if valid_774533 != nil:
    section.add "X-Amz-Date", valid_774533
  var valid_774534 = header.getOrDefault("X-Amz-Security-Token")
  valid_774534 = validateParameter(valid_774534, JString, required = false,
                                 default = nil)
  if valid_774534 != nil:
    section.add "X-Amz-Security-Token", valid_774534
  var valid_774535 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774535 = validateParameter(valid_774535, JString, required = false,
                                 default = nil)
  if valid_774535 != nil:
    section.add "X-Amz-Content-Sha256", valid_774535
  var valid_774536 = header.getOrDefault("X-Amz-Algorithm")
  valid_774536 = validateParameter(valid_774536, JString, required = false,
                                 default = nil)
  if valid_774536 != nil:
    section.add "X-Amz-Algorithm", valid_774536
  var valid_774537 = header.getOrDefault("X-Amz-Signature")
  valid_774537 = validateParameter(valid_774537, JString, required = false,
                                 default = nil)
  if valid_774537 != nil:
    section.add "X-Amz-Signature", valid_774537
  var valid_774538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774538 = validateParameter(valid_774538, JString, required = false,
                                 default = nil)
  if valid_774538 != nil:
    section.add "X-Amz-SignedHeaders", valid_774538
  var valid_774539 = header.getOrDefault("X-Amz-Credential")
  valid_774539 = validateParameter(valid_774539, JString, required = false,
                                 default = nil)
  if valid_774539 != nil:
    section.add "X-Amz-Credential", valid_774539
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_774540 = formData.getOrDefault("DBInstanceIdentifier")
  valid_774540 = validateParameter(valid_774540, JString, required = true,
                                 default = nil)
  if valid_774540 != nil:
    section.add "DBInstanceIdentifier", valid_774540
  var valid_774541 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_774541 = validateParameter(valid_774541, JString, required = false,
                                 default = nil)
  if valid_774541 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_774541
  var valid_774542 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_774542 = validateParameter(valid_774542, JBool, required = false, default = nil)
  if valid_774542 != nil:
    section.add "DeleteAutomatedBackups", valid_774542
  var valid_774543 = formData.getOrDefault("SkipFinalSnapshot")
  valid_774543 = validateParameter(valid_774543, JBool, required = false, default = nil)
  if valid_774543 != nil:
    section.add "SkipFinalSnapshot", valid_774543
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774544: Call_PostDeleteDBInstance_774528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_774544.validator(path, query, header, formData, body)
  let scheme = call_774544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774544.url(scheme.get, call_774544.host, call_774544.base,
                         call_774544.route, valid.getOrDefault("path"))
  result = hook(call_774544, url, valid)

proc call*(call_774545: Call_PostDeleteDBInstance_774528;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          Version: string = "2014-10-31"; SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  var query_774546 = newJObject()
  var formData_774547 = newJObject()
  add(formData_774547, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_774547, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_774546, "Action", newJString(Action))
  add(formData_774547, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_774546, "Version", newJString(Version))
  add(formData_774547, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_774545.call(nil, query_774546, nil, formData_774547, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_774528(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_774529, base: "/",
    url: url_PostDeleteDBInstance_774530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_774509 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBInstance_774511(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBInstance_774510(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_774512 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_774512 = validateParameter(valid_774512, JString, required = false,
                                 default = nil)
  if valid_774512 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_774512
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774513 = query.getOrDefault("Action")
  valid_774513 = validateParameter(valid_774513, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_774513 != nil:
    section.add "Action", valid_774513
  var valid_774514 = query.getOrDefault("DeleteAutomatedBackups")
  valid_774514 = validateParameter(valid_774514, JBool, required = false, default = nil)
  if valid_774514 != nil:
    section.add "DeleteAutomatedBackups", valid_774514
  var valid_774515 = query.getOrDefault("SkipFinalSnapshot")
  valid_774515 = validateParameter(valid_774515, JBool, required = false, default = nil)
  if valid_774515 != nil:
    section.add "SkipFinalSnapshot", valid_774515
  var valid_774516 = query.getOrDefault("Version")
  valid_774516 = validateParameter(valid_774516, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774516 != nil:
    section.add "Version", valid_774516
  var valid_774517 = query.getOrDefault("DBInstanceIdentifier")
  valid_774517 = validateParameter(valid_774517, JString, required = true,
                                 default = nil)
  if valid_774517 != nil:
    section.add "DBInstanceIdentifier", valid_774517
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774518 = header.getOrDefault("X-Amz-Date")
  valid_774518 = validateParameter(valid_774518, JString, required = false,
                                 default = nil)
  if valid_774518 != nil:
    section.add "X-Amz-Date", valid_774518
  var valid_774519 = header.getOrDefault("X-Amz-Security-Token")
  valid_774519 = validateParameter(valid_774519, JString, required = false,
                                 default = nil)
  if valid_774519 != nil:
    section.add "X-Amz-Security-Token", valid_774519
  var valid_774520 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774520 = validateParameter(valid_774520, JString, required = false,
                                 default = nil)
  if valid_774520 != nil:
    section.add "X-Amz-Content-Sha256", valid_774520
  var valid_774521 = header.getOrDefault("X-Amz-Algorithm")
  valid_774521 = validateParameter(valid_774521, JString, required = false,
                                 default = nil)
  if valid_774521 != nil:
    section.add "X-Amz-Algorithm", valid_774521
  var valid_774522 = header.getOrDefault("X-Amz-Signature")
  valid_774522 = validateParameter(valid_774522, JString, required = false,
                                 default = nil)
  if valid_774522 != nil:
    section.add "X-Amz-Signature", valid_774522
  var valid_774523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774523 = validateParameter(valid_774523, JString, required = false,
                                 default = nil)
  if valid_774523 != nil:
    section.add "X-Amz-SignedHeaders", valid_774523
  var valid_774524 = header.getOrDefault("X-Amz-Credential")
  valid_774524 = validateParameter(valid_774524, JString, required = false,
                                 default = nil)
  if valid_774524 != nil:
    section.add "X-Amz-Credential", valid_774524
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774525: Call_GetDeleteDBInstance_774509; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_774525.validator(path, query, header, formData, body)
  let scheme = call_774525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774525.url(scheme.get, call_774525.host, call_774525.base,
                         call_774525.route, valid.getOrDefault("path"))
  result = hook(call_774525, url, valid)

proc call*(call_774526: Call_GetDeleteDBInstance_774509;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip is not specified, a DB snapshot is created before the DB instance is deleted. By default, skip is not specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip is not specified.</p> </note>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_774527 = newJObject()
  add(query_774527, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_774527, "Action", newJString(Action))
  add(query_774527, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_774527, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_774527, "Version", newJString(Version))
  add(query_774527, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_774526.call(nil, query_774527, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_774509(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_774510, base: "/",
    url: url_GetDeleteDBInstance_774511, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_774564 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBInstanceAutomatedBackup_774566(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_774565(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774567 = query.getOrDefault("Action")
  valid_774567 = validateParameter(valid_774567, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_774567 != nil:
    section.add "Action", valid_774567
  var valid_774568 = query.getOrDefault("Version")
  valid_774568 = validateParameter(valid_774568, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774568 != nil:
    section.add "Version", valid_774568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774569 = header.getOrDefault("X-Amz-Date")
  valid_774569 = validateParameter(valid_774569, JString, required = false,
                                 default = nil)
  if valid_774569 != nil:
    section.add "X-Amz-Date", valid_774569
  var valid_774570 = header.getOrDefault("X-Amz-Security-Token")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "X-Amz-Security-Token", valid_774570
  var valid_774571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774571 = validateParameter(valid_774571, JString, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "X-Amz-Content-Sha256", valid_774571
  var valid_774572 = header.getOrDefault("X-Amz-Algorithm")
  valid_774572 = validateParameter(valid_774572, JString, required = false,
                                 default = nil)
  if valid_774572 != nil:
    section.add "X-Amz-Algorithm", valid_774572
  var valid_774573 = header.getOrDefault("X-Amz-Signature")
  valid_774573 = validateParameter(valid_774573, JString, required = false,
                                 default = nil)
  if valid_774573 != nil:
    section.add "X-Amz-Signature", valid_774573
  var valid_774574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774574 = validateParameter(valid_774574, JString, required = false,
                                 default = nil)
  if valid_774574 != nil:
    section.add "X-Amz-SignedHeaders", valid_774574
  var valid_774575 = header.getOrDefault("X-Amz-Credential")
  valid_774575 = validateParameter(valid_774575, JString, required = false,
                                 default = nil)
  if valid_774575 != nil:
    section.add "X-Amz-Credential", valid_774575
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_774576 = formData.getOrDefault("DbiResourceId")
  valid_774576 = validateParameter(valid_774576, JString, required = true,
                                 default = nil)
  if valid_774576 != nil:
    section.add "DbiResourceId", valid_774576
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774577: Call_PostDeleteDBInstanceAutomatedBackup_774564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_774577.validator(path, query, header, formData, body)
  let scheme = call_774577.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774577.url(scheme.get, call_774577.host, call_774577.base,
                         call_774577.route, valid.getOrDefault("path"))
  result = hook(call_774577, url, valid)

proc call*(call_774578: Call_PostDeleteDBInstanceAutomatedBackup_774564;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774579 = newJObject()
  var formData_774580 = newJObject()
  add(formData_774580, "DbiResourceId", newJString(DbiResourceId))
  add(query_774579, "Action", newJString(Action))
  add(query_774579, "Version", newJString(Version))
  result = call_774578.call(nil, query_774579, nil, formData_774580, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_774564(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_774565, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_774566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_774548 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBInstanceAutomatedBackup_774550(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_774549(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_774551 = query.getOrDefault("DbiResourceId")
  valid_774551 = validateParameter(valid_774551, JString, required = true,
                                 default = nil)
  if valid_774551 != nil:
    section.add "DbiResourceId", valid_774551
  var valid_774552 = query.getOrDefault("Action")
  valid_774552 = validateParameter(valid_774552, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_774552 != nil:
    section.add "Action", valid_774552
  var valid_774553 = query.getOrDefault("Version")
  valid_774553 = validateParameter(valid_774553, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774553 != nil:
    section.add "Version", valid_774553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774554 = header.getOrDefault("X-Amz-Date")
  valid_774554 = validateParameter(valid_774554, JString, required = false,
                                 default = nil)
  if valid_774554 != nil:
    section.add "X-Amz-Date", valid_774554
  var valid_774555 = header.getOrDefault("X-Amz-Security-Token")
  valid_774555 = validateParameter(valid_774555, JString, required = false,
                                 default = nil)
  if valid_774555 != nil:
    section.add "X-Amz-Security-Token", valid_774555
  var valid_774556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774556 = validateParameter(valid_774556, JString, required = false,
                                 default = nil)
  if valid_774556 != nil:
    section.add "X-Amz-Content-Sha256", valid_774556
  var valid_774557 = header.getOrDefault("X-Amz-Algorithm")
  valid_774557 = validateParameter(valid_774557, JString, required = false,
                                 default = nil)
  if valid_774557 != nil:
    section.add "X-Amz-Algorithm", valid_774557
  var valid_774558 = header.getOrDefault("X-Amz-Signature")
  valid_774558 = validateParameter(valid_774558, JString, required = false,
                                 default = nil)
  if valid_774558 != nil:
    section.add "X-Amz-Signature", valid_774558
  var valid_774559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774559 = validateParameter(valid_774559, JString, required = false,
                                 default = nil)
  if valid_774559 != nil:
    section.add "X-Amz-SignedHeaders", valid_774559
  var valid_774560 = header.getOrDefault("X-Amz-Credential")
  valid_774560 = validateParameter(valid_774560, JString, required = false,
                                 default = nil)
  if valid_774560 != nil:
    section.add "X-Amz-Credential", valid_774560
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774561: Call_GetDeleteDBInstanceAutomatedBackup_774548;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_774561.validator(path, query, header, formData, body)
  let scheme = call_774561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774561.url(scheme.get, call_774561.host, call_774561.base,
                         call_774561.route, valid.getOrDefault("path"))
  result = hook(call_774561, url, valid)

proc call*(call_774562: Call_GetDeleteDBInstanceAutomatedBackup_774548;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774563 = newJObject()
  add(query_774563, "DbiResourceId", newJString(DbiResourceId))
  add(query_774563, "Action", newJString(Action))
  add(query_774563, "Version", newJString(Version))
  result = call_774562.call(nil, query_774563, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_774548(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_774549, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_774550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_774597 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBParameterGroup_774599(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBParameterGroup_774598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774600 = query.getOrDefault("Action")
  valid_774600 = validateParameter(valid_774600, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_774600 != nil:
    section.add "Action", valid_774600
  var valid_774601 = query.getOrDefault("Version")
  valid_774601 = validateParameter(valid_774601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774601 != nil:
    section.add "Version", valid_774601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774602 = header.getOrDefault("X-Amz-Date")
  valid_774602 = validateParameter(valid_774602, JString, required = false,
                                 default = nil)
  if valid_774602 != nil:
    section.add "X-Amz-Date", valid_774602
  var valid_774603 = header.getOrDefault("X-Amz-Security-Token")
  valid_774603 = validateParameter(valid_774603, JString, required = false,
                                 default = nil)
  if valid_774603 != nil:
    section.add "X-Amz-Security-Token", valid_774603
  var valid_774604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774604 = validateParameter(valid_774604, JString, required = false,
                                 default = nil)
  if valid_774604 != nil:
    section.add "X-Amz-Content-Sha256", valid_774604
  var valid_774605 = header.getOrDefault("X-Amz-Algorithm")
  valid_774605 = validateParameter(valid_774605, JString, required = false,
                                 default = nil)
  if valid_774605 != nil:
    section.add "X-Amz-Algorithm", valid_774605
  var valid_774606 = header.getOrDefault("X-Amz-Signature")
  valid_774606 = validateParameter(valid_774606, JString, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "X-Amz-Signature", valid_774606
  var valid_774607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774607 = validateParameter(valid_774607, JString, required = false,
                                 default = nil)
  if valid_774607 != nil:
    section.add "X-Amz-SignedHeaders", valid_774607
  var valid_774608 = header.getOrDefault("X-Amz-Credential")
  valid_774608 = validateParameter(valid_774608, JString, required = false,
                                 default = nil)
  if valid_774608 != nil:
    section.add "X-Amz-Credential", valid_774608
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_774609 = formData.getOrDefault("DBParameterGroupName")
  valid_774609 = validateParameter(valid_774609, JString, required = true,
                                 default = nil)
  if valid_774609 != nil:
    section.add "DBParameterGroupName", valid_774609
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774610: Call_PostDeleteDBParameterGroup_774597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_774610.validator(path, query, header, formData, body)
  let scheme = call_774610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774610.url(scheme.get, call_774610.host, call_774610.base,
                         call_774610.route, valid.getOrDefault("path"))
  result = hook(call_774610, url, valid)

proc call*(call_774611: Call_PostDeleteDBParameterGroup_774597;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774612 = newJObject()
  var formData_774613 = newJObject()
  add(formData_774613, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774612, "Action", newJString(Action))
  add(query_774612, "Version", newJString(Version))
  result = call_774611.call(nil, query_774612, nil, formData_774613, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_774597(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_774598, base: "/",
    url: url_PostDeleteDBParameterGroup_774599,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_774581 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBParameterGroup_774583(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBParameterGroup_774582(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_774584 = query.getOrDefault("DBParameterGroupName")
  valid_774584 = validateParameter(valid_774584, JString, required = true,
                                 default = nil)
  if valid_774584 != nil:
    section.add "DBParameterGroupName", valid_774584
  var valid_774585 = query.getOrDefault("Action")
  valid_774585 = validateParameter(valid_774585, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_774585 != nil:
    section.add "Action", valid_774585
  var valid_774586 = query.getOrDefault("Version")
  valid_774586 = validateParameter(valid_774586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774586 != nil:
    section.add "Version", valid_774586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774587 = header.getOrDefault("X-Amz-Date")
  valid_774587 = validateParameter(valid_774587, JString, required = false,
                                 default = nil)
  if valid_774587 != nil:
    section.add "X-Amz-Date", valid_774587
  var valid_774588 = header.getOrDefault("X-Amz-Security-Token")
  valid_774588 = validateParameter(valid_774588, JString, required = false,
                                 default = nil)
  if valid_774588 != nil:
    section.add "X-Amz-Security-Token", valid_774588
  var valid_774589 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774589 = validateParameter(valid_774589, JString, required = false,
                                 default = nil)
  if valid_774589 != nil:
    section.add "X-Amz-Content-Sha256", valid_774589
  var valid_774590 = header.getOrDefault("X-Amz-Algorithm")
  valid_774590 = validateParameter(valid_774590, JString, required = false,
                                 default = nil)
  if valid_774590 != nil:
    section.add "X-Amz-Algorithm", valid_774590
  var valid_774591 = header.getOrDefault("X-Amz-Signature")
  valid_774591 = validateParameter(valid_774591, JString, required = false,
                                 default = nil)
  if valid_774591 != nil:
    section.add "X-Amz-Signature", valid_774591
  var valid_774592 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774592 = validateParameter(valid_774592, JString, required = false,
                                 default = nil)
  if valid_774592 != nil:
    section.add "X-Amz-SignedHeaders", valid_774592
  var valid_774593 = header.getOrDefault("X-Amz-Credential")
  valid_774593 = validateParameter(valid_774593, JString, required = false,
                                 default = nil)
  if valid_774593 != nil:
    section.add "X-Amz-Credential", valid_774593
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774594: Call_GetDeleteDBParameterGroup_774581; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_774594.validator(path, query, header, formData, body)
  let scheme = call_774594.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774594.url(scheme.get, call_774594.host, call_774594.base,
                         call_774594.route, valid.getOrDefault("path"))
  result = hook(call_774594, url, valid)

proc call*(call_774595: Call_GetDeleteDBParameterGroup_774581;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774596 = newJObject()
  add(query_774596, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_774596, "Action", newJString(Action))
  add(query_774596, "Version", newJString(Version))
  result = call_774595.call(nil, query_774596, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_774581(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_774582, base: "/",
    url: url_GetDeleteDBParameterGroup_774583,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_774630 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBSecurityGroup_774632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBSecurityGroup_774631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774633 = query.getOrDefault("Action")
  valid_774633 = validateParameter(valid_774633, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_774633 != nil:
    section.add "Action", valid_774633
  var valid_774634 = query.getOrDefault("Version")
  valid_774634 = validateParameter(valid_774634, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774634 != nil:
    section.add "Version", valid_774634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774635 = header.getOrDefault("X-Amz-Date")
  valid_774635 = validateParameter(valid_774635, JString, required = false,
                                 default = nil)
  if valid_774635 != nil:
    section.add "X-Amz-Date", valid_774635
  var valid_774636 = header.getOrDefault("X-Amz-Security-Token")
  valid_774636 = validateParameter(valid_774636, JString, required = false,
                                 default = nil)
  if valid_774636 != nil:
    section.add "X-Amz-Security-Token", valid_774636
  var valid_774637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774637 = validateParameter(valid_774637, JString, required = false,
                                 default = nil)
  if valid_774637 != nil:
    section.add "X-Amz-Content-Sha256", valid_774637
  var valid_774638 = header.getOrDefault("X-Amz-Algorithm")
  valid_774638 = validateParameter(valid_774638, JString, required = false,
                                 default = nil)
  if valid_774638 != nil:
    section.add "X-Amz-Algorithm", valid_774638
  var valid_774639 = header.getOrDefault("X-Amz-Signature")
  valid_774639 = validateParameter(valid_774639, JString, required = false,
                                 default = nil)
  if valid_774639 != nil:
    section.add "X-Amz-Signature", valid_774639
  var valid_774640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774640 = validateParameter(valid_774640, JString, required = false,
                                 default = nil)
  if valid_774640 != nil:
    section.add "X-Amz-SignedHeaders", valid_774640
  var valid_774641 = header.getOrDefault("X-Amz-Credential")
  valid_774641 = validateParameter(valid_774641, JString, required = false,
                                 default = nil)
  if valid_774641 != nil:
    section.add "X-Amz-Credential", valid_774641
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_774642 = formData.getOrDefault("DBSecurityGroupName")
  valid_774642 = validateParameter(valid_774642, JString, required = true,
                                 default = nil)
  if valid_774642 != nil:
    section.add "DBSecurityGroupName", valid_774642
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774643: Call_PostDeleteDBSecurityGroup_774630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774643.validator(path, query, header, formData, body)
  let scheme = call_774643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774643.url(scheme.get, call_774643.host, call_774643.base,
                         call_774643.route, valid.getOrDefault("path"))
  result = hook(call_774643, url, valid)

proc call*(call_774644: Call_PostDeleteDBSecurityGroup_774630;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774645 = newJObject()
  var formData_774646 = newJObject()
  add(formData_774646, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_774645, "Action", newJString(Action))
  add(query_774645, "Version", newJString(Version))
  result = call_774644.call(nil, query_774645, nil, formData_774646, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_774630(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_774631, base: "/",
    url: url_PostDeleteDBSecurityGroup_774632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_774614 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBSecurityGroup_774616(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBSecurityGroup_774615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_774617 = query.getOrDefault("DBSecurityGroupName")
  valid_774617 = validateParameter(valid_774617, JString, required = true,
                                 default = nil)
  if valid_774617 != nil:
    section.add "DBSecurityGroupName", valid_774617
  var valid_774618 = query.getOrDefault("Action")
  valid_774618 = validateParameter(valid_774618, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_774618 != nil:
    section.add "Action", valid_774618
  var valid_774619 = query.getOrDefault("Version")
  valid_774619 = validateParameter(valid_774619, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774619 != nil:
    section.add "Version", valid_774619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774620 = header.getOrDefault("X-Amz-Date")
  valid_774620 = validateParameter(valid_774620, JString, required = false,
                                 default = nil)
  if valid_774620 != nil:
    section.add "X-Amz-Date", valid_774620
  var valid_774621 = header.getOrDefault("X-Amz-Security-Token")
  valid_774621 = validateParameter(valid_774621, JString, required = false,
                                 default = nil)
  if valid_774621 != nil:
    section.add "X-Amz-Security-Token", valid_774621
  var valid_774622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774622 = validateParameter(valid_774622, JString, required = false,
                                 default = nil)
  if valid_774622 != nil:
    section.add "X-Amz-Content-Sha256", valid_774622
  var valid_774623 = header.getOrDefault("X-Amz-Algorithm")
  valid_774623 = validateParameter(valid_774623, JString, required = false,
                                 default = nil)
  if valid_774623 != nil:
    section.add "X-Amz-Algorithm", valid_774623
  var valid_774624 = header.getOrDefault("X-Amz-Signature")
  valid_774624 = validateParameter(valid_774624, JString, required = false,
                                 default = nil)
  if valid_774624 != nil:
    section.add "X-Amz-Signature", valid_774624
  var valid_774625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774625 = validateParameter(valid_774625, JString, required = false,
                                 default = nil)
  if valid_774625 != nil:
    section.add "X-Amz-SignedHeaders", valid_774625
  var valid_774626 = header.getOrDefault("X-Amz-Credential")
  valid_774626 = validateParameter(valid_774626, JString, required = false,
                                 default = nil)
  if valid_774626 != nil:
    section.add "X-Amz-Credential", valid_774626
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774627: Call_GetDeleteDBSecurityGroup_774614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774627.validator(path, query, header, formData, body)
  let scheme = call_774627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774627.url(scheme.get, call_774627.host, call_774627.base,
                         call_774627.route, valid.getOrDefault("path"))
  result = hook(call_774627, url, valid)

proc call*(call_774628: Call_GetDeleteDBSecurityGroup_774614;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774629 = newJObject()
  add(query_774629, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_774629, "Action", newJString(Action))
  add(query_774629, "Version", newJString(Version))
  result = call_774628.call(nil, query_774629, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_774614(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_774615, base: "/",
    url: url_GetDeleteDBSecurityGroup_774616, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_774663 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBSnapshot_774665(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBSnapshot_774664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774666 = query.getOrDefault("Action")
  valid_774666 = validateParameter(valid_774666, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_774666 != nil:
    section.add "Action", valid_774666
  var valid_774667 = query.getOrDefault("Version")
  valid_774667 = validateParameter(valid_774667, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774667 != nil:
    section.add "Version", valid_774667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774668 = header.getOrDefault("X-Amz-Date")
  valid_774668 = validateParameter(valid_774668, JString, required = false,
                                 default = nil)
  if valid_774668 != nil:
    section.add "X-Amz-Date", valid_774668
  var valid_774669 = header.getOrDefault("X-Amz-Security-Token")
  valid_774669 = validateParameter(valid_774669, JString, required = false,
                                 default = nil)
  if valid_774669 != nil:
    section.add "X-Amz-Security-Token", valid_774669
  var valid_774670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774670 = validateParameter(valid_774670, JString, required = false,
                                 default = nil)
  if valid_774670 != nil:
    section.add "X-Amz-Content-Sha256", valid_774670
  var valid_774671 = header.getOrDefault("X-Amz-Algorithm")
  valid_774671 = validateParameter(valid_774671, JString, required = false,
                                 default = nil)
  if valid_774671 != nil:
    section.add "X-Amz-Algorithm", valid_774671
  var valid_774672 = header.getOrDefault("X-Amz-Signature")
  valid_774672 = validateParameter(valid_774672, JString, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "X-Amz-Signature", valid_774672
  var valid_774673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774673 = validateParameter(valid_774673, JString, required = false,
                                 default = nil)
  if valid_774673 != nil:
    section.add "X-Amz-SignedHeaders", valid_774673
  var valid_774674 = header.getOrDefault("X-Amz-Credential")
  valid_774674 = validateParameter(valid_774674, JString, required = false,
                                 default = nil)
  if valid_774674 != nil:
    section.add "X-Amz-Credential", valid_774674
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_774675 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_774675 = validateParameter(valid_774675, JString, required = true,
                                 default = nil)
  if valid_774675 != nil:
    section.add "DBSnapshotIdentifier", valid_774675
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774676: Call_PostDeleteDBSnapshot_774663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_774676.validator(path, query, header, formData, body)
  let scheme = call_774676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774676.url(scheme.get, call_774676.host, call_774676.base,
                         call_774676.route, valid.getOrDefault("path"))
  result = hook(call_774676, url, valid)

proc call*(call_774677: Call_PostDeleteDBSnapshot_774663;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774678 = newJObject()
  var formData_774679 = newJObject()
  add(formData_774679, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_774678, "Action", newJString(Action))
  add(query_774678, "Version", newJString(Version))
  result = call_774677.call(nil, query_774678, nil, formData_774679, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_774663(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_774664, base: "/",
    url: url_PostDeleteDBSnapshot_774665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_774647 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBSnapshot_774649(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBSnapshot_774648(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774650 = query.getOrDefault("Action")
  valid_774650 = validateParameter(valid_774650, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_774650 != nil:
    section.add "Action", valid_774650
  var valid_774651 = query.getOrDefault("Version")
  valid_774651 = validateParameter(valid_774651, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774651 != nil:
    section.add "Version", valid_774651
  var valid_774652 = query.getOrDefault("DBSnapshotIdentifier")
  valid_774652 = validateParameter(valid_774652, JString, required = true,
                                 default = nil)
  if valid_774652 != nil:
    section.add "DBSnapshotIdentifier", valid_774652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774653 = header.getOrDefault("X-Amz-Date")
  valid_774653 = validateParameter(valid_774653, JString, required = false,
                                 default = nil)
  if valid_774653 != nil:
    section.add "X-Amz-Date", valid_774653
  var valid_774654 = header.getOrDefault("X-Amz-Security-Token")
  valid_774654 = validateParameter(valid_774654, JString, required = false,
                                 default = nil)
  if valid_774654 != nil:
    section.add "X-Amz-Security-Token", valid_774654
  var valid_774655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774655 = validateParameter(valid_774655, JString, required = false,
                                 default = nil)
  if valid_774655 != nil:
    section.add "X-Amz-Content-Sha256", valid_774655
  var valid_774656 = header.getOrDefault("X-Amz-Algorithm")
  valid_774656 = validateParameter(valid_774656, JString, required = false,
                                 default = nil)
  if valid_774656 != nil:
    section.add "X-Amz-Algorithm", valid_774656
  var valid_774657 = header.getOrDefault("X-Amz-Signature")
  valid_774657 = validateParameter(valid_774657, JString, required = false,
                                 default = nil)
  if valid_774657 != nil:
    section.add "X-Amz-Signature", valid_774657
  var valid_774658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774658 = validateParameter(valid_774658, JString, required = false,
                                 default = nil)
  if valid_774658 != nil:
    section.add "X-Amz-SignedHeaders", valid_774658
  var valid_774659 = header.getOrDefault("X-Amz-Credential")
  valid_774659 = validateParameter(valid_774659, JString, required = false,
                                 default = nil)
  if valid_774659 != nil:
    section.add "X-Amz-Credential", valid_774659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774660: Call_GetDeleteDBSnapshot_774647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_774660.validator(path, query, header, formData, body)
  let scheme = call_774660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774660.url(scheme.get, call_774660.host, call_774660.base,
                         call_774660.route, valid.getOrDefault("path"))
  result = hook(call_774660, url, valid)

proc call*(call_774661: Call_GetDeleteDBSnapshot_774647;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  var query_774662 = newJObject()
  add(query_774662, "Action", newJString(Action))
  add(query_774662, "Version", newJString(Version))
  add(query_774662, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_774661.call(nil, query_774662, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_774647(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_774648, base: "/",
    url: url_GetDeleteDBSnapshot_774649, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_774696 = ref object of OpenApiRestCall_772581
proc url_PostDeleteDBSubnetGroup_774698(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteDBSubnetGroup_774697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774699 = query.getOrDefault("Action")
  valid_774699 = validateParameter(valid_774699, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_774699 != nil:
    section.add "Action", valid_774699
  var valid_774700 = query.getOrDefault("Version")
  valid_774700 = validateParameter(valid_774700, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774700 != nil:
    section.add "Version", valid_774700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774701 = header.getOrDefault("X-Amz-Date")
  valid_774701 = validateParameter(valid_774701, JString, required = false,
                                 default = nil)
  if valid_774701 != nil:
    section.add "X-Amz-Date", valid_774701
  var valid_774702 = header.getOrDefault("X-Amz-Security-Token")
  valid_774702 = validateParameter(valid_774702, JString, required = false,
                                 default = nil)
  if valid_774702 != nil:
    section.add "X-Amz-Security-Token", valid_774702
  var valid_774703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774703 = validateParameter(valid_774703, JString, required = false,
                                 default = nil)
  if valid_774703 != nil:
    section.add "X-Amz-Content-Sha256", valid_774703
  var valid_774704 = header.getOrDefault("X-Amz-Algorithm")
  valid_774704 = validateParameter(valid_774704, JString, required = false,
                                 default = nil)
  if valid_774704 != nil:
    section.add "X-Amz-Algorithm", valid_774704
  var valid_774705 = header.getOrDefault("X-Amz-Signature")
  valid_774705 = validateParameter(valid_774705, JString, required = false,
                                 default = nil)
  if valid_774705 != nil:
    section.add "X-Amz-Signature", valid_774705
  var valid_774706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774706 = validateParameter(valid_774706, JString, required = false,
                                 default = nil)
  if valid_774706 != nil:
    section.add "X-Amz-SignedHeaders", valid_774706
  var valid_774707 = header.getOrDefault("X-Amz-Credential")
  valid_774707 = validateParameter(valid_774707, JString, required = false,
                                 default = nil)
  if valid_774707 != nil:
    section.add "X-Amz-Credential", valid_774707
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_774708 = formData.getOrDefault("DBSubnetGroupName")
  valid_774708 = validateParameter(valid_774708, JString, required = true,
                                 default = nil)
  if valid_774708 != nil:
    section.add "DBSubnetGroupName", valid_774708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774709: Call_PostDeleteDBSubnetGroup_774696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774709.validator(path, query, header, formData, body)
  let scheme = call_774709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774709.url(scheme.get, call_774709.host, call_774709.base,
                         call_774709.route, valid.getOrDefault("path"))
  result = hook(call_774709, url, valid)

proc call*(call_774710: Call_PostDeleteDBSubnetGroup_774696;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774711 = newJObject()
  var formData_774712 = newJObject()
  add(formData_774712, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774711, "Action", newJString(Action))
  add(query_774711, "Version", newJString(Version))
  result = call_774710.call(nil, query_774711, nil, formData_774712, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_774696(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_774697, base: "/",
    url: url_PostDeleteDBSubnetGroup_774698, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_774680 = ref object of OpenApiRestCall_772581
proc url_GetDeleteDBSubnetGroup_774682(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteDBSubnetGroup_774681(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774683 = query.getOrDefault("Action")
  valid_774683 = validateParameter(valid_774683, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_774683 != nil:
    section.add "Action", valid_774683
  var valid_774684 = query.getOrDefault("DBSubnetGroupName")
  valid_774684 = validateParameter(valid_774684, JString, required = true,
                                 default = nil)
  if valid_774684 != nil:
    section.add "DBSubnetGroupName", valid_774684
  var valid_774685 = query.getOrDefault("Version")
  valid_774685 = validateParameter(valid_774685, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774685 != nil:
    section.add "Version", valid_774685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774686 = header.getOrDefault("X-Amz-Date")
  valid_774686 = validateParameter(valid_774686, JString, required = false,
                                 default = nil)
  if valid_774686 != nil:
    section.add "X-Amz-Date", valid_774686
  var valid_774687 = header.getOrDefault("X-Amz-Security-Token")
  valid_774687 = validateParameter(valid_774687, JString, required = false,
                                 default = nil)
  if valid_774687 != nil:
    section.add "X-Amz-Security-Token", valid_774687
  var valid_774688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774688 = validateParameter(valid_774688, JString, required = false,
                                 default = nil)
  if valid_774688 != nil:
    section.add "X-Amz-Content-Sha256", valid_774688
  var valid_774689 = header.getOrDefault("X-Amz-Algorithm")
  valid_774689 = validateParameter(valid_774689, JString, required = false,
                                 default = nil)
  if valid_774689 != nil:
    section.add "X-Amz-Algorithm", valid_774689
  var valid_774690 = header.getOrDefault("X-Amz-Signature")
  valid_774690 = validateParameter(valid_774690, JString, required = false,
                                 default = nil)
  if valid_774690 != nil:
    section.add "X-Amz-Signature", valid_774690
  var valid_774691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774691 = validateParameter(valid_774691, JString, required = false,
                                 default = nil)
  if valid_774691 != nil:
    section.add "X-Amz-SignedHeaders", valid_774691
  var valid_774692 = header.getOrDefault("X-Amz-Credential")
  valid_774692 = validateParameter(valid_774692, JString, required = false,
                                 default = nil)
  if valid_774692 != nil:
    section.add "X-Amz-Credential", valid_774692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774693: Call_GetDeleteDBSubnetGroup_774680; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_774693.validator(path, query, header, formData, body)
  let scheme = call_774693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774693.url(scheme.get, call_774693.host, call_774693.base,
                         call_774693.route, valid.getOrDefault("path"))
  result = hook(call_774693, url, valid)

proc call*(call_774694: Call_GetDeleteDBSubnetGroup_774680;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_774695 = newJObject()
  add(query_774695, "Action", newJString(Action))
  add(query_774695, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_774695, "Version", newJString(Version))
  result = call_774694.call(nil, query_774695, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_774680(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_774681, base: "/",
    url: url_GetDeleteDBSubnetGroup_774682, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_774729 = ref object of OpenApiRestCall_772581
proc url_PostDeleteEventSubscription_774731(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteEventSubscription_774730(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774732 = query.getOrDefault("Action")
  valid_774732 = validateParameter(valid_774732, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_774732 != nil:
    section.add "Action", valid_774732
  var valid_774733 = query.getOrDefault("Version")
  valid_774733 = validateParameter(valid_774733, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774733 != nil:
    section.add "Version", valid_774733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774734 = header.getOrDefault("X-Amz-Date")
  valid_774734 = validateParameter(valid_774734, JString, required = false,
                                 default = nil)
  if valid_774734 != nil:
    section.add "X-Amz-Date", valid_774734
  var valid_774735 = header.getOrDefault("X-Amz-Security-Token")
  valid_774735 = validateParameter(valid_774735, JString, required = false,
                                 default = nil)
  if valid_774735 != nil:
    section.add "X-Amz-Security-Token", valid_774735
  var valid_774736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774736 = validateParameter(valid_774736, JString, required = false,
                                 default = nil)
  if valid_774736 != nil:
    section.add "X-Amz-Content-Sha256", valid_774736
  var valid_774737 = header.getOrDefault("X-Amz-Algorithm")
  valid_774737 = validateParameter(valid_774737, JString, required = false,
                                 default = nil)
  if valid_774737 != nil:
    section.add "X-Amz-Algorithm", valid_774737
  var valid_774738 = header.getOrDefault("X-Amz-Signature")
  valid_774738 = validateParameter(valid_774738, JString, required = false,
                                 default = nil)
  if valid_774738 != nil:
    section.add "X-Amz-Signature", valid_774738
  var valid_774739 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774739 = validateParameter(valid_774739, JString, required = false,
                                 default = nil)
  if valid_774739 != nil:
    section.add "X-Amz-SignedHeaders", valid_774739
  var valid_774740 = header.getOrDefault("X-Amz-Credential")
  valid_774740 = validateParameter(valid_774740, JString, required = false,
                                 default = nil)
  if valid_774740 != nil:
    section.add "X-Amz-Credential", valid_774740
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_774741 = formData.getOrDefault("SubscriptionName")
  valid_774741 = validateParameter(valid_774741, JString, required = true,
                                 default = nil)
  if valid_774741 != nil:
    section.add "SubscriptionName", valid_774741
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774742: Call_PostDeleteEventSubscription_774729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_774742.validator(path, query, header, formData, body)
  let scheme = call_774742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774742.url(scheme.get, call_774742.host, call_774742.base,
                         call_774742.route, valid.getOrDefault("path"))
  result = hook(call_774742, url, valid)

proc call*(call_774743: Call_PostDeleteEventSubscription_774729;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774744 = newJObject()
  var formData_774745 = newJObject()
  add(formData_774745, "SubscriptionName", newJString(SubscriptionName))
  add(query_774744, "Action", newJString(Action))
  add(query_774744, "Version", newJString(Version))
  result = call_774743.call(nil, query_774744, nil, formData_774745, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_774729(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_774730, base: "/",
    url: url_PostDeleteEventSubscription_774731,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_774713 = ref object of OpenApiRestCall_772581
proc url_GetDeleteEventSubscription_774715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteEventSubscription_774714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774716 = query.getOrDefault("Action")
  valid_774716 = validateParameter(valid_774716, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_774716 != nil:
    section.add "Action", valid_774716
  var valid_774717 = query.getOrDefault("SubscriptionName")
  valid_774717 = validateParameter(valid_774717, JString, required = true,
                                 default = nil)
  if valid_774717 != nil:
    section.add "SubscriptionName", valid_774717
  var valid_774718 = query.getOrDefault("Version")
  valid_774718 = validateParameter(valid_774718, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774718 != nil:
    section.add "Version", valid_774718
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774719 = header.getOrDefault("X-Amz-Date")
  valid_774719 = validateParameter(valid_774719, JString, required = false,
                                 default = nil)
  if valid_774719 != nil:
    section.add "X-Amz-Date", valid_774719
  var valid_774720 = header.getOrDefault("X-Amz-Security-Token")
  valid_774720 = validateParameter(valid_774720, JString, required = false,
                                 default = nil)
  if valid_774720 != nil:
    section.add "X-Amz-Security-Token", valid_774720
  var valid_774721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774721 = validateParameter(valid_774721, JString, required = false,
                                 default = nil)
  if valid_774721 != nil:
    section.add "X-Amz-Content-Sha256", valid_774721
  var valid_774722 = header.getOrDefault("X-Amz-Algorithm")
  valid_774722 = validateParameter(valid_774722, JString, required = false,
                                 default = nil)
  if valid_774722 != nil:
    section.add "X-Amz-Algorithm", valid_774722
  var valid_774723 = header.getOrDefault("X-Amz-Signature")
  valid_774723 = validateParameter(valid_774723, JString, required = false,
                                 default = nil)
  if valid_774723 != nil:
    section.add "X-Amz-Signature", valid_774723
  var valid_774724 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774724 = validateParameter(valid_774724, JString, required = false,
                                 default = nil)
  if valid_774724 != nil:
    section.add "X-Amz-SignedHeaders", valid_774724
  var valid_774725 = header.getOrDefault("X-Amz-Credential")
  valid_774725 = validateParameter(valid_774725, JString, required = false,
                                 default = nil)
  if valid_774725 != nil:
    section.add "X-Amz-Credential", valid_774725
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774726: Call_GetDeleteEventSubscription_774713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_774726.validator(path, query, header, formData, body)
  let scheme = call_774726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774726.url(scheme.get, call_774726.host, call_774726.base,
                         call_774726.route, valid.getOrDefault("path"))
  result = hook(call_774726, url, valid)

proc call*(call_774727: Call_GetDeleteEventSubscription_774713;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: string (required)
  var query_774728 = newJObject()
  add(query_774728, "Action", newJString(Action))
  add(query_774728, "SubscriptionName", newJString(SubscriptionName))
  add(query_774728, "Version", newJString(Version))
  result = call_774727.call(nil, query_774728, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_774713(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_774714, base: "/",
    url: url_GetDeleteEventSubscription_774715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_774762 = ref object of OpenApiRestCall_772581
proc url_PostDeleteGlobalCluster_774764(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGlobalCluster_774763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774765 = query.getOrDefault("Action")
  valid_774765 = validateParameter(valid_774765, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_774765 != nil:
    section.add "Action", valid_774765
  var valid_774766 = query.getOrDefault("Version")
  valid_774766 = validateParameter(valid_774766, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774766 != nil:
    section.add "Version", valid_774766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774767 = header.getOrDefault("X-Amz-Date")
  valid_774767 = validateParameter(valid_774767, JString, required = false,
                                 default = nil)
  if valid_774767 != nil:
    section.add "X-Amz-Date", valid_774767
  var valid_774768 = header.getOrDefault("X-Amz-Security-Token")
  valid_774768 = validateParameter(valid_774768, JString, required = false,
                                 default = nil)
  if valid_774768 != nil:
    section.add "X-Amz-Security-Token", valid_774768
  var valid_774769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774769 = validateParameter(valid_774769, JString, required = false,
                                 default = nil)
  if valid_774769 != nil:
    section.add "X-Amz-Content-Sha256", valid_774769
  var valid_774770 = header.getOrDefault("X-Amz-Algorithm")
  valid_774770 = validateParameter(valid_774770, JString, required = false,
                                 default = nil)
  if valid_774770 != nil:
    section.add "X-Amz-Algorithm", valid_774770
  var valid_774771 = header.getOrDefault("X-Amz-Signature")
  valid_774771 = validateParameter(valid_774771, JString, required = false,
                                 default = nil)
  if valid_774771 != nil:
    section.add "X-Amz-Signature", valid_774771
  var valid_774772 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774772 = validateParameter(valid_774772, JString, required = false,
                                 default = nil)
  if valid_774772 != nil:
    section.add "X-Amz-SignedHeaders", valid_774772
  var valid_774773 = header.getOrDefault("X-Amz-Credential")
  valid_774773 = validateParameter(valid_774773, JString, required = false,
                                 default = nil)
  if valid_774773 != nil:
    section.add "X-Amz-Credential", valid_774773
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_774774 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_774774 = validateParameter(valid_774774, JString, required = true,
                                 default = nil)
  if valid_774774 != nil:
    section.add "GlobalClusterIdentifier", valid_774774
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774775: Call_PostDeleteGlobalCluster_774762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774775.validator(path, query, header, formData, body)
  let scheme = call_774775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774775.url(scheme.get, call_774775.host, call_774775.base,
                         call_774775.route, valid.getOrDefault("path"))
  result = hook(call_774775, url, valid)

proc call*(call_774776: Call_PostDeleteGlobalCluster_774762;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774777 = newJObject()
  var formData_774778 = newJObject()
  add(formData_774778, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_774777, "Action", newJString(Action))
  add(query_774777, "Version", newJString(Version))
  result = call_774776.call(nil, query_774777, nil, formData_774778, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_774762(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_774763, base: "/",
    url: url_PostDeleteGlobalCluster_774764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_774746 = ref object of OpenApiRestCall_772581
proc url_GetDeleteGlobalCluster_774748(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGlobalCluster_774747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774749 = query.getOrDefault("Action")
  valid_774749 = validateParameter(valid_774749, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_774749 != nil:
    section.add "Action", valid_774749
  var valid_774750 = query.getOrDefault("GlobalClusterIdentifier")
  valid_774750 = validateParameter(valid_774750, JString, required = true,
                                 default = nil)
  if valid_774750 != nil:
    section.add "GlobalClusterIdentifier", valid_774750
  var valid_774751 = query.getOrDefault("Version")
  valid_774751 = validateParameter(valid_774751, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774751 != nil:
    section.add "Version", valid_774751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774752 = header.getOrDefault("X-Amz-Date")
  valid_774752 = validateParameter(valid_774752, JString, required = false,
                                 default = nil)
  if valid_774752 != nil:
    section.add "X-Amz-Date", valid_774752
  var valid_774753 = header.getOrDefault("X-Amz-Security-Token")
  valid_774753 = validateParameter(valid_774753, JString, required = false,
                                 default = nil)
  if valid_774753 != nil:
    section.add "X-Amz-Security-Token", valid_774753
  var valid_774754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774754 = validateParameter(valid_774754, JString, required = false,
                                 default = nil)
  if valid_774754 != nil:
    section.add "X-Amz-Content-Sha256", valid_774754
  var valid_774755 = header.getOrDefault("X-Amz-Algorithm")
  valid_774755 = validateParameter(valid_774755, JString, required = false,
                                 default = nil)
  if valid_774755 != nil:
    section.add "X-Amz-Algorithm", valid_774755
  var valid_774756 = header.getOrDefault("X-Amz-Signature")
  valid_774756 = validateParameter(valid_774756, JString, required = false,
                                 default = nil)
  if valid_774756 != nil:
    section.add "X-Amz-Signature", valid_774756
  var valid_774757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774757 = validateParameter(valid_774757, JString, required = false,
                                 default = nil)
  if valid_774757 != nil:
    section.add "X-Amz-SignedHeaders", valid_774757
  var valid_774758 = header.getOrDefault("X-Amz-Credential")
  valid_774758 = validateParameter(valid_774758, JString, required = false,
                                 default = nil)
  if valid_774758 != nil:
    section.add "X-Amz-Credential", valid_774758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774759: Call_GetDeleteGlobalCluster_774746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774759.validator(path, query, header, formData, body)
  let scheme = call_774759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774759.url(scheme.get, call_774759.host, call_774759.base,
                         call_774759.route, valid.getOrDefault("path"))
  result = hook(call_774759, url, valid)

proc call*(call_774760: Call_GetDeleteGlobalCluster_774746;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: string (required)
  var query_774761 = newJObject()
  add(query_774761, "Action", newJString(Action))
  add(query_774761, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_774761, "Version", newJString(Version))
  result = call_774760.call(nil, query_774761, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_774746(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_774747, base: "/",
    url: url_GetDeleteGlobalCluster_774748, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_774795 = ref object of OpenApiRestCall_772581
proc url_PostDeleteOptionGroup_774797(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteOptionGroup_774796(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774798 = query.getOrDefault("Action")
  valid_774798 = validateParameter(valid_774798, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_774798 != nil:
    section.add "Action", valid_774798
  var valid_774799 = query.getOrDefault("Version")
  valid_774799 = validateParameter(valid_774799, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774799 != nil:
    section.add "Version", valid_774799
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774800 = header.getOrDefault("X-Amz-Date")
  valid_774800 = validateParameter(valid_774800, JString, required = false,
                                 default = nil)
  if valid_774800 != nil:
    section.add "X-Amz-Date", valid_774800
  var valid_774801 = header.getOrDefault("X-Amz-Security-Token")
  valid_774801 = validateParameter(valid_774801, JString, required = false,
                                 default = nil)
  if valid_774801 != nil:
    section.add "X-Amz-Security-Token", valid_774801
  var valid_774802 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774802 = validateParameter(valid_774802, JString, required = false,
                                 default = nil)
  if valid_774802 != nil:
    section.add "X-Amz-Content-Sha256", valid_774802
  var valid_774803 = header.getOrDefault("X-Amz-Algorithm")
  valid_774803 = validateParameter(valid_774803, JString, required = false,
                                 default = nil)
  if valid_774803 != nil:
    section.add "X-Amz-Algorithm", valid_774803
  var valid_774804 = header.getOrDefault("X-Amz-Signature")
  valid_774804 = validateParameter(valid_774804, JString, required = false,
                                 default = nil)
  if valid_774804 != nil:
    section.add "X-Amz-Signature", valid_774804
  var valid_774805 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774805 = validateParameter(valid_774805, JString, required = false,
                                 default = nil)
  if valid_774805 != nil:
    section.add "X-Amz-SignedHeaders", valid_774805
  var valid_774806 = header.getOrDefault("X-Amz-Credential")
  valid_774806 = validateParameter(valid_774806, JString, required = false,
                                 default = nil)
  if valid_774806 != nil:
    section.add "X-Amz-Credential", valid_774806
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_774807 = formData.getOrDefault("OptionGroupName")
  valid_774807 = validateParameter(valid_774807, JString, required = true,
                                 default = nil)
  if valid_774807 != nil:
    section.add "OptionGroupName", valid_774807
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774808: Call_PostDeleteOptionGroup_774795; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_774808.validator(path, query, header, formData, body)
  let scheme = call_774808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774808.url(scheme.get, call_774808.host, call_774808.base,
                         call_774808.route, valid.getOrDefault("path"))
  result = hook(call_774808, url, valid)

proc call*(call_774809: Call_PostDeleteOptionGroup_774795; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774810 = newJObject()
  var formData_774811 = newJObject()
  add(formData_774811, "OptionGroupName", newJString(OptionGroupName))
  add(query_774810, "Action", newJString(Action))
  add(query_774810, "Version", newJString(Version))
  result = call_774809.call(nil, query_774810, nil, formData_774811, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_774795(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_774796, base: "/",
    url: url_PostDeleteOptionGroup_774797, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_774779 = ref object of OpenApiRestCall_772581
proc url_GetDeleteOptionGroup_774781(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteOptionGroup_774780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_774782 = query.getOrDefault("OptionGroupName")
  valid_774782 = validateParameter(valid_774782, JString, required = true,
                                 default = nil)
  if valid_774782 != nil:
    section.add "OptionGroupName", valid_774782
  var valid_774783 = query.getOrDefault("Action")
  valid_774783 = validateParameter(valid_774783, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_774783 != nil:
    section.add "Action", valid_774783
  var valid_774784 = query.getOrDefault("Version")
  valid_774784 = validateParameter(valid_774784, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774784 != nil:
    section.add "Version", valid_774784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774785 = header.getOrDefault("X-Amz-Date")
  valid_774785 = validateParameter(valid_774785, JString, required = false,
                                 default = nil)
  if valid_774785 != nil:
    section.add "X-Amz-Date", valid_774785
  var valid_774786 = header.getOrDefault("X-Amz-Security-Token")
  valid_774786 = validateParameter(valid_774786, JString, required = false,
                                 default = nil)
  if valid_774786 != nil:
    section.add "X-Amz-Security-Token", valid_774786
  var valid_774787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774787 = validateParameter(valid_774787, JString, required = false,
                                 default = nil)
  if valid_774787 != nil:
    section.add "X-Amz-Content-Sha256", valid_774787
  var valid_774788 = header.getOrDefault("X-Amz-Algorithm")
  valid_774788 = validateParameter(valid_774788, JString, required = false,
                                 default = nil)
  if valid_774788 != nil:
    section.add "X-Amz-Algorithm", valid_774788
  var valid_774789 = header.getOrDefault("X-Amz-Signature")
  valid_774789 = validateParameter(valid_774789, JString, required = false,
                                 default = nil)
  if valid_774789 != nil:
    section.add "X-Amz-Signature", valid_774789
  var valid_774790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774790 = validateParameter(valid_774790, JString, required = false,
                                 default = nil)
  if valid_774790 != nil:
    section.add "X-Amz-SignedHeaders", valid_774790
  var valid_774791 = header.getOrDefault("X-Amz-Credential")
  valid_774791 = validateParameter(valid_774791, JString, required = false,
                                 default = nil)
  if valid_774791 != nil:
    section.add "X-Amz-Credential", valid_774791
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774792: Call_GetDeleteOptionGroup_774779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_774792.validator(path, query, header, formData, body)
  let scheme = call_774792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774792.url(scheme.get, call_774792.host, call_774792.base,
                         call_774792.route, valid.getOrDefault("path"))
  result = hook(call_774792, url, valid)

proc call*(call_774793: Call_GetDeleteOptionGroup_774779; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774794 = newJObject()
  add(query_774794, "OptionGroupName", newJString(OptionGroupName))
  add(query_774794, "Action", newJString(Action))
  add(query_774794, "Version", newJString(Version))
  result = call_774793.call(nil, query_774794, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_774779(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_774780, base: "/",
    url: url_GetDeleteOptionGroup_774781, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_774827 = ref object of OpenApiRestCall_772581
proc url_PostDescribeAccountAttributes_774829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeAccountAttributes_774828(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774830 = query.getOrDefault("Action")
  valid_774830 = validateParameter(valid_774830, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_774830 != nil:
    section.add "Action", valid_774830
  var valid_774831 = query.getOrDefault("Version")
  valid_774831 = validateParameter(valid_774831, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774831 != nil:
    section.add "Version", valid_774831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774832 = header.getOrDefault("X-Amz-Date")
  valid_774832 = validateParameter(valid_774832, JString, required = false,
                                 default = nil)
  if valid_774832 != nil:
    section.add "X-Amz-Date", valid_774832
  var valid_774833 = header.getOrDefault("X-Amz-Security-Token")
  valid_774833 = validateParameter(valid_774833, JString, required = false,
                                 default = nil)
  if valid_774833 != nil:
    section.add "X-Amz-Security-Token", valid_774833
  var valid_774834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774834 = validateParameter(valid_774834, JString, required = false,
                                 default = nil)
  if valid_774834 != nil:
    section.add "X-Amz-Content-Sha256", valid_774834
  var valid_774835 = header.getOrDefault("X-Amz-Algorithm")
  valid_774835 = validateParameter(valid_774835, JString, required = false,
                                 default = nil)
  if valid_774835 != nil:
    section.add "X-Amz-Algorithm", valid_774835
  var valid_774836 = header.getOrDefault("X-Amz-Signature")
  valid_774836 = validateParameter(valid_774836, JString, required = false,
                                 default = nil)
  if valid_774836 != nil:
    section.add "X-Amz-Signature", valid_774836
  var valid_774837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774837 = validateParameter(valid_774837, JString, required = false,
                                 default = nil)
  if valid_774837 != nil:
    section.add "X-Amz-SignedHeaders", valid_774837
  var valid_774838 = header.getOrDefault("X-Amz-Credential")
  valid_774838 = validateParameter(valid_774838, JString, required = false,
                                 default = nil)
  if valid_774838 != nil:
    section.add "X-Amz-Credential", valid_774838
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774839: Call_PostDescribeAccountAttributes_774827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_774839.validator(path, query, header, formData, body)
  let scheme = call_774839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774839.url(scheme.get, call_774839.host, call_774839.base,
                         call_774839.route, valid.getOrDefault("path"))
  result = hook(call_774839, url, valid)

proc call*(call_774840: Call_PostDescribeAccountAttributes_774827;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774841 = newJObject()
  add(query_774841, "Action", newJString(Action))
  add(query_774841, "Version", newJString(Version))
  result = call_774840.call(nil, query_774841, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_774827(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_774828, base: "/",
    url: url_PostDescribeAccountAttributes_774829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_774812 = ref object of OpenApiRestCall_772581
proc url_GetDescribeAccountAttributes_774814(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeAccountAttributes_774813(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774815 = query.getOrDefault("Action")
  valid_774815 = validateParameter(valid_774815, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_774815 != nil:
    section.add "Action", valid_774815
  var valid_774816 = query.getOrDefault("Version")
  valid_774816 = validateParameter(valid_774816, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774816 != nil:
    section.add "Version", valid_774816
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774817 = header.getOrDefault("X-Amz-Date")
  valid_774817 = validateParameter(valid_774817, JString, required = false,
                                 default = nil)
  if valid_774817 != nil:
    section.add "X-Amz-Date", valid_774817
  var valid_774818 = header.getOrDefault("X-Amz-Security-Token")
  valid_774818 = validateParameter(valid_774818, JString, required = false,
                                 default = nil)
  if valid_774818 != nil:
    section.add "X-Amz-Security-Token", valid_774818
  var valid_774819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774819 = validateParameter(valid_774819, JString, required = false,
                                 default = nil)
  if valid_774819 != nil:
    section.add "X-Amz-Content-Sha256", valid_774819
  var valid_774820 = header.getOrDefault("X-Amz-Algorithm")
  valid_774820 = validateParameter(valid_774820, JString, required = false,
                                 default = nil)
  if valid_774820 != nil:
    section.add "X-Amz-Algorithm", valid_774820
  var valid_774821 = header.getOrDefault("X-Amz-Signature")
  valid_774821 = validateParameter(valid_774821, JString, required = false,
                                 default = nil)
  if valid_774821 != nil:
    section.add "X-Amz-Signature", valid_774821
  var valid_774822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774822 = validateParameter(valid_774822, JString, required = false,
                                 default = nil)
  if valid_774822 != nil:
    section.add "X-Amz-SignedHeaders", valid_774822
  var valid_774823 = header.getOrDefault("X-Amz-Credential")
  valid_774823 = validateParameter(valid_774823, JString, required = false,
                                 default = nil)
  if valid_774823 != nil:
    section.add "X-Amz-Credential", valid_774823
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774824: Call_GetDescribeAccountAttributes_774812; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_774824.validator(path, query, header, formData, body)
  let scheme = call_774824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774824.url(scheme.get, call_774824.host, call_774824.base,
                         call_774824.route, valid.getOrDefault("path"))
  result = hook(call_774824, url, valid)

proc call*(call_774825: Call_GetDescribeAccountAttributes_774812;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774826 = newJObject()
  add(query_774826, "Action", newJString(Action))
  add(query_774826, "Version", newJString(Version))
  result = call_774825.call(nil, query_774826, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_774812(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_774813, base: "/",
    url: url_GetDescribeAccountAttributes_774814,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_774861 = ref object of OpenApiRestCall_772581
proc url_PostDescribeCertificates_774863(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCertificates_774862(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774864 = query.getOrDefault("Action")
  valid_774864 = validateParameter(valid_774864, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_774864 != nil:
    section.add "Action", valid_774864
  var valid_774865 = query.getOrDefault("Version")
  valid_774865 = validateParameter(valid_774865, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774865 != nil:
    section.add "Version", valid_774865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774866 = header.getOrDefault("X-Amz-Date")
  valid_774866 = validateParameter(valid_774866, JString, required = false,
                                 default = nil)
  if valid_774866 != nil:
    section.add "X-Amz-Date", valid_774866
  var valid_774867 = header.getOrDefault("X-Amz-Security-Token")
  valid_774867 = validateParameter(valid_774867, JString, required = false,
                                 default = nil)
  if valid_774867 != nil:
    section.add "X-Amz-Security-Token", valid_774867
  var valid_774868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774868 = validateParameter(valid_774868, JString, required = false,
                                 default = nil)
  if valid_774868 != nil:
    section.add "X-Amz-Content-Sha256", valid_774868
  var valid_774869 = header.getOrDefault("X-Amz-Algorithm")
  valid_774869 = validateParameter(valid_774869, JString, required = false,
                                 default = nil)
  if valid_774869 != nil:
    section.add "X-Amz-Algorithm", valid_774869
  var valid_774870 = header.getOrDefault("X-Amz-Signature")
  valid_774870 = validateParameter(valid_774870, JString, required = false,
                                 default = nil)
  if valid_774870 != nil:
    section.add "X-Amz-Signature", valid_774870
  var valid_774871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774871 = validateParameter(valid_774871, JString, required = false,
                                 default = nil)
  if valid_774871 != nil:
    section.add "X-Amz-SignedHeaders", valid_774871
  var valid_774872 = header.getOrDefault("X-Amz-Credential")
  valid_774872 = validateParameter(valid_774872, JString, required = false,
                                 default = nil)
  if valid_774872 != nil:
    section.add "X-Amz-Credential", valid_774872
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774873 = formData.getOrDefault("CertificateIdentifier")
  valid_774873 = validateParameter(valid_774873, JString, required = false,
                                 default = nil)
  if valid_774873 != nil:
    section.add "CertificateIdentifier", valid_774873
  var valid_774874 = formData.getOrDefault("Marker")
  valid_774874 = validateParameter(valid_774874, JString, required = false,
                                 default = nil)
  if valid_774874 != nil:
    section.add "Marker", valid_774874
  var valid_774875 = formData.getOrDefault("Filters")
  valid_774875 = validateParameter(valid_774875, JArray, required = false,
                                 default = nil)
  if valid_774875 != nil:
    section.add "Filters", valid_774875
  var valid_774876 = formData.getOrDefault("MaxRecords")
  valid_774876 = validateParameter(valid_774876, JInt, required = false, default = nil)
  if valid_774876 != nil:
    section.add "MaxRecords", valid_774876
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774877: Call_PostDescribeCertificates_774861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_774877.validator(path, query, header, formData, body)
  let scheme = call_774877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774877.url(scheme.get, call_774877.host, call_774877.base,
                         call_774877.route, valid.getOrDefault("path"))
  result = hook(call_774877, url, valid)

proc call*(call_774878: Call_PostDescribeCertificates_774861;
          CertificateIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_774879 = newJObject()
  var formData_774880 = newJObject()
  add(formData_774880, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(formData_774880, "Marker", newJString(Marker))
  add(query_774879, "Action", newJString(Action))
  if Filters != nil:
    formData_774880.add "Filters", Filters
  add(formData_774880, "MaxRecords", newJInt(MaxRecords))
  add(query_774879, "Version", newJString(Version))
  result = call_774878.call(nil, query_774879, nil, formData_774880, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_774861(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_774862, base: "/",
    url: url_PostDescribeCertificates_774863, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_774842 = ref object of OpenApiRestCall_772581
proc url_GetDescribeCertificates_774844(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCertificates_774843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_774845 = query.getOrDefault("MaxRecords")
  valid_774845 = validateParameter(valid_774845, JInt, required = false, default = nil)
  if valid_774845 != nil:
    section.add "MaxRecords", valid_774845
  var valid_774846 = query.getOrDefault("CertificateIdentifier")
  valid_774846 = validateParameter(valid_774846, JString, required = false,
                                 default = nil)
  if valid_774846 != nil:
    section.add "CertificateIdentifier", valid_774846
  var valid_774847 = query.getOrDefault("Filters")
  valid_774847 = validateParameter(valid_774847, JArray, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "Filters", valid_774847
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774848 = query.getOrDefault("Action")
  valid_774848 = validateParameter(valid_774848, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_774848 != nil:
    section.add "Action", valid_774848
  var valid_774849 = query.getOrDefault("Marker")
  valid_774849 = validateParameter(valid_774849, JString, required = false,
                                 default = nil)
  if valid_774849 != nil:
    section.add "Marker", valid_774849
  var valid_774850 = query.getOrDefault("Version")
  valid_774850 = validateParameter(valid_774850, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774850 != nil:
    section.add "Version", valid_774850
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774851 = header.getOrDefault("X-Amz-Date")
  valid_774851 = validateParameter(valid_774851, JString, required = false,
                                 default = nil)
  if valid_774851 != nil:
    section.add "X-Amz-Date", valid_774851
  var valid_774852 = header.getOrDefault("X-Amz-Security-Token")
  valid_774852 = validateParameter(valid_774852, JString, required = false,
                                 default = nil)
  if valid_774852 != nil:
    section.add "X-Amz-Security-Token", valid_774852
  var valid_774853 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774853 = validateParameter(valid_774853, JString, required = false,
                                 default = nil)
  if valid_774853 != nil:
    section.add "X-Amz-Content-Sha256", valid_774853
  var valid_774854 = header.getOrDefault("X-Amz-Algorithm")
  valid_774854 = validateParameter(valid_774854, JString, required = false,
                                 default = nil)
  if valid_774854 != nil:
    section.add "X-Amz-Algorithm", valid_774854
  var valid_774855 = header.getOrDefault("X-Amz-Signature")
  valid_774855 = validateParameter(valid_774855, JString, required = false,
                                 default = nil)
  if valid_774855 != nil:
    section.add "X-Amz-Signature", valid_774855
  var valid_774856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774856 = validateParameter(valid_774856, JString, required = false,
                                 default = nil)
  if valid_774856 != nil:
    section.add "X-Amz-SignedHeaders", valid_774856
  var valid_774857 = header.getOrDefault("X-Amz-Credential")
  valid_774857 = validateParameter(valid_774857, JString, required = false,
                                 default = nil)
  if valid_774857 != nil:
    section.add "X-Amz-Credential", valid_774857
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774858: Call_GetDescribeCertificates_774842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_774858.validator(path, query, header, formData, body)
  let scheme = call_774858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774858.url(scheme.get, call_774858.host, call_774858.base,
                         call_774858.route, valid.getOrDefault("path"))
  result = hook(call_774858, url, valid)

proc call*(call_774859: Call_GetDescribeCertificates_774842; MaxRecords: int = 0;
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeCertificates"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_774860 = newJObject()
  add(query_774860, "MaxRecords", newJInt(MaxRecords))
  add(query_774860, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_774860.add "Filters", Filters
  add(query_774860, "Action", newJString(Action))
  add(query_774860, "Marker", newJString(Marker))
  add(query_774860, "Version", newJString(Version))
  result = call_774859.call(nil, query_774860, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_774842(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_774843, base: "/",
    url: url_GetDescribeCertificates_774844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_774901 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterBacktracks_774903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterBacktracks_774902(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774904 = query.getOrDefault("Action")
  valid_774904 = validateParameter(valid_774904, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_774904 != nil:
    section.add "Action", valid_774904
  var valid_774905 = query.getOrDefault("Version")
  valid_774905 = validateParameter(valid_774905, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774905 != nil:
    section.add "Version", valid_774905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774906 = header.getOrDefault("X-Amz-Date")
  valid_774906 = validateParameter(valid_774906, JString, required = false,
                                 default = nil)
  if valid_774906 != nil:
    section.add "X-Amz-Date", valid_774906
  var valid_774907 = header.getOrDefault("X-Amz-Security-Token")
  valid_774907 = validateParameter(valid_774907, JString, required = false,
                                 default = nil)
  if valid_774907 != nil:
    section.add "X-Amz-Security-Token", valid_774907
  var valid_774908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774908 = validateParameter(valid_774908, JString, required = false,
                                 default = nil)
  if valid_774908 != nil:
    section.add "X-Amz-Content-Sha256", valid_774908
  var valid_774909 = header.getOrDefault("X-Amz-Algorithm")
  valid_774909 = validateParameter(valid_774909, JString, required = false,
                                 default = nil)
  if valid_774909 != nil:
    section.add "X-Amz-Algorithm", valid_774909
  var valid_774910 = header.getOrDefault("X-Amz-Signature")
  valid_774910 = validateParameter(valid_774910, JString, required = false,
                                 default = nil)
  if valid_774910 != nil:
    section.add "X-Amz-Signature", valid_774910
  var valid_774911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774911 = validateParameter(valid_774911, JString, required = false,
                                 default = nil)
  if valid_774911 != nil:
    section.add "X-Amz-SignedHeaders", valid_774911
  var valid_774912 = header.getOrDefault("X-Amz-Credential")
  valid_774912 = validateParameter(valid_774912, JString, required = false,
                                 default = nil)
  if valid_774912 != nil:
    section.add "X-Amz-Credential", valid_774912
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_774913 = formData.getOrDefault("Marker")
  valid_774913 = validateParameter(valid_774913, JString, required = false,
                                 default = nil)
  if valid_774913 != nil:
    section.add "Marker", valid_774913
  var valid_774914 = formData.getOrDefault("BacktrackIdentifier")
  valid_774914 = validateParameter(valid_774914, JString, required = false,
                                 default = nil)
  if valid_774914 != nil:
    section.add "BacktrackIdentifier", valid_774914
  var valid_774915 = formData.getOrDefault("Filters")
  valid_774915 = validateParameter(valid_774915, JArray, required = false,
                                 default = nil)
  if valid_774915 != nil:
    section.add "Filters", valid_774915
  var valid_774916 = formData.getOrDefault("MaxRecords")
  valid_774916 = validateParameter(valid_774916, JInt, required = false, default = nil)
  if valid_774916 != nil:
    section.add "MaxRecords", valid_774916
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774917 = formData.getOrDefault("DBClusterIdentifier")
  valid_774917 = validateParameter(valid_774917, JString, required = true,
                                 default = nil)
  if valid_774917 != nil:
    section.add "DBClusterIdentifier", valid_774917
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774918: Call_PostDescribeDBClusterBacktracks_774901;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774918.validator(path, query, header, formData, body)
  let scheme = call_774918.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774918.url(scheme.get, call_774918.host, call_774918.base,
                         call_774918.route, valid.getOrDefault("path"))
  result = hook(call_774918, url, valid)

proc call*(call_774919: Call_PostDescribeDBClusterBacktracks_774901;
          DBClusterIdentifier: string; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_774920 = newJObject()
  var formData_774921 = newJObject()
  add(formData_774921, "Marker", newJString(Marker))
  add(query_774920, "Action", newJString(Action))
  add(formData_774921, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_774921.add "Filters", Filters
  add(formData_774921, "MaxRecords", newJInt(MaxRecords))
  add(formData_774921, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_774920, "Version", newJString(Version))
  result = call_774919.call(nil, query_774920, nil, formData_774921, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_774901(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_774902, base: "/",
    url: url_PostDescribeDBClusterBacktracks_774903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_774881 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterBacktracks_774883(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterBacktracks_774882(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_774884 = query.getOrDefault("MaxRecords")
  valid_774884 = validateParameter(valid_774884, JInt, required = false, default = nil)
  if valid_774884 != nil:
    section.add "MaxRecords", valid_774884
  var valid_774885 = query.getOrDefault("BacktrackIdentifier")
  valid_774885 = validateParameter(valid_774885, JString, required = false,
                                 default = nil)
  if valid_774885 != nil:
    section.add "BacktrackIdentifier", valid_774885
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_774886 = query.getOrDefault("DBClusterIdentifier")
  valid_774886 = validateParameter(valid_774886, JString, required = true,
                                 default = nil)
  if valid_774886 != nil:
    section.add "DBClusterIdentifier", valid_774886
  var valid_774887 = query.getOrDefault("Filters")
  valid_774887 = validateParameter(valid_774887, JArray, required = false,
                                 default = nil)
  if valid_774887 != nil:
    section.add "Filters", valid_774887
  var valid_774888 = query.getOrDefault("Action")
  valid_774888 = validateParameter(valid_774888, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_774888 != nil:
    section.add "Action", valid_774888
  var valid_774889 = query.getOrDefault("Marker")
  valid_774889 = validateParameter(valid_774889, JString, required = false,
                                 default = nil)
  if valid_774889 != nil:
    section.add "Marker", valid_774889
  var valid_774890 = query.getOrDefault("Version")
  valid_774890 = validateParameter(valid_774890, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774890 != nil:
    section.add "Version", valid_774890
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774891 = header.getOrDefault("X-Amz-Date")
  valid_774891 = validateParameter(valid_774891, JString, required = false,
                                 default = nil)
  if valid_774891 != nil:
    section.add "X-Amz-Date", valid_774891
  var valid_774892 = header.getOrDefault("X-Amz-Security-Token")
  valid_774892 = validateParameter(valid_774892, JString, required = false,
                                 default = nil)
  if valid_774892 != nil:
    section.add "X-Amz-Security-Token", valid_774892
  var valid_774893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774893 = validateParameter(valid_774893, JString, required = false,
                                 default = nil)
  if valid_774893 != nil:
    section.add "X-Amz-Content-Sha256", valid_774893
  var valid_774894 = header.getOrDefault("X-Amz-Algorithm")
  valid_774894 = validateParameter(valid_774894, JString, required = false,
                                 default = nil)
  if valid_774894 != nil:
    section.add "X-Amz-Algorithm", valid_774894
  var valid_774895 = header.getOrDefault("X-Amz-Signature")
  valid_774895 = validateParameter(valid_774895, JString, required = false,
                                 default = nil)
  if valid_774895 != nil:
    section.add "X-Amz-Signature", valid_774895
  var valid_774896 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774896 = validateParameter(valid_774896, JString, required = false,
                                 default = nil)
  if valid_774896 != nil:
    section.add "X-Amz-SignedHeaders", valid_774896
  var valid_774897 = header.getOrDefault("X-Amz-Credential")
  valid_774897 = validateParameter(valid_774897, JString, required = false,
                                 default = nil)
  if valid_774897 != nil:
    section.add "X-Amz-Credential", valid_774897
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774898: Call_GetDescribeDBClusterBacktracks_774881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774898.validator(path, query, header, formData, body)
  let scheme = call_774898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774898.url(scheme.get, call_774898.host, call_774898.base,
                         call_774898.route, valid.getOrDefault("path"))
  result = hook(call_774898, url, valid)

proc call*(call_774899: Call_GetDescribeDBClusterBacktracks_774881;
          DBClusterIdentifier: string; MaxRecords: int = 0;
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterBacktracks"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_774900 = newJObject()
  add(query_774900, "MaxRecords", newJInt(MaxRecords))
  add(query_774900, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_774900, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_774900.add "Filters", Filters
  add(query_774900, "Action", newJString(Action))
  add(query_774900, "Marker", newJString(Marker))
  add(query_774900, "Version", newJString(Version))
  result = call_774899.call(nil, query_774900, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_774881(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_774882, base: "/",
    url: url_GetDescribeDBClusterBacktracks_774883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_774942 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterEndpoints_774944(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterEndpoints_774943(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774945 = query.getOrDefault("Action")
  valid_774945 = validateParameter(valid_774945, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_774945 != nil:
    section.add "Action", valid_774945
  var valid_774946 = query.getOrDefault("Version")
  valid_774946 = validateParameter(valid_774946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774946 != nil:
    section.add "Version", valid_774946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774947 = header.getOrDefault("X-Amz-Date")
  valid_774947 = validateParameter(valid_774947, JString, required = false,
                                 default = nil)
  if valid_774947 != nil:
    section.add "X-Amz-Date", valid_774947
  var valid_774948 = header.getOrDefault("X-Amz-Security-Token")
  valid_774948 = validateParameter(valid_774948, JString, required = false,
                                 default = nil)
  if valid_774948 != nil:
    section.add "X-Amz-Security-Token", valid_774948
  var valid_774949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774949 = validateParameter(valid_774949, JString, required = false,
                                 default = nil)
  if valid_774949 != nil:
    section.add "X-Amz-Content-Sha256", valid_774949
  var valid_774950 = header.getOrDefault("X-Amz-Algorithm")
  valid_774950 = validateParameter(valid_774950, JString, required = false,
                                 default = nil)
  if valid_774950 != nil:
    section.add "X-Amz-Algorithm", valid_774950
  var valid_774951 = header.getOrDefault("X-Amz-Signature")
  valid_774951 = validateParameter(valid_774951, JString, required = false,
                                 default = nil)
  if valid_774951 != nil:
    section.add "X-Amz-Signature", valid_774951
  var valid_774952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774952 = validateParameter(valid_774952, JString, required = false,
                                 default = nil)
  if valid_774952 != nil:
    section.add "X-Amz-SignedHeaders", valid_774952
  var valid_774953 = header.getOrDefault("X-Amz-Credential")
  valid_774953 = validateParameter(valid_774953, JString, required = false,
                                 default = nil)
  if valid_774953 != nil:
    section.add "X-Amz-Credential", valid_774953
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_774954 = formData.getOrDefault("Marker")
  valid_774954 = validateParameter(valid_774954, JString, required = false,
                                 default = nil)
  if valid_774954 != nil:
    section.add "Marker", valid_774954
  var valid_774955 = formData.getOrDefault("Filters")
  valid_774955 = validateParameter(valid_774955, JArray, required = false,
                                 default = nil)
  if valid_774955 != nil:
    section.add "Filters", valid_774955
  var valid_774956 = formData.getOrDefault("MaxRecords")
  valid_774956 = validateParameter(valid_774956, JInt, required = false, default = nil)
  if valid_774956 != nil:
    section.add "MaxRecords", valid_774956
  var valid_774957 = formData.getOrDefault("DBClusterIdentifier")
  valid_774957 = validateParameter(valid_774957, JString, required = false,
                                 default = nil)
  if valid_774957 != nil:
    section.add "DBClusterIdentifier", valid_774957
  var valid_774958 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_774958 = validateParameter(valid_774958, JString, required = false,
                                 default = nil)
  if valid_774958 != nil:
    section.add "DBClusterEndpointIdentifier", valid_774958
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774959: Call_PostDescribeDBClusterEndpoints_774942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774959.validator(path, query, header, formData, body)
  let scheme = call_774959.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774959.url(scheme.get, call_774959.host, call_774959.base,
                         call_774959.route, valid.getOrDefault("path"))
  result = hook(call_774959, url, valid)

proc call*(call_774960: Call_PostDescribeDBClusterEndpoints_774942;
          Marker: string = ""; Action: string = "DescribeDBClusterEndpoints";
          Filters: JsonNode = nil; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_774961 = newJObject()
  var formData_774962 = newJObject()
  add(formData_774962, "Marker", newJString(Marker))
  add(query_774961, "Action", newJString(Action))
  if Filters != nil:
    formData_774962.add "Filters", Filters
  add(formData_774962, "MaxRecords", newJInt(MaxRecords))
  add(formData_774962, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_774962, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_774961, "Version", newJString(Version))
  result = call_774960.call(nil, query_774961, nil, formData_774962, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_774942(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_774943, base: "/",
    url: url_PostDescribeDBClusterEndpoints_774944,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_774922 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterEndpoints_774924(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterEndpoints_774923(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774925 = query.getOrDefault("MaxRecords")
  valid_774925 = validateParameter(valid_774925, JInt, required = false, default = nil)
  if valid_774925 != nil:
    section.add "MaxRecords", valid_774925
  var valid_774926 = query.getOrDefault("DBClusterIdentifier")
  valid_774926 = validateParameter(valid_774926, JString, required = false,
                                 default = nil)
  if valid_774926 != nil:
    section.add "DBClusterIdentifier", valid_774926
  var valid_774927 = query.getOrDefault("Filters")
  valid_774927 = validateParameter(valid_774927, JArray, required = false,
                                 default = nil)
  if valid_774927 != nil:
    section.add "Filters", valid_774927
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774928 = query.getOrDefault("Action")
  valid_774928 = validateParameter(valid_774928, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_774928 != nil:
    section.add "Action", valid_774928
  var valid_774929 = query.getOrDefault("Marker")
  valid_774929 = validateParameter(valid_774929, JString, required = false,
                                 default = nil)
  if valid_774929 != nil:
    section.add "Marker", valid_774929
  var valid_774930 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_774930 = validateParameter(valid_774930, JString, required = false,
                                 default = nil)
  if valid_774930 != nil:
    section.add "DBClusterEndpointIdentifier", valid_774930
  var valid_774931 = query.getOrDefault("Version")
  valid_774931 = validateParameter(valid_774931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774931 != nil:
    section.add "Version", valid_774931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774932 = header.getOrDefault("X-Amz-Date")
  valid_774932 = validateParameter(valid_774932, JString, required = false,
                                 default = nil)
  if valid_774932 != nil:
    section.add "X-Amz-Date", valid_774932
  var valid_774933 = header.getOrDefault("X-Amz-Security-Token")
  valid_774933 = validateParameter(valid_774933, JString, required = false,
                                 default = nil)
  if valid_774933 != nil:
    section.add "X-Amz-Security-Token", valid_774933
  var valid_774934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774934 = validateParameter(valid_774934, JString, required = false,
                                 default = nil)
  if valid_774934 != nil:
    section.add "X-Amz-Content-Sha256", valid_774934
  var valid_774935 = header.getOrDefault("X-Amz-Algorithm")
  valid_774935 = validateParameter(valid_774935, JString, required = false,
                                 default = nil)
  if valid_774935 != nil:
    section.add "X-Amz-Algorithm", valid_774935
  var valid_774936 = header.getOrDefault("X-Amz-Signature")
  valid_774936 = validateParameter(valid_774936, JString, required = false,
                                 default = nil)
  if valid_774936 != nil:
    section.add "X-Amz-Signature", valid_774936
  var valid_774937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774937 = validateParameter(valid_774937, JString, required = false,
                                 default = nil)
  if valid_774937 != nil:
    section.add "X-Amz-SignedHeaders", valid_774937
  var valid_774938 = header.getOrDefault("X-Amz-Credential")
  valid_774938 = validateParameter(valid_774938, JString, required = false,
                                 default = nil)
  if valid_774938 != nil:
    section.add "X-Amz-Credential", valid_774938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774939: Call_GetDescribeDBClusterEndpoints_774922; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774939.validator(path, query, header, formData, body)
  let scheme = call_774939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774939.url(scheme.get, call_774939.host, call_774939.base,
                         call_774939.route, valid.getOrDefault("path"))
  result = hook(call_774939, url, valid)

proc call*(call_774940: Call_GetDescribeDBClusterEndpoints_774922;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterEndpoints";
          Marker: string = ""; DBClusterEndpointIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_774941 = newJObject()
  add(query_774941, "MaxRecords", newJInt(MaxRecords))
  add(query_774941, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_774941.add "Filters", Filters
  add(query_774941, "Action", newJString(Action))
  add(query_774941, "Marker", newJString(Marker))
  add(query_774941, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_774941, "Version", newJString(Version))
  result = call_774940.call(nil, query_774941, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_774922(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_774923, base: "/",
    url: url_GetDescribeDBClusterEndpoints_774924,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_774982 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterParameterGroups_774984(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterParameterGroups_774983(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774985 = query.getOrDefault("Action")
  valid_774985 = validateParameter(valid_774985, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_774985 != nil:
    section.add "Action", valid_774985
  var valid_774986 = query.getOrDefault("Version")
  valid_774986 = validateParameter(valid_774986, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774986 != nil:
    section.add "Version", valid_774986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774987 = header.getOrDefault("X-Amz-Date")
  valid_774987 = validateParameter(valid_774987, JString, required = false,
                                 default = nil)
  if valid_774987 != nil:
    section.add "X-Amz-Date", valid_774987
  var valid_774988 = header.getOrDefault("X-Amz-Security-Token")
  valid_774988 = validateParameter(valid_774988, JString, required = false,
                                 default = nil)
  if valid_774988 != nil:
    section.add "X-Amz-Security-Token", valid_774988
  var valid_774989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774989 = validateParameter(valid_774989, JString, required = false,
                                 default = nil)
  if valid_774989 != nil:
    section.add "X-Amz-Content-Sha256", valid_774989
  var valid_774990 = header.getOrDefault("X-Amz-Algorithm")
  valid_774990 = validateParameter(valid_774990, JString, required = false,
                                 default = nil)
  if valid_774990 != nil:
    section.add "X-Amz-Algorithm", valid_774990
  var valid_774991 = header.getOrDefault("X-Amz-Signature")
  valid_774991 = validateParameter(valid_774991, JString, required = false,
                                 default = nil)
  if valid_774991 != nil:
    section.add "X-Amz-Signature", valid_774991
  var valid_774992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774992 = validateParameter(valid_774992, JString, required = false,
                                 default = nil)
  if valid_774992 != nil:
    section.add "X-Amz-SignedHeaders", valid_774992
  var valid_774993 = header.getOrDefault("X-Amz-Credential")
  valid_774993 = validateParameter(valid_774993, JString, required = false,
                                 default = nil)
  if valid_774993 != nil:
    section.add "X-Amz-Credential", valid_774993
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_774994 = formData.getOrDefault("Marker")
  valid_774994 = validateParameter(valid_774994, JString, required = false,
                                 default = nil)
  if valid_774994 != nil:
    section.add "Marker", valid_774994
  var valid_774995 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_774995 = validateParameter(valid_774995, JString, required = false,
                                 default = nil)
  if valid_774995 != nil:
    section.add "DBClusterParameterGroupName", valid_774995
  var valid_774996 = formData.getOrDefault("Filters")
  valid_774996 = validateParameter(valid_774996, JArray, required = false,
                                 default = nil)
  if valid_774996 != nil:
    section.add "Filters", valid_774996
  var valid_774997 = formData.getOrDefault("MaxRecords")
  valid_774997 = validateParameter(valid_774997, JInt, required = false, default = nil)
  if valid_774997 != nil:
    section.add "MaxRecords", valid_774997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774998: Call_PostDescribeDBClusterParameterGroups_774982;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774998.validator(path, query, header, formData, body)
  let scheme = call_774998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774998.url(scheme.get, call_774998.host, call_774998.base,
                         call_774998.route, valid.getOrDefault("path"))
  result = hook(call_774998, url, valid)

proc call*(call_774999: Call_PostDescribeDBClusterParameterGroups_774982;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775000 = newJObject()
  var formData_775001 = newJObject()
  add(formData_775001, "Marker", newJString(Marker))
  add(query_775000, "Action", newJString(Action))
  add(formData_775001, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_775001.add "Filters", Filters
  add(formData_775001, "MaxRecords", newJInt(MaxRecords))
  add(query_775000, "Version", newJString(Version))
  result = call_774999.call(nil, query_775000, nil, formData_775001, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_774982(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_774983, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_774984,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_774963 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterParameterGroups_774965(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterParameterGroups_774964(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_774966 = query.getOrDefault("MaxRecords")
  valid_774966 = validateParameter(valid_774966, JInt, required = false, default = nil)
  if valid_774966 != nil:
    section.add "MaxRecords", valid_774966
  var valid_774967 = query.getOrDefault("DBClusterParameterGroupName")
  valid_774967 = validateParameter(valid_774967, JString, required = false,
                                 default = nil)
  if valid_774967 != nil:
    section.add "DBClusterParameterGroupName", valid_774967
  var valid_774968 = query.getOrDefault("Filters")
  valid_774968 = validateParameter(valid_774968, JArray, required = false,
                                 default = nil)
  if valid_774968 != nil:
    section.add "Filters", valid_774968
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774969 = query.getOrDefault("Action")
  valid_774969 = validateParameter(valid_774969, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_774969 != nil:
    section.add "Action", valid_774969
  var valid_774970 = query.getOrDefault("Marker")
  valid_774970 = validateParameter(valid_774970, JString, required = false,
                                 default = nil)
  if valid_774970 != nil:
    section.add "Marker", valid_774970
  var valid_774971 = query.getOrDefault("Version")
  valid_774971 = validateParameter(valid_774971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_774971 != nil:
    section.add "Version", valid_774971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774972 = header.getOrDefault("X-Amz-Date")
  valid_774972 = validateParameter(valid_774972, JString, required = false,
                                 default = nil)
  if valid_774972 != nil:
    section.add "X-Amz-Date", valid_774972
  var valid_774973 = header.getOrDefault("X-Amz-Security-Token")
  valid_774973 = validateParameter(valid_774973, JString, required = false,
                                 default = nil)
  if valid_774973 != nil:
    section.add "X-Amz-Security-Token", valid_774973
  var valid_774974 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774974 = validateParameter(valid_774974, JString, required = false,
                                 default = nil)
  if valid_774974 != nil:
    section.add "X-Amz-Content-Sha256", valid_774974
  var valid_774975 = header.getOrDefault("X-Amz-Algorithm")
  valid_774975 = validateParameter(valid_774975, JString, required = false,
                                 default = nil)
  if valid_774975 != nil:
    section.add "X-Amz-Algorithm", valid_774975
  var valid_774976 = header.getOrDefault("X-Amz-Signature")
  valid_774976 = validateParameter(valid_774976, JString, required = false,
                                 default = nil)
  if valid_774976 != nil:
    section.add "X-Amz-Signature", valid_774976
  var valid_774977 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774977 = validateParameter(valid_774977, JString, required = false,
                                 default = nil)
  if valid_774977 != nil:
    section.add "X-Amz-SignedHeaders", valid_774977
  var valid_774978 = header.getOrDefault("X-Amz-Credential")
  valid_774978 = validateParameter(valid_774978, JString, required = false,
                                 default = nil)
  if valid_774978 != nil:
    section.add "X-Amz-Credential", valid_774978
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774979: Call_GetDescribeDBClusterParameterGroups_774963;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_774979.validator(path, query, header, formData, body)
  let scheme = call_774979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774979.url(scheme.get, call_774979.host, call_774979.base,
                         call_774979.route, valid.getOrDefault("path"))
  result = hook(call_774979, url, valid)

proc call*(call_774980: Call_GetDescribeDBClusterParameterGroups_774963;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_774981 = newJObject()
  add(query_774981, "MaxRecords", newJInt(MaxRecords))
  add(query_774981, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_774981.add "Filters", Filters
  add(query_774981, "Action", newJString(Action))
  add(query_774981, "Marker", newJString(Marker))
  add(query_774981, "Version", newJString(Version))
  result = call_774980.call(nil, query_774981, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_774963(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_774964, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_774965,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_775022 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterParameters_775024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterParameters_775023(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775025 = query.getOrDefault("Action")
  valid_775025 = validateParameter(valid_775025, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_775025 != nil:
    section.add "Action", valid_775025
  var valid_775026 = query.getOrDefault("Version")
  valid_775026 = validateParameter(valid_775026, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775026 != nil:
    section.add "Version", valid_775026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775027 = header.getOrDefault("X-Amz-Date")
  valid_775027 = validateParameter(valid_775027, JString, required = false,
                                 default = nil)
  if valid_775027 != nil:
    section.add "X-Amz-Date", valid_775027
  var valid_775028 = header.getOrDefault("X-Amz-Security-Token")
  valid_775028 = validateParameter(valid_775028, JString, required = false,
                                 default = nil)
  if valid_775028 != nil:
    section.add "X-Amz-Security-Token", valid_775028
  var valid_775029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775029 = validateParameter(valid_775029, JString, required = false,
                                 default = nil)
  if valid_775029 != nil:
    section.add "X-Amz-Content-Sha256", valid_775029
  var valid_775030 = header.getOrDefault("X-Amz-Algorithm")
  valid_775030 = validateParameter(valid_775030, JString, required = false,
                                 default = nil)
  if valid_775030 != nil:
    section.add "X-Amz-Algorithm", valid_775030
  var valid_775031 = header.getOrDefault("X-Amz-Signature")
  valid_775031 = validateParameter(valid_775031, JString, required = false,
                                 default = nil)
  if valid_775031 != nil:
    section.add "X-Amz-Signature", valid_775031
  var valid_775032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775032 = validateParameter(valid_775032, JString, required = false,
                                 default = nil)
  if valid_775032 != nil:
    section.add "X-Amz-SignedHeaders", valid_775032
  var valid_775033 = header.getOrDefault("X-Amz-Credential")
  valid_775033 = validateParameter(valid_775033, JString, required = false,
                                 default = nil)
  if valid_775033 != nil:
    section.add "X-Amz-Credential", valid_775033
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  section = newJObject()
  var valid_775034 = formData.getOrDefault("Marker")
  valid_775034 = validateParameter(valid_775034, JString, required = false,
                                 default = nil)
  if valid_775034 != nil:
    section.add "Marker", valid_775034
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_775035 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_775035 = validateParameter(valid_775035, JString, required = true,
                                 default = nil)
  if valid_775035 != nil:
    section.add "DBClusterParameterGroupName", valid_775035
  var valid_775036 = formData.getOrDefault("Filters")
  valid_775036 = validateParameter(valid_775036, JArray, required = false,
                                 default = nil)
  if valid_775036 != nil:
    section.add "Filters", valid_775036
  var valid_775037 = formData.getOrDefault("MaxRecords")
  valid_775037 = validateParameter(valid_775037, JInt, required = false, default = nil)
  if valid_775037 != nil:
    section.add "MaxRecords", valid_775037
  var valid_775038 = formData.getOrDefault("Source")
  valid_775038 = validateParameter(valid_775038, JString, required = false,
                                 default = nil)
  if valid_775038 != nil:
    section.add "Source", valid_775038
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775039: Call_PostDescribeDBClusterParameters_775022;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775039.validator(path, query, header, formData, body)
  let scheme = call_775039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775039.url(scheme.get, call_775039.host, call_775039.base,
                         call_775039.route, valid.getOrDefault("path"))
  result = hook(call_775039, url, valid)

proc call*(call_775040: Call_PostDescribeDBClusterParameters_775022;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  var query_775041 = newJObject()
  var formData_775042 = newJObject()
  add(formData_775042, "Marker", newJString(Marker))
  add(query_775041, "Action", newJString(Action))
  add(formData_775042, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_775042.add "Filters", Filters
  add(formData_775042, "MaxRecords", newJInt(MaxRecords))
  add(query_775041, "Version", newJString(Version))
  add(formData_775042, "Source", newJString(Source))
  result = call_775040.call(nil, query_775041, nil, formData_775042, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_775022(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_775023, base: "/",
    url: url_PostDescribeDBClusterParameters_775024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_775002 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterParameters_775004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterParameters_775003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775005 = query.getOrDefault("MaxRecords")
  valid_775005 = validateParameter(valid_775005, JInt, required = false, default = nil)
  if valid_775005 != nil:
    section.add "MaxRecords", valid_775005
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_775006 = query.getOrDefault("DBClusterParameterGroupName")
  valid_775006 = validateParameter(valid_775006, JString, required = true,
                                 default = nil)
  if valid_775006 != nil:
    section.add "DBClusterParameterGroupName", valid_775006
  var valid_775007 = query.getOrDefault("Filters")
  valid_775007 = validateParameter(valid_775007, JArray, required = false,
                                 default = nil)
  if valid_775007 != nil:
    section.add "Filters", valid_775007
  var valid_775008 = query.getOrDefault("Action")
  valid_775008 = validateParameter(valid_775008, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_775008 != nil:
    section.add "Action", valid_775008
  var valid_775009 = query.getOrDefault("Marker")
  valid_775009 = validateParameter(valid_775009, JString, required = false,
                                 default = nil)
  if valid_775009 != nil:
    section.add "Marker", valid_775009
  var valid_775010 = query.getOrDefault("Source")
  valid_775010 = validateParameter(valid_775010, JString, required = false,
                                 default = nil)
  if valid_775010 != nil:
    section.add "Source", valid_775010
  var valid_775011 = query.getOrDefault("Version")
  valid_775011 = validateParameter(valid_775011, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775011 != nil:
    section.add "Version", valid_775011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775012 = header.getOrDefault("X-Amz-Date")
  valid_775012 = validateParameter(valid_775012, JString, required = false,
                                 default = nil)
  if valid_775012 != nil:
    section.add "X-Amz-Date", valid_775012
  var valid_775013 = header.getOrDefault("X-Amz-Security-Token")
  valid_775013 = validateParameter(valid_775013, JString, required = false,
                                 default = nil)
  if valid_775013 != nil:
    section.add "X-Amz-Security-Token", valid_775013
  var valid_775014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775014 = validateParameter(valid_775014, JString, required = false,
                                 default = nil)
  if valid_775014 != nil:
    section.add "X-Amz-Content-Sha256", valid_775014
  var valid_775015 = header.getOrDefault("X-Amz-Algorithm")
  valid_775015 = validateParameter(valid_775015, JString, required = false,
                                 default = nil)
  if valid_775015 != nil:
    section.add "X-Amz-Algorithm", valid_775015
  var valid_775016 = header.getOrDefault("X-Amz-Signature")
  valid_775016 = validateParameter(valid_775016, JString, required = false,
                                 default = nil)
  if valid_775016 != nil:
    section.add "X-Amz-Signature", valid_775016
  var valid_775017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775017 = validateParameter(valid_775017, JString, required = false,
                                 default = nil)
  if valid_775017 != nil:
    section.add "X-Amz-SignedHeaders", valid_775017
  var valid_775018 = header.getOrDefault("X-Amz-Credential")
  valid_775018 = validateParameter(valid_775018, JString, required = false,
                                 default = nil)
  if valid_775018 != nil:
    section.add "X-Amz-Credential", valid_775018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775019: Call_GetDescribeDBClusterParameters_775002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775019.validator(path, query, header, formData, body)
  let scheme = call_775019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775019.url(scheme.get, call_775019.host, call_775019.base,
                         call_775019.route, valid.getOrDefault("path"))
  result = hook(call_775019, url, valid)

proc call*(call_775020: Call_GetDescribeDBClusterParameters_775002;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: string (required)
  var query_775021 = newJObject()
  add(query_775021, "MaxRecords", newJInt(MaxRecords))
  add(query_775021, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_775021.add "Filters", Filters
  add(query_775021, "Action", newJString(Action))
  add(query_775021, "Marker", newJString(Marker))
  add(query_775021, "Source", newJString(Source))
  add(query_775021, "Version", newJString(Version))
  result = call_775020.call(nil, query_775021, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_775002(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_775003, base: "/",
    url: url_GetDescribeDBClusterParameters_775004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_775059 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterSnapshotAttributes_775061(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_775060(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775062 = query.getOrDefault("Action")
  valid_775062 = validateParameter(valid_775062, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_775062 != nil:
    section.add "Action", valid_775062
  var valid_775063 = query.getOrDefault("Version")
  valid_775063 = validateParameter(valid_775063, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775063 != nil:
    section.add "Version", valid_775063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775064 = header.getOrDefault("X-Amz-Date")
  valid_775064 = validateParameter(valid_775064, JString, required = false,
                                 default = nil)
  if valid_775064 != nil:
    section.add "X-Amz-Date", valid_775064
  var valid_775065 = header.getOrDefault("X-Amz-Security-Token")
  valid_775065 = validateParameter(valid_775065, JString, required = false,
                                 default = nil)
  if valid_775065 != nil:
    section.add "X-Amz-Security-Token", valid_775065
  var valid_775066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775066 = validateParameter(valid_775066, JString, required = false,
                                 default = nil)
  if valid_775066 != nil:
    section.add "X-Amz-Content-Sha256", valid_775066
  var valid_775067 = header.getOrDefault("X-Amz-Algorithm")
  valid_775067 = validateParameter(valid_775067, JString, required = false,
                                 default = nil)
  if valid_775067 != nil:
    section.add "X-Amz-Algorithm", valid_775067
  var valid_775068 = header.getOrDefault("X-Amz-Signature")
  valid_775068 = validateParameter(valid_775068, JString, required = false,
                                 default = nil)
  if valid_775068 != nil:
    section.add "X-Amz-Signature", valid_775068
  var valid_775069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775069 = validateParameter(valid_775069, JString, required = false,
                                 default = nil)
  if valid_775069 != nil:
    section.add "X-Amz-SignedHeaders", valid_775069
  var valid_775070 = header.getOrDefault("X-Amz-Credential")
  valid_775070 = validateParameter(valid_775070, JString, required = false,
                                 default = nil)
  if valid_775070 != nil:
    section.add "X-Amz-Credential", valid_775070
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_775071 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_775071 = validateParameter(valid_775071, JString, required = true,
                                 default = nil)
  if valid_775071 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_775071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775072: Call_PostDescribeDBClusterSnapshotAttributes_775059;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775072.validator(path, query, header, formData, body)
  let scheme = call_775072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775072.url(scheme.get, call_775072.host, call_775072.base,
                         call_775072.route, valid.getOrDefault("path"))
  result = hook(call_775072, url, valid)

proc call*(call_775073: Call_PostDescribeDBClusterSnapshotAttributes_775059;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775074 = newJObject()
  var formData_775075 = newJObject()
  add(formData_775075, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_775074, "Action", newJString(Action))
  add(query_775074, "Version", newJString(Version))
  result = call_775073.call(nil, query_775074, nil, formData_775075, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_775059(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_775060, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_775061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_775043 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterSnapshotAttributes_775045(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_775044(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_775046 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_775046 = validateParameter(valid_775046, JString, required = true,
                                 default = nil)
  if valid_775046 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_775046
  var valid_775047 = query.getOrDefault("Action")
  valid_775047 = validateParameter(valid_775047, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_775047 != nil:
    section.add "Action", valid_775047
  var valid_775048 = query.getOrDefault("Version")
  valid_775048 = validateParameter(valid_775048, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775048 != nil:
    section.add "Version", valid_775048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775049 = header.getOrDefault("X-Amz-Date")
  valid_775049 = validateParameter(valid_775049, JString, required = false,
                                 default = nil)
  if valid_775049 != nil:
    section.add "X-Amz-Date", valid_775049
  var valid_775050 = header.getOrDefault("X-Amz-Security-Token")
  valid_775050 = validateParameter(valid_775050, JString, required = false,
                                 default = nil)
  if valid_775050 != nil:
    section.add "X-Amz-Security-Token", valid_775050
  var valid_775051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775051 = validateParameter(valid_775051, JString, required = false,
                                 default = nil)
  if valid_775051 != nil:
    section.add "X-Amz-Content-Sha256", valid_775051
  var valid_775052 = header.getOrDefault("X-Amz-Algorithm")
  valid_775052 = validateParameter(valid_775052, JString, required = false,
                                 default = nil)
  if valid_775052 != nil:
    section.add "X-Amz-Algorithm", valid_775052
  var valid_775053 = header.getOrDefault("X-Amz-Signature")
  valid_775053 = validateParameter(valid_775053, JString, required = false,
                                 default = nil)
  if valid_775053 != nil:
    section.add "X-Amz-Signature", valid_775053
  var valid_775054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775054 = validateParameter(valid_775054, JString, required = false,
                                 default = nil)
  if valid_775054 != nil:
    section.add "X-Amz-SignedHeaders", valid_775054
  var valid_775055 = header.getOrDefault("X-Amz-Credential")
  valid_775055 = validateParameter(valid_775055, JString, required = false,
                                 default = nil)
  if valid_775055 != nil:
    section.add "X-Amz-Credential", valid_775055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775056: Call_GetDescribeDBClusterSnapshotAttributes_775043;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775056.validator(path, query, header, formData, body)
  let scheme = call_775056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775056.url(scheme.get, call_775056.host, call_775056.base,
                         call_775056.route, valid.getOrDefault("path"))
  result = hook(call_775056, url, valid)

proc call*(call_775057: Call_GetDescribeDBClusterSnapshotAttributes_775043;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775058 = newJObject()
  add(query_775058, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_775058, "Action", newJString(Action))
  add(query_775058, "Version", newJString(Version))
  result = call_775057.call(nil, query_775058, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_775043(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_775044, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_775045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_775099 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusterSnapshots_775101(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusterSnapshots_775100(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775102 = query.getOrDefault("Action")
  valid_775102 = validateParameter(valid_775102, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_775102 != nil:
    section.add "Action", valid_775102
  var valid_775103 = query.getOrDefault("Version")
  valid_775103 = validateParameter(valid_775103, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775103 != nil:
    section.add "Version", valid_775103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775104 = header.getOrDefault("X-Amz-Date")
  valid_775104 = validateParameter(valid_775104, JString, required = false,
                                 default = nil)
  if valid_775104 != nil:
    section.add "X-Amz-Date", valid_775104
  var valid_775105 = header.getOrDefault("X-Amz-Security-Token")
  valid_775105 = validateParameter(valid_775105, JString, required = false,
                                 default = nil)
  if valid_775105 != nil:
    section.add "X-Amz-Security-Token", valid_775105
  var valid_775106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775106 = validateParameter(valid_775106, JString, required = false,
                                 default = nil)
  if valid_775106 != nil:
    section.add "X-Amz-Content-Sha256", valid_775106
  var valid_775107 = header.getOrDefault("X-Amz-Algorithm")
  valid_775107 = validateParameter(valid_775107, JString, required = false,
                                 default = nil)
  if valid_775107 != nil:
    section.add "X-Amz-Algorithm", valid_775107
  var valid_775108 = header.getOrDefault("X-Amz-Signature")
  valid_775108 = validateParameter(valid_775108, JString, required = false,
                                 default = nil)
  if valid_775108 != nil:
    section.add "X-Amz-Signature", valid_775108
  var valid_775109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775109 = validateParameter(valid_775109, JString, required = false,
                                 default = nil)
  if valid_775109 != nil:
    section.add "X-Amz-SignedHeaders", valid_775109
  var valid_775110 = header.getOrDefault("X-Amz-Credential")
  valid_775110 = validateParameter(valid_775110, JString, required = false,
                                 default = nil)
  if valid_775110 != nil:
    section.add "X-Amz-Credential", valid_775110
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_775111 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_775111 = validateParameter(valid_775111, JString, required = false,
                                 default = nil)
  if valid_775111 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_775111
  var valid_775112 = formData.getOrDefault("IncludeShared")
  valid_775112 = validateParameter(valid_775112, JBool, required = false, default = nil)
  if valid_775112 != nil:
    section.add "IncludeShared", valid_775112
  var valid_775113 = formData.getOrDefault("IncludePublic")
  valid_775113 = validateParameter(valid_775113, JBool, required = false, default = nil)
  if valid_775113 != nil:
    section.add "IncludePublic", valid_775113
  var valid_775114 = formData.getOrDefault("SnapshotType")
  valid_775114 = validateParameter(valid_775114, JString, required = false,
                                 default = nil)
  if valid_775114 != nil:
    section.add "SnapshotType", valid_775114
  var valid_775115 = formData.getOrDefault("Marker")
  valid_775115 = validateParameter(valid_775115, JString, required = false,
                                 default = nil)
  if valid_775115 != nil:
    section.add "Marker", valid_775115
  var valid_775116 = formData.getOrDefault("Filters")
  valid_775116 = validateParameter(valid_775116, JArray, required = false,
                                 default = nil)
  if valid_775116 != nil:
    section.add "Filters", valid_775116
  var valid_775117 = formData.getOrDefault("MaxRecords")
  valid_775117 = validateParameter(valid_775117, JInt, required = false, default = nil)
  if valid_775117 != nil:
    section.add "MaxRecords", valid_775117
  var valid_775118 = formData.getOrDefault("DBClusterIdentifier")
  valid_775118 = validateParameter(valid_775118, JString, required = false,
                                 default = nil)
  if valid_775118 != nil:
    section.add "DBClusterIdentifier", valid_775118
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775119: Call_PostDescribeDBClusterSnapshots_775099; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775119.validator(path, query, header, formData, body)
  let scheme = call_775119.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775119.url(scheme.get, call_775119.host, call_775119.base,
                         call_775119.route, valid.getOrDefault("path"))
  result = hook(call_775119, url, valid)

proc call*(call_775120: Call_PostDescribeDBClusterSnapshots_775099;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_775121 = newJObject()
  var formData_775122 = newJObject()
  add(formData_775122, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_775122, "IncludeShared", newJBool(IncludeShared))
  add(formData_775122, "IncludePublic", newJBool(IncludePublic))
  add(formData_775122, "SnapshotType", newJString(SnapshotType))
  add(formData_775122, "Marker", newJString(Marker))
  add(query_775121, "Action", newJString(Action))
  if Filters != nil:
    formData_775122.add "Filters", Filters
  add(formData_775122, "MaxRecords", newJInt(MaxRecords))
  add(formData_775122, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775121, "Version", newJString(Version))
  result = call_775120.call(nil, query_775121, nil, formData_775122, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_775099(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_775100, base: "/",
    url: url_PostDescribeDBClusterSnapshots_775101,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_775076 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusterSnapshots_775078(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusterSnapshots_775077(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775079 = query.getOrDefault("IncludePublic")
  valid_775079 = validateParameter(valid_775079, JBool, required = false, default = nil)
  if valid_775079 != nil:
    section.add "IncludePublic", valid_775079
  var valid_775080 = query.getOrDefault("MaxRecords")
  valid_775080 = validateParameter(valid_775080, JInt, required = false, default = nil)
  if valid_775080 != nil:
    section.add "MaxRecords", valid_775080
  var valid_775081 = query.getOrDefault("DBClusterIdentifier")
  valid_775081 = validateParameter(valid_775081, JString, required = false,
                                 default = nil)
  if valid_775081 != nil:
    section.add "DBClusterIdentifier", valid_775081
  var valid_775082 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_775082 = validateParameter(valid_775082, JString, required = false,
                                 default = nil)
  if valid_775082 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_775082
  var valid_775083 = query.getOrDefault("Filters")
  valid_775083 = validateParameter(valid_775083, JArray, required = false,
                                 default = nil)
  if valid_775083 != nil:
    section.add "Filters", valid_775083
  var valid_775084 = query.getOrDefault("IncludeShared")
  valid_775084 = validateParameter(valid_775084, JBool, required = false, default = nil)
  if valid_775084 != nil:
    section.add "IncludeShared", valid_775084
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775085 = query.getOrDefault("Action")
  valid_775085 = validateParameter(valid_775085, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_775085 != nil:
    section.add "Action", valid_775085
  var valid_775086 = query.getOrDefault("Marker")
  valid_775086 = validateParameter(valid_775086, JString, required = false,
                                 default = nil)
  if valid_775086 != nil:
    section.add "Marker", valid_775086
  var valid_775087 = query.getOrDefault("SnapshotType")
  valid_775087 = validateParameter(valid_775087, JString, required = false,
                                 default = nil)
  if valid_775087 != nil:
    section.add "SnapshotType", valid_775087
  var valid_775088 = query.getOrDefault("Version")
  valid_775088 = validateParameter(valid_775088, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775088 != nil:
    section.add "Version", valid_775088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775089 = header.getOrDefault("X-Amz-Date")
  valid_775089 = validateParameter(valid_775089, JString, required = false,
                                 default = nil)
  if valid_775089 != nil:
    section.add "X-Amz-Date", valid_775089
  var valid_775090 = header.getOrDefault("X-Amz-Security-Token")
  valid_775090 = validateParameter(valid_775090, JString, required = false,
                                 default = nil)
  if valid_775090 != nil:
    section.add "X-Amz-Security-Token", valid_775090
  var valid_775091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775091 = validateParameter(valid_775091, JString, required = false,
                                 default = nil)
  if valid_775091 != nil:
    section.add "X-Amz-Content-Sha256", valid_775091
  var valid_775092 = header.getOrDefault("X-Amz-Algorithm")
  valid_775092 = validateParameter(valid_775092, JString, required = false,
                                 default = nil)
  if valid_775092 != nil:
    section.add "X-Amz-Algorithm", valid_775092
  var valid_775093 = header.getOrDefault("X-Amz-Signature")
  valid_775093 = validateParameter(valid_775093, JString, required = false,
                                 default = nil)
  if valid_775093 != nil:
    section.add "X-Amz-Signature", valid_775093
  var valid_775094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775094 = validateParameter(valid_775094, JString, required = false,
                                 default = nil)
  if valid_775094 != nil:
    section.add "X-Amz-SignedHeaders", valid_775094
  var valid_775095 = header.getOrDefault("X-Amz-Credential")
  valid_775095 = validateParameter(valid_775095, JString, required = false,
                                 default = nil)
  if valid_775095 != nil:
    section.add "X-Amz-Credential", valid_775095
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775096: Call_GetDescribeDBClusterSnapshots_775076; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775096.validator(path, query, header, formData, body)
  let scheme = call_775096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775096.url(scheme.get, call_775096.host, call_775096.base,
                         call_775096.route, valid.getOrDefault("path"))
  result = hook(call_775096, url, valid)

proc call*(call_775097: Call_GetDescribeDBClusterSnapshots_775076;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_775098 = newJObject()
  add(query_775098, "IncludePublic", newJBool(IncludePublic))
  add(query_775098, "MaxRecords", newJInt(MaxRecords))
  add(query_775098, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775098, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_775098.add "Filters", Filters
  add(query_775098, "IncludeShared", newJBool(IncludeShared))
  add(query_775098, "Action", newJString(Action))
  add(query_775098, "Marker", newJString(Marker))
  add(query_775098, "SnapshotType", newJString(SnapshotType))
  add(query_775098, "Version", newJString(Version))
  result = call_775097.call(nil, query_775098, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_775076(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_775077, base: "/",
    url: url_GetDescribeDBClusterSnapshots_775078,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_775143 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBClusters_775145(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBClusters_775144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775146 = query.getOrDefault("Action")
  valid_775146 = validateParameter(valid_775146, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_775146 != nil:
    section.add "Action", valid_775146
  var valid_775147 = query.getOrDefault("Version")
  valid_775147 = validateParameter(valid_775147, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775147 != nil:
    section.add "Version", valid_775147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775148 = header.getOrDefault("X-Amz-Date")
  valid_775148 = validateParameter(valid_775148, JString, required = false,
                                 default = nil)
  if valid_775148 != nil:
    section.add "X-Amz-Date", valid_775148
  var valid_775149 = header.getOrDefault("X-Amz-Security-Token")
  valid_775149 = validateParameter(valid_775149, JString, required = false,
                                 default = nil)
  if valid_775149 != nil:
    section.add "X-Amz-Security-Token", valid_775149
  var valid_775150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775150 = validateParameter(valid_775150, JString, required = false,
                                 default = nil)
  if valid_775150 != nil:
    section.add "X-Amz-Content-Sha256", valid_775150
  var valid_775151 = header.getOrDefault("X-Amz-Algorithm")
  valid_775151 = validateParameter(valid_775151, JString, required = false,
                                 default = nil)
  if valid_775151 != nil:
    section.add "X-Amz-Algorithm", valid_775151
  var valid_775152 = header.getOrDefault("X-Amz-Signature")
  valid_775152 = validateParameter(valid_775152, JString, required = false,
                                 default = nil)
  if valid_775152 != nil:
    section.add "X-Amz-Signature", valid_775152
  var valid_775153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775153 = validateParameter(valid_775153, JString, required = false,
                                 default = nil)
  if valid_775153 != nil:
    section.add "X-Amz-SignedHeaders", valid_775153
  var valid_775154 = header.getOrDefault("X-Amz-Credential")
  valid_775154 = validateParameter(valid_775154, JString, required = false,
                                 default = nil)
  if valid_775154 != nil:
    section.add "X-Amz-Credential", valid_775154
  result.add "header", section
  ## parameters in `formData` object:
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_775155 = formData.getOrDefault("IncludeShared")
  valid_775155 = validateParameter(valid_775155, JBool, required = false, default = nil)
  if valid_775155 != nil:
    section.add "IncludeShared", valid_775155
  var valid_775156 = formData.getOrDefault("Marker")
  valid_775156 = validateParameter(valid_775156, JString, required = false,
                                 default = nil)
  if valid_775156 != nil:
    section.add "Marker", valid_775156
  var valid_775157 = formData.getOrDefault("Filters")
  valid_775157 = validateParameter(valid_775157, JArray, required = false,
                                 default = nil)
  if valid_775157 != nil:
    section.add "Filters", valid_775157
  var valid_775158 = formData.getOrDefault("MaxRecords")
  valid_775158 = validateParameter(valid_775158, JInt, required = false, default = nil)
  if valid_775158 != nil:
    section.add "MaxRecords", valid_775158
  var valid_775159 = formData.getOrDefault("DBClusterIdentifier")
  valid_775159 = validateParameter(valid_775159, JString, required = false,
                                 default = nil)
  if valid_775159 != nil:
    section.add "DBClusterIdentifier", valid_775159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775160: Call_PostDescribeDBClusters_775143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775160.validator(path, query, header, formData, body)
  let scheme = call_775160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775160.url(scheme.get, call_775160.host, call_775160.base,
                         call_775160.route, valid.getOrDefault("path"))
  result = hook(call_775160, url, valid)

proc call*(call_775161: Call_PostDescribeDBClusters_775143;
          IncludeShared: bool = false; Marker: string = "";
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_775162 = newJObject()
  var formData_775163 = newJObject()
  add(formData_775163, "IncludeShared", newJBool(IncludeShared))
  add(formData_775163, "Marker", newJString(Marker))
  add(query_775162, "Action", newJString(Action))
  if Filters != nil:
    formData_775163.add "Filters", Filters
  add(formData_775163, "MaxRecords", newJInt(MaxRecords))
  add(formData_775163, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_775162, "Version", newJString(Version))
  result = call_775161.call(nil, query_775162, nil, formData_775163, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_775143(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_775144, base: "/",
    url: url_PostDescribeDBClusters_775145, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_775123 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBClusters_775125(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBClusters_775124(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775126 = query.getOrDefault("MaxRecords")
  valid_775126 = validateParameter(valid_775126, JInt, required = false, default = nil)
  if valid_775126 != nil:
    section.add "MaxRecords", valid_775126
  var valid_775127 = query.getOrDefault("DBClusterIdentifier")
  valid_775127 = validateParameter(valid_775127, JString, required = false,
                                 default = nil)
  if valid_775127 != nil:
    section.add "DBClusterIdentifier", valid_775127
  var valid_775128 = query.getOrDefault("Filters")
  valid_775128 = validateParameter(valid_775128, JArray, required = false,
                                 default = nil)
  if valid_775128 != nil:
    section.add "Filters", valid_775128
  var valid_775129 = query.getOrDefault("IncludeShared")
  valid_775129 = validateParameter(valid_775129, JBool, required = false, default = nil)
  if valid_775129 != nil:
    section.add "IncludeShared", valid_775129
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775130 = query.getOrDefault("Action")
  valid_775130 = validateParameter(valid_775130, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_775130 != nil:
    section.add "Action", valid_775130
  var valid_775131 = query.getOrDefault("Marker")
  valid_775131 = validateParameter(valid_775131, JString, required = false,
                                 default = nil)
  if valid_775131 != nil:
    section.add "Marker", valid_775131
  var valid_775132 = query.getOrDefault("Version")
  valid_775132 = validateParameter(valid_775132, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775132 != nil:
    section.add "Version", valid_775132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775133 = header.getOrDefault("X-Amz-Date")
  valid_775133 = validateParameter(valid_775133, JString, required = false,
                                 default = nil)
  if valid_775133 != nil:
    section.add "X-Amz-Date", valid_775133
  var valid_775134 = header.getOrDefault("X-Amz-Security-Token")
  valid_775134 = validateParameter(valid_775134, JString, required = false,
                                 default = nil)
  if valid_775134 != nil:
    section.add "X-Amz-Security-Token", valid_775134
  var valid_775135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775135 = validateParameter(valid_775135, JString, required = false,
                                 default = nil)
  if valid_775135 != nil:
    section.add "X-Amz-Content-Sha256", valid_775135
  var valid_775136 = header.getOrDefault("X-Amz-Algorithm")
  valid_775136 = validateParameter(valid_775136, JString, required = false,
                                 default = nil)
  if valid_775136 != nil:
    section.add "X-Amz-Algorithm", valid_775136
  var valid_775137 = header.getOrDefault("X-Amz-Signature")
  valid_775137 = validateParameter(valid_775137, JString, required = false,
                                 default = nil)
  if valid_775137 != nil:
    section.add "X-Amz-Signature", valid_775137
  var valid_775138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775138 = validateParameter(valid_775138, JString, required = false,
                                 default = nil)
  if valid_775138 != nil:
    section.add "X-Amz-SignedHeaders", valid_775138
  var valid_775139 = header.getOrDefault("X-Amz-Credential")
  valid_775139 = validateParameter(valid_775139, JString, required = false,
                                 default = nil)
  if valid_775139 != nil:
    section.add "X-Amz-Credential", valid_775139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775140: Call_GetDescribeDBClusters_775123; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775140.validator(path, query, header, formData, body)
  let scheme = call_775140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775140.url(scheme.get, call_775140.host, call_775140.base,
                         call_775140.route, valid.getOrDefault("path"))
  result = hook(call_775140, url, valid)

proc call*(call_775141: Call_GetDescribeDBClusters_775123; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false; Action: string = "DescribeDBClusters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775142 = newJObject()
  add(query_775142, "MaxRecords", newJInt(MaxRecords))
  add(query_775142, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_775142.add "Filters", Filters
  add(query_775142, "IncludeShared", newJBool(IncludeShared))
  add(query_775142, "Action", newJString(Action))
  add(query_775142, "Marker", newJString(Marker))
  add(query_775142, "Version", newJString(Version))
  result = call_775141.call(nil, query_775142, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_775123(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_775124, base: "/",
    url: url_GetDescribeDBClusters_775125, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_775189 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBEngineVersions_775191(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBEngineVersions_775190(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775192 = query.getOrDefault("Action")
  valid_775192 = validateParameter(valid_775192, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_775192 != nil:
    section.add "Action", valid_775192
  var valid_775193 = query.getOrDefault("Version")
  valid_775193 = validateParameter(valid_775193, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775193 != nil:
    section.add "Version", valid_775193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775194 = header.getOrDefault("X-Amz-Date")
  valid_775194 = validateParameter(valid_775194, JString, required = false,
                                 default = nil)
  if valid_775194 != nil:
    section.add "X-Amz-Date", valid_775194
  var valid_775195 = header.getOrDefault("X-Amz-Security-Token")
  valid_775195 = validateParameter(valid_775195, JString, required = false,
                                 default = nil)
  if valid_775195 != nil:
    section.add "X-Amz-Security-Token", valid_775195
  var valid_775196 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775196 = validateParameter(valid_775196, JString, required = false,
                                 default = nil)
  if valid_775196 != nil:
    section.add "X-Amz-Content-Sha256", valid_775196
  var valid_775197 = header.getOrDefault("X-Amz-Algorithm")
  valid_775197 = validateParameter(valid_775197, JString, required = false,
                                 default = nil)
  if valid_775197 != nil:
    section.add "X-Amz-Algorithm", valid_775197
  var valid_775198 = header.getOrDefault("X-Amz-Signature")
  valid_775198 = validateParameter(valid_775198, JString, required = false,
                                 default = nil)
  if valid_775198 != nil:
    section.add "X-Amz-Signature", valid_775198
  var valid_775199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775199 = validateParameter(valid_775199, JString, required = false,
                                 default = nil)
  if valid_775199 != nil:
    section.add "X-Amz-SignedHeaders", valid_775199
  var valid_775200 = header.getOrDefault("X-Amz-Credential")
  valid_775200 = validateParameter(valid_775200, JString, required = false,
                                 default = nil)
  if valid_775200 != nil:
    section.add "X-Amz-Credential", valid_775200
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_775201 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_775201 = validateParameter(valid_775201, JBool, required = false, default = nil)
  if valid_775201 != nil:
    section.add "ListSupportedCharacterSets", valid_775201
  var valid_775202 = formData.getOrDefault("Engine")
  valid_775202 = validateParameter(valid_775202, JString, required = false,
                                 default = nil)
  if valid_775202 != nil:
    section.add "Engine", valid_775202
  var valid_775203 = formData.getOrDefault("Marker")
  valid_775203 = validateParameter(valid_775203, JString, required = false,
                                 default = nil)
  if valid_775203 != nil:
    section.add "Marker", valid_775203
  var valid_775204 = formData.getOrDefault("DBParameterGroupFamily")
  valid_775204 = validateParameter(valid_775204, JString, required = false,
                                 default = nil)
  if valid_775204 != nil:
    section.add "DBParameterGroupFamily", valid_775204
  var valid_775205 = formData.getOrDefault("IncludeAll")
  valid_775205 = validateParameter(valid_775205, JBool, required = false, default = nil)
  if valid_775205 != nil:
    section.add "IncludeAll", valid_775205
  var valid_775206 = formData.getOrDefault("Filters")
  valid_775206 = validateParameter(valid_775206, JArray, required = false,
                                 default = nil)
  if valid_775206 != nil:
    section.add "Filters", valid_775206
  var valid_775207 = formData.getOrDefault("MaxRecords")
  valid_775207 = validateParameter(valid_775207, JInt, required = false, default = nil)
  if valid_775207 != nil:
    section.add "MaxRecords", valid_775207
  var valid_775208 = formData.getOrDefault("EngineVersion")
  valid_775208 = validateParameter(valid_775208, JString, required = false,
                                 default = nil)
  if valid_775208 != nil:
    section.add "EngineVersion", valid_775208
  var valid_775209 = formData.getOrDefault("ListSupportedTimezones")
  valid_775209 = validateParameter(valid_775209, JBool, required = false, default = nil)
  if valid_775209 != nil:
    section.add "ListSupportedTimezones", valid_775209
  var valid_775210 = formData.getOrDefault("DefaultOnly")
  valid_775210 = validateParameter(valid_775210, JBool, required = false, default = nil)
  if valid_775210 != nil:
    section.add "DefaultOnly", valid_775210
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775211: Call_PostDescribeDBEngineVersions_775189; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_775211.validator(path, query, header, formData, body)
  let scheme = call_775211.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775211.url(scheme.get, call_775211.host, call_775211.base,
                         call_775211.route, valid.getOrDefault("path"))
  result = hook(call_775211, url, valid)

proc call*(call_775212: Call_PostDescribeDBEngineVersions_775189;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; IncludeAll: bool = false;
          Filters: JsonNode = nil; MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_775213 = newJObject()
  var formData_775214 = newJObject()
  add(formData_775214, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_775214, "Engine", newJString(Engine))
  add(formData_775214, "Marker", newJString(Marker))
  add(query_775213, "Action", newJString(Action))
  add(formData_775214, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(formData_775214, "IncludeAll", newJBool(IncludeAll))
  if Filters != nil:
    formData_775214.add "Filters", Filters
  add(formData_775214, "MaxRecords", newJInt(MaxRecords))
  add(formData_775214, "EngineVersion", newJString(EngineVersion))
  add(formData_775214, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_775213, "Version", newJString(Version))
  add(formData_775214, "DefaultOnly", newJBool(DefaultOnly))
  result = call_775212.call(nil, query_775213, nil, formData_775214, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_775189(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_775190, base: "/",
    url: url_PostDescribeDBEngineVersions_775191,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_775164 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBEngineVersions_775166(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBEngineVersions_775165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775167 = query.getOrDefault("Engine")
  valid_775167 = validateParameter(valid_775167, JString, required = false,
                                 default = nil)
  if valid_775167 != nil:
    section.add "Engine", valid_775167
  var valid_775168 = query.getOrDefault("ListSupportedCharacterSets")
  valid_775168 = validateParameter(valid_775168, JBool, required = false, default = nil)
  if valid_775168 != nil:
    section.add "ListSupportedCharacterSets", valid_775168
  var valid_775169 = query.getOrDefault("MaxRecords")
  valid_775169 = validateParameter(valid_775169, JInt, required = false, default = nil)
  if valid_775169 != nil:
    section.add "MaxRecords", valid_775169
  var valid_775170 = query.getOrDefault("DBParameterGroupFamily")
  valid_775170 = validateParameter(valid_775170, JString, required = false,
                                 default = nil)
  if valid_775170 != nil:
    section.add "DBParameterGroupFamily", valid_775170
  var valid_775171 = query.getOrDefault("Filters")
  valid_775171 = validateParameter(valid_775171, JArray, required = false,
                                 default = nil)
  if valid_775171 != nil:
    section.add "Filters", valid_775171
  var valid_775172 = query.getOrDefault("IncludeAll")
  valid_775172 = validateParameter(valid_775172, JBool, required = false, default = nil)
  if valid_775172 != nil:
    section.add "IncludeAll", valid_775172
  var valid_775173 = query.getOrDefault("ListSupportedTimezones")
  valid_775173 = validateParameter(valid_775173, JBool, required = false, default = nil)
  if valid_775173 != nil:
    section.add "ListSupportedTimezones", valid_775173
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775174 = query.getOrDefault("Action")
  valid_775174 = validateParameter(valid_775174, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_775174 != nil:
    section.add "Action", valid_775174
  var valid_775175 = query.getOrDefault("Marker")
  valid_775175 = validateParameter(valid_775175, JString, required = false,
                                 default = nil)
  if valid_775175 != nil:
    section.add "Marker", valid_775175
  var valid_775176 = query.getOrDefault("EngineVersion")
  valid_775176 = validateParameter(valid_775176, JString, required = false,
                                 default = nil)
  if valid_775176 != nil:
    section.add "EngineVersion", valid_775176
  var valid_775177 = query.getOrDefault("DefaultOnly")
  valid_775177 = validateParameter(valid_775177, JBool, required = false, default = nil)
  if valid_775177 != nil:
    section.add "DefaultOnly", valid_775177
  var valid_775178 = query.getOrDefault("Version")
  valid_775178 = validateParameter(valid_775178, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775178 != nil:
    section.add "Version", valid_775178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775179 = header.getOrDefault("X-Amz-Date")
  valid_775179 = validateParameter(valid_775179, JString, required = false,
                                 default = nil)
  if valid_775179 != nil:
    section.add "X-Amz-Date", valid_775179
  var valid_775180 = header.getOrDefault("X-Amz-Security-Token")
  valid_775180 = validateParameter(valid_775180, JString, required = false,
                                 default = nil)
  if valid_775180 != nil:
    section.add "X-Amz-Security-Token", valid_775180
  var valid_775181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775181 = validateParameter(valid_775181, JString, required = false,
                                 default = nil)
  if valid_775181 != nil:
    section.add "X-Amz-Content-Sha256", valid_775181
  var valid_775182 = header.getOrDefault("X-Amz-Algorithm")
  valid_775182 = validateParameter(valid_775182, JString, required = false,
                                 default = nil)
  if valid_775182 != nil:
    section.add "X-Amz-Algorithm", valid_775182
  var valid_775183 = header.getOrDefault("X-Amz-Signature")
  valid_775183 = validateParameter(valid_775183, JString, required = false,
                                 default = nil)
  if valid_775183 != nil:
    section.add "X-Amz-Signature", valid_775183
  var valid_775184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775184 = validateParameter(valid_775184, JString, required = false,
                                 default = nil)
  if valid_775184 != nil:
    section.add "X-Amz-SignedHeaders", valid_775184
  var valid_775185 = header.getOrDefault("X-Amz-Credential")
  valid_775185 = validateParameter(valid_775185, JString, required = false,
                                 default = nil)
  if valid_775185 != nil:
    section.add "X-Amz-Credential", valid_775185
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775186: Call_GetDescribeDBEngineVersions_775164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_775186.validator(path, query, header, formData, body)
  let scheme = call_775186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775186.url(scheme.get, call_775186.host, call_775186.base,
                         call_775186.route, valid.getOrDefault("path"))
  result = hook(call_775186, url, valid)

proc call*(call_775187: Call_GetDescribeDBEngineVersions_775164;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; IncludeAll: bool = false;
          ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_775188 = newJObject()
  add(query_775188, "Engine", newJString(Engine))
  add(query_775188, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_775188, "MaxRecords", newJInt(MaxRecords))
  add(query_775188, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_775188.add "Filters", Filters
  add(query_775188, "IncludeAll", newJBool(IncludeAll))
  add(query_775188, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_775188, "Action", newJString(Action))
  add(query_775188, "Marker", newJString(Marker))
  add(query_775188, "EngineVersion", newJString(EngineVersion))
  add(query_775188, "DefaultOnly", newJBool(DefaultOnly))
  add(query_775188, "Version", newJString(Version))
  result = call_775187.call(nil, query_775188, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_775164(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_775165, base: "/",
    url: url_GetDescribeDBEngineVersions_775166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_775235 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBInstanceAutomatedBackups_775237(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_775236(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775238 = query.getOrDefault("Action")
  valid_775238 = validateParameter(valid_775238, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_775238 != nil:
    section.add "Action", valid_775238
  var valid_775239 = query.getOrDefault("Version")
  valid_775239 = validateParameter(valid_775239, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775239 != nil:
    section.add "Version", valid_775239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775240 = header.getOrDefault("X-Amz-Date")
  valid_775240 = validateParameter(valid_775240, JString, required = false,
                                 default = nil)
  if valid_775240 != nil:
    section.add "X-Amz-Date", valid_775240
  var valid_775241 = header.getOrDefault("X-Amz-Security-Token")
  valid_775241 = validateParameter(valid_775241, JString, required = false,
                                 default = nil)
  if valid_775241 != nil:
    section.add "X-Amz-Security-Token", valid_775241
  var valid_775242 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775242 = validateParameter(valid_775242, JString, required = false,
                                 default = nil)
  if valid_775242 != nil:
    section.add "X-Amz-Content-Sha256", valid_775242
  var valid_775243 = header.getOrDefault("X-Amz-Algorithm")
  valid_775243 = validateParameter(valid_775243, JString, required = false,
                                 default = nil)
  if valid_775243 != nil:
    section.add "X-Amz-Algorithm", valid_775243
  var valid_775244 = header.getOrDefault("X-Amz-Signature")
  valid_775244 = validateParameter(valid_775244, JString, required = false,
                                 default = nil)
  if valid_775244 != nil:
    section.add "X-Amz-Signature", valid_775244
  var valid_775245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775245 = validateParameter(valid_775245, JString, required = false,
                                 default = nil)
  if valid_775245 != nil:
    section.add "X-Amz-SignedHeaders", valid_775245
  var valid_775246 = header.getOrDefault("X-Amz-Credential")
  valid_775246 = validateParameter(valid_775246, JString, required = false,
                                 default = nil)
  if valid_775246 != nil:
    section.add "X-Amz-Credential", valid_775246
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  section = newJObject()
  var valid_775247 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775247 = validateParameter(valid_775247, JString, required = false,
                                 default = nil)
  if valid_775247 != nil:
    section.add "DBInstanceIdentifier", valid_775247
  var valid_775248 = formData.getOrDefault("DbiResourceId")
  valid_775248 = validateParameter(valid_775248, JString, required = false,
                                 default = nil)
  if valid_775248 != nil:
    section.add "DbiResourceId", valid_775248
  var valid_775249 = formData.getOrDefault("Marker")
  valid_775249 = validateParameter(valid_775249, JString, required = false,
                                 default = nil)
  if valid_775249 != nil:
    section.add "Marker", valid_775249
  var valid_775250 = formData.getOrDefault("Filters")
  valid_775250 = validateParameter(valid_775250, JArray, required = false,
                                 default = nil)
  if valid_775250 != nil:
    section.add "Filters", valid_775250
  var valid_775251 = formData.getOrDefault("MaxRecords")
  valid_775251 = validateParameter(valid_775251, JInt, required = false, default = nil)
  if valid_775251 != nil:
    section.add "MaxRecords", valid_775251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775252: Call_PostDescribeDBInstanceAutomatedBackups_775235;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_775252.validator(path, query, header, formData, body)
  let scheme = call_775252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775252.url(scheme.get, call_775252.host, call_775252.base,
                         call_775252.route, valid.getOrDefault("path"))
  result = hook(call_775252, url, valid)

proc call*(call_775253: Call_PostDescribeDBInstanceAutomatedBackups_775235;
          DBInstanceIdentifier: string = ""; DbiResourceId: string = "";
          Marker: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Version: string (required)
  var query_775254 = newJObject()
  var formData_775255 = newJObject()
  add(formData_775255, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_775255, "DbiResourceId", newJString(DbiResourceId))
  add(formData_775255, "Marker", newJString(Marker))
  add(query_775254, "Action", newJString(Action))
  if Filters != nil:
    formData_775255.add "Filters", Filters
  add(formData_775255, "MaxRecords", newJInt(MaxRecords))
  add(query_775254, "Version", newJString(Version))
  result = call_775253.call(nil, query_775254, nil, formData_775255, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_775235(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_775236, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_775237,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_775215 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBInstanceAutomatedBackups_775217(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_775216(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  section = newJObject()
  var valid_775218 = query.getOrDefault("MaxRecords")
  valid_775218 = validateParameter(valid_775218, JInt, required = false, default = nil)
  if valid_775218 != nil:
    section.add "MaxRecords", valid_775218
  var valid_775219 = query.getOrDefault("Filters")
  valid_775219 = validateParameter(valid_775219, JArray, required = false,
                                 default = nil)
  if valid_775219 != nil:
    section.add "Filters", valid_775219
  var valid_775220 = query.getOrDefault("DbiResourceId")
  valid_775220 = validateParameter(valid_775220, JString, required = false,
                                 default = nil)
  if valid_775220 != nil:
    section.add "DbiResourceId", valid_775220
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775221 = query.getOrDefault("Action")
  valid_775221 = validateParameter(valid_775221, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_775221 != nil:
    section.add "Action", valid_775221
  var valid_775222 = query.getOrDefault("Marker")
  valid_775222 = validateParameter(valid_775222, JString, required = false,
                                 default = nil)
  if valid_775222 != nil:
    section.add "Marker", valid_775222
  var valid_775223 = query.getOrDefault("Version")
  valid_775223 = validateParameter(valid_775223, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775223 != nil:
    section.add "Version", valid_775223
  var valid_775224 = query.getOrDefault("DBInstanceIdentifier")
  valid_775224 = validateParameter(valid_775224, JString, required = false,
                                 default = nil)
  if valid_775224 != nil:
    section.add "DBInstanceIdentifier", valid_775224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775225 = header.getOrDefault("X-Amz-Date")
  valid_775225 = validateParameter(valid_775225, JString, required = false,
                                 default = nil)
  if valid_775225 != nil:
    section.add "X-Amz-Date", valid_775225
  var valid_775226 = header.getOrDefault("X-Amz-Security-Token")
  valid_775226 = validateParameter(valid_775226, JString, required = false,
                                 default = nil)
  if valid_775226 != nil:
    section.add "X-Amz-Security-Token", valid_775226
  var valid_775227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775227 = validateParameter(valid_775227, JString, required = false,
                                 default = nil)
  if valid_775227 != nil:
    section.add "X-Amz-Content-Sha256", valid_775227
  var valid_775228 = header.getOrDefault("X-Amz-Algorithm")
  valid_775228 = validateParameter(valid_775228, JString, required = false,
                                 default = nil)
  if valid_775228 != nil:
    section.add "X-Amz-Algorithm", valid_775228
  var valid_775229 = header.getOrDefault("X-Amz-Signature")
  valid_775229 = validateParameter(valid_775229, JString, required = false,
                                 default = nil)
  if valid_775229 != nil:
    section.add "X-Amz-Signature", valid_775229
  var valid_775230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775230 = validateParameter(valid_775230, JString, required = false,
                                 default = nil)
  if valid_775230 != nil:
    section.add "X-Amz-SignedHeaders", valid_775230
  var valid_775231 = header.getOrDefault("X-Amz-Credential")
  valid_775231 = validateParameter(valid_775231, JString, required = false,
                                 default = nil)
  if valid_775231 != nil:
    section.add "X-Amz-Credential", valid_775231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775232: Call_GetDescribeDBInstanceAutomatedBackups_775215;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_775232.validator(path, query, header, formData, body)
  let scheme = call_775232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775232.url(scheme.get, call_775232.host, call_775232.base,
                         call_775232.route, valid.getOrDefault("path"))
  result = hook(call_775232, url, valid)

proc call*(call_775233: Call_GetDescribeDBInstanceAutomatedBackups_775215;
          MaxRecords: int = 0; Filters: JsonNode = nil; DbiResourceId: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  var query_775234 = newJObject()
  add(query_775234, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775234.add "Filters", Filters
  add(query_775234, "DbiResourceId", newJString(DbiResourceId))
  add(query_775234, "Action", newJString(Action))
  add(query_775234, "Marker", newJString(Marker))
  add(query_775234, "Version", newJString(Version))
  add(query_775234, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_775233.call(nil, query_775234, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_775215(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_775216, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_775217,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_775275 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBInstances_775277(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBInstances_775276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775278 = query.getOrDefault("Action")
  valid_775278 = validateParameter(valid_775278, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_775278 != nil:
    section.add "Action", valid_775278
  var valid_775279 = query.getOrDefault("Version")
  valid_775279 = validateParameter(valid_775279, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775279 != nil:
    section.add "Version", valid_775279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775280 = header.getOrDefault("X-Amz-Date")
  valid_775280 = validateParameter(valid_775280, JString, required = false,
                                 default = nil)
  if valid_775280 != nil:
    section.add "X-Amz-Date", valid_775280
  var valid_775281 = header.getOrDefault("X-Amz-Security-Token")
  valid_775281 = validateParameter(valid_775281, JString, required = false,
                                 default = nil)
  if valid_775281 != nil:
    section.add "X-Amz-Security-Token", valid_775281
  var valid_775282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775282 = validateParameter(valid_775282, JString, required = false,
                                 default = nil)
  if valid_775282 != nil:
    section.add "X-Amz-Content-Sha256", valid_775282
  var valid_775283 = header.getOrDefault("X-Amz-Algorithm")
  valid_775283 = validateParameter(valid_775283, JString, required = false,
                                 default = nil)
  if valid_775283 != nil:
    section.add "X-Amz-Algorithm", valid_775283
  var valid_775284 = header.getOrDefault("X-Amz-Signature")
  valid_775284 = validateParameter(valid_775284, JString, required = false,
                                 default = nil)
  if valid_775284 != nil:
    section.add "X-Amz-Signature", valid_775284
  var valid_775285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775285 = validateParameter(valid_775285, JString, required = false,
                                 default = nil)
  if valid_775285 != nil:
    section.add "X-Amz-SignedHeaders", valid_775285
  var valid_775286 = header.getOrDefault("X-Amz-Credential")
  valid_775286 = validateParameter(valid_775286, JString, required = false,
                                 default = nil)
  if valid_775286 != nil:
    section.add "X-Amz-Credential", valid_775286
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775287 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775287 = validateParameter(valid_775287, JString, required = false,
                                 default = nil)
  if valid_775287 != nil:
    section.add "DBInstanceIdentifier", valid_775287
  var valid_775288 = formData.getOrDefault("Marker")
  valid_775288 = validateParameter(valid_775288, JString, required = false,
                                 default = nil)
  if valid_775288 != nil:
    section.add "Marker", valid_775288
  var valid_775289 = formData.getOrDefault("Filters")
  valid_775289 = validateParameter(valid_775289, JArray, required = false,
                                 default = nil)
  if valid_775289 != nil:
    section.add "Filters", valid_775289
  var valid_775290 = formData.getOrDefault("MaxRecords")
  valid_775290 = validateParameter(valid_775290, JInt, required = false, default = nil)
  if valid_775290 != nil:
    section.add "MaxRecords", valid_775290
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775291: Call_PostDescribeDBInstances_775275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_775291.validator(path, query, header, formData, body)
  let scheme = call_775291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775291.url(scheme.get, call_775291.host, call_775291.base,
                         call_775291.route, valid.getOrDefault("path"))
  result = hook(call_775291, url, valid)

proc call*(call_775292: Call_PostDescribeDBInstances_775275;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775293 = newJObject()
  var formData_775294 = newJObject()
  add(formData_775294, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_775294, "Marker", newJString(Marker))
  add(query_775293, "Action", newJString(Action))
  if Filters != nil:
    formData_775294.add "Filters", Filters
  add(formData_775294, "MaxRecords", newJInt(MaxRecords))
  add(query_775293, "Version", newJString(Version))
  result = call_775292.call(nil, query_775293, nil, formData_775294, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_775275(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_775276, base: "/",
    url: url_PostDescribeDBInstances_775277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_775256 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBInstances_775258(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBInstances_775257(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_775259 = query.getOrDefault("MaxRecords")
  valid_775259 = validateParameter(valid_775259, JInt, required = false, default = nil)
  if valid_775259 != nil:
    section.add "MaxRecords", valid_775259
  var valid_775260 = query.getOrDefault("Filters")
  valid_775260 = validateParameter(valid_775260, JArray, required = false,
                                 default = nil)
  if valid_775260 != nil:
    section.add "Filters", valid_775260
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775261 = query.getOrDefault("Action")
  valid_775261 = validateParameter(valid_775261, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_775261 != nil:
    section.add "Action", valid_775261
  var valid_775262 = query.getOrDefault("Marker")
  valid_775262 = validateParameter(valid_775262, JString, required = false,
                                 default = nil)
  if valid_775262 != nil:
    section.add "Marker", valid_775262
  var valid_775263 = query.getOrDefault("Version")
  valid_775263 = validateParameter(valid_775263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775263 != nil:
    section.add "Version", valid_775263
  var valid_775264 = query.getOrDefault("DBInstanceIdentifier")
  valid_775264 = validateParameter(valid_775264, JString, required = false,
                                 default = nil)
  if valid_775264 != nil:
    section.add "DBInstanceIdentifier", valid_775264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775265 = header.getOrDefault("X-Amz-Date")
  valid_775265 = validateParameter(valid_775265, JString, required = false,
                                 default = nil)
  if valid_775265 != nil:
    section.add "X-Amz-Date", valid_775265
  var valid_775266 = header.getOrDefault("X-Amz-Security-Token")
  valid_775266 = validateParameter(valid_775266, JString, required = false,
                                 default = nil)
  if valid_775266 != nil:
    section.add "X-Amz-Security-Token", valid_775266
  var valid_775267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775267 = validateParameter(valid_775267, JString, required = false,
                                 default = nil)
  if valid_775267 != nil:
    section.add "X-Amz-Content-Sha256", valid_775267
  var valid_775268 = header.getOrDefault("X-Amz-Algorithm")
  valid_775268 = validateParameter(valid_775268, JString, required = false,
                                 default = nil)
  if valid_775268 != nil:
    section.add "X-Amz-Algorithm", valid_775268
  var valid_775269 = header.getOrDefault("X-Amz-Signature")
  valid_775269 = validateParameter(valid_775269, JString, required = false,
                                 default = nil)
  if valid_775269 != nil:
    section.add "X-Amz-Signature", valid_775269
  var valid_775270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775270 = validateParameter(valid_775270, JString, required = false,
                                 default = nil)
  if valid_775270 != nil:
    section.add "X-Amz-SignedHeaders", valid_775270
  var valid_775271 = header.getOrDefault("X-Amz-Credential")
  valid_775271 = validateParameter(valid_775271, JString, required = false,
                                 default = nil)
  if valid_775271 != nil:
    section.add "X-Amz-Credential", valid_775271
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775272: Call_GetDescribeDBInstances_775256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_775272.validator(path, query, header, formData, body)
  let scheme = call_775272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775272.url(scheme.get, call_775272.host, call_775272.base,
                         call_775272.route, valid.getOrDefault("path"))
  result = hook(call_775272, url, valid)

proc call*(call_775273: Call_GetDescribeDBInstances_775256; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBInstances";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these resource identifiers.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_775274 = newJObject()
  add(query_775274, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775274.add "Filters", Filters
  add(query_775274, "Action", newJString(Action))
  add(query_775274, "Marker", newJString(Marker))
  add(query_775274, "Version", newJString(Version))
  add(query_775274, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_775273.call(nil, query_775274, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_775256(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_775257, base: "/",
    url: url_GetDescribeDBInstances_775258, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_775317 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBLogFiles_775319(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBLogFiles_775318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775320 = query.getOrDefault("Action")
  valid_775320 = validateParameter(valid_775320, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_775320 != nil:
    section.add "Action", valid_775320
  var valid_775321 = query.getOrDefault("Version")
  valid_775321 = validateParameter(valid_775321, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775321 != nil:
    section.add "Version", valid_775321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775322 = header.getOrDefault("X-Amz-Date")
  valid_775322 = validateParameter(valid_775322, JString, required = false,
                                 default = nil)
  if valid_775322 != nil:
    section.add "X-Amz-Date", valid_775322
  var valid_775323 = header.getOrDefault("X-Amz-Security-Token")
  valid_775323 = validateParameter(valid_775323, JString, required = false,
                                 default = nil)
  if valid_775323 != nil:
    section.add "X-Amz-Security-Token", valid_775323
  var valid_775324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775324 = validateParameter(valid_775324, JString, required = false,
                                 default = nil)
  if valid_775324 != nil:
    section.add "X-Amz-Content-Sha256", valid_775324
  var valid_775325 = header.getOrDefault("X-Amz-Algorithm")
  valid_775325 = validateParameter(valid_775325, JString, required = false,
                                 default = nil)
  if valid_775325 != nil:
    section.add "X-Amz-Algorithm", valid_775325
  var valid_775326 = header.getOrDefault("X-Amz-Signature")
  valid_775326 = validateParameter(valid_775326, JString, required = false,
                                 default = nil)
  if valid_775326 != nil:
    section.add "X-Amz-Signature", valid_775326
  var valid_775327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775327 = validateParameter(valid_775327, JString, required = false,
                                 default = nil)
  if valid_775327 != nil:
    section.add "X-Amz-SignedHeaders", valid_775327
  var valid_775328 = header.getOrDefault("X-Amz-Credential")
  valid_775328 = validateParameter(valid_775328, JString, required = false,
                                 default = nil)
  if valid_775328 != nil:
    section.add "X-Amz-Credential", valid_775328
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_775329 = formData.getOrDefault("FilenameContains")
  valid_775329 = validateParameter(valid_775329, JString, required = false,
                                 default = nil)
  if valid_775329 != nil:
    section.add "FilenameContains", valid_775329
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_775330 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775330 = validateParameter(valid_775330, JString, required = true,
                                 default = nil)
  if valid_775330 != nil:
    section.add "DBInstanceIdentifier", valid_775330
  var valid_775331 = formData.getOrDefault("FileSize")
  valid_775331 = validateParameter(valid_775331, JInt, required = false, default = nil)
  if valid_775331 != nil:
    section.add "FileSize", valid_775331
  var valid_775332 = formData.getOrDefault("Marker")
  valid_775332 = validateParameter(valid_775332, JString, required = false,
                                 default = nil)
  if valid_775332 != nil:
    section.add "Marker", valid_775332
  var valid_775333 = formData.getOrDefault("Filters")
  valid_775333 = validateParameter(valid_775333, JArray, required = false,
                                 default = nil)
  if valid_775333 != nil:
    section.add "Filters", valid_775333
  var valid_775334 = formData.getOrDefault("MaxRecords")
  valid_775334 = validateParameter(valid_775334, JInt, required = false, default = nil)
  if valid_775334 != nil:
    section.add "MaxRecords", valid_775334
  var valid_775335 = formData.getOrDefault("FileLastWritten")
  valid_775335 = validateParameter(valid_775335, JInt, required = false, default = nil)
  if valid_775335 != nil:
    section.add "FileLastWritten", valid_775335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775336: Call_PostDescribeDBLogFiles_775317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_775336.validator(path, query, header, formData, body)
  let scheme = call_775336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775336.url(scheme.get, call_775336.host, call_775336.base,
                         call_775336.route, valid.getOrDefault("path"))
  result = hook(call_775336, url, valid)

proc call*(call_775337: Call_PostDescribeDBLogFiles_775317;
          DBInstanceIdentifier: string; FilenameContains: string = "";
          FileSize: int = 0; Marker: string = ""; Action: string = "DescribeDBLogFiles";
          Filters: JsonNode = nil; MaxRecords: int = 0; FileLastWritten: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Version: string (required)
  var query_775338 = newJObject()
  var formData_775339 = newJObject()
  add(formData_775339, "FilenameContains", newJString(FilenameContains))
  add(formData_775339, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_775339, "FileSize", newJInt(FileSize))
  add(formData_775339, "Marker", newJString(Marker))
  add(query_775338, "Action", newJString(Action))
  if Filters != nil:
    formData_775339.add "Filters", Filters
  add(formData_775339, "MaxRecords", newJInt(MaxRecords))
  add(formData_775339, "FileLastWritten", newJInt(FileLastWritten))
  add(query_775338, "Version", newJString(Version))
  result = call_775337.call(nil, query_775338, nil, formData_775339, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_775317(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_775318, base: "/",
    url: url_PostDescribeDBLogFiles_775319, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_775295 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBLogFiles_775297(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBLogFiles_775296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_775298 = query.getOrDefault("FileLastWritten")
  valid_775298 = validateParameter(valid_775298, JInt, required = false, default = nil)
  if valid_775298 != nil:
    section.add "FileLastWritten", valid_775298
  var valid_775299 = query.getOrDefault("MaxRecords")
  valid_775299 = validateParameter(valid_775299, JInt, required = false, default = nil)
  if valid_775299 != nil:
    section.add "MaxRecords", valid_775299
  var valid_775300 = query.getOrDefault("FilenameContains")
  valid_775300 = validateParameter(valid_775300, JString, required = false,
                                 default = nil)
  if valid_775300 != nil:
    section.add "FilenameContains", valid_775300
  var valid_775301 = query.getOrDefault("FileSize")
  valid_775301 = validateParameter(valid_775301, JInt, required = false, default = nil)
  if valid_775301 != nil:
    section.add "FileSize", valid_775301
  var valid_775302 = query.getOrDefault("Filters")
  valid_775302 = validateParameter(valid_775302, JArray, required = false,
                                 default = nil)
  if valid_775302 != nil:
    section.add "Filters", valid_775302
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775303 = query.getOrDefault("Action")
  valid_775303 = validateParameter(valid_775303, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_775303 != nil:
    section.add "Action", valid_775303
  var valid_775304 = query.getOrDefault("Marker")
  valid_775304 = validateParameter(valid_775304, JString, required = false,
                                 default = nil)
  if valid_775304 != nil:
    section.add "Marker", valid_775304
  var valid_775305 = query.getOrDefault("Version")
  valid_775305 = validateParameter(valid_775305, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775305 != nil:
    section.add "Version", valid_775305
  var valid_775306 = query.getOrDefault("DBInstanceIdentifier")
  valid_775306 = validateParameter(valid_775306, JString, required = true,
                                 default = nil)
  if valid_775306 != nil:
    section.add "DBInstanceIdentifier", valid_775306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775307 = header.getOrDefault("X-Amz-Date")
  valid_775307 = validateParameter(valid_775307, JString, required = false,
                                 default = nil)
  if valid_775307 != nil:
    section.add "X-Amz-Date", valid_775307
  var valid_775308 = header.getOrDefault("X-Amz-Security-Token")
  valid_775308 = validateParameter(valid_775308, JString, required = false,
                                 default = nil)
  if valid_775308 != nil:
    section.add "X-Amz-Security-Token", valid_775308
  var valid_775309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775309 = validateParameter(valid_775309, JString, required = false,
                                 default = nil)
  if valid_775309 != nil:
    section.add "X-Amz-Content-Sha256", valid_775309
  var valid_775310 = header.getOrDefault("X-Amz-Algorithm")
  valid_775310 = validateParameter(valid_775310, JString, required = false,
                                 default = nil)
  if valid_775310 != nil:
    section.add "X-Amz-Algorithm", valid_775310
  var valid_775311 = header.getOrDefault("X-Amz-Signature")
  valid_775311 = validateParameter(valid_775311, JString, required = false,
                                 default = nil)
  if valid_775311 != nil:
    section.add "X-Amz-Signature", valid_775311
  var valid_775312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775312 = validateParameter(valid_775312, JString, required = false,
                                 default = nil)
  if valid_775312 != nil:
    section.add "X-Amz-SignedHeaders", valid_775312
  var valid_775313 = header.getOrDefault("X-Amz-Credential")
  valid_775313 = validateParameter(valid_775313, JString, required = false,
                                 default = nil)
  if valid_775313 != nil:
    section.add "X-Amz-Credential", valid_775313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775314: Call_GetDescribeDBLogFiles_775295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_775314.validator(path, query, header, formData, body)
  let scheme = call_775314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775314.url(scheme.get, call_775314.host, call_775314.base,
                         call_775314.route, valid.getOrDefault("path"))
  result = hook(call_775314, url, valid)

proc call*(call_775315: Call_GetDescribeDBLogFiles_775295;
          DBInstanceIdentifier: string; FileLastWritten: int = 0; MaxRecords: int = 0;
          FilenameContains: string = ""; FileSize: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBLogFiles"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_775316 = newJObject()
  add(query_775316, "FileLastWritten", newJInt(FileLastWritten))
  add(query_775316, "MaxRecords", newJInt(MaxRecords))
  add(query_775316, "FilenameContains", newJString(FilenameContains))
  add(query_775316, "FileSize", newJInt(FileSize))
  if Filters != nil:
    query_775316.add "Filters", Filters
  add(query_775316, "Action", newJString(Action))
  add(query_775316, "Marker", newJString(Marker))
  add(query_775316, "Version", newJString(Version))
  add(query_775316, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_775315.call(nil, query_775316, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_775295(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_775296, base: "/",
    url: url_GetDescribeDBLogFiles_775297, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_775359 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBParameterGroups_775361(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBParameterGroups_775360(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775362 = query.getOrDefault("Action")
  valid_775362 = validateParameter(valid_775362, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_775362 != nil:
    section.add "Action", valid_775362
  var valid_775363 = query.getOrDefault("Version")
  valid_775363 = validateParameter(valid_775363, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775363 != nil:
    section.add "Version", valid_775363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775364 = header.getOrDefault("X-Amz-Date")
  valid_775364 = validateParameter(valid_775364, JString, required = false,
                                 default = nil)
  if valid_775364 != nil:
    section.add "X-Amz-Date", valid_775364
  var valid_775365 = header.getOrDefault("X-Amz-Security-Token")
  valid_775365 = validateParameter(valid_775365, JString, required = false,
                                 default = nil)
  if valid_775365 != nil:
    section.add "X-Amz-Security-Token", valid_775365
  var valid_775366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775366 = validateParameter(valid_775366, JString, required = false,
                                 default = nil)
  if valid_775366 != nil:
    section.add "X-Amz-Content-Sha256", valid_775366
  var valid_775367 = header.getOrDefault("X-Amz-Algorithm")
  valid_775367 = validateParameter(valid_775367, JString, required = false,
                                 default = nil)
  if valid_775367 != nil:
    section.add "X-Amz-Algorithm", valid_775367
  var valid_775368 = header.getOrDefault("X-Amz-Signature")
  valid_775368 = validateParameter(valid_775368, JString, required = false,
                                 default = nil)
  if valid_775368 != nil:
    section.add "X-Amz-Signature", valid_775368
  var valid_775369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775369 = validateParameter(valid_775369, JString, required = false,
                                 default = nil)
  if valid_775369 != nil:
    section.add "X-Amz-SignedHeaders", valid_775369
  var valid_775370 = header.getOrDefault("X-Amz-Credential")
  valid_775370 = validateParameter(valid_775370, JString, required = false,
                                 default = nil)
  if valid_775370 != nil:
    section.add "X-Amz-Credential", valid_775370
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775371 = formData.getOrDefault("DBParameterGroupName")
  valid_775371 = validateParameter(valid_775371, JString, required = false,
                                 default = nil)
  if valid_775371 != nil:
    section.add "DBParameterGroupName", valid_775371
  var valid_775372 = formData.getOrDefault("Marker")
  valid_775372 = validateParameter(valid_775372, JString, required = false,
                                 default = nil)
  if valid_775372 != nil:
    section.add "Marker", valid_775372
  var valid_775373 = formData.getOrDefault("Filters")
  valid_775373 = validateParameter(valid_775373, JArray, required = false,
                                 default = nil)
  if valid_775373 != nil:
    section.add "Filters", valid_775373
  var valid_775374 = formData.getOrDefault("MaxRecords")
  valid_775374 = validateParameter(valid_775374, JInt, required = false, default = nil)
  if valid_775374 != nil:
    section.add "MaxRecords", valid_775374
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775375: Call_PostDescribeDBParameterGroups_775359; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_775375.validator(path, query, header, formData, body)
  let scheme = call_775375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775375.url(scheme.get, call_775375.host, call_775375.base,
                         call_775375.route, valid.getOrDefault("path"))
  result = hook(call_775375, url, valid)

proc call*(call_775376: Call_PostDescribeDBParameterGroups_775359;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775377 = newJObject()
  var formData_775378 = newJObject()
  add(formData_775378, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_775378, "Marker", newJString(Marker))
  add(query_775377, "Action", newJString(Action))
  if Filters != nil:
    formData_775378.add "Filters", Filters
  add(formData_775378, "MaxRecords", newJInt(MaxRecords))
  add(query_775377, "Version", newJString(Version))
  result = call_775376.call(nil, query_775377, nil, formData_775378, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_775359(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_775360, base: "/",
    url: url_PostDescribeDBParameterGroups_775361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_775340 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBParameterGroups_775342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBParameterGroups_775341(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775343 = query.getOrDefault("MaxRecords")
  valid_775343 = validateParameter(valid_775343, JInt, required = false, default = nil)
  if valid_775343 != nil:
    section.add "MaxRecords", valid_775343
  var valid_775344 = query.getOrDefault("Filters")
  valid_775344 = validateParameter(valid_775344, JArray, required = false,
                                 default = nil)
  if valid_775344 != nil:
    section.add "Filters", valid_775344
  var valid_775345 = query.getOrDefault("DBParameterGroupName")
  valid_775345 = validateParameter(valid_775345, JString, required = false,
                                 default = nil)
  if valid_775345 != nil:
    section.add "DBParameterGroupName", valid_775345
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775346 = query.getOrDefault("Action")
  valid_775346 = validateParameter(valid_775346, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_775346 != nil:
    section.add "Action", valid_775346
  var valid_775347 = query.getOrDefault("Marker")
  valid_775347 = validateParameter(valid_775347, JString, required = false,
                                 default = nil)
  if valid_775347 != nil:
    section.add "Marker", valid_775347
  var valid_775348 = query.getOrDefault("Version")
  valid_775348 = validateParameter(valid_775348, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775348 != nil:
    section.add "Version", valid_775348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775349 = header.getOrDefault("X-Amz-Date")
  valid_775349 = validateParameter(valid_775349, JString, required = false,
                                 default = nil)
  if valid_775349 != nil:
    section.add "X-Amz-Date", valid_775349
  var valid_775350 = header.getOrDefault("X-Amz-Security-Token")
  valid_775350 = validateParameter(valid_775350, JString, required = false,
                                 default = nil)
  if valid_775350 != nil:
    section.add "X-Amz-Security-Token", valid_775350
  var valid_775351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775351 = validateParameter(valid_775351, JString, required = false,
                                 default = nil)
  if valid_775351 != nil:
    section.add "X-Amz-Content-Sha256", valid_775351
  var valid_775352 = header.getOrDefault("X-Amz-Algorithm")
  valid_775352 = validateParameter(valid_775352, JString, required = false,
                                 default = nil)
  if valid_775352 != nil:
    section.add "X-Amz-Algorithm", valid_775352
  var valid_775353 = header.getOrDefault("X-Amz-Signature")
  valid_775353 = validateParameter(valid_775353, JString, required = false,
                                 default = nil)
  if valid_775353 != nil:
    section.add "X-Amz-Signature", valid_775353
  var valid_775354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775354 = validateParameter(valid_775354, JString, required = false,
                                 default = nil)
  if valid_775354 != nil:
    section.add "X-Amz-SignedHeaders", valid_775354
  var valid_775355 = header.getOrDefault("X-Amz-Credential")
  valid_775355 = validateParameter(valid_775355, JString, required = false,
                                 default = nil)
  if valid_775355 != nil:
    section.add "X-Amz-Credential", valid_775355
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775356: Call_GetDescribeDBParameterGroups_775340; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_775356.validator(path, query, header, formData, body)
  let scheme = call_775356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775356.url(scheme.get, call_775356.host, call_775356.base,
                         call_775356.route, valid.getOrDefault("path"))
  result = hook(call_775356, url, valid)

proc call*(call_775357: Call_GetDescribeDBParameterGroups_775340;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775358 = newJObject()
  add(query_775358, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775358.add "Filters", Filters
  add(query_775358, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_775358, "Action", newJString(Action))
  add(query_775358, "Marker", newJString(Marker))
  add(query_775358, "Version", newJString(Version))
  result = call_775357.call(nil, query_775358, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_775340(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_775341, base: "/",
    url: url_GetDescribeDBParameterGroups_775342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_775399 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBParameters_775401(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBParameters_775400(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775402 = query.getOrDefault("Action")
  valid_775402 = validateParameter(valid_775402, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_775402 != nil:
    section.add "Action", valid_775402
  var valid_775403 = query.getOrDefault("Version")
  valid_775403 = validateParameter(valid_775403, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775403 != nil:
    section.add "Version", valid_775403
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775404 = header.getOrDefault("X-Amz-Date")
  valid_775404 = validateParameter(valid_775404, JString, required = false,
                                 default = nil)
  if valid_775404 != nil:
    section.add "X-Amz-Date", valid_775404
  var valid_775405 = header.getOrDefault("X-Amz-Security-Token")
  valid_775405 = validateParameter(valid_775405, JString, required = false,
                                 default = nil)
  if valid_775405 != nil:
    section.add "X-Amz-Security-Token", valid_775405
  var valid_775406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775406 = validateParameter(valid_775406, JString, required = false,
                                 default = nil)
  if valid_775406 != nil:
    section.add "X-Amz-Content-Sha256", valid_775406
  var valid_775407 = header.getOrDefault("X-Amz-Algorithm")
  valid_775407 = validateParameter(valid_775407, JString, required = false,
                                 default = nil)
  if valid_775407 != nil:
    section.add "X-Amz-Algorithm", valid_775407
  var valid_775408 = header.getOrDefault("X-Amz-Signature")
  valid_775408 = validateParameter(valid_775408, JString, required = false,
                                 default = nil)
  if valid_775408 != nil:
    section.add "X-Amz-Signature", valid_775408
  var valid_775409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775409 = validateParameter(valid_775409, JString, required = false,
                                 default = nil)
  if valid_775409 != nil:
    section.add "X-Amz-SignedHeaders", valid_775409
  var valid_775410 = header.getOrDefault("X-Amz-Credential")
  valid_775410 = validateParameter(valid_775410, JString, required = false,
                                 default = nil)
  if valid_775410 != nil:
    section.add "X-Amz-Credential", valid_775410
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_775411 = formData.getOrDefault("DBParameterGroupName")
  valid_775411 = validateParameter(valid_775411, JString, required = true,
                                 default = nil)
  if valid_775411 != nil:
    section.add "DBParameterGroupName", valid_775411
  var valid_775412 = formData.getOrDefault("Marker")
  valid_775412 = validateParameter(valid_775412, JString, required = false,
                                 default = nil)
  if valid_775412 != nil:
    section.add "Marker", valid_775412
  var valid_775413 = formData.getOrDefault("Filters")
  valid_775413 = validateParameter(valid_775413, JArray, required = false,
                                 default = nil)
  if valid_775413 != nil:
    section.add "Filters", valid_775413
  var valid_775414 = formData.getOrDefault("MaxRecords")
  valid_775414 = validateParameter(valid_775414, JInt, required = false, default = nil)
  if valid_775414 != nil:
    section.add "MaxRecords", valid_775414
  var valid_775415 = formData.getOrDefault("Source")
  valid_775415 = validateParameter(valid_775415, JString, required = false,
                                 default = nil)
  if valid_775415 != nil:
    section.add "Source", valid_775415
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775416: Call_PostDescribeDBParameters_775399; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_775416.validator(path, query, header, formData, body)
  let scheme = call_775416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775416.url(scheme.get, call_775416.host, call_775416.base,
                         call_775416.route, valid.getOrDefault("path"))
  result = hook(call_775416, url, valid)

proc call*(call_775417: Call_PostDescribeDBParameters_775399;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_775418 = newJObject()
  var formData_775419 = newJObject()
  add(formData_775419, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_775419, "Marker", newJString(Marker))
  add(query_775418, "Action", newJString(Action))
  if Filters != nil:
    formData_775419.add "Filters", Filters
  add(formData_775419, "MaxRecords", newJInt(MaxRecords))
  add(query_775418, "Version", newJString(Version))
  add(formData_775419, "Source", newJString(Source))
  result = call_775417.call(nil, query_775418, nil, formData_775419, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_775399(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_775400, base: "/",
    url: url_PostDescribeDBParameters_775401, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_775379 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBParameters_775381(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBParameters_775380(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775382 = query.getOrDefault("MaxRecords")
  valid_775382 = validateParameter(valid_775382, JInt, required = false, default = nil)
  if valid_775382 != nil:
    section.add "MaxRecords", valid_775382
  var valid_775383 = query.getOrDefault("Filters")
  valid_775383 = validateParameter(valid_775383, JArray, required = false,
                                 default = nil)
  if valid_775383 != nil:
    section.add "Filters", valid_775383
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_775384 = query.getOrDefault("DBParameterGroupName")
  valid_775384 = validateParameter(valid_775384, JString, required = true,
                                 default = nil)
  if valid_775384 != nil:
    section.add "DBParameterGroupName", valid_775384
  var valid_775385 = query.getOrDefault("Action")
  valid_775385 = validateParameter(valid_775385, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_775385 != nil:
    section.add "Action", valid_775385
  var valid_775386 = query.getOrDefault("Marker")
  valid_775386 = validateParameter(valid_775386, JString, required = false,
                                 default = nil)
  if valid_775386 != nil:
    section.add "Marker", valid_775386
  var valid_775387 = query.getOrDefault("Source")
  valid_775387 = validateParameter(valid_775387, JString, required = false,
                                 default = nil)
  if valid_775387 != nil:
    section.add "Source", valid_775387
  var valid_775388 = query.getOrDefault("Version")
  valid_775388 = validateParameter(valid_775388, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775388 != nil:
    section.add "Version", valid_775388
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775389 = header.getOrDefault("X-Amz-Date")
  valid_775389 = validateParameter(valid_775389, JString, required = false,
                                 default = nil)
  if valid_775389 != nil:
    section.add "X-Amz-Date", valid_775389
  var valid_775390 = header.getOrDefault("X-Amz-Security-Token")
  valid_775390 = validateParameter(valid_775390, JString, required = false,
                                 default = nil)
  if valid_775390 != nil:
    section.add "X-Amz-Security-Token", valid_775390
  var valid_775391 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775391 = validateParameter(valid_775391, JString, required = false,
                                 default = nil)
  if valid_775391 != nil:
    section.add "X-Amz-Content-Sha256", valid_775391
  var valid_775392 = header.getOrDefault("X-Amz-Algorithm")
  valid_775392 = validateParameter(valid_775392, JString, required = false,
                                 default = nil)
  if valid_775392 != nil:
    section.add "X-Amz-Algorithm", valid_775392
  var valid_775393 = header.getOrDefault("X-Amz-Signature")
  valid_775393 = validateParameter(valid_775393, JString, required = false,
                                 default = nil)
  if valid_775393 != nil:
    section.add "X-Amz-Signature", valid_775393
  var valid_775394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775394 = validateParameter(valid_775394, JString, required = false,
                                 default = nil)
  if valid_775394 != nil:
    section.add "X-Amz-SignedHeaders", valid_775394
  var valid_775395 = header.getOrDefault("X-Amz-Credential")
  valid_775395 = validateParameter(valid_775395, JString, required = false,
                                 default = nil)
  if valid_775395 != nil:
    section.add "X-Amz-Credential", valid_775395
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775396: Call_GetDescribeDBParameters_775379; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_775396.validator(path, query, header, formData, body)
  let scheme = call_775396.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775396.url(scheme.get, call_775396.host, call_775396.base,
                         call_775396.route, valid.getOrDefault("path"))
  result = hook(call_775396, url, valid)

proc call*(call_775397: Call_GetDescribeDBParameters_775379;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_775398 = newJObject()
  add(query_775398, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775398.add "Filters", Filters
  add(query_775398, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_775398, "Action", newJString(Action))
  add(query_775398, "Marker", newJString(Marker))
  add(query_775398, "Source", newJString(Source))
  add(query_775398, "Version", newJString(Version))
  result = call_775397.call(nil, query_775398, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_775379(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_775380, base: "/",
    url: url_GetDescribeDBParameters_775381, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_775439 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBSecurityGroups_775441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBSecurityGroups_775440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775442 = query.getOrDefault("Action")
  valid_775442 = validateParameter(valid_775442, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_775442 != nil:
    section.add "Action", valid_775442
  var valid_775443 = query.getOrDefault("Version")
  valid_775443 = validateParameter(valid_775443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775443 != nil:
    section.add "Version", valid_775443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775444 = header.getOrDefault("X-Amz-Date")
  valid_775444 = validateParameter(valid_775444, JString, required = false,
                                 default = nil)
  if valid_775444 != nil:
    section.add "X-Amz-Date", valid_775444
  var valid_775445 = header.getOrDefault("X-Amz-Security-Token")
  valid_775445 = validateParameter(valid_775445, JString, required = false,
                                 default = nil)
  if valid_775445 != nil:
    section.add "X-Amz-Security-Token", valid_775445
  var valid_775446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775446 = validateParameter(valid_775446, JString, required = false,
                                 default = nil)
  if valid_775446 != nil:
    section.add "X-Amz-Content-Sha256", valid_775446
  var valid_775447 = header.getOrDefault("X-Amz-Algorithm")
  valid_775447 = validateParameter(valid_775447, JString, required = false,
                                 default = nil)
  if valid_775447 != nil:
    section.add "X-Amz-Algorithm", valid_775447
  var valid_775448 = header.getOrDefault("X-Amz-Signature")
  valid_775448 = validateParameter(valid_775448, JString, required = false,
                                 default = nil)
  if valid_775448 != nil:
    section.add "X-Amz-Signature", valid_775448
  var valid_775449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775449 = validateParameter(valid_775449, JString, required = false,
                                 default = nil)
  if valid_775449 != nil:
    section.add "X-Amz-SignedHeaders", valid_775449
  var valid_775450 = header.getOrDefault("X-Amz-Credential")
  valid_775450 = validateParameter(valid_775450, JString, required = false,
                                 default = nil)
  if valid_775450 != nil:
    section.add "X-Amz-Credential", valid_775450
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775451 = formData.getOrDefault("DBSecurityGroupName")
  valid_775451 = validateParameter(valid_775451, JString, required = false,
                                 default = nil)
  if valid_775451 != nil:
    section.add "DBSecurityGroupName", valid_775451
  var valid_775452 = formData.getOrDefault("Marker")
  valid_775452 = validateParameter(valid_775452, JString, required = false,
                                 default = nil)
  if valid_775452 != nil:
    section.add "Marker", valid_775452
  var valid_775453 = formData.getOrDefault("Filters")
  valid_775453 = validateParameter(valid_775453, JArray, required = false,
                                 default = nil)
  if valid_775453 != nil:
    section.add "Filters", valid_775453
  var valid_775454 = formData.getOrDefault("MaxRecords")
  valid_775454 = validateParameter(valid_775454, JInt, required = false, default = nil)
  if valid_775454 != nil:
    section.add "MaxRecords", valid_775454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775455: Call_PostDescribeDBSecurityGroups_775439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_775455.validator(path, query, header, formData, body)
  let scheme = call_775455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775455.url(scheme.get, call_775455.host, call_775455.base,
                         call_775455.route, valid.getOrDefault("path"))
  result = hook(call_775455, url, valid)

proc call*(call_775456: Call_PostDescribeDBSecurityGroups_775439;
          DBSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775457 = newJObject()
  var formData_775458 = newJObject()
  add(formData_775458, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_775458, "Marker", newJString(Marker))
  add(query_775457, "Action", newJString(Action))
  if Filters != nil:
    formData_775458.add "Filters", Filters
  add(formData_775458, "MaxRecords", newJInt(MaxRecords))
  add(query_775457, "Version", newJString(Version))
  result = call_775456.call(nil, query_775457, nil, formData_775458, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_775439(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_775440, base: "/",
    url: url_PostDescribeDBSecurityGroups_775441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_775420 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBSecurityGroups_775422(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBSecurityGroups_775421(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775423 = query.getOrDefault("MaxRecords")
  valid_775423 = validateParameter(valid_775423, JInt, required = false, default = nil)
  if valid_775423 != nil:
    section.add "MaxRecords", valid_775423
  var valid_775424 = query.getOrDefault("DBSecurityGroupName")
  valid_775424 = validateParameter(valid_775424, JString, required = false,
                                 default = nil)
  if valid_775424 != nil:
    section.add "DBSecurityGroupName", valid_775424
  var valid_775425 = query.getOrDefault("Filters")
  valid_775425 = validateParameter(valid_775425, JArray, required = false,
                                 default = nil)
  if valid_775425 != nil:
    section.add "Filters", valid_775425
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775426 = query.getOrDefault("Action")
  valid_775426 = validateParameter(valid_775426, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_775426 != nil:
    section.add "Action", valid_775426
  var valid_775427 = query.getOrDefault("Marker")
  valid_775427 = validateParameter(valid_775427, JString, required = false,
                                 default = nil)
  if valid_775427 != nil:
    section.add "Marker", valid_775427
  var valid_775428 = query.getOrDefault("Version")
  valid_775428 = validateParameter(valid_775428, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775428 != nil:
    section.add "Version", valid_775428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775429 = header.getOrDefault("X-Amz-Date")
  valid_775429 = validateParameter(valid_775429, JString, required = false,
                                 default = nil)
  if valid_775429 != nil:
    section.add "X-Amz-Date", valid_775429
  var valid_775430 = header.getOrDefault("X-Amz-Security-Token")
  valid_775430 = validateParameter(valid_775430, JString, required = false,
                                 default = nil)
  if valid_775430 != nil:
    section.add "X-Amz-Security-Token", valid_775430
  var valid_775431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775431 = validateParameter(valid_775431, JString, required = false,
                                 default = nil)
  if valid_775431 != nil:
    section.add "X-Amz-Content-Sha256", valid_775431
  var valid_775432 = header.getOrDefault("X-Amz-Algorithm")
  valid_775432 = validateParameter(valid_775432, JString, required = false,
                                 default = nil)
  if valid_775432 != nil:
    section.add "X-Amz-Algorithm", valid_775432
  var valid_775433 = header.getOrDefault("X-Amz-Signature")
  valid_775433 = validateParameter(valid_775433, JString, required = false,
                                 default = nil)
  if valid_775433 != nil:
    section.add "X-Amz-Signature", valid_775433
  var valid_775434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775434 = validateParameter(valid_775434, JString, required = false,
                                 default = nil)
  if valid_775434 != nil:
    section.add "X-Amz-SignedHeaders", valid_775434
  var valid_775435 = header.getOrDefault("X-Amz-Credential")
  valid_775435 = validateParameter(valid_775435, JString, required = false,
                                 default = nil)
  if valid_775435 != nil:
    section.add "X-Amz-Credential", valid_775435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775436: Call_GetDescribeDBSecurityGroups_775420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_775436.validator(path, query, header, formData, body)
  let scheme = call_775436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775436.url(scheme.get, call_775436.host, call_775436.base,
                         call_775436.route, valid.getOrDefault("path"))
  result = hook(call_775436, url, valid)

proc call*(call_775437: Call_GetDescribeDBSecurityGroups_775420;
          MaxRecords: int = 0; DBSecurityGroupName: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBSecurityGroups";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775438 = newJObject()
  add(query_775438, "MaxRecords", newJInt(MaxRecords))
  add(query_775438, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Filters != nil:
    query_775438.add "Filters", Filters
  add(query_775438, "Action", newJString(Action))
  add(query_775438, "Marker", newJString(Marker))
  add(query_775438, "Version", newJString(Version))
  result = call_775437.call(nil, query_775438, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_775420(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_775421, base: "/",
    url: url_GetDescribeDBSecurityGroups_775422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_775475 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBSnapshotAttributes_775477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBSnapshotAttributes_775476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775478 = query.getOrDefault("Action")
  valid_775478 = validateParameter(valid_775478, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_775478 != nil:
    section.add "Action", valid_775478
  var valid_775479 = query.getOrDefault("Version")
  valid_775479 = validateParameter(valid_775479, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775479 != nil:
    section.add "Version", valid_775479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775480 = header.getOrDefault("X-Amz-Date")
  valid_775480 = validateParameter(valid_775480, JString, required = false,
                                 default = nil)
  if valid_775480 != nil:
    section.add "X-Amz-Date", valid_775480
  var valid_775481 = header.getOrDefault("X-Amz-Security-Token")
  valid_775481 = validateParameter(valid_775481, JString, required = false,
                                 default = nil)
  if valid_775481 != nil:
    section.add "X-Amz-Security-Token", valid_775481
  var valid_775482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775482 = validateParameter(valid_775482, JString, required = false,
                                 default = nil)
  if valid_775482 != nil:
    section.add "X-Amz-Content-Sha256", valid_775482
  var valid_775483 = header.getOrDefault("X-Amz-Algorithm")
  valid_775483 = validateParameter(valid_775483, JString, required = false,
                                 default = nil)
  if valid_775483 != nil:
    section.add "X-Amz-Algorithm", valid_775483
  var valid_775484 = header.getOrDefault("X-Amz-Signature")
  valid_775484 = validateParameter(valid_775484, JString, required = false,
                                 default = nil)
  if valid_775484 != nil:
    section.add "X-Amz-Signature", valid_775484
  var valid_775485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775485 = validateParameter(valid_775485, JString, required = false,
                                 default = nil)
  if valid_775485 != nil:
    section.add "X-Amz-SignedHeaders", valid_775485
  var valid_775486 = header.getOrDefault("X-Amz-Credential")
  valid_775486 = validateParameter(valid_775486, JString, required = false,
                                 default = nil)
  if valid_775486 != nil:
    section.add "X-Amz-Credential", valid_775486
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_775487 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_775487 = validateParameter(valid_775487, JString, required = true,
                                 default = nil)
  if valid_775487 != nil:
    section.add "DBSnapshotIdentifier", valid_775487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775488: Call_PostDescribeDBSnapshotAttributes_775475;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_775488.validator(path, query, header, formData, body)
  let scheme = call_775488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775488.url(scheme.get, call_775488.host, call_775488.base,
                         call_775488.route, valid.getOrDefault("path"))
  result = hook(call_775488, url, valid)

proc call*(call_775489: Call_PostDescribeDBSnapshotAttributes_775475;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775490 = newJObject()
  var formData_775491 = newJObject()
  add(formData_775491, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_775490, "Action", newJString(Action))
  add(query_775490, "Version", newJString(Version))
  result = call_775489.call(nil, query_775490, nil, formData_775491, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_775475(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_775476, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_775477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_775459 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBSnapshotAttributes_775461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBSnapshotAttributes_775460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775462 = query.getOrDefault("Action")
  valid_775462 = validateParameter(valid_775462, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_775462 != nil:
    section.add "Action", valid_775462
  var valid_775463 = query.getOrDefault("Version")
  valid_775463 = validateParameter(valid_775463, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775463 != nil:
    section.add "Version", valid_775463
  var valid_775464 = query.getOrDefault("DBSnapshotIdentifier")
  valid_775464 = validateParameter(valid_775464, JString, required = true,
                                 default = nil)
  if valid_775464 != nil:
    section.add "DBSnapshotIdentifier", valid_775464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775465 = header.getOrDefault("X-Amz-Date")
  valid_775465 = validateParameter(valid_775465, JString, required = false,
                                 default = nil)
  if valid_775465 != nil:
    section.add "X-Amz-Date", valid_775465
  var valid_775466 = header.getOrDefault("X-Amz-Security-Token")
  valid_775466 = validateParameter(valid_775466, JString, required = false,
                                 default = nil)
  if valid_775466 != nil:
    section.add "X-Amz-Security-Token", valid_775466
  var valid_775467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775467 = validateParameter(valid_775467, JString, required = false,
                                 default = nil)
  if valid_775467 != nil:
    section.add "X-Amz-Content-Sha256", valid_775467
  var valid_775468 = header.getOrDefault("X-Amz-Algorithm")
  valid_775468 = validateParameter(valid_775468, JString, required = false,
                                 default = nil)
  if valid_775468 != nil:
    section.add "X-Amz-Algorithm", valid_775468
  var valid_775469 = header.getOrDefault("X-Amz-Signature")
  valid_775469 = validateParameter(valid_775469, JString, required = false,
                                 default = nil)
  if valid_775469 != nil:
    section.add "X-Amz-Signature", valid_775469
  var valid_775470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775470 = validateParameter(valid_775470, JString, required = false,
                                 default = nil)
  if valid_775470 != nil:
    section.add "X-Amz-SignedHeaders", valid_775470
  var valid_775471 = header.getOrDefault("X-Amz-Credential")
  valid_775471 = validateParameter(valid_775471, JString, required = false,
                                 default = nil)
  if valid_775471 != nil:
    section.add "X-Amz-Credential", valid_775471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775472: Call_GetDescribeDBSnapshotAttributes_775459;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_775472.validator(path, query, header, formData, body)
  let scheme = call_775472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775472.url(scheme.get, call_775472.host, call_775472.base,
                         call_775472.route, valid.getOrDefault("path"))
  result = hook(call_775472, url, valid)

proc call*(call_775473: Call_GetDescribeDBSnapshotAttributes_775459;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  var query_775474 = newJObject()
  add(query_775474, "Action", newJString(Action))
  add(query_775474, "Version", newJString(Version))
  add(query_775474, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_775473.call(nil, query_775474, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_775459(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_775460, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_775461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_775516 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBSnapshots_775518(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBSnapshots_775517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775519 = query.getOrDefault("Action")
  valid_775519 = validateParameter(valid_775519, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_775519 != nil:
    section.add "Action", valid_775519
  var valid_775520 = query.getOrDefault("Version")
  valid_775520 = validateParameter(valid_775520, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775520 != nil:
    section.add "Version", valid_775520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775521 = header.getOrDefault("X-Amz-Date")
  valid_775521 = validateParameter(valid_775521, JString, required = false,
                                 default = nil)
  if valid_775521 != nil:
    section.add "X-Amz-Date", valid_775521
  var valid_775522 = header.getOrDefault("X-Amz-Security-Token")
  valid_775522 = validateParameter(valid_775522, JString, required = false,
                                 default = nil)
  if valid_775522 != nil:
    section.add "X-Amz-Security-Token", valid_775522
  var valid_775523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775523 = validateParameter(valid_775523, JString, required = false,
                                 default = nil)
  if valid_775523 != nil:
    section.add "X-Amz-Content-Sha256", valid_775523
  var valid_775524 = header.getOrDefault("X-Amz-Algorithm")
  valid_775524 = validateParameter(valid_775524, JString, required = false,
                                 default = nil)
  if valid_775524 != nil:
    section.add "X-Amz-Algorithm", valid_775524
  var valid_775525 = header.getOrDefault("X-Amz-Signature")
  valid_775525 = validateParameter(valid_775525, JString, required = false,
                                 default = nil)
  if valid_775525 != nil:
    section.add "X-Amz-Signature", valid_775525
  var valid_775526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775526 = validateParameter(valid_775526, JString, required = false,
                                 default = nil)
  if valid_775526 != nil:
    section.add "X-Amz-SignedHeaders", valid_775526
  var valid_775527 = header.getOrDefault("X-Amz-Credential")
  valid_775527 = validateParameter(valid_775527, JString, required = false,
                                 default = nil)
  if valid_775527 != nil:
    section.add "X-Amz-Credential", valid_775527
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775528 = formData.getOrDefault("DBInstanceIdentifier")
  valid_775528 = validateParameter(valid_775528, JString, required = false,
                                 default = nil)
  if valid_775528 != nil:
    section.add "DBInstanceIdentifier", valid_775528
  var valid_775529 = formData.getOrDefault("IncludeShared")
  valid_775529 = validateParameter(valid_775529, JBool, required = false, default = nil)
  if valid_775529 != nil:
    section.add "IncludeShared", valid_775529
  var valid_775530 = formData.getOrDefault("IncludePublic")
  valid_775530 = validateParameter(valid_775530, JBool, required = false, default = nil)
  if valid_775530 != nil:
    section.add "IncludePublic", valid_775530
  var valid_775531 = formData.getOrDefault("DbiResourceId")
  valid_775531 = validateParameter(valid_775531, JString, required = false,
                                 default = nil)
  if valid_775531 != nil:
    section.add "DbiResourceId", valid_775531
  var valid_775532 = formData.getOrDefault("SnapshotType")
  valid_775532 = validateParameter(valid_775532, JString, required = false,
                                 default = nil)
  if valid_775532 != nil:
    section.add "SnapshotType", valid_775532
  var valid_775533 = formData.getOrDefault("Marker")
  valid_775533 = validateParameter(valid_775533, JString, required = false,
                                 default = nil)
  if valid_775533 != nil:
    section.add "Marker", valid_775533
  var valid_775534 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_775534 = validateParameter(valid_775534, JString, required = false,
                                 default = nil)
  if valid_775534 != nil:
    section.add "DBSnapshotIdentifier", valid_775534
  var valid_775535 = formData.getOrDefault("Filters")
  valid_775535 = validateParameter(valid_775535, JArray, required = false,
                                 default = nil)
  if valid_775535 != nil:
    section.add "Filters", valid_775535
  var valid_775536 = formData.getOrDefault("MaxRecords")
  valid_775536 = validateParameter(valid_775536, JInt, required = false, default = nil)
  if valid_775536 != nil:
    section.add "MaxRecords", valid_775536
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775537: Call_PostDescribeDBSnapshots_775516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_775537.validator(path, query, header, formData, body)
  let scheme = call_775537.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775537.url(scheme.get, call_775537.host, call_775537.base,
                         call_775537.route, valid.getOrDefault("path"))
  result = hook(call_775537, url, valid)

proc call*(call_775538: Call_PostDescribeDBSnapshots_775516;
          DBInstanceIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; DbiResourceId: string = "";
          SnapshotType: string = ""; Marker: string = "";
          DBSnapshotIdentifier: string = ""; Action: string = "DescribeDBSnapshots";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775539 = newJObject()
  var formData_775540 = newJObject()
  add(formData_775540, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_775540, "IncludeShared", newJBool(IncludeShared))
  add(formData_775540, "IncludePublic", newJBool(IncludePublic))
  add(formData_775540, "DbiResourceId", newJString(DbiResourceId))
  add(formData_775540, "SnapshotType", newJString(SnapshotType))
  add(formData_775540, "Marker", newJString(Marker))
  add(formData_775540, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_775539, "Action", newJString(Action))
  if Filters != nil:
    formData_775540.add "Filters", Filters
  add(formData_775540, "MaxRecords", newJInt(MaxRecords))
  add(query_775539, "Version", newJString(Version))
  result = call_775538.call(nil, query_775539, nil, formData_775540, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_775516(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_775517, base: "/",
    url: url_PostDescribeDBSnapshots_775518, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_775492 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBSnapshots_775494(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBSnapshots_775493(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  section = newJObject()
  var valid_775495 = query.getOrDefault("IncludePublic")
  valid_775495 = validateParameter(valid_775495, JBool, required = false, default = nil)
  if valid_775495 != nil:
    section.add "IncludePublic", valid_775495
  var valid_775496 = query.getOrDefault("MaxRecords")
  valid_775496 = validateParameter(valid_775496, JInt, required = false, default = nil)
  if valid_775496 != nil:
    section.add "MaxRecords", valid_775496
  var valid_775497 = query.getOrDefault("Filters")
  valid_775497 = validateParameter(valid_775497, JArray, required = false,
                                 default = nil)
  if valid_775497 != nil:
    section.add "Filters", valid_775497
  var valid_775498 = query.getOrDefault("IncludeShared")
  valid_775498 = validateParameter(valid_775498, JBool, required = false, default = nil)
  if valid_775498 != nil:
    section.add "IncludeShared", valid_775498
  var valid_775499 = query.getOrDefault("DbiResourceId")
  valid_775499 = validateParameter(valid_775499, JString, required = false,
                                 default = nil)
  if valid_775499 != nil:
    section.add "DbiResourceId", valid_775499
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775500 = query.getOrDefault("Action")
  valid_775500 = validateParameter(valid_775500, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_775500 != nil:
    section.add "Action", valid_775500
  var valid_775501 = query.getOrDefault("Marker")
  valid_775501 = validateParameter(valid_775501, JString, required = false,
                                 default = nil)
  if valid_775501 != nil:
    section.add "Marker", valid_775501
  var valid_775502 = query.getOrDefault("SnapshotType")
  valid_775502 = validateParameter(valid_775502, JString, required = false,
                                 default = nil)
  if valid_775502 != nil:
    section.add "SnapshotType", valid_775502
  var valid_775503 = query.getOrDefault("Version")
  valid_775503 = validateParameter(valid_775503, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775503 != nil:
    section.add "Version", valid_775503
  var valid_775504 = query.getOrDefault("DBInstanceIdentifier")
  valid_775504 = validateParameter(valid_775504, JString, required = false,
                                 default = nil)
  if valid_775504 != nil:
    section.add "DBInstanceIdentifier", valid_775504
  var valid_775505 = query.getOrDefault("DBSnapshotIdentifier")
  valid_775505 = validateParameter(valid_775505, JString, required = false,
                                 default = nil)
  if valid_775505 != nil:
    section.add "DBSnapshotIdentifier", valid_775505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775506 = header.getOrDefault("X-Amz-Date")
  valid_775506 = validateParameter(valid_775506, JString, required = false,
                                 default = nil)
  if valid_775506 != nil:
    section.add "X-Amz-Date", valid_775506
  var valid_775507 = header.getOrDefault("X-Amz-Security-Token")
  valid_775507 = validateParameter(valid_775507, JString, required = false,
                                 default = nil)
  if valid_775507 != nil:
    section.add "X-Amz-Security-Token", valid_775507
  var valid_775508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775508 = validateParameter(valid_775508, JString, required = false,
                                 default = nil)
  if valid_775508 != nil:
    section.add "X-Amz-Content-Sha256", valid_775508
  var valid_775509 = header.getOrDefault("X-Amz-Algorithm")
  valid_775509 = validateParameter(valid_775509, JString, required = false,
                                 default = nil)
  if valid_775509 != nil:
    section.add "X-Amz-Algorithm", valid_775509
  var valid_775510 = header.getOrDefault("X-Amz-Signature")
  valid_775510 = validateParameter(valid_775510, JString, required = false,
                                 default = nil)
  if valid_775510 != nil:
    section.add "X-Amz-Signature", valid_775510
  var valid_775511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775511 = validateParameter(valid_775511, JString, required = false,
                                 default = nil)
  if valid_775511 != nil:
    section.add "X-Amz-SignedHeaders", valid_775511
  var valid_775512 = header.getOrDefault("X-Amz-Credential")
  valid_775512 = validateParameter(valid_775512, JString, required = false,
                                 default = nil)
  if valid_775512 != nil:
    section.add "X-Amz-Credential", valid_775512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775513: Call_GetDescribeDBSnapshots_775492; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_775513.validator(path, query, header, formData, body)
  let scheme = call_775513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775513.url(scheme.get, call_775513.host, call_775513.base,
                         call_775513.route, valid.getOrDefault("path"))
  result = hook(call_775513, url, valid)

proc call*(call_775514: Call_GetDescribeDBSnapshots_775492;
          IncludePublic: bool = false; MaxRecords: int = 0; Filters: JsonNode = nil;
          IncludeShared: bool = false; DbiResourceId: string = "";
          Action: string = "DescribeDBSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = ""): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  var query_775515 = newJObject()
  add(query_775515, "IncludePublic", newJBool(IncludePublic))
  add(query_775515, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775515.add "Filters", Filters
  add(query_775515, "IncludeShared", newJBool(IncludeShared))
  add(query_775515, "DbiResourceId", newJString(DbiResourceId))
  add(query_775515, "Action", newJString(Action))
  add(query_775515, "Marker", newJString(Marker))
  add(query_775515, "SnapshotType", newJString(SnapshotType))
  add(query_775515, "Version", newJString(Version))
  add(query_775515, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_775515, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_775514.call(nil, query_775515, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_775492(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_775493, base: "/",
    url: url_GetDescribeDBSnapshots_775494, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_775560 = ref object of OpenApiRestCall_772581
proc url_PostDescribeDBSubnetGroups_775562(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeDBSubnetGroups_775561(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775563 = query.getOrDefault("Action")
  valid_775563 = validateParameter(valid_775563, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_775563 != nil:
    section.add "Action", valid_775563
  var valid_775564 = query.getOrDefault("Version")
  valid_775564 = validateParameter(valid_775564, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775564 != nil:
    section.add "Version", valid_775564
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775565 = header.getOrDefault("X-Amz-Date")
  valid_775565 = validateParameter(valid_775565, JString, required = false,
                                 default = nil)
  if valid_775565 != nil:
    section.add "X-Amz-Date", valid_775565
  var valid_775566 = header.getOrDefault("X-Amz-Security-Token")
  valid_775566 = validateParameter(valid_775566, JString, required = false,
                                 default = nil)
  if valid_775566 != nil:
    section.add "X-Amz-Security-Token", valid_775566
  var valid_775567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775567 = validateParameter(valid_775567, JString, required = false,
                                 default = nil)
  if valid_775567 != nil:
    section.add "X-Amz-Content-Sha256", valid_775567
  var valid_775568 = header.getOrDefault("X-Amz-Algorithm")
  valid_775568 = validateParameter(valid_775568, JString, required = false,
                                 default = nil)
  if valid_775568 != nil:
    section.add "X-Amz-Algorithm", valid_775568
  var valid_775569 = header.getOrDefault("X-Amz-Signature")
  valid_775569 = validateParameter(valid_775569, JString, required = false,
                                 default = nil)
  if valid_775569 != nil:
    section.add "X-Amz-Signature", valid_775569
  var valid_775570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775570 = validateParameter(valid_775570, JString, required = false,
                                 default = nil)
  if valid_775570 != nil:
    section.add "X-Amz-SignedHeaders", valid_775570
  var valid_775571 = header.getOrDefault("X-Amz-Credential")
  valid_775571 = validateParameter(valid_775571, JString, required = false,
                                 default = nil)
  if valid_775571 != nil:
    section.add "X-Amz-Credential", valid_775571
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775572 = formData.getOrDefault("DBSubnetGroupName")
  valid_775572 = validateParameter(valid_775572, JString, required = false,
                                 default = nil)
  if valid_775572 != nil:
    section.add "DBSubnetGroupName", valid_775572
  var valid_775573 = formData.getOrDefault("Marker")
  valid_775573 = validateParameter(valid_775573, JString, required = false,
                                 default = nil)
  if valid_775573 != nil:
    section.add "Marker", valid_775573
  var valid_775574 = formData.getOrDefault("Filters")
  valid_775574 = validateParameter(valid_775574, JArray, required = false,
                                 default = nil)
  if valid_775574 != nil:
    section.add "Filters", valid_775574
  var valid_775575 = formData.getOrDefault("MaxRecords")
  valid_775575 = validateParameter(valid_775575, JInt, required = false, default = nil)
  if valid_775575 != nil:
    section.add "MaxRecords", valid_775575
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775576: Call_PostDescribeDBSubnetGroups_775560; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_775576.validator(path, query, header, formData, body)
  let scheme = call_775576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775576.url(scheme.get, call_775576.host, call_775576.base,
                         call_775576.route, valid.getOrDefault("path"))
  result = hook(call_775576, url, valid)

proc call*(call_775577: Call_PostDescribeDBSubnetGroups_775560;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775578 = newJObject()
  var formData_775579 = newJObject()
  add(formData_775579, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_775579, "Marker", newJString(Marker))
  add(query_775578, "Action", newJString(Action))
  if Filters != nil:
    formData_775579.add "Filters", Filters
  add(formData_775579, "MaxRecords", newJInt(MaxRecords))
  add(query_775578, "Version", newJString(Version))
  result = call_775577.call(nil, query_775578, nil, formData_775579, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_775560(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_775561, base: "/",
    url: url_PostDescribeDBSubnetGroups_775562,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_775541 = ref object of OpenApiRestCall_772581
proc url_GetDescribeDBSubnetGroups_775543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeDBSubnetGroups_775542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775544 = query.getOrDefault("MaxRecords")
  valid_775544 = validateParameter(valid_775544, JInt, required = false, default = nil)
  if valid_775544 != nil:
    section.add "MaxRecords", valid_775544
  var valid_775545 = query.getOrDefault("Filters")
  valid_775545 = validateParameter(valid_775545, JArray, required = false,
                                 default = nil)
  if valid_775545 != nil:
    section.add "Filters", valid_775545
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775546 = query.getOrDefault("Action")
  valid_775546 = validateParameter(valid_775546, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_775546 != nil:
    section.add "Action", valid_775546
  var valid_775547 = query.getOrDefault("Marker")
  valid_775547 = validateParameter(valid_775547, JString, required = false,
                                 default = nil)
  if valid_775547 != nil:
    section.add "Marker", valid_775547
  var valid_775548 = query.getOrDefault("DBSubnetGroupName")
  valid_775548 = validateParameter(valid_775548, JString, required = false,
                                 default = nil)
  if valid_775548 != nil:
    section.add "DBSubnetGroupName", valid_775548
  var valid_775549 = query.getOrDefault("Version")
  valid_775549 = validateParameter(valid_775549, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775549 != nil:
    section.add "Version", valid_775549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775550 = header.getOrDefault("X-Amz-Date")
  valid_775550 = validateParameter(valid_775550, JString, required = false,
                                 default = nil)
  if valid_775550 != nil:
    section.add "X-Amz-Date", valid_775550
  var valid_775551 = header.getOrDefault("X-Amz-Security-Token")
  valid_775551 = validateParameter(valid_775551, JString, required = false,
                                 default = nil)
  if valid_775551 != nil:
    section.add "X-Amz-Security-Token", valid_775551
  var valid_775552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775552 = validateParameter(valid_775552, JString, required = false,
                                 default = nil)
  if valid_775552 != nil:
    section.add "X-Amz-Content-Sha256", valid_775552
  var valid_775553 = header.getOrDefault("X-Amz-Algorithm")
  valid_775553 = validateParameter(valid_775553, JString, required = false,
                                 default = nil)
  if valid_775553 != nil:
    section.add "X-Amz-Algorithm", valid_775553
  var valid_775554 = header.getOrDefault("X-Amz-Signature")
  valid_775554 = validateParameter(valid_775554, JString, required = false,
                                 default = nil)
  if valid_775554 != nil:
    section.add "X-Amz-Signature", valid_775554
  var valid_775555 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775555 = validateParameter(valid_775555, JString, required = false,
                                 default = nil)
  if valid_775555 != nil:
    section.add "X-Amz-SignedHeaders", valid_775555
  var valid_775556 = header.getOrDefault("X-Amz-Credential")
  valid_775556 = validateParameter(valid_775556, JString, required = false,
                                 default = nil)
  if valid_775556 != nil:
    section.add "X-Amz-Credential", valid_775556
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775557: Call_GetDescribeDBSubnetGroups_775541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_775557.validator(path, query, header, formData, body)
  let scheme = call_775557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775557.url(scheme.get, call_775557.host, call_775557.base,
                         call_775557.route, valid.getOrDefault("path"))
  result = hook(call_775557, url, valid)

proc call*(call_775558: Call_GetDescribeDBSubnetGroups_775541; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBSubnetGroups";
          Marker: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_775559 = newJObject()
  add(query_775559, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775559.add "Filters", Filters
  add(query_775559, "Action", newJString(Action))
  add(query_775559, "Marker", newJString(Marker))
  add(query_775559, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_775559, "Version", newJString(Version))
  result = call_775558.call(nil, query_775559, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_775541(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_775542, base: "/",
    url: url_GetDescribeDBSubnetGroups_775543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_775599 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEngineDefaultClusterParameters_775601(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEngineDefaultClusterParameters_775600(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775602 = query.getOrDefault("Action")
  valid_775602 = validateParameter(valid_775602, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_775602 != nil:
    section.add "Action", valid_775602
  var valid_775603 = query.getOrDefault("Version")
  valid_775603 = validateParameter(valid_775603, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775603 != nil:
    section.add "Version", valid_775603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775604 = header.getOrDefault("X-Amz-Date")
  valid_775604 = validateParameter(valid_775604, JString, required = false,
                                 default = nil)
  if valid_775604 != nil:
    section.add "X-Amz-Date", valid_775604
  var valid_775605 = header.getOrDefault("X-Amz-Security-Token")
  valid_775605 = validateParameter(valid_775605, JString, required = false,
                                 default = nil)
  if valid_775605 != nil:
    section.add "X-Amz-Security-Token", valid_775605
  var valid_775606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775606 = validateParameter(valid_775606, JString, required = false,
                                 default = nil)
  if valid_775606 != nil:
    section.add "X-Amz-Content-Sha256", valid_775606
  var valid_775607 = header.getOrDefault("X-Amz-Algorithm")
  valid_775607 = validateParameter(valid_775607, JString, required = false,
                                 default = nil)
  if valid_775607 != nil:
    section.add "X-Amz-Algorithm", valid_775607
  var valid_775608 = header.getOrDefault("X-Amz-Signature")
  valid_775608 = validateParameter(valid_775608, JString, required = false,
                                 default = nil)
  if valid_775608 != nil:
    section.add "X-Amz-Signature", valid_775608
  var valid_775609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775609 = validateParameter(valid_775609, JString, required = false,
                                 default = nil)
  if valid_775609 != nil:
    section.add "X-Amz-SignedHeaders", valid_775609
  var valid_775610 = header.getOrDefault("X-Amz-Credential")
  valid_775610 = validateParameter(valid_775610, JString, required = false,
                                 default = nil)
  if valid_775610 != nil:
    section.add "X-Amz-Credential", valid_775610
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775611 = formData.getOrDefault("Marker")
  valid_775611 = validateParameter(valid_775611, JString, required = false,
                                 default = nil)
  if valid_775611 != nil:
    section.add "Marker", valid_775611
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_775612 = formData.getOrDefault("DBParameterGroupFamily")
  valid_775612 = validateParameter(valid_775612, JString, required = true,
                                 default = nil)
  if valid_775612 != nil:
    section.add "DBParameterGroupFamily", valid_775612
  var valid_775613 = formData.getOrDefault("Filters")
  valid_775613 = validateParameter(valid_775613, JArray, required = false,
                                 default = nil)
  if valid_775613 != nil:
    section.add "Filters", valid_775613
  var valid_775614 = formData.getOrDefault("MaxRecords")
  valid_775614 = validateParameter(valid_775614, JInt, required = false, default = nil)
  if valid_775614 != nil:
    section.add "MaxRecords", valid_775614
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775615: Call_PostDescribeEngineDefaultClusterParameters_775599;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_775615.validator(path, query, header, formData, body)
  let scheme = call_775615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775615.url(scheme.get, call_775615.host, call_775615.base,
                         call_775615.route, valid.getOrDefault("path"))
  result = hook(call_775615, url, valid)

proc call*(call_775616: Call_PostDescribeEngineDefaultClusterParameters_775599;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775617 = newJObject()
  var formData_775618 = newJObject()
  add(formData_775618, "Marker", newJString(Marker))
  add(query_775617, "Action", newJString(Action))
  add(formData_775618, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_775618.add "Filters", Filters
  add(formData_775618, "MaxRecords", newJInt(MaxRecords))
  add(query_775617, "Version", newJString(Version))
  result = call_775616.call(nil, query_775617, nil, formData_775618, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_775599(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_775600,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_775601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_775580 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEngineDefaultClusterParameters_775582(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEngineDefaultClusterParameters_775581(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775583 = query.getOrDefault("MaxRecords")
  valid_775583 = validateParameter(valid_775583, JInt, required = false, default = nil)
  if valid_775583 != nil:
    section.add "MaxRecords", valid_775583
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_775584 = query.getOrDefault("DBParameterGroupFamily")
  valid_775584 = validateParameter(valid_775584, JString, required = true,
                                 default = nil)
  if valid_775584 != nil:
    section.add "DBParameterGroupFamily", valid_775584
  var valid_775585 = query.getOrDefault("Filters")
  valid_775585 = validateParameter(valid_775585, JArray, required = false,
                                 default = nil)
  if valid_775585 != nil:
    section.add "Filters", valid_775585
  var valid_775586 = query.getOrDefault("Action")
  valid_775586 = validateParameter(valid_775586, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_775586 != nil:
    section.add "Action", valid_775586
  var valid_775587 = query.getOrDefault("Marker")
  valid_775587 = validateParameter(valid_775587, JString, required = false,
                                 default = nil)
  if valid_775587 != nil:
    section.add "Marker", valid_775587
  var valid_775588 = query.getOrDefault("Version")
  valid_775588 = validateParameter(valid_775588, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775588 != nil:
    section.add "Version", valid_775588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775589 = header.getOrDefault("X-Amz-Date")
  valid_775589 = validateParameter(valid_775589, JString, required = false,
                                 default = nil)
  if valid_775589 != nil:
    section.add "X-Amz-Date", valid_775589
  var valid_775590 = header.getOrDefault("X-Amz-Security-Token")
  valid_775590 = validateParameter(valid_775590, JString, required = false,
                                 default = nil)
  if valid_775590 != nil:
    section.add "X-Amz-Security-Token", valid_775590
  var valid_775591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775591 = validateParameter(valid_775591, JString, required = false,
                                 default = nil)
  if valid_775591 != nil:
    section.add "X-Amz-Content-Sha256", valid_775591
  var valid_775592 = header.getOrDefault("X-Amz-Algorithm")
  valid_775592 = validateParameter(valid_775592, JString, required = false,
                                 default = nil)
  if valid_775592 != nil:
    section.add "X-Amz-Algorithm", valid_775592
  var valid_775593 = header.getOrDefault("X-Amz-Signature")
  valid_775593 = validateParameter(valid_775593, JString, required = false,
                                 default = nil)
  if valid_775593 != nil:
    section.add "X-Amz-Signature", valid_775593
  var valid_775594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775594 = validateParameter(valid_775594, JString, required = false,
                                 default = nil)
  if valid_775594 != nil:
    section.add "X-Amz-SignedHeaders", valid_775594
  var valid_775595 = header.getOrDefault("X-Amz-Credential")
  valid_775595 = validateParameter(valid_775595, JString, required = false,
                                 default = nil)
  if valid_775595 != nil:
    section.add "X-Amz-Credential", valid_775595
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775596: Call_GetDescribeEngineDefaultClusterParameters_775580;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_775596.validator(path, query, header, formData, body)
  let scheme = call_775596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775596.url(scheme.get, call_775596.host, call_775596.base,
                         call_775596.route, valid.getOrDefault("path"))
  result = hook(call_775596, url, valid)

proc call*(call_775597: Call_GetDescribeEngineDefaultClusterParameters_775580;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775598 = newJObject()
  add(query_775598, "MaxRecords", newJInt(MaxRecords))
  add(query_775598, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_775598.add "Filters", Filters
  add(query_775598, "Action", newJString(Action))
  add(query_775598, "Marker", newJString(Marker))
  add(query_775598, "Version", newJString(Version))
  result = call_775597.call(nil, query_775598, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_775580(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_775581,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_775582,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_775638 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEngineDefaultParameters_775640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEngineDefaultParameters_775639(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775641 = query.getOrDefault("Action")
  valid_775641 = validateParameter(valid_775641, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_775641 != nil:
    section.add "Action", valid_775641
  var valid_775642 = query.getOrDefault("Version")
  valid_775642 = validateParameter(valid_775642, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775642 != nil:
    section.add "Version", valid_775642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775643 = header.getOrDefault("X-Amz-Date")
  valid_775643 = validateParameter(valid_775643, JString, required = false,
                                 default = nil)
  if valid_775643 != nil:
    section.add "X-Amz-Date", valid_775643
  var valid_775644 = header.getOrDefault("X-Amz-Security-Token")
  valid_775644 = validateParameter(valid_775644, JString, required = false,
                                 default = nil)
  if valid_775644 != nil:
    section.add "X-Amz-Security-Token", valid_775644
  var valid_775645 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775645 = validateParameter(valid_775645, JString, required = false,
                                 default = nil)
  if valid_775645 != nil:
    section.add "X-Amz-Content-Sha256", valid_775645
  var valid_775646 = header.getOrDefault("X-Amz-Algorithm")
  valid_775646 = validateParameter(valid_775646, JString, required = false,
                                 default = nil)
  if valid_775646 != nil:
    section.add "X-Amz-Algorithm", valid_775646
  var valid_775647 = header.getOrDefault("X-Amz-Signature")
  valid_775647 = validateParameter(valid_775647, JString, required = false,
                                 default = nil)
  if valid_775647 != nil:
    section.add "X-Amz-Signature", valid_775647
  var valid_775648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775648 = validateParameter(valid_775648, JString, required = false,
                                 default = nil)
  if valid_775648 != nil:
    section.add "X-Amz-SignedHeaders", valid_775648
  var valid_775649 = header.getOrDefault("X-Amz-Credential")
  valid_775649 = validateParameter(valid_775649, JString, required = false,
                                 default = nil)
  if valid_775649 != nil:
    section.add "X-Amz-Credential", valid_775649
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775650 = formData.getOrDefault("Marker")
  valid_775650 = validateParameter(valid_775650, JString, required = false,
                                 default = nil)
  if valid_775650 != nil:
    section.add "Marker", valid_775650
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_775651 = formData.getOrDefault("DBParameterGroupFamily")
  valid_775651 = validateParameter(valid_775651, JString, required = true,
                                 default = nil)
  if valid_775651 != nil:
    section.add "DBParameterGroupFamily", valid_775651
  var valid_775652 = formData.getOrDefault("Filters")
  valid_775652 = validateParameter(valid_775652, JArray, required = false,
                                 default = nil)
  if valid_775652 != nil:
    section.add "Filters", valid_775652
  var valid_775653 = formData.getOrDefault("MaxRecords")
  valid_775653 = validateParameter(valid_775653, JInt, required = false, default = nil)
  if valid_775653 != nil:
    section.add "MaxRecords", valid_775653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775654: Call_PostDescribeEngineDefaultParameters_775638;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_775654.validator(path, query, header, formData, body)
  let scheme = call_775654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775654.url(scheme.get, call_775654.host, call_775654.base,
                         call_775654.route, valid.getOrDefault("path"))
  result = hook(call_775654, url, valid)

proc call*(call_775655: Call_PostDescribeEngineDefaultParameters_775638;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775656 = newJObject()
  var formData_775657 = newJObject()
  add(formData_775657, "Marker", newJString(Marker))
  add(query_775656, "Action", newJString(Action))
  add(formData_775657, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_775657.add "Filters", Filters
  add(formData_775657, "MaxRecords", newJInt(MaxRecords))
  add(query_775656, "Version", newJString(Version))
  result = call_775655.call(nil, query_775656, nil, formData_775657, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_775638(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_775639, base: "/",
    url: url_PostDescribeEngineDefaultParameters_775640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_775619 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEngineDefaultParameters_775621(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEngineDefaultParameters_775620(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775622 = query.getOrDefault("MaxRecords")
  valid_775622 = validateParameter(valid_775622, JInt, required = false, default = nil)
  if valid_775622 != nil:
    section.add "MaxRecords", valid_775622
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_775623 = query.getOrDefault("DBParameterGroupFamily")
  valid_775623 = validateParameter(valid_775623, JString, required = true,
                                 default = nil)
  if valid_775623 != nil:
    section.add "DBParameterGroupFamily", valid_775623
  var valid_775624 = query.getOrDefault("Filters")
  valid_775624 = validateParameter(valid_775624, JArray, required = false,
                                 default = nil)
  if valid_775624 != nil:
    section.add "Filters", valid_775624
  var valid_775625 = query.getOrDefault("Action")
  valid_775625 = validateParameter(valid_775625, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_775625 != nil:
    section.add "Action", valid_775625
  var valid_775626 = query.getOrDefault("Marker")
  valid_775626 = validateParameter(valid_775626, JString, required = false,
                                 default = nil)
  if valid_775626 != nil:
    section.add "Marker", valid_775626
  var valid_775627 = query.getOrDefault("Version")
  valid_775627 = validateParameter(valid_775627, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775627 != nil:
    section.add "Version", valid_775627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775628 = header.getOrDefault("X-Amz-Date")
  valid_775628 = validateParameter(valid_775628, JString, required = false,
                                 default = nil)
  if valid_775628 != nil:
    section.add "X-Amz-Date", valid_775628
  var valid_775629 = header.getOrDefault("X-Amz-Security-Token")
  valid_775629 = validateParameter(valid_775629, JString, required = false,
                                 default = nil)
  if valid_775629 != nil:
    section.add "X-Amz-Security-Token", valid_775629
  var valid_775630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775630 = validateParameter(valid_775630, JString, required = false,
                                 default = nil)
  if valid_775630 != nil:
    section.add "X-Amz-Content-Sha256", valid_775630
  var valid_775631 = header.getOrDefault("X-Amz-Algorithm")
  valid_775631 = validateParameter(valid_775631, JString, required = false,
                                 default = nil)
  if valid_775631 != nil:
    section.add "X-Amz-Algorithm", valid_775631
  var valid_775632 = header.getOrDefault("X-Amz-Signature")
  valid_775632 = validateParameter(valid_775632, JString, required = false,
                                 default = nil)
  if valid_775632 != nil:
    section.add "X-Amz-Signature", valid_775632
  var valid_775633 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775633 = validateParameter(valid_775633, JString, required = false,
                                 default = nil)
  if valid_775633 != nil:
    section.add "X-Amz-SignedHeaders", valid_775633
  var valid_775634 = header.getOrDefault("X-Amz-Credential")
  valid_775634 = validateParameter(valid_775634, JString, required = false,
                                 default = nil)
  if valid_775634 != nil:
    section.add "X-Amz-Credential", valid_775634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775635: Call_GetDescribeEngineDefaultParameters_775619;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_775635.validator(path, query, header, formData, body)
  let scheme = call_775635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775635.url(scheme.get, call_775635.host, call_775635.base,
                         call_775635.route, valid.getOrDefault("path"))
  result = hook(call_775635, url, valid)

proc call*(call_775636: Call_GetDescribeEngineDefaultParameters_775619;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775637 = newJObject()
  add(query_775637, "MaxRecords", newJInt(MaxRecords))
  add(query_775637, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_775637.add "Filters", Filters
  add(query_775637, "Action", newJString(Action))
  add(query_775637, "Marker", newJString(Marker))
  add(query_775637, "Version", newJString(Version))
  result = call_775636.call(nil, query_775637, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_775619(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_775620, base: "/",
    url: url_GetDescribeEngineDefaultParameters_775621,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_775675 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEventCategories_775677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEventCategories_775676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775678 = query.getOrDefault("Action")
  valid_775678 = validateParameter(valid_775678, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_775678 != nil:
    section.add "Action", valid_775678
  var valid_775679 = query.getOrDefault("Version")
  valid_775679 = validateParameter(valid_775679, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775679 != nil:
    section.add "Version", valid_775679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775680 = header.getOrDefault("X-Amz-Date")
  valid_775680 = validateParameter(valid_775680, JString, required = false,
                                 default = nil)
  if valid_775680 != nil:
    section.add "X-Amz-Date", valid_775680
  var valid_775681 = header.getOrDefault("X-Amz-Security-Token")
  valid_775681 = validateParameter(valid_775681, JString, required = false,
                                 default = nil)
  if valid_775681 != nil:
    section.add "X-Amz-Security-Token", valid_775681
  var valid_775682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775682 = validateParameter(valid_775682, JString, required = false,
                                 default = nil)
  if valid_775682 != nil:
    section.add "X-Amz-Content-Sha256", valid_775682
  var valid_775683 = header.getOrDefault("X-Amz-Algorithm")
  valid_775683 = validateParameter(valid_775683, JString, required = false,
                                 default = nil)
  if valid_775683 != nil:
    section.add "X-Amz-Algorithm", valid_775683
  var valid_775684 = header.getOrDefault("X-Amz-Signature")
  valid_775684 = validateParameter(valid_775684, JString, required = false,
                                 default = nil)
  if valid_775684 != nil:
    section.add "X-Amz-Signature", valid_775684
  var valid_775685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775685 = validateParameter(valid_775685, JString, required = false,
                                 default = nil)
  if valid_775685 != nil:
    section.add "X-Amz-SignedHeaders", valid_775685
  var valid_775686 = header.getOrDefault("X-Amz-Credential")
  valid_775686 = validateParameter(valid_775686, JString, required = false,
                                 default = nil)
  if valid_775686 != nil:
    section.add "X-Amz-Credential", valid_775686
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_775687 = formData.getOrDefault("Filters")
  valid_775687 = validateParameter(valid_775687, JArray, required = false,
                                 default = nil)
  if valid_775687 != nil:
    section.add "Filters", valid_775687
  var valid_775688 = formData.getOrDefault("SourceType")
  valid_775688 = validateParameter(valid_775688, JString, required = false,
                                 default = nil)
  if valid_775688 != nil:
    section.add "SourceType", valid_775688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775689: Call_PostDescribeEventCategories_775675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_775689.validator(path, query, header, formData, body)
  let scheme = call_775689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775689.url(scheme.get, call_775689.host, call_775689.base,
                         call_775689.route, valid.getOrDefault("path"))
  result = hook(call_775689, url, valid)

proc call*(call_775690: Call_PostDescribeEventCategories_775675;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_775691 = newJObject()
  var formData_775692 = newJObject()
  add(query_775691, "Action", newJString(Action))
  if Filters != nil:
    formData_775692.add "Filters", Filters
  add(query_775691, "Version", newJString(Version))
  add(formData_775692, "SourceType", newJString(SourceType))
  result = call_775690.call(nil, query_775691, nil, formData_775692, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_775675(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_775676, base: "/",
    url: url_PostDescribeEventCategories_775677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_775658 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEventCategories_775660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEventCategories_775659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_775661 = query.getOrDefault("SourceType")
  valid_775661 = validateParameter(valid_775661, JString, required = false,
                                 default = nil)
  if valid_775661 != nil:
    section.add "SourceType", valid_775661
  var valid_775662 = query.getOrDefault("Filters")
  valid_775662 = validateParameter(valid_775662, JArray, required = false,
                                 default = nil)
  if valid_775662 != nil:
    section.add "Filters", valid_775662
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775663 = query.getOrDefault("Action")
  valid_775663 = validateParameter(valid_775663, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_775663 != nil:
    section.add "Action", valid_775663
  var valid_775664 = query.getOrDefault("Version")
  valid_775664 = validateParameter(valid_775664, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775664 != nil:
    section.add "Version", valid_775664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775665 = header.getOrDefault("X-Amz-Date")
  valid_775665 = validateParameter(valid_775665, JString, required = false,
                                 default = nil)
  if valid_775665 != nil:
    section.add "X-Amz-Date", valid_775665
  var valid_775666 = header.getOrDefault("X-Amz-Security-Token")
  valid_775666 = validateParameter(valid_775666, JString, required = false,
                                 default = nil)
  if valid_775666 != nil:
    section.add "X-Amz-Security-Token", valid_775666
  var valid_775667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775667 = validateParameter(valid_775667, JString, required = false,
                                 default = nil)
  if valid_775667 != nil:
    section.add "X-Amz-Content-Sha256", valid_775667
  var valid_775668 = header.getOrDefault("X-Amz-Algorithm")
  valid_775668 = validateParameter(valid_775668, JString, required = false,
                                 default = nil)
  if valid_775668 != nil:
    section.add "X-Amz-Algorithm", valid_775668
  var valid_775669 = header.getOrDefault("X-Amz-Signature")
  valid_775669 = validateParameter(valid_775669, JString, required = false,
                                 default = nil)
  if valid_775669 != nil:
    section.add "X-Amz-Signature", valid_775669
  var valid_775670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775670 = validateParameter(valid_775670, JString, required = false,
                                 default = nil)
  if valid_775670 != nil:
    section.add "X-Amz-SignedHeaders", valid_775670
  var valid_775671 = header.getOrDefault("X-Amz-Credential")
  valid_775671 = validateParameter(valid_775671, JString, required = false,
                                 default = nil)
  if valid_775671 != nil:
    section.add "X-Amz-Credential", valid_775671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775672: Call_GetDescribeEventCategories_775658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_775672.validator(path, query, header, formData, body)
  let scheme = call_775672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775672.url(scheme.get, call_775672.host, call_775672.base,
                         call_775672.route, valid.getOrDefault("path"))
  result = hook(call_775672, url, valid)

proc call*(call_775673: Call_GetDescribeEventCategories_775658;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775674 = newJObject()
  add(query_775674, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_775674.add "Filters", Filters
  add(query_775674, "Action", newJString(Action))
  add(query_775674, "Version", newJString(Version))
  result = call_775673.call(nil, query_775674, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_775658(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_775659, base: "/",
    url: url_GetDescribeEventCategories_775660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_775712 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEventSubscriptions_775714(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEventSubscriptions_775713(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775715 = query.getOrDefault("Action")
  valid_775715 = validateParameter(valid_775715, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_775715 != nil:
    section.add "Action", valid_775715
  var valid_775716 = query.getOrDefault("Version")
  valid_775716 = validateParameter(valid_775716, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775716 != nil:
    section.add "Version", valid_775716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775717 = header.getOrDefault("X-Amz-Date")
  valid_775717 = validateParameter(valid_775717, JString, required = false,
                                 default = nil)
  if valid_775717 != nil:
    section.add "X-Amz-Date", valid_775717
  var valid_775718 = header.getOrDefault("X-Amz-Security-Token")
  valid_775718 = validateParameter(valid_775718, JString, required = false,
                                 default = nil)
  if valid_775718 != nil:
    section.add "X-Amz-Security-Token", valid_775718
  var valid_775719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775719 = validateParameter(valid_775719, JString, required = false,
                                 default = nil)
  if valid_775719 != nil:
    section.add "X-Amz-Content-Sha256", valid_775719
  var valid_775720 = header.getOrDefault("X-Amz-Algorithm")
  valid_775720 = validateParameter(valid_775720, JString, required = false,
                                 default = nil)
  if valid_775720 != nil:
    section.add "X-Amz-Algorithm", valid_775720
  var valid_775721 = header.getOrDefault("X-Amz-Signature")
  valid_775721 = validateParameter(valid_775721, JString, required = false,
                                 default = nil)
  if valid_775721 != nil:
    section.add "X-Amz-Signature", valid_775721
  var valid_775722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775722 = validateParameter(valid_775722, JString, required = false,
                                 default = nil)
  if valid_775722 != nil:
    section.add "X-Amz-SignedHeaders", valid_775722
  var valid_775723 = header.getOrDefault("X-Amz-Credential")
  valid_775723 = validateParameter(valid_775723, JString, required = false,
                                 default = nil)
  if valid_775723 != nil:
    section.add "X-Amz-Credential", valid_775723
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775724 = formData.getOrDefault("Marker")
  valid_775724 = validateParameter(valid_775724, JString, required = false,
                                 default = nil)
  if valid_775724 != nil:
    section.add "Marker", valid_775724
  var valid_775725 = formData.getOrDefault("SubscriptionName")
  valid_775725 = validateParameter(valid_775725, JString, required = false,
                                 default = nil)
  if valid_775725 != nil:
    section.add "SubscriptionName", valid_775725
  var valid_775726 = formData.getOrDefault("Filters")
  valid_775726 = validateParameter(valid_775726, JArray, required = false,
                                 default = nil)
  if valid_775726 != nil:
    section.add "Filters", valid_775726
  var valid_775727 = formData.getOrDefault("MaxRecords")
  valid_775727 = validateParameter(valid_775727, JInt, required = false, default = nil)
  if valid_775727 != nil:
    section.add "MaxRecords", valid_775727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775728: Call_PostDescribeEventSubscriptions_775712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_775728.validator(path, query, header, formData, body)
  let scheme = call_775728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775728.url(scheme.get, call_775728.host, call_775728.base,
                         call_775728.route, valid.getOrDefault("path"))
  result = hook(call_775728, url, valid)

proc call*(call_775729: Call_PostDescribeEventSubscriptions_775712;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775730 = newJObject()
  var formData_775731 = newJObject()
  add(formData_775731, "Marker", newJString(Marker))
  add(formData_775731, "SubscriptionName", newJString(SubscriptionName))
  add(query_775730, "Action", newJString(Action))
  if Filters != nil:
    formData_775731.add "Filters", Filters
  add(formData_775731, "MaxRecords", newJInt(MaxRecords))
  add(query_775730, "Version", newJString(Version))
  result = call_775729.call(nil, query_775730, nil, formData_775731, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_775712(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_775713, base: "/",
    url: url_PostDescribeEventSubscriptions_775714,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_775693 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEventSubscriptions_775695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEventSubscriptions_775694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_775696 = query.getOrDefault("MaxRecords")
  valid_775696 = validateParameter(valid_775696, JInt, required = false, default = nil)
  if valid_775696 != nil:
    section.add "MaxRecords", valid_775696
  var valid_775697 = query.getOrDefault("Filters")
  valid_775697 = validateParameter(valid_775697, JArray, required = false,
                                 default = nil)
  if valid_775697 != nil:
    section.add "Filters", valid_775697
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775698 = query.getOrDefault("Action")
  valid_775698 = validateParameter(valid_775698, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_775698 != nil:
    section.add "Action", valid_775698
  var valid_775699 = query.getOrDefault("Marker")
  valid_775699 = validateParameter(valid_775699, JString, required = false,
                                 default = nil)
  if valid_775699 != nil:
    section.add "Marker", valid_775699
  var valid_775700 = query.getOrDefault("SubscriptionName")
  valid_775700 = validateParameter(valid_775700, JString, required = false,
                                 default = nil)
  if valid_775700 != nil:
    section.add "SubscriptionName", valid_775700
  var valid_775701 = query.getOrDefault("Version")
  valid_775701 = validateParameter(valid_775701, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775701 != nil:
    section.add "Version", valid_775701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775702 = header.getOrDefault("X-Amz-Date")
  valid_775702 = validateParameter(valid_775702, JString, required = false,
                                 default = nil)
  if valid_775702 != nil:
    section.add "X-Amz-Date", valid_775702
  var valid_775703 = header.getOrDefault("X-Amz-Security-Token")
  valid_775703 = validateParameter(valid_775703, JString, required = false,
                                 default = nil)
  if valid_775703 != nil:
    section.add "X-Amz-Security-Token", valid_775703
  var valid_775704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775704 = validateParameter(valid_775704, JString, required = false,
                                 default = nil)
  if valid_775704 != nil:
    section.add "X-Amz-Content-Sha256", valid_775704
  var valid_775705 = header.getOrDefault("X-Amz-Algorithm")
  valid_775705 = validateParameter(valid_775705, JString, required = false,
                                 default = nil)
  if valid_775705 != nil:
    section.add "X-Amz-Algorithm", valid_775705
  var valid_775706 = header.getOrDefault("X-Amz-Signature")
  valid_775706 = validateParameter(valid_775706, JString, required = false,
                                 default = nil)
  if valid_775706 != nil:
    section.add "X-Amz-Signature", valid_775706
  var valid_775707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775707 = validateParameter(valid_775707, JString, required = false,
                                 default = nil)
  if valid_775707 != nil:
    section.add "X-Amz-SignedHeaders", valid_775707
  var valid_775708 = header.getOrDefault("X-Amz-Credential")
  valid_775708 = validateParameter(valid_775708, JString, required = false,
                                 default = nil)
  if valid_775708 != nil:
    section.add "X-Amz-Credential", valid_775708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775709: Call_GetDescribeEventSubscriptions_775693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_775709.validator(path, query, header, formData, body)
  let scheme = call_775709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775709.url(scheme.get, call_775709.host, call_775709.base,
                         call_775709.route, valid.getOrDefault("path"))
  result = hook(call_775709, url, valid)

proc call*(call_775710: Call_GetDescribeEventSubscriptions_775693;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: string (required)
  var query_775711 = newJObject()
  add(query_775711, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775711.add "Filters", Filters
  add(query_775711, "Action", newJString(Action))
  add(query_775711, "Marker", newJString(Marker))
  add(query_775711, "SubscriptionName", newJString(SubscriptionName))
  add(query_775711, "Version", newJString(Version))
  result = call_775710.call(nil, query_775711, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_775693(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_775694, base: "/",
    url: url_GetDescribeEventSubscriptions_775695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_775756 = ref object of OpenApiRestCall_772581
proc url_PostDescribeEvents_775758(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEvents_775757(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775759 = query.getOrDefault("Action")
  valid_775759 = validateParameter(valid_775759, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_775759 != nil:
    section.add "Action", valid_775759
  var valid_775760 = query.getOrDefault("Version")
  valid_775760 = validateParameter(valid_775760, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775760 != nil:
    section.add "Version", valid_775760
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775761 = header.getOrDefault("X-Amz-Date")
  valid_775761 = validateParameter(valid_775761, JString, required = false,
                                 default = nil)
  if valid_775761 != nil:
    section.add "X-Amz-Date", valid_775761
  var valid_775762 = header.getOrDefault("X-Amz-Security-Token")
  valid_775762 = validateParameter(valid_775762, JString, required = false,
                                 default = nil)
  if valid_775762 != nil:
    section.add "X-Amz-Security-Token", valid_775762
  var valid_775763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775763 = validateParameter(valid_775763, JString, required = false,
                                 default = nil)
  if valid_775763 != nil:
    section.add "X-Amz-Content-Sha256", valid_775763
  var valid_775764 = header.getOrDefault("X-Amz-Algorithm")
  valid_775764 = validateParameter(valid_775764, JString, required = false,
                                 default = nil)
  if valid_775764 != nil:
    section.add "X-Amz-Algorithm", valid_775764
  var valid_775765 = header.getOrDefault("X-Amz-Signature")
  valid_775765 = validateParameter(valid_775765, JString, required = false,
                                 default = nil)
  if valid_775765 != nil:
    section.add "X-Amz-Signature", valid_775765
  var valid_775766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775766 = validateParameter(valid_775766, JString, required = false,
                                 default = nil)
  if valid_775766 != nil:
    section.add "X-Amz-SignedHeaders", valid_775766
  var valid_775767 = header.getOrDefault("X-Amz-Credential")
  valid_775767 = validateParameter(valid_775767, JString, required = false,
                                 default = nil)
  if valid_775767 != nil:
    section.add "X-Amz-Credential", valid_775767
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_775768 = formData.getOrDefault("SourceIdentifier")
  valid_775768 = validateParameter(valid_775768, JString, required = false,
                                 default = nil)
  if valid_775768 != nil:
    section.add "SourceIdentifier", valid_775768
  var valid_775769 = formData.getOrDefault("EventCategories")
  valid_775769 = validateParameter(valid_775769, JArray, required = false,
                                 default = nil)
  if valid_775769 != nil:
    section.add "EventCategories", valid_775769
  var valid_775770 = formData.getOrDefault("Marker")
  valid_775770 = validateParameter(valid_775770, JString, required = false,
                                 default = nil)
  if valid_775770 != nil:
    section.add "Marker", valid_775770
  var valid_775771 = formData.getOrDefault("StartTime")
  valid_775771 = validateParameter(valid_775771, JString, required = false,
                                 default = nil)
  if valid_775771 != nil:
    section.add "StartTime", valid_775771
  var valid_775772 = formData.getOrDefault("Duration")
  valid_775772 = validateParameter(valid_775772, JInt, required = false, default = nil)
  if valid_775772 != nil:
    section.add "Duration", valid_775772
  var valid_775773 = formData.getOrDefault("Filters")
  valid_775773 = validateParameter(valid_775773, JArray, required = false,
                                 default = nil)
  if valid_775773 != nil:
    section.add "Filters", valid_775773
  var valid_775774 = formData.getOrDefault("EndTime")
  valid_775774 = validateParameter(valid_775774, JString, required = false,
                                 default = nil)
  if valid_775774 != nil:
    section.add "EndTime", valid_775774
  var valid_775775 = formData.getOrDefault("MaxRecords")
  valid_775775 = validateParameter(valid_775775, JInt, required = false, default = nil)
  if valid_775775 != nil:
    section.add "MaxRecords", valid_775775
  var valid_775776 = formData.getOrDefault("SourceType")
  valid_775776 = validateParameter(valid_775776, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_775776 != nil:
    section.add "SourceType", valid_775776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775777: Call_PostDescribeEvents_775756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_775777.validator(path, query, header, formData, body)
  let scheme = call_775777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775777.url(scheme.get, call_775777.host, call_775777.base,
                         call_775777.route, valid.getOrDefault("path"))
  result = hook(call_775777, url, valid)

proc call*(call_775778: Call_PostDescribeEvents_775756;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_775779 = newJObject()
  var formData_775780 = newJObject()
  add(formData_775780, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_775780.add "EventCategories", EventCategories
  add(formData_775780, "Marker", newJString(Marker))
  add(formData_775780, "StartTime", newJString(StartTime))
  add(query_775779, "Action", newJString(Action))
  add(formData_775780, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_775780.add "Filters", Filters
  add(formData_775780, "EndTime", newJString(EndTime))
  add(formData_775780, "MaxRecords", newJInt(MaxRecords))
  add(query_775779, "Version", newJString(Version))
  add(formData_775780, "SourceType", newJString(SourceType))
  result = call_775778.call(nil, query_775779, nil, formData_775780, nil)

var postDescribeEvents* = Call_PostDescribeEvents_775756(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_775757, base: "/",
    url: url_PostDescribeEvents_775758, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_775732 = ref object of OpenApiRestCall_772581
proc url_GetDescribeEvents_775734(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEvents_775733(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775735 = query.getOrDefault("SourceType")
  valid_775735 = validateParameter(valid_775735, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_775735 != nil:
    section.add "SourceType", valid_775735
  var valid_775736 = query.getOrDefault("MaxRecords")
  valid_775736 = validateParameter(valid_775736, JInt, required = false, default = nil)
  if valid_775736 != nil:
    section.add "MaxRecords", valid_775736
  var valid_775737 = query.getOrDefault("StartTime")
  valid_775737 = validateParameter(valid_775737, JString, required = false,
                                 default = nil)
  if valid_775737 != nil:
    section.add "StartTime", valid_775737
  var valid_775738 = query.getOrDefault("Filters")
  valid_775738 = validateParameter(valid_775738, JArray, required = false,
                                 default = nil)
  if valid_775738 != nil:
    section.add "Filters", valid_775738
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775739 = query.getOrDefault("Action")
  valid_775739 = validateParameter(valid_775739, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_775739 != nil:
    section.add "Action", valid_775739
  var valid_775740 = query.getOrDefault("SourceIdentifier")
  valid_775740 = validateParameter(valid_775740, JString, required = false,
                                 default = nil)
  if valid_775740 != nil:
    section.add "SourceIdentifier", valid_775740
  var valid_775741 = query.getOrDefault("Marker")
  valid_775741 = validateParameter(valid_775741, JString, required = false,
                                 default = nil)
  if valid_775741 != nil:
    section.add "Marker", valid_775741
  var valid_775742 = query.getOrDefault("EventCategories")
  valid_775742 = validateParameter(valid_775742, JArray, required = false,
                                 default = nil)
  if valid_775742 != nil:
    section.add "EventCategories", valid_775742
  var valid_775743 = query.getOrDefault("Duration")
  valid_775743 = validateParameter(valid_775743, JInt, required = false, default = nil)
  if valid_775743 != nil:
    section.add "Duration", valid_775743
  var valid_775744 = query.getOrDefault("EndTime")
  valid_775744 = validateParameter(valid_775744, JString, required = false,
                                 default = nil)
  if valid_775744 != nil:
    section.add "EndTime", valid_775744
  var valid_775745 = query.getOrDefault("Version")
  valid_775745 = validateParameter(valid_775745, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775745 != nil:
    section.add "Version", valid_775745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775746 = header.getOrDefault("X-Amz-Date")
  valid_775746 = validateParameter(valid_775746, JString, required = false,
                                 default = nil)
  if valid_775746 != nil:
    section.add "X-Amz-Date", valid_775746
  var valid_775747 = header.getOrDefault("X-Amz-Security-Token")
  valid_775747 = validateParameter(valid_775747, JString, required = false,
                                 default = nil)
  if valid_775747 != nil:
    section.add "X-Amz-Security-Token", valid_775747
  var valid_775748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775748 = validateParameter(valid_775748, JString, required = false,
                                 default = nil)
  if valid_775748 != nil:
    section.add "X-Amz-Content-Sha256", valid_775748
  var valid_775749 = header.getOrDefault("X-Amz-Algorithm")
  valid_775749 = validateParameter(valid_775749, JString, required = false,
                                 default = nil)
  if valid_775749 != nil:
    section.add "X-Amz-Algorithm", valid_775749
  var valid_775750 = header.getOrDefault("X-Amz-Signature")
  valid_775750 = validateParameter(valid_775750, JString, required = false,
                                 default = nil)
  if valid_775750 != nil:
    section.add "X-Amz-Signature", valid_775750
  var valid_775751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775751 = validateParameter(valid_775751, JString, required = false,
                                 default = nil)
  if valid_775751 != nil:
    section.add "X-Amz-SignedHeaders", valid_775751
  var valid_775752 = header.getOrDefault("X-Amz-Credential")
  valid_775752 = validateParameter(valid_775752, JString, required = false,
                                 default = nil)
  if valid_775752 != nil:
    section.add "X-Amz-Credential", valid_775752
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775753: Call_GetDescribeEvents_775732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_775753.validator(path, query, header, formData, body)
  let scheme = call_775753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775753.url(scheme.get, call_775753.host, call_775753.base,
                         call_775753.route, valid.getOrDefault("path"))
  result = hook(call_775753, url, valid)

proc call*(call_775754: Call_GetDescribeEvents_775732;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_775755 = newJObject()
  add(query_775755, "SourceType", newJString(SourceType))
  add(query_775755, "MaxRecords", newJInt(MaxRecords))
  add(query_775755, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_775755.add "Filters", Filters
  add(query_775755, "Action", newJString(Action))
  add(query_775755, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_775755, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_775755.add "EventCategories", EventCategories
  add(query_775755, "Duration", newJInt(Duration))
  add(query_775755, "EndTime", newJString(EndTime))
  add(query_775755, "Version", newJString(Version))
  result = call_775754.call(nil, query_775755, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_775732(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_775733,
    base: "/", url: url_GetDescribeEvents_775734,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_775800 = ref object of OpenApiRestCall_772581
proc url_PostDescribeGlobalClusters_775802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeGlobalClusters_775801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775803 = query.getOrDefault("Action")
  valid_775803 = validateParameter(valid_775803, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_775803 != nil:
    section.add "Action", valid_775803
  var valid_775804 = query.getOrDefault("Version")
  valid_775804 = validateParameter(valid_775804, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775804 != nil:
    section.add "Version", valid_775804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775805 = header.getOrDefault("X-Amz-Date")
  valid_775805 = validateParameter(valid_775805, JString, required = false,
                                 default = nil)
  if valid_775805 != nil:
    section.add "X-Amz-Date", valid_775805
  var valid_775806 = header.getOrDefault("X-Amz-Security-Token")
  valid_775806 = validateParameter(valid_775806, JString, required = false,
                                 default = nil)
  if valid_775806 != nil:
    section.add "X-Amz-Security-Token", valid_775806
  var valid_775807 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775807 = validateParameter(valid_775807, JString, required = false,
                                 default = nil)
  if valid_775807 != nil:
    section.add "X-Amz-Content-Sha256", valid_775807
  var valid_775808 = header.getOrDefault("X-Amz-Algorithm")
  valid_775808 = validateParameter(valid_775808, JString, required = false,
                                 default = nil)
  if valid_775808 != nil:
    section.add "X-Amz-Algorithm", valid_775808
  var valid_775809 = header.getOrDefault("X-Amz-Signature")
  valid_775809 = validateParameter(valid_775809, JString, required = false,
                                 default = nil)
  if valid_775809 != nil:
    section.add "X-Amz-Signature", valid_775809
  var valid_775810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775810 = validateParameter(valid_775810, JString, required = false,
                                 default = nil)
  if valid_775810 != nil:
    section.add "X-Amz-SignedHeaders", valid_775810
  var valid_775811 = header.getOrDefault("X-Amz-Credential")
  valid_775811 = validateParameter(valid_775811, JString, required = false,
                                 default = nil)
  if valid_775811 != nil:
    section.add "X-Amz-Credential", valid_775811
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775812 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_775812 = validateParameter(valid_775812, JString, required = false,
                                 default = nil)
  if valid_775812 != nil:
    section.add "GlobalClusterIdentifier", valid_775812
  var valid_775813 = formData.getOrDefault("Marker")
  valid_775813 = validateParameter(valid_775813, JString, required = false,
                                 default = nil)
  if valid_775813 != nil:
    section.add "Marker", valid_775813
  var valid_775814 = formData.getOrDefault("Filters")
  valid_775814 = validateParameter(valid_775814, JArray, required = false,
                                 default = nil)
  if valid_775814 != nil:
    section.add "Filters", valid_775814
  var valid_775815 = formData.getOrDefault("MaxRecords")
  valid_775815 = validateParameter(valid_775815, JInt, required = false, default = nil)
  if valid_775815 != nil:
    section.add "MaxRecords", valid_775815
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775816: Call_PostDescribeGlobalClusters_775800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775816.validator(path, query, header, formData, body)
  let scheme = call_775816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775816.url(scheme.get, call_775816.host, call_775816.base,
                         call_775816.route, valid.getOrDefault("path"))
  result = hook(call_775816, url, valid)

proc call*(call_775817: Call_PostDescribeGlobalClusters_775800;
          GlobalClusterIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeGlobalClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775818 = newJObject()
  var formData_775819 = newJObject()
  add(formData_775819, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_775819, "Marker", newJString(Marker))
  add(query_775818, "Action", newJString(Action))
  if Filters != nil:
    formData_775819.add "Filters", Filters
  add(formData_775819, "MaxRecords", newJInt(MaxRecords))
  add(query_775818, "Version", newJString(Version))
  result = call_775817.call(nil, query_775818, nil, formData_775819, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_775800(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_775801, base: "/",
    url: url_PostDescribeGlobalClusters_775802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_775781 = ref object of OpenApiRestCall_772581
proc url_GetDescribeGlobalClusters_775783(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeGlobalClusters_775782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775784 = query.getOrDefault("MaxRecords")
  valid_775784 = validateParameter(valid_775784, JInt, required = false, default = nil)
  if valid_775784 != nil:
    section.add "MaxRecords", valid_775784
  var valid_775785 = query.getOrDefault("Filters")
  valid_775785 = validateParameter(valid_775785, JArray, required = false,
                                 default = nil)
  if valid_775785 != nil:
    section.add "Filters", valid_775785
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775786 = query.getOrDefault("Action")
  valid_775786 = validateParameter(valid_775786, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_775786 != nil:
    section.add "Action", valid_775786
  var valid_775787 = query.getOrDefault("Marker")
  valid_775787 = validateParameter(valid_775787, JString, required = false,
                                 default = nil)
  if valid_775787 != nil:
    section.add "Marker", valid_775787
  var valid_775788 = query.getOrDefault("GlobalClusterIdentifier")
  valid_775788 = validateParameter(valid_775788, JString, required = false,
                                 default = nil)
  if valid_775788 != nil:
    section.add "GlobalClusterIdentifier", valid_775788
  var valid_775789 = query.getOrDefault("Version")
  valid_775789 = validateParameter(valid_775789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775789 != nil:
    section.add "Version", valid_775789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775790 = header.getOrDefault("X-Amz-Date")
  valid_775790 = validateParameter(valid_775790, JString, required = false,
                                 default = nil)
  if valid_775790 != nil:
    section.add "X-Amz-Date", valid_775790
  var valid_775791 = header.getOrDefault("X-Amz-Security-Token")
  valid_775791 = validateParameter(valid_775791, JString, required = false,
                                 default = nil)
  if valid_775791 != nil:
    section.add "X-Amz-Security-Token", valid_775791
  var valid_775792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775792 = validateParameter(valid_775792, JString, required = false,
                                 default = nil)
  if valid_775792 != nil:
    section.add "X-Amz-Content-Sha256", valid_775792
  var valid_775793 = header.getOrDefault("X-Amz-Algorithm")
  valid_775793 = validateParameter(valid_775793, JString, required = false,
                                 default = nil)
  if valid_775793 != nil:
    section.add "X-Amz-Algorithm", valid_775793
  var valid_775794 = header.getOrDefault("X-Amz-Signature")
  valid_775794 = validateParameter(valid_775794, JString, required = false,
                                 default = nil)
  if valid_775794 != nil:
    section.add "X-Amz-Signature", valid_775794
  var valid_775795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775795 = validateParameter(valid_775795, JString, required = false,
                                 default = nil)
  if valid_775795 != nil:
    section.add "X-Amz-SignedHeaders", valid_775795
  var valid_775796 = header.getOrDefault("X-Amz-Credential")
  valid_775796 = validateParameter(valid_775796, JString, required = false,
                                 default = nil)
  if valid_775796 != nil:
    section.add "X-Amz-Credential", valid_775796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775797: Call_GetDescribeGlobalClusters_775781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_775797.validator(path, query, header, formData, body)
  let scheme = call_775797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775797.url(scheme.get, call_775797.host, call_775797.base,
                         call_775797.route, valid.getOrDefault("path"))
  result = hook(call_775797, url, valid)

proc call*(call_775798: Call_GetDescribeGlobalClusters_775781; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeGlobalClusters";
          Marker: string = ""; GlobalClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_775799 = newJObject()
  add(query_775799, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775799.add "Filters", Filters
  add(query_775799, "Action", newJString(Action))
  add(query_775799, "Marker", newJString(Marker))
  add(query_775799, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_775799, "Version", newJString(Version))
  result = call_775798.call(nil, query_775799, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_775781(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_775782, base: "/",
    url: url_GetDescribeGlobalClusters_775783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_775840 = ref object of OpenApiRestCall_772581
proc url_PostDescribeOptionGroupOptions_775842(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeOptionGroupOptions_775841(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775843 = query.getOrDefault("Action")
  valid_775843 = validateParameter(valid_775843, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_775843 != nil:
    section.add "Action", valid_775843
  var valid_775844 = query.getOrDefault("Version")
  valid_775844 = validateParameter(valid_775844, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775844 != nil:
    section.add "Version", valid_775844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775845 = header.getOrDefault("X-Amz-Date")
  valid_775845 = validateParameter(valid_775845, JString, required = false,
                                 default = nil)
  if valid_775845 != nil:
    section.add "X-Amz-Date", valid_775845
  var valid_775846 = header.getOrDefault("X-Amz-Security-Token")
  valid_775846 = validateParameter(valid_775846, JString, required = false,
                                 default = nil)
  if valid_775846 != nil:
    section.add "X-Amz-Security-Token", valid_775846
  var valid_775847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775847 = validateParameter(valid_775847, JString, required = false,
                                 default = nil)
  if valid_775847 != nil:
    section.add "X-Amz-Content-Sha256", valid_775847
  var valid_775848 = header.getOrDefault("X-Amz-Algorithm")
  valid_775848 = validateParameter(valid_775848, JString, required = false,
                                 default = nil)
  if valid_775848 != nil:
    section.add "X-Amz-Algorithm", valid_775848
  var valid_775849 = header.getOrDefault("X-Amz-Signature")
  valid_775849 = validateParameter(valid_775849, JString, required = false,
                                 default = nil)
  if valid_775849 != nil:
    section.add "X-Amz-Signature", valid_775849
  var valid_775850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775850 = validateParameter(valid_775850, JString, required = false,
                                 default = nil)
  if valid_775850 != nil:
    section.add "X-Amz-SignedHeaders", valid_775850
  var valid_775851 = header.getOrDefault("X-Amz-Credential")
  valid_775851 = validateParameter(valid_775851, JString, required = false,
                                 default = nil)
  if valid_775851 != nil:
    section.add "X-Amz-Credential", valid_775851
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775852 = formData.getOrDefault("MajorEngineVersion")
  valid_775852 = validateParameter(valid_775852, JString, required = false,
                                 default = nil)
  if valid_775852 != nil:
    section.add "MajorEngineVersion", valid_775852
  var valid_775853 = formData.getOrDefault("Marker")
  valid_775853 = validateParameter(valid_775853, JString, required = false,
                                 default = nil)
  if valid_775853 != nil:
    section.add "Marker", valid_775853
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_775854 = formData.getOrDefault("EngineName")
  valid_775854 = validateParameter(valid_775854, JString, required = true,
                                 default = nil)
  if valid_775854 != nil:
    section.add "EngineName", valid_775854
  var valid_775855 = formData.getOrDefault("Filters")
  valid_775855 = validateParameter(valid_775855, JArray, required = false,
                                 default = nil)
  if valid_775855 != nil:
    section.add "Filters", valid_775855
  var valid_775856 = formData.getOrDefault("MaxRecords")
  valid_775856 = validateParameter(valid_775856, JInt, required = false, default = nil)
  if valid_775856 != nil:
    section.add "MaxRecords", valid_775856
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775857: Call_PostDescribeOptionGroupOptions_775840; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_775857.validator(path, query, header, formData, body)
  let scheme = call_775857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775857.url(scheme.get, call_775857.host, call_775857.base,
                         call_775857.route, valid.getOrDefault("path"))
  result = hook(call_775857, url, valid)

proc call*(call_775858: Call_PostDescribeOptionGroupOptions_775840;
          EngineName: string; MajorEngineVersion: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775859 = newJObject()
  var formData_775860 = newJObject()
  add(formData_775860, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_775860, "Marker", newJString(Marker))
  add(query_775859, "Action", newJString(Action))
  add(formData_775860, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_775860.add "Filters", Filters
  add(formData_775860, "MaxRecords", newJInt(MaxRecords))
  add(query_775859, "Version", newJString(Version))
  result = call_775858.call(nil, query_775859, nil, formData_775860, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_775840(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_775841, base: "/",
    url: url_PostDescribeOptionGroupOptions_775842,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_775820 = ref object of OpenApiRestCall_772581
proc url_GetDescribeOptionGroupOptions_775822(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeOptionGroupOptions_775821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  var valid_775823 = query.getOrDefault("MaxRecords")
  valid_775823 = validateParameter(valid_775823, JInt, required = false, default = nil)
  if valid_775823 != nil:
    section.add "MaxRecords", valid_775823
  var valid_775824 = query.getOrDefault("Filters")
  valid_775824 = validateParameter(valid_775824, JArray, required = false,
                                 default = nil)
  if valid_775824 != nil:
    section.add "Filters", valid_775824
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775825 = query.getOrDefault("Action")
  valid_775825 = validateParameter(valid_775825, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_775825 != nil:
    section.add "Action", valid_775825
  var valid_775826 = query.getOrDefault("Marker")
  valid_775826 = validateParameter(valid_775826, JString, required = false,
                                 default = nil)
  if valid_775826 != nil:
    section.add "Marker", valid_775826
  var valid_775827 = query.getOrDefault("Version")
  valid_775827 = validateParameter(valid_775827, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775827 != nil:
    section.add "Version", valid_775827
  var valid_775828 = query.getOrDefault("EngineName")
  valid_775828 = validateParameter(valid_775828, JString, required = true,
                                 default = nil)
  if valid_775828 != nil:
    section.add "EngineName", valid_775828
  var valid_775829 = query.getOrDefault("MajorEngineVersion")
  valid_775829 = validateParameter(valid_775829, JString, required = false,
                                 default = nil)
  if valid_775829 != nil:
    section.add "MajorEngineVersion", valid_775829
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775830 = header.getOrDefault("X-Amz-Date")
  valid_775830 = validateParameter(valid_775830, JString, required = false,
                                 default = nil)
  if valid_775830 != nil:
    section.add "X-Amz-Date", valid_775830
  var valid_775831 = header.getOrDefault("X-Amz-Security-Token")
  valid_775831 = validateParameter(valid_775831, JString, required = false,
                                 default = nil)
  if valid_775831 != nil:
    section.add "X-Amz-Security-Token", valid_775831
  var valid_775832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775832 = validateParameter(valid_775832, JString, required = false,
                                 default = nil)
  if valid_775832 != nil:
    section.add "X-Amz-Content-Sha256", valid_775832
  var valid_775833 = header.getOrDefault("X-Amz-Algorithm")
  valid_775833 = validateParameter(valid_775833, JString, required = false,
                                 default = nil)
  if valid_775833 != nil:
    section.add "X-Amz-Algorithm", valid_775833
  var valid_775834 = header.getOrDefault("X-Amz-Signature")
  valid_775834 = validateParameter(valid_775834, JString, required = false,
                                 default = nil)
  if valid_775834 != nil:
    section.add "X-Amz-Signature", valid_775834
  var valid_775835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775835 = validateParameter(valid_775835, JString, required = false,
                                 default = nil)
  if valid_775835 != nil:
    section.add "X-Amz-SignedHeaders", valid_775835
  var valid_775836 = header.getOrDefault("X-Amz-Credential")
  valid_775836 = validateParameter(valid_775836, JString, required = false,
                                 default = nil)
  if valid_775836 != nil:
    section.add "X-Amz-Credential", valid_775836
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775837: Call_GetDescribeOptionGroupOptions_775820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_775837.validator(path, query, header, formData, body)
  let scheme = call_775837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775837.url(scheme.get, call_775837.host, call_775837.base,
                         call_775837.route, valid.getOrDefault("path"))
  result = hook(call_775837, url, valid)

proc call*(call_775838: Call_GetDescribeOptionGroupOptions_775820;
          EngineName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroupOptions"; Marker: string = "";
          Version: string = "2014-10-31"; MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_775839 = newJObject()
  add(query_775839, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775839.add "Filters", Filters
  add(query_775839, "Action", newJString(Action))
  add(query_775839, "Marker", newJString(Marker))
  add(query_775839, "Version", newJString(Version))
  add(query_775839, "EngineName", newJString(EngineName))
  add(query_775839, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_775838.call(nil, query_775839, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_775820(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_775821, base: "/",
    url: url_GetDescribeOptionGroupOptions_775822,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_775882 = ref object of OpenApiRestCall_772581
proc url_PostDescribeOptionGroups_775884(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeOptionGroups_775883(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775885 = query.getOrDefault("Action")
  valid_775885 = validateParameter(valid_775885, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_775885 != nil:
    section.add "Action", valid_775885
  var valid_775886 = query.getOrDefault("Version")
  valid_775886 = validateParameter(valid_775886, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775886 != nil:
    section.add "Version", valid_775886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775887 = header.getOrDefault("X-Amz-Date")
  valid_775887 = validateParameter(valid_775887, JString, required = false,
                                 default = nil)
  if valid_775887 != nil:
    section.add "X-Amz-Date", valid_775887
  var valid_775888 = header.getOrDefault("X-Amz-Security-Token")
  valid_775888 = validateParameter(valid_775888, JString, required = false,
                                 default = nil)
  if valid_775888 != nil:
    section.add "X-Amz-Security-Token", valid_775888
  var valid_775889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775889 = validateParameter(valid_775889, JString, required = false,
                                 default = nil)
  if valid_775889 != nil:
    section.add "X-Amz-Content-Sha256", valid_775889
  var valid_775890 = header.getOrDefault("X-Amz-Algorithm")
  valid_775890 = validateParameter(valid_775890, JString, required = false,
                                 default = nil)
  if valid_775890 != nil:
    section.add "X-Amz-Algorithm", valid_775890
  var valid_775891 = header.getOrDefault("X-Amz-Signature")
  valid_775891 = validateParameter(valid_775891, JString, required = false,
                                 default = nil)
  if valid_775891 != nil:
    section.add "X-Amz-Signature", valid_775891
  var valid_775892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775892 = validateParameter(valid_775892, JString, required = false,
                                 default = nil)
  if valid_775892 != nil:
    section.add "X-Amz-SignedHeaders", valid_775892
  var valid_775893 = header.getOrDefault("X-Amz-Credential")
  valid_775893 = validateParameter(valid_775893, JString, required = false,
                                 default = nil)
  if valid_775893 != nil:
    section.add "X-Amz-Credential", valid_775893
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775894 = formData.getOrDefault("MajorEngineVersion")
  valid_775894 = validateParameter(valid_775894, JString, required = false,
                                 default = nil)
  if valid_775894 != nil:
    section.add "MajorEngineVersion", valid_775894
  var valid_775895 = formData.getOrDefault("OptionGroupName")
  valid_775895 = validateParameter(valid_775895, JString, required = false,
                                 default = nil)
  if valid_775895 != nil:
    section.add "OptionGroupName", valid_775895
  var valid_775896 = formData.getOrDefault("Marker")
  valid_775896 = validateParameter(valid_775896, JString, required = false,
                                 default = nil)
  if valid_775896 != nil:
    section.add "Marker", valid_775896
  var valid_775897 = formData.getOrDefault("EngineName")
  valid_775897 = validateParameter(valid_775897, JString, required = false,
                                 default = nil)
  if valid_775897 != nil:
    section.add "EngineName", valid_775897
  var valid_775898 = formData.getOrDefault("Filters")
  valid_775898 = validateParameter(valid_775898, JArray, required = false,
                                 default = nil)
  if valid_775898 != nil:
    section.add "Filters", valid_775898
  var valid_775899 = formData.getOrDefault("MaxRecords")
  valid_775899 = validateParameter(valid_775899, JInt, required = false, default = nil)
  if valid_775899 != nil:
    section.add "MaxRecords", valid_775899
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775900: Call_PostDescribeOptionGroups_775882; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_775900.validator(path, query, header, formData, body)
  let scheme = call_775900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775900.url(scheme.get, call_775900.host, call_775900.base,
                         call_775900.route, valid.getOrDefault("path"))
  result = hook(call_775900, url, valid)

proc call*(call_775901: Call_PostDescribeOptionGroups_775882;
          MajorEngineVersion: string = ""; OptionGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeOptionGroups";
          EngineName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775902 = newJObject()
  var formData_775903 = newJObject()
  add(formData_775903, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_775903, "OptionGroupName", newJString(OptionGroupName))
  add(formData_775903, "Marker", newJString(Marker))
  add(query_775902, "Action", newJString(Action))
  add(formData_775903, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_775903.add "Filters", Filters
  add(formData_775903, "MaxRecords", newJInt(MaxRecords))
  add(query_775902, "Version", newJString(Version))
  result = call_775901.call(nil, query_775902, nil, formData_775903, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_775882(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_775883, base: "/",
    url: url_PostDescribeOptionGroups_775884, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_775861 = ref object of OpenApiRestCall_772581
proc url_GetDescribeOptionGroups_775863(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeOptionGroups_775862(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_775864 = query.getOrDefault("MaxRecords")
  valid_775864 = validateParameter(valid_775864, JInt, required = false, default = nil)
  if valid_775864 != nil:
    section.add "MaxRecords", valid_775864
  var valid_775865 = query.getOrDefault("OptionGroupName")
  valid_775865 = validateParameter(valid_775865, JString, required = false,
                                 default = nil)
  if valid_775865 != nil:
    section.add "OptionGroupName", valid_775865
  var valid_775866 = query.getOrDefault("Filters")
  valid_775866 = validateParameter(valid_775866, JArray, required = false,
                                 default = nil)
  if valid_775866 != nil:
    section.add "Filters", valid_775866
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775867 = query.getOrDefault("Action")
  valid_775867 = validateParameter(valid_775867, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_775867 != nil:
    section.add "Action", valid_775867
  var valid_775868 = query.getOrDefault("Marker")
  valid_775868 = validateParameter(valid_775868, JString, required = false,
                                 default = nil)
  if valid_775868 != nil:
    section.add "Marker", valid_775868
  var valid_775869 = query.getOrDefault("Version")
  valid_775869 = validateParameter(valid_775869, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775869 != nil:
    section.add "Version", valid_775869
  var valid_775870 = query.getOrDefault("EngineName")
  valid_775870 = validateParameter(valid_775870, JString, required = false,
                                 default = nil)
  if valid_775870 != nil:
    section.add "EngineName", valid_775870
  var valid_775871 = query.getOrDefault("MajorEngineVersion")
  valid_775871 = validateParameter(valid_775871, JString, required = false,
                                 default = nil)
  if valid_775871 != nil:
    section.add "MajorEngineVersion", valid_775871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775872 = header.getOrDefault("X-Amz-Date")
  valid_775872 = validateParameter(valid_775872, JString, required = false,
                                 default = nil)
  if valid_775872 != nil:
    section.add "X-Amz-Date", valid_775872
  var valid_775873 = header.getOrDefault("X-Amz-Security-Token")
  valid_775873 = validateParameter(valid_775873, JString, required = false,
                                 default = nil)
  if valid_775873 != nil:
    section.add "X-Amz-Security-Token", valid_775873
  var valid_775874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775874 = validateParameter(valid_775874, JString, required = false,
                                 default = nil)
  if valid_775874 != nil:
    section.add "X-Amz-Content-Sha256", valid_775874
  var valid_775875 = header.getOrDefault("X-Amz-Algorithm")
  valid_775875 = validateParameter(valid_775875, JString, required = false,
                                 default = nil)
  if valid_775875 != nil:
    section.add "X-Amz-Algorithm", valid_775875
  var valid_775876 = header.getOrDefault("X-Amz-Signature")
  valid_775876 = validateParameter(valid_775876, JString, required = false,
                                 default = nil)
  if valid_775876 != nil:
    section.add "X-Amz-Signature", valid_775876
  var valid_775877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775877 = validateParameter(valid_775877, JString, required = false,
                                 default = nil)
  if valid_775877 != nil:
    section.add "X-Amz-SignedHeaders", valid_775877
  var valid_775878 = header.getOrDefault("X-Amz-Credential")
  valid_775878 = validateParameter(valid_775878, JString, required = false,
                                 default = nil)
  if valid_775878 != nil:
    section.add "X-Amz-Credential", valid_775878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775879: Call_GetDescribeOptionGroups_775861; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_775879.validator(path, query, header, formData, body)
  let scheme = call_775879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775879.url(scheme.get, call_775879.host, call_775879.base,
                         call_775879.route, valid.getOrDefault("path"))
  result = hook(call_775879, url, valid)

proc call*(call_775880: Call_GetDescribeOptionGroups_775861; MaxRecords: int = 0;
          OptionGroupName: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroups"; Marker: string = "";
          Version: string = "2014-10-31"; EngineName: string = "";
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_775881 = newJObject()
  add(query_775881, "MaxRecords", newJInt(MaxRecords))
  add(query_775881, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    query_775881.add "Filters", Filters
  add(query_775881, "Action", newJString(Action))
  add(query_775881, "Marker", newJString(Marker))
  add(query_775881, "Version", newJString(Version))
  add(query_775881, "EngineName", newJString(EngineName))
  add(query_775881, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_775880.call(nil, query_775881, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_775861(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_775862, base: "/",
    url: url_GetDescribeOptionGroups_775863, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_775927 = ref object of OpenApiRestCall_772581
proc url_PostDescribeOrderableDBInstanceOptions_775929(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeOrderableDBInstanceOptions_775928(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775930 = query.getOrDefault("Action")
  valid_775930 = validateParameter(valid_775930, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_775930 != nil:
    section.add "Action", valid_775930
  var valid_775931 = query.getOrDefault("Version")
  valid_775931 = validateParameter(valid_775931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775931 != nil:
    section.add "Version", valid_775931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775932 = header.getOrDefault("X-Amz-Date")
  valid_775932 = validateParameter(valid_775932, JString, required = false,
                                 default = nil)
  if valid_775932 != nil:
    section.add "X-Amz-Date", valid_775932
  var valid_775933 = header.getOrDefault("X-Amz-Security-Token")
  valid_775933 = validateParameter(valid_775933, JString, required = false,
                                 default = nil)
  if valid_775933 != nil:
    section.add "X-Amz-Security-Token", valid_775933
  var valid_775934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775934 = validateParameter(valid_775934, JString, required = false,
                                 default = nil)
  if valid_775934 != nil:
    section.add "X-Amz-Content-Sha256", valid_775934
  var valid_775935 = header.getOrDefault("X-Amz-Algorithm")
  valid_775935 = validateParameter(valid_775935, JString, required = false,
                                 default = nil)
  if valid_775935 != nil:
    section.add "X-Amz-Algorithm", valid_775935
  var valid_775936 = header.getOrDefault("X-Amz-Signature")
  valid_775936 = validateParameter(valid_775936, JString, required = false,
                                 default = nil)
  if valid_775936 != nil:
    section.add "X-Amz-Signature", valid_775936
  var valid_775937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775937 = validateParameter(valid_775937, JString, required = false,
                                 default = nil)
  if valid_775937 != nil:
    section.add "X-Amz-SignedHeaders", valid_775937
  var valid_775938 = header.getOrDefault("X-Amz-Credential")
  valid_775938 = validateParameter(valid_775938, JString, required = false,
                                 default = nil)
  if valid_775938 != nil:
    section.add "X-Amz-Credential", valid_775938
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_775939 = formData.getOrDefault("Engine")
  valid_775939 = validateParameter(valid_775939, JString, required = true,
                                 default = nil)
  if valid_775939 != nil:
    section.add "Engine", valid_775939
  var valid_775940 = formData.getOrDefault("Marker")
  valid_775940 = validateParameter(valid_775940, JString, required = false,
                                 default = nil)
  if valid_775940 != nil:
    section.add "Marker", valid_775940
  var valid_775941 = formData.getOrDefault("Vpc")
  valid_775941 = validateParameter(valid_775941, JBool, required = false, default = nil)
  if valid_775941 != nil:
    section.add "Vpc", valid_775941
  var valid_775942 = formData.getOrDefault("DBInstanceClass")
  valid_775942 = validateParameter(valid_775942, JString, required = false,
                                 default = nil)
  if valid_775942 != nil:
    section.add "DBInstanceClass", valid_775942
  var valid_775943 = formData.getOrDefault("Filters")
  valid_775943 = validateParameter(valid_775943, JArray, required = false,
                                 default = nil)
  if valid_775943 != nil:
    section.add "Filters", valid_775943
  var valid_775944 = formData.getOrDefault("LicenseModel")
  valid_775944 = validateParameter(valid_775944, JString, required = false,
                                 default = nil)
  if valid_775944 != nil:
    section.add "LicenseModel", valid_775944
  var valid_775945 = formData.getOrDefault("MaxRecords")
  valid_775945 = validateParameter(valid_775945, JInt, required = false, default = nil)
  if valid_775945 != nil:
    section.add "MaxRecords", valid_775945
  var valid_775946 = formData.getOrDefault("EngineVersion")
  valid_775946 = validateParameter(valid_775946, JString, required = false,
                                 default = nil)
  if valid_775946 != nil:
    section.add "EngineVersion", valid_775946
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775947: Call_PostDescribeOrderableDBInstanceOptions_775927;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_775947.validator(path, query, header, formData, body)
  let scheme = call_775947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775947.url(scheme.get, call_775947.host, call_775947.base,
                         call_775947.route, valid.getOrDefault("path"))
  result = hook(call_775947, url, valid)

proc call*(call_775948: Call_PostDescribeOrderableDBInstanceOptions_775927;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_775949 = newJObject()
  var formData_775950 = newJObject()
  add(formData_775950, "Engine", newJString(Engine))
  add(formData_775950, "Marker", newJString(Marker))
  add(query_775949, "Action", newJString(Action))
  add(formData_775950, "Vpc", newJBool(Vpc))
  add(formData_775950, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_775950.add "Filters", Filters
  add(formData_775950, "LicenseModel", newJString(LicenseModel))
  add(formData_775950, "MaxRecords", newJInt(MaxRecords))
  add(formData_775950, "EngineVersion", newJString(EngineVersion))
  add(query_775949, "Version", newJString(Version))
  result = call_775948.call(nil, query_775949, nil, formData_775950, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_775927(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_775928, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_775929,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_775904 = ref object of OpenApiRestCall_772581
proc url_GetDescribeOrderableDBInstanceOptions_775906(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeOrderableDBInstanceOptions_775905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_775907 = query.getOrDefault("Engine")
  valid_775907 = validateParameter(valid_775907, JString, required = true,
                                 default = nil)
  if valid_775907 != nil:
    section.add "Engine", valid_775907
  var valid_775908 = query.getOrDefault("MaxRecords")
  valid_775908 = validateParameter(valid_775908, JInt, required = false, default = nil)
  if valid_775908 != nil:
    section.add "MaxRecords", valid_775908
  var valid_775909 = query.getOrDefault("Filters")
  valid_775909 = validateParameter(valid_775909, JArray, required = false,
                                 default = nil)
  if valid_775909 != nil:
    section.add "Filters", valid_775909
  var valid_775910 = query.getOrDefault("LicenseModel")
  valid_775910 = validateParameter(valid_775910, JString, required = false,
                                 default = nil)
  if valid_775910 != nil:
    section.add "LicenseModel", valid_775910
  var valid_775911 = query.getOrDefault("Vpc")
  valid_775911 = validateParameter(valid_775911, JBool, required = false, default = nil)
  if valid_775911 != nil:
    section.add "Vpc", valid_775911
  var valid_775912 = query.getOrDefault("DBInstanceClass")
  valid_775912 = validateParameter(valid_775912, JString, required = false,
                                 default = nil)
  if valid_775912 != nil:
    section.add "DBInstanceClass", valid_775912
  var valid_775913 = query.getOrDefault("Action")
  valid_775913 = validateParameter(valid_775913, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_775913 != nil:
    section.add "Action", valid_775913
  var valid_775914 = query.getOrDefault("Marker")
  valid_775914 = validateParameter(valid_775914, JString, required = false,
                                 default = nil)
  if valid_775914 != nil:
    section.add "Marker", valid_775914
  var valid_775915 = query.getOrDefault("EngineVersion")
  valid_775915 = validateParameter(valid_775915, JString, required = false,
                                 default = nil)
  if valid_775915 != nil:
    section.add "EngineVersion", valid_775915
  var valid_775916 = query.getOrDefault("Version")
  valid_775916 = validateParameter(valid_775916, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775916 != nil:
    section.add "Version", valid_775916
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775917 = header.getOrDefault("X-Amz-Date")
  valid_775917 = validateParameter(valid_775917, JString, required = false,
                                 default = nil)
  if valid_775917 != nil:
    section.add "X-Amz-Date", valid_775917
  var valid_775918 = header.getOrDefault("X-Amz-Security-Token")
  valid_775918 = validateParameter(valid_775918, JString, required = false,
                                 default = nil)
  if valid_775918 != nil:
    section.add "X-Amz-Security-Token", valid_775918
  var valid_775919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775919 = validateParameter(valid_775919, JString, required = false,
                                 default = nil)
  if valid_775919 != nil:
    section.add "X-Amz-Content-Sha256", valid_775919
  var valid_775920 = header.getOrDefault("X-Amz-Algorithm")
  valid_775920 = validateParameter(valid_775920, JString, required = false,
                                 default = nil)
  if valid_775920 != nil:
    section.add "X-Amz-Algorithm", valid_775920
  var valid_775921 = header.getOrDefault("X-Amz-Signature")
  valid_775921 = validateParameter(valid_775921, JString, required = false,
                                 default = nil)
  if valid_775921 != nil:
    section.add "X-Amz-Signature", valid_775921
  var valid_775922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775922 = validateParameter(valid_775922, JString, required = false,
                                 default = nil)
  if valid_775922 != nil:
    section.add "X-Amz-SignedHeaders", valid_775922
  var valid_775923 = header.getOrDefault("X-Amz-Credential")
  valid_775923 = validateParameter(valid_775923, JString, required = false,
                                 default = nil)
  if valid_775923 != nil:
    section.add "X-Amz-Credential", valid_775923
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775924: Call_GetDescribeOrderableDBInstanceOptions_775904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_775924.validator(path, query, header, formData, body)
  let scheme = call_775924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775924.url(scheme.get, call_775924.host, call_775924.base,
                         call_775924.route, valid.getOrDefault("path"))
  result = hook(call_775924, url, valid)

proc call*(call_775925: Call_GetDescribeOrderableDBInstanceOptions_775904;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_775926 = newJObject()
  add(query_775926, "Engine", newJString(Engine))
  add(query_775926, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775926.add "Filters", Filters
  add(query_775926, "LicenseModel", newJString(LicenseModel))
  add(query_775926, "Vpc", newJBool(Vpc))
  add(query_775926, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_775926, "Action", newJString(Action))
  add(query_775926, "Marker", newJString(Marker))
  add(query_775926, "EngineVersion", newJString(EngineVersion))
  add(query_775926, "Version", newJString(Version))
  result = call_775925.call(nil, query_775926, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_775904(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_775905, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_775906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_775970 = ref object of OpenApiRestCall_772581
proc url_PostDescribePendingMaintenanceActions_775972(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribePendingMaintenanceActions_775971(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775973 = query.getOrDefault("Action")
  valid_775973 = validateParameter(valid_775973, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_775973 != nil:
    section.add "Action", valid_775973
  var valid_775974 = query.getOrDefault("Version")
  valid_775974 = validateParameter(valid_775974, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775974 != nil:
    section.add "Version", valid_775974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775975 = header.getOrDefault("X-Amz-Date")
  valid_775975 = validateParameter(valid_775975, JString, required = false,
                                 default = nil)
  if valid_775975 != nil:
    section.add "X-Amz-Date", valid_775975
  var valid_775976 = header.getOrDefault("X-Amz-Security-Token")
  valid_775976 = validateParameter(valid_775976, JString, required = false,
                                 default = nil)
  if valid_775976 != nil:
    section.add "X-Amz-Security-Token", valid_775976
  var valid_775977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775977 = validateParameter(valid_775977, JString, required = false,
                                 default = nil)
  if valid_775977 != nil:
    section.add "X-Amz-Content-Sha256", valid_775977
  var valid_775978 = header.getOrDefault("X-Amz-Algorithm")
  valid_775978 = validateParameter(valid_775978, JString, required = false,
                                 default = nil)
  if valid_775978 != nil:
    section.add "X-Amz-Algorithm", valid_775978
  var valid_775979 = header.getOrDefault("X-Amz-Signature")
  valid_775979 = validateParameter(valid_775979, JString, required = false,
                                 default = nil)
  if valid_775979 != nil:
    section.add "X-Amz-Signature", valid_775979
  var valid_775980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775980 = validateParameter(valid_775980, JString, required = false,
                                 default = nil)
  if valid_775980 != nil:
    section.add "X-Amz-SignedHeaders", valid_775980
  var valid_775981 = header.getOrDefault("X-Amz-Credential")
  valid_775981 = validateParameter(valid_775981, JString, required = false,
                                 default = nil)
  if valid_775981 != nil:
    section.add "X-Amz-Credential", valid_775981
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_775982 = formData.getOrDefault("Marker")
  valid_775982 = validateParameter(valid_775982, JString, required = false,
                                 default = nil)
  if valid_775982 != nil:
    section.add "Marker", valid_775982
  var valid_775983 = formData.getOrDefault("ResourceIdentifier")
  valid_775983 = validateParameter(valid_775983, JString, required = false,
                                 default = nil)
  if valid_775983 != nil:
    section.add "ResourceIdentifier", valid_775983
  var valid_775984 = formData.getOrDefault("Filters")
  valid_775984 = validateParameter(valid_775984, JArray, required = false,
                                 default = nil)
  if valid_775984 != nil:
    section.add "Filters", valid_775984
  var valid_775985 = formData.getOrDefault("MaxRecords")
  valid_775985 = validateParameter(valid_775985, JInt, required = false, default = nil)
  if valid_775985 != nil:
    section.add "MaxRecords", valid_775985
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775986: Call_PostDescribePendingMaintenanceActions_775970;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_775986.validator(path, query, header, formData, body)
  let scheme = call_775986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775986.url(scheme.get, call_775986.host, call_775986.base,
                         call_775986.route, valid.getOrDefault("path"))
  result = hook(call_775986, url, valid)

proc call*(call_775987: Call_PostDescribePendingMaintenanceActions_775970;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_775988 = newJObject()
  var formData_775989 = newJObject()
  add(formData_775989, "Marker", newJString(Marker))
  add(query_775988, "Action", newJString(Action))
  add(formData_775989, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_775989.add "Filters", Filters
  add(formData_775989, "MaxRecords", newJInt(MaxRecords))
  add(query_775988, "Version", newJString(Version))
  result = call_775987.call(nil, query_775988, nil, formData_775989, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_775970(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_775971, base: "/",
    url: url_PostDescribePendingMaintenanceActions_775972,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_775951 = ref object of OpenApiRestCall_772581
proc url_GetDescribePendingMaintenanceActions_775953(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribePendingMaintenanceActions_775952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_775954 = query.getOrDefault("MaxRecords")
  valid_775954 = validateParameter(valid_775954, JInt, required = false, default = nil)
  if valid_775954 != nil:
    section.add "MaxRecords", valid_775954
  var valid_775955 = query.getOrDefault("Filters")
  valid_775955 = validateParameter(valid_775955, JArray, required = false,
                                 default = nil)
  if valid_775955 != nil:
    section.add "Filters", valid_775955
  var valid_775956 = query.getOrDefault("ResourceIdentifier")
  valid_775956 = validateParameter(valid_775956, JString, required = false,
                                 default = nil)
  if valid_775956 != nil:
    section.add "ResourceIdentifier", valid_775956
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775957 = query.getOrDefault("Action")
  valid_775957 = validateParameter(valid_775957, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_775957 != nil:
    section.add "Action", valid_775957
  var valid_775958 = query.getOrDefault("Marker")
  valid_775958 = validateParameter(valid_775958, JString, required = false,
                                 default = nil)
  if valid_775958 != nil:
    section.add "Marker", valid_775958
  var valid_775959 = query.getOrDefault("Version")
  valid_775959 = validateParameter(valid_775959, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_775959 != nil:
    section.add "Version", valid_775959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775960 = header.getOrDefault("X-Amz-Date")
  valid_775960 = validateParameter(valid_775960, JString, required = false,
                                 default = nil)
  if valid_775960 != nil:
    section.add "X-Amz-Date", valid_775960
  var valid_775961 = header.getOrDefault("X-Amz-Security-Token")
  valid_775961 = validateParameter(valid_775961, JString, required = false,
                                 default = nil)
  if valid_775961 != nil:
    section.add "X-Amz-Security-Token", valid_775961
  var valid_775962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775962 = validateParameter(valid_775962, JString, required = false,
                                 default = nil)
  if valid_775962 != nil:
    section.add "X-Amz-Content-Sha256", valid_775962
  var valid_775963 = header.getOrDefault("X-Amz-Algorithm")
  valid_775963 = validateParameter(valid_775963, JString, required = false,
                                 default = nil)
  if valid_775963 != nil:
    section.add "X-Amz-Algorithm", valid_775963
  var valid_775964 = header.getOrDefault("X-Amz-Signature")
  valid_775964 = validateParameter(valid_775964, JString, required = false,
                                 default = nil)
  if valid_775964 != nil:
    section.add "X-Amz-Signature", valid_775964
  var valid_775965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775965 = validateParameter(valid_775965, JString, required = false,
                                 default = nil)
  if valid_775965 != nil:
    section.add "X-Amz-SignedHeaders", valid_775965
  var valid_775966 = header.getOrDefault("X-Amz-Credential")
  valid_775966 = validateParameter(valid_775966, JString, required = false,
                                 default = nil)
  if valid_775966 != nil:
    section.add "X-Amz-Credential", valid_775966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775967: Call_GetDescribePendingMaintenanceActions_775951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_775967.validator(path, query, header, formData, body)
  let scheme = call_775967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775967.url(scheme.get, call_775967.host, call_775967.base,
                         call_775967.route, valid.getOrDefault("path"))
  result = hook(call_775967, url, valid)

proc call*(call_775968: Call_GetDescribePendingMaintenanceActions_775951;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_775969 = newJObject()
  add(query_775969, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_775969.add "Filters", Filters
  add(query_775969, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_775969, "Action", newJString(Action))
  add(query_775969, "Marker", newJString(Marker))
  add(query_775969, "Version", newJString(Version))
  result = call_775968.call(nil, query_775969, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_775951(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_775952, base: "/",
    url: url_GetDescribePendingMaintenanceActions_775953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_776015 = ref object of OpenApiRestCall_772581
proc url_PostDescribeReservedDBInstances_776017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReservedDBInstances_776016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776018 = query.getOrDefault("Action")
  valid_776018 = validateParameter(valid_776018, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_776018 != nil:
    section.add "Action", valid_776018
  var valid_776019 = query.getOrDefault("Version")
  valid_776019 = validateParameter(valid_776019, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776019 != nil:
    section.add "Version", valid_776019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776020 = header.getOrDefault("X-Amz-Date")
  valid_776020 = validateParameter(valid_776020, JString, required = false,
                                 default = nil)
  if valid_776020 != nil:
    section.add "X-Amz-Date", valid_776020
  var valid_776021 = header.getOrDefault("X-Amz-Security-Token")
  valid_776021 = validateParameter(valid_776021, JString, required = false,
                                 default = nil)
  if valid_776021 != nil:
    section.add "X-Amz-Security-Token", valid_776021
  var valid_776022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776022 = validateParameter(valid_776022, JString, required = false,
                                 default = nil)
  if valid_776022 != nil:
    section.add "X-Amz-Content-Sha256", valid_776022
  var valid_776023 = header.getOrDefault("X-Amz-Algorithm")
  valid_776023 = validateParameter(valid_776023, JString, required = false,
                                 default = nil)
  if valid_776023 != nil:
    section.add "X-Amz-Algorithm", valid_776023
  var valid_776024 = header.getOrDefault("X-Amz-Signature")
  valid_776024 = validateParameter(valid_776024, JString, required = false,
                                 default = nil)
  if valid_776024 != nil:
    section.add "X-Amz-Signature", valid_776024
  var valid_776025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776025 = validateParameter(valid_776025, JString, required = false,
                                 default = nil)
  if valid_776025 != nil:
    section.add "X-Amz-SignedHeaders", valid_776025
  var valid_776026 = header.getOrDefault("X-Amz-Credential")
  valid_776026 = validateParameter(valid_776026, JString, required = false,
                                 default = nil)
  if valid_776026 != nil:
    section.add "X-Amz-Credential", valid_776026
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_776027 = formData.getOrDefault("OfferingType")
  valid_776027 = validateParameter(valid_776027, JString, required = false,
                                 default = nil)
  if valid_776027 != nil:
    section.add "OfferingType", valid_776027
  var valid_776028 = formData.getOrDefault("ReservedDBInstanceId")
  valid_776028 = validateParameter(valid_776028, JString, required = false,
                                 default = nil)
  if valid_776028 != nil:
    section.add "ReservedDBInstanceId", valid_776028
  var valid_776029 = formData.getOrDefault("Marker")
  valid_776029 = validateParameter(valid_776029, JString, required = false,
                                 default = nil)
  if valid_776029 != nil:
    section.add "Marker", valid_776029
  var valid_776030 = formData.getOrDefault("MultiAZ")
  valid_776030 = validateParameter(valid_776030, JBool, required = false, default = nil)
  if valid_776030 != nil:
    section.add "MultiAZ", valid_776030
  var valid_776031 = formData.getOrDefault("Duration")
  valid_776031 = validateParameter(valid_776031, JString, required = false,
                                 default = nil)
  if valid_776031 != nil:
    section.add "Duration", valid_776031
  var valid_776032 = formData.getOrDefault("DBInstanceClass")
  valid_776032 = validateParameter(valid_776032, JString, required = false,
                                 default = nil)
  if valid_776032 != nil:
    section.add "DBInstanceClass", valid_776032
  var valid_776033 = formData.getOrDefault("Filters")
  valid_776033 = validateParameter(valid_776033, JArray, required = false,
                                 default = nil)
  if valid_776033 != nil:
    section.add "Filters", valid_776033
  var valid_776034 = formData.getOrDefault("ProductDescription")
  valid_776034 = validateParameter(valid_776034, JString, required = false,
                                 default = nil)
  if valid_776034 != nil:
    section.add "ProductDescription", valid_776034
  var valid_776035 = formData.getOrDefault("MaxRecords")
  valid_776035 = validateParameter(valid_776035, JInt, required = false, default = nil)
  if valid_776035 != nil:
    section.add "MaxRecords", valid_776035
  var valid_776036 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_776036 = validateParameter(valid_776036, JString, required = false,
                                 default = nil)
  if valid_776036 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_776036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776037: Call_PostDescribeReservedDBInstances_776015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_776037.validator(path, query, header, formData, body)
  let scheme = call_776037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776037.url(scheme.get, call_776037.host, call_776037.base,
                         call_776037.route, valid.getOrDefault("path"))
  result = hook(call_776037, url, valid)

proc call*(call_776038: Call_PostDescribeReservedDBInstances_776015;
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstances"; Duration: string = "";
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_776039 = newJObject()
  var formData_776040 = newJObject()
  add(formData_776040, "OfferingType", newJString(OfferingType))
  add(formData_776040, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_776040, "Marker", newJString(Marker))
  add(formData_776040, "MultiAZ", newJBool(MultiAZ))
  add(query_776039, "Action", newJString(Action))
  add(formData_776040, "Duration", newJString(Duration))
  add(formData_776040, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_776040.add "Filters", Filters
  add(formData_776040, "ProductDescription", newJString(ProductDescription))
  add(formData_776040, "MaxRecords", newJInt(MaxRecords))
  add(formData_776040, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776039, "Version", newJString(Version))
  result = call_776038.call(nil, query_776039, nil, formData_776040, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_776015(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_776016, base: "/",
    url: url_PostDescribeReservedDBInstances_776017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_775990 = ref object of OpenApiRestCall_772581
proc url_GetDescribeReservedDBInstances_775992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReservedDBInstances_775991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_775993 = query.getOrDefault("ProductDescription")
  valid_775993 = validateParameter(valid_775993, JString, required = false,
                                 default = nil)
  if valid_775993 != nil:
    section.add "ProductDescription", valid_775993
  var valid_775994 = query.getOrDefault("MaxRecords")
  valid_775994 = validateParameter(valid_775994, JInt, required = false, default = nil)
  if valid_775994 != nil:
    section.add "MaxRecords", valid_775994
  var valid_775995 = query.getOrDefault("OfferingType")
  valid_775995 = validateParameter(valid_775995, JString, required = false,
                                 default = nil)
  if valid_775995 != nil:
    section.add "OfferingType", valid_775995
  var valid_775996 = query.getOrDefault("Filters")
  valid_775996 = validateParameter(valid_775996, JArray, required = false,
                                 default = nil)
  if valid_775996 != nil:
    section.add "Filters", valid_775996
  var valid_775997 = query.getOrDefault("MultiAZ")
  valid_775997 = validateParameter(valid_775997, JBool, required = false, default = nil)
  if valid_775997 != nil:
    section.add "MultiAZ", valid_775997
  var valid_775998 = query.getOrDefault("ReservedDBInstanceId")
  valid_775998 = validateParameter(valid_775998, JString, required = false,
                                 default = nil)
  if valid_775998 != nil:
    section.add "ReservedDBInstanceId", valid_775998
  var valid_775999 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_775999 = validateParameter(valid_775999, JString, required = false,
                                 default = nil)
  if valid_775999 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_775999
  var valid_776000 = query.getOrDefault("DBInstanceClass")
  valid_776000 = validateParameter(valid_776000, JString, required = false,
                                 default = nil)
  if valid_776000 != nil:
    section.add "DBInstanceClass", valid_776000
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776001 = query.getOrDefault("Action")
  valid_776001 = validateParameter(valid_776001, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_776001 != nil:
    section.add "Action", valid_776001
  var valid_776002 = query.getOrDefault("Marker")
  valid_776002 = validateParameter(valid_776002, JString, required = false,
                                 default = nil)
  if valid_776002 != nil:
    section.add "Marker", valid_776002
  var valid_776003 = query.getOrDefault("Duration")
  valid_776003 = validateParameter(valid_776003, JString, required = false,
                                 default = nil)
  if valid_776003 != nil:
    section.add "Duration", valid_776003
  var valid_776004 = query.getOrDefault("Version")
  valid_776004 = validateParameter(valid_776004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776004 != nil:
    section.add "Version", valid_776004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776005 = header.getOrDefault("X-Amz-Date")
  valid_776005 = validateParameter(valid_776005, JString, required = false,
                                 default = nil)
  if valid_776005 != nil:
    section.add "X-Amz-Date", valid_776005
  var valid_776006 = header.getOrDefault("X-Amz-Security-Token")
  valid_776006 = validateParameter(valid_776006, JString, required = false,
                                 default = nil)
  if valid_776006 != nil:
    section.add "X-Amz-Security-Token", valid_776006
  var valid_776007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776007 = validateParameter(valid_776007, JString, required = false,
                                 default = nil)
  if valid_776007 != nil:
    section.add "X-Amz-Content-Sha256", valid_776007
  var valid_776008 = header.getOrDefault("X-Amz-Algorithm")
  valid_776008 = validateParameter(valid_776008, JString, required = false,
                                 default = nil)
  if valid_776008 != nil:
    section.add "X-Amz-Algorithm", valid_776008
  var valid_776009 = header.getOrDefault("X-Amz-Signature")
  valid_776009 = validateParameter(valid_776009, JString, required = false,
                                 default = nil)
  if valid_776009 != nil:
    section.add "X-Amz-Signature", valid_776009
  var valid_776010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776010 = validateParameter(valid_776010, JString, required = false,
                                 default = nil)
  if valid_776010 != nil:
    section.add "X-Amz-SignedHeaders", valid_776010
  var valid_776011 = header.getOrDefault("X-Amz-Credential")
  valid_776011 = validateParameter(valid_776011, JString, required = false,
                                 default = nil)
  if valid_776011 != nil:
    section.add "X-Amz-Credential", valid_776011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776012: Call_GetDescribeReservedDBInstances_775990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_776012.validator(path, query, header, formData, body)
  let scheme = call_776012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776012.url(scheme.get, call_776012.host, call_776012.base,
                         call_776012.route, valid.getOrDefault("path"))
  result = hook(call_776012, url, valid)

proc call*(call_776013: Call_GetDescribeReservedDBInstances_775990;
          ProductDescription: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstanceId: string = "";
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstances"; Marker: string = "";
          Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_776014 = newJObject()
  add(query_776014, "ProductDescription", newJString(ProductDescription))
  add(query_776014, "MaxRecords", newJInt(MaxRecords))
  add(query_776014, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_776014.add "Filters", Filters
  add(query_776014, "MultiAZ", newJBool(MultiAZ))
  add(query_776014, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_776014, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776014, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_776014, "Action", newJString(Action))
  add(query_776014, "Marker", newJString(Marker))
  add(query_776014, "Duration", newJString(Duration))
  add(query_776014, "Version", newJString(Version))
  result = call_776013.call(nil, query_776014, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_775990(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_775991, base: "/",
    url: url_GetDescribeReservedDBInstances_775992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_776065 = ref object of OpenApiRestCall_772581
proc url_PostDescribeReservedDBInstancesOfferings_776067(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReservedDBInstancesOfferings_776066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776068 = query.getOrDefault("Action")
  valid_776068 = validateParameter(valid_776068, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_776068 != nil:
    section.add "Action", valid_776068
  var valid_776069 = query.getOrDefault("Version")
  valid_776069 = validateParameter(valid_776069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776069 != nil:
    section.add "Version", valid_776069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776070 = header.getOrDefault("X-Amz-Date")
  valid_776070 = validateParameter(valid_776070, JString, required = false,
                                 default = nil)
  if valid_776070 != nil:
    section.add "X-Amz-Date", valid_776070
  var valid_776071 = header.getOrDefault("X-Amz-Security-Token")
  valid_776071 = validateParameter(valid_776071, JString, required = false,
                                 default = nil)
  if valid_776071 != nil:
    section.add "X-Amz-Security-Token", valid_776071
  var valid_776072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776072 = validateParameter(valid_776072, JString, required = false,
                                 default = nil)
  if valid_776072 != nil:
    section.add "X-Amz-Content-Sha256", valid_776072
  var valid_776073 = header.getOrDefault("X-Amz-Algorithm")
  valid_776073 = validateParameter(valid_776073, JString, required = false,
                                 default = nil)
  if valid_776073 != nil:
    section.add "X-Amz-Algorithm", valid_776073
  var valid_776074 = header.getOrDefault("X-Amz-Signature")
  valid_776074 = validateParameter(valid_776074, JString, required = false,
                                 default = nil)
  if valid_776074 != nil:
    section.add "X-Amz-Signature", valid_776074
  var valid_776075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776075 = validateParameter(valid_776075, JString, required = false,
                                 default = nil)
  if valid_776075 != nil:
    section.add "X-Amz-SignedHeaders", valid_776075
  var valid_776076 = header.getOrDefault("X-Amz-Credential")
  valid_776076 = validateParameter(valid_776076, JString, required = false,
                                 default = nil)
  if valid_776076 != nil:
    section.add "X-Amz-Credential", valid_776076
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_776077 = formData.getOrDefault("OfferingType")
  valid_776077 = validateParameter(valid_776077, JString, required = false,
                                 default = nil)
  if valid_776077 != nil:
    section.add "OfferingType", valid_776077
  var valid_776078 = formData.getOrDefault("Marker")
  valid_776078 = validateParameter(valid_776078, JString, required = false,
                                 default = nil)
  if valid_776078 != nil:
    section.add "Marker", valid_776078
  var valid_776079 = formData.getOrDefault("MultiAZ")
  valid_776079 = validateParameter(valid_776079, JBool, required = false, default = nil)
  if valid_776079 != nil:
    section.add "MultiAZ", valid_776079
  var valid_776080 = formData.getOrDefault("Duration")
  valid_776080 = validateParameter(valid_776080, JString, required = false,
                                 default = nil)
  if valid_776080 != nil:
    section.add "Duration", valid_776080
  var valid_776081 = formData.getOrDefault("DBInstanceClass")
  valid_776081 = validateParameter(valid_776081, JString, required = false,
                                 default = nil)
  if valid_776081 != nil:
    section.add "DBInstanceClass", valid_776081
  var valid_776082 = formData.getOrDefault("Filters")
  valid_776082 = validateParameter(valid_776082, JArray, required = false,
                                 default = nil)
  if valid_776082 != nil:
    section.add "Filters", valid_776082
  var valid_776083 = formData.getOrDefault("ProductDescription")
  valid_776083 = validateParameter(valid_776083, JString, required = false,
                                 default = nil)
  if valid_776083 != nil:
    section.add "ProductDescription", valid_776083
  var valid_776084 = formData.getOrDefault("MaxRecords")
  valid_776084 = validateParameter(valid_776084, JInt, required = false, default = nil)
  if valid_776084 != nil:
    section.add "MaxRecords", valid_776084
  var valid_776085 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_776085 = validateParameter(valid_776085, JString, required = false,
                                 default = nil)
  if valid_776085 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_776085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776086: Call_PostDescribeReservedDBInstancesOfferings_776065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_776086.validator(path, query, header, formData, body)
  let scheme = call_776086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776086.url(scheme.get, call_776086.host, call_776086.base,
                         call_776086.route, valid.getOrDefault("path"))
  result = hook(call_776086, url, valid)

proc call*(call_776087: Call_PostDescribeReservedDBInstancesOfferings_776065;
          OfferingType: string = ""; Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstancesOfferings";
          Duration: string = ""; DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_776088 = newJObject()
  var formData_776089 = newJObject()
  add(formData_776089, "OfferingType", newJString(OfferingType))
  add(formData_776089, "Marker", newJString(Marker))
  add(formData_776089, "MultiAZ", newJBool(MultiAZ))
  add(query_776088, "Action", newJString(Action))
  add(formData_776089, "Duration", newJString(Duration))
  add(formData_776089, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_776089.add "Filters", Filters
  add(formData_776089, "ProductDescription", newJString(ProductDescription))
  add(formData_776089, "MaxRecords", newJInt(MaxRecords))
  add(formData_776089, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776088, "Version", newJString(Version))
  result = call_776087.call(nil, query_776088, nil, formData_776089, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_776065(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_776066,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_776067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_776041 = ref object of OpenApiRestCall_772581
proc url_GetDescribeReservedDBInstancesOfferings_776043(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReservedDBInstancesOfferings_776042(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776044 = query.getOrDefault("ProductDescription")
  valid_776044 = validateParameter(valid_776044, JString, required = false,
                                 default = nil)
  if valid_776044 != nil:
    section.add "ProductDescription", valid_776044
  var valid_776045 = query.getOrDefault("MaxRecords")
  valid_776045 = validateParameter(valid_776045, JInt, required = false, default = nil)
  if valid_776045 != nil:
    section.add "MaxRecords", valid_776045
  var valid_776046 = query.getOrDefault("OfferingType")
  valid_776046 = validateParameter(valid_776046, JString, required = false,
                                 default = nil)
  if valid_776046 != nil:
    section.add "OfferingType", valid_776046
  var valid_776047 = query.getOrDefault("Filters")
  valid_776047 = validateParameter(valid_776047, JArray, required = false,
                                 default = nil)
  if valid_776047 != nil:
    section.add "Filters", valid_776047
  var valid_776048 = query.getOrDefault("MultiAZ")
  valid_776048 = validateParameter(valid_776048, JBool, required = false, default = nil)
  if valid_776048 != nil:
    section.add "MultiAZ", valid_776048
  var valid_776049 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_776049 = validateParameter(valid_776049, JString, required = false,
                                 default = nil)
  if valid_776049 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_776049
  var valid_776050 = query.getOrDefault("DBInstanceClass")
  valid_776050 = validateParameter(valid_776050, JString, required = false,
                                 default = nil)
  if valid_776050 != nil:
    section.add "DBInstanceClass", valid_776050
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776051 = query.getOrDefault("Action")
  valid_776051 = validateParameter(valid_776051, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_776051 != nil:
    section.add "Action", valid_776051
  var valid_776052 = query.getOrDefault("Marker")
  valid_776052 = validateParameter(valid_776052, JString, required = false,
                                 default = nil)
  if valid_776052 != nil:
    section.add "Marker", valid_776052
  var valid_776053 = query.getOrDefault("Duration")
  valid_776053 = validateParameter(valid_776053, JString, required = false,
                                 default = nil)
  if valid_776053 != nil:
    section.add "Duration", valid_776053
  var valid_776054 = query.getOrDefault("Version")
  valid_776054 = validateParameter(valid_776054, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776054 != nil:
    section.add "Version", valid_776054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776055 = header.getOrDefault("X-Amz-Date")
  valid_776055 = validateParameter(valid_776055, JString, required = false,
                                 default = nil)
  if valid_776055 != nil:
    section.add "X-Amz-Date", valid_776055
  var valid_776056 = header.getOrDefault("X-Amz-Security-Token")
  valid_776056 = validateParameter(valid_776056, JString, required = false,
                                 default = nil)
  if valid_776056 != nil:
    section.add "X-Amz-Security-Token", valid_776056
  var valid_776057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776057 = validateParameter(valid_776057, JString, required = false,
                                 default = nil)
  if valid_776057 != nil:
    section.add "X-Amz-Content-Sha256", valid_776057
  var valid_776058 = header.getOrDefault("X-Amz-Algorithm")
  valid_776058 = validateParameter(valid_776058, JString, required = false,
                                 default = nil)
  if valid_776058 != nil:
    section.add "X-Amz-Algorithm", valid_776058
  var valid_776059 = header.getOrDefault("X-Amz-Signature")
  valid_776059 = validateParameter(valid_776059, JString, required = false,
                                 default = nil)
  if valid_776059 != nil:
    section.add "X-Amz-Signature", valid_776059
  var valid_776060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776060 = validateParameter(valid_776060, JString, required = false,
                                 default = nil)
  if valid_776060 != nil:
    section.add "X-Amz-SignedHeaders", valid_776060
  var valid_776061 = header.getOrDefault("X-Amz-Credential")
  valid_776061 = validateParameter(valid_776061, JString, required = false,
                                 default = nil)
  if valid_776061 != nil:
    section.add "X-Amz-Credential", valid_776061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776062: Call_GetDescribeReservedDBInstancesOfferings_776041;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_776062.validator(path, query, header, formData, body)
  let scheme = call_776062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776062.url(scheme.get, call_776062.host, call_776062.base,
                         call_776062.route, valid.getOrDefault("path"))
  result = hook(call_776062, url, valid)

proc call*(call_776063: Call_GetDescribeReservedDBInstancesOfferings_776041;
          ProductDescription: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Marker: string = ""; Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_776064 = newJObject()
  add(query_776064, "ProductDescription", newJString(ProductDescription))
  add(query_776064, "MaxRecords", newJInt(MaxRecords))
  add(query_776064, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_776064.add "Filters", Filters
  add(query_776064, "MultiAZ", newJBool(MultiAZ))
  add(query_776064, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776064, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_776064, "Action", newJString(Action))
  add(query_776064, "Marker", newJString(Marker))
  add(query_776064, "Duration", newJString(Duration))
  add(query_776064, "Version", newJString(Version))
  result = call_776063.call(nil, query_776064, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_776041(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_776042, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_776043,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_776109 = ref object of OpenApiRestCall_772581
proc url_PostDescribeSourceRegions_776111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeSourceRegions_776110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776112 = query.getOrDefault("Action")
  valid_776112 = validateParameter(valid_776112, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_776112 != nil:
    section.add "Action", valid_776112
  var valid_776113 = query.getOrDefault("Version")
  valid_776113 = validateParameter(valid_776113, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776113 != nil:
    section.add "Version", valid_776113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776114 = header.getOrDefault("X-Amz-Date")
  valid_776114 = validateParameter(valid_776114, JString, required = false,
                                 default = nil)
  if valid_776114 != nil:
    section.add "X-Amz-Date", valid_776114
  var valid_776115 = header.getOrDefault("X-Amz-Security-Token")
  valid_776115 = validateParameter(valid_776115, JString, required = false,
                                 default = nil)
  if valid_776115 != nil:
    section.add "X-Amz-Security-Token", valid_776115
  var valid_776116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776116 = validateParameter(valid_776116, JString, required = false,
                                 default = nil)
  if valid_776116 != nil:
    section.add "X-Amz-Content-Sha256", valid_776116
  var valid_776117 = header.getOrDefault("X-Amz-Algorithm")
  valid_776117 = validateParameter(valid_776117, JString, required = false,
                                 default = nil)
  if valid_776117 != nil:
    section.add "X-Amz-Algorithm", valid_776117
  var valid_776118 = header.getOrDefault("X-Amz-Signature")
  valid_776118 = validateParameter(valid_776118, JString, required = false,
                                 default = nil)
  if valid_776118 != nil:
    section.add "X-Amz-Signature", valid_776118
  var valid_776119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776119 = validateParameter(valid_776119, JString, required = false,
                                 default = nil)
  if valid_776119 != nil:
    section.add "X-Amz-SignedHeaders", valid_776119
  var valid_776120 = header.getOrDefault("X-Amz-Credential")
  valid_776120 = validateParameter(valid_776120, JString, required = false,
                                 default = nil)
  if valid_776120 != nil:
    section.add "X-Amz-Credential", valid_776120
  result.add "header", section
  ## parameters in `formData` object:
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_776121 = formData.getOrDefault("RegionName")
  valid_776121 = validateParameter(valid_776121, JString, required = false,
                                 default = nil)
  if valid_776121 != nil:
    section.add "RegionName", valid_776121
  var valid_776122 = formData.getOrDefault("Marker")
  valid_776122 = validateParameter(valid_776122, JString, required = false,
                                 default = nil)
  if valid_776122 != nil:
    section.add "Marker", valid_776122
  var valid_776123 = formData.getOrDefault("Filters")
  valid_776123 = validateParameter(valid_776123, JArray, required = false,
                                 default = nil)
  if valid_776123 != nil:
    section.add "Filters", valid_776123
  var valid_776124 = formData.getOrDefault("MaxRecords")
  valid_776124 = validateParameter(valid_776124, JInt, required = false, default = nil)
  if valid_776124 != nil:
    section.add "MaxRecords", valid_776124
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776125: Call_PostDescribeSourceRegions_776109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_776125.validator(path, query, header, formData, body)
  let scheme = call_776125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776125.url(scheme.get, call_776125.host, call_776125.base,
                         call_776125.route, valid.getOrDefault("path"))
  result = hook(call_776125, url, valid)

proc call*(call_776126: Call_PostDescribeSourceRegions_776109;
          RegionName: string = ""; Marker: string = "";
          Action: string = "DescribeSourceRegions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_776127 = newJObject()
  var formData_776128 = newJObject()
  add(formData_776128, "RegionName", newJString(RegionName))
  add(formData_776128, "Marker", newJString(Marker))
  add(query_776127, "Action", newJString(Action))
  if Filters != nil:
    formData_776128.add "Filters", Filters
  add(formData_776128, "MaxRecords", newJInt(MaxRecords))
  add(query_776127, "Version", newJString(Version))
  result = call_776126.call(nil, query_776127, nil, formData_776128, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_776109(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_776110, base: "/",
    url: url_PostDescribeSourceRegions_776111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_776090 = ref object of OpenApiRestCall_772581
proc url_GetDescribeSourceRegions_776092(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeSourceRegions_776091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_776093 = query.getOrDefault("MaxRecords")
  valid_776093 = validateParameter(valid_776093, JInt, required = false, default = nil)
  if valid_776093 != nil:
    section.add "MaxRecords", valid_776093
  var valid_776094 = query.getOrDefault("Filters")
  valid_776094 = validateParameter(valid_776094, JArray, required = false,
                                 default = nil)
  if valid_776094 != nil:
    section.add "Filters", valid_776094
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776095 = query.getOrDefault("Action")
  valid_776095 = validateParameter(valid_776095, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_776095 != nil:
    section.add "Action", valid_776095
  var valid_776096 = query.getOrDefault("Marker")
  valid_776096 = validateParameter(valid_776096, JString, required = false,
                                 default = nil)
  if valid_776096 != nil:
    section.add "Marker", valid_776096
  var valid_776097 = query.getOrDefault("Version")
  valid_776097 = validateParameter(valid_776097, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776097 != nil:
    section.add "Version", valid_776097
  var valid_776098 = query.getOrDefault("RegionName")
  valid_776098 = validateParameter(valid_776098, JString, required = false,
                                 default = nil)
  if valid_776098 != nil:
    section.add "RegionName", valid_776098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776099 = header.getOrDefault("X-Amz-Date")
  valid_776099 = validateParameter(valid_776099, JString, required = false,
                                 default = nil)
  if valid_776099 != nil:
    section.add "X-Amz-Date", valid_776099
  var valid_776100 = header.getOrDefault("X-Amz-Security-Token")
  valid_776100 = validateParameter(valid_776100, JString, required = false,
                                 default = nil)
  if valid_776100 != nil:
    section.add "X-Amz-Security-Token", valid_776100
  var valid_776101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776101 = validateParameter(valid_776101, JString, required = false,
                                 default = nil)
  if valid_776101 != nil:
    section.add "X-Amz-Content-Sha256", valid_776101
  var valid_776102 = header.getOrDefault("X-Amz-Algorithm")
  valid_776102 = validateParameter(valid_776102, JString, required = false,
                                 default = nil)
  if valid_776102 != nil:
    section.add "X-Amz-Algorithm", valid_776102
  var valid_776103 = header.getOrDefault("X-Amz-Signature")
  valid_776103 = validateParameter(valid_776103, JString, required = false,
                                 default = nil)
  if valid_776103 != nil:
    section.add "X-Amz-Signature", valid_776103
  var valid_776104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776104 = validateParameter(valid_776104, JString, required = false,
                                 default = nil)
  if valid_776104 != nil:
    section.add "X-Amz-SignedHeaders", valid_776104
  var valid_776105 = header.getOrDefault("X-Amz-Credential")
  valid_776105 = validateParameter(valid_776105, JString, required = false,
                                 default = nil)
  if valid_776105 != nil:
    section.add "X-Amz-Credential", valid_776105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776106: Call_GetDescribeSourceRegions_776090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_776106.validator(path, query, header, formData, body)
  let scheme = call_776106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776106.url(scheme.get, call_776106.host, call_776106.base,
                         call_776106.route, valid.getOrDefault("path"))
  result = hook(call_776106, url, valid)

proc call*(call_776107: Call_GetDescribeSourceRegions_776090; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeSourceRegions";
          Marker: string = ""; Version: string = "2014-10-31"; RegionName: string = ""): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_776108 = newJObject()
  add(query_776108, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_776108.add "Filters", Filters
  add(query_776108, "Action", newJString(Action))
  add(query_776108, "Marker", newJString(Marker))
  add(query_776108, "Version", newJString(Version))
  add(query_776108, "RegionName", newJString(RegionName))
  result = call_776107.call(nil, query_776108, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_776090(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_776091, base: "/",
    url: url_GetDescribeSourceRegions_776092, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_776145 = ref object of OpenApiRestCall_772581
proc url_PostDescribeValidDBInstanceModifications_776147(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeValidDBInstanceModifications_776146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776148 = query.getOrDefault("Action")
  valid_776148 = validateParameter(valid_776148, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_776148 != nil:
    section.add "Action", valid_776148
  var valid_776149 = query.getOrDefault("Version")
  valid_776149 = validateParameter(valid_776149, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776149 != nil:
    section.add "Version", valid_776149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776150 = header.getOrDefault("X-Amz-Date")
  valid_776150 = validateParameter(valid_776150, JString, required = false,
                                 default = nil)
  if valid_776150 != nil:
    section.add "X-Amz-Date", valid_776150
  var valid_776151 = header.getOrDefault("X-Amz-Security-Token")
  valid_776151 = validateParameter(valid_776151, JString, required = false,
                                 default = nil)
  if valid_776151 != nil:
    section.add "X-Amz-Security-Token", valid_776151
  var valid_776152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776152 = validateParameter(valid_776152, JString, required = false,
                                 default = nil)
  if valid_776152 != nil:
    section.add "X-Amz-Content-Sha256", valid_776152
  var valid_776153 = header.getOrDefault("X-Amz-Algorithm")
  valid_776153 = validateParameter(valid_776153, JString, required = false,
                                 default = nil)
  if valid_776153 != nil:
    section.add "X-Amz-Algorithm", valid_776153
  var valid_776154 = header.getOrDefault("X-Amz-Signature")
  valid_776154 = validateParameter(valid_776154, JString, required = false,
                                 default = nil)
  if valid_776154 != nil:
    section.add "X-Amz-Signature", valid_776154
  var valid_776155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776155 = validateParameter(valid_776155, JString, required = false,
                                 default = nil)
  if valid_776155 != nil:
    section.add "X-Amz-SignedHeaders", valid_776155
  var valid_776156 = header.getOrDefault("X-Amz-Credential")
  valid_776156 = validateParameter(valid_776156, JString, required = false,
                                 default = nil)
  if valid_776156 != nil:
    section.add "X-Amz-Credential", valid_776156
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_776157 = formData.getOrDefault("DBInstanceIdentifier")
  valid_776157 = validateParameter(valid_776157, JString, required = true,
                                 default = nil)
  if valid_776157 != nil:
    section.add "DBInstanceIdentifier", valid_776157
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776158: Call_PostDescribeValidDBInstanceModifications_776145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_776158.validator(path, query, header, formData, body)
  let scheme = call_776158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776158.url(scheme.get, call_776158.host, call_776158.base,
                         call_776158.route, valid.getOrDefault("path"))
  result = hook(call_776158, url, valid)

proc call*(call_776159: Call_PostDescribeValidDBInstanceModifications_776145;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776160 = newJObject()
  var formData_776161 = newJObject()
  add(formData_776161, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_776160, "Action", newJString(Action))
  add(query_776160, "Version", newJString(Version))
  result = call_776159.call(nil, query_776160, nil, formData_776161, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_776145(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_776146,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_776147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_776129 = ref object of OpenApiRestCall_772581
proc url_GetDescribeValidDBInstanceModifications_776131(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeValidDBInstanceModifications_776130(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776132 = query.getOrDefault("Action")
  valid_776132 = validateParameter(valid_776132, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_776132 != nil:
    section.add "Action", valid_776132
  var valid_776133 = query.getOrDefault("Version")
  valid_776133 = validateParameter(valid_776133, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776133 != nil:
    section.add "Version", valid_776133
  var valid_776134 = query.getOrDefault("DBInstanceIdentifier")
  valid_776134 = validateParameter(valid_776134, JString, required = true,
                                 default = nil)
  if valid_776134 != nil:
    section.add "DBInstanceIdentifier", valid_776134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776135 = header.getOrDefault("X-Amz-Date")
  valid_776135 = validateParameter(valid_776135, JString, required = false,
                                 default = nil)
  if valid_776135 != nil:
    section.add "X-Amz-Date", valid_776135
  var valid_776136 = header.getOrDefault("X-Amz-Security-Token")
  valid_776136 = validateParameter(valid_776136, JString, required = false,
                                 default = nil)
  if valid_776136 != nil:
    section.add "X-Amz-Security-Token", valid_776136
  var valid_776137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776137 = validateParameter(valid_776137, JString, required = false,
                                 default = nil)
  if valid_776137 != nil:
    section.add "X-Amz-Content-Sha256", valid_776137
  var valid_776138 = header.getOrDefault("X-Amz-Algorithm")
  valid_776138 = validateParameter(valid_776138, JString, required = false,
                                 default = nil)
  if valid_776138 != nil:
    section.add "X-Amz-Algorithm", valid_776138
  var valid_776139 = header.getOrDefault("X-Amz-Signature")
  valid_776139 = validateParameter(valid_776139, JString, required = false,
                                 default = nil)
  if valid_776139 != nil:
    section.add "X-Amz-Signature", valid_776139
  var valid_776140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776140 = validateParameter(valid_776140, JString, required = false,
                                 default = nil)
  if valid_776140 != nil:
    section.add "X-Amz-SignedHeaders", valid_776140
  var valid_776141 = header.getOrDefault("X-Amz-Credential")
  valid_776141 = validateParameter(valid_776141, JString, required = false,
                                 default = nil)
  if valid_776141 != nil:
    section.add "X-Amz-Credential", valid_776141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776142: Call_GetDescribeValidDBInstanceModifications_776129;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_776142.validator(path, query, header, formData, body)
  let scheme = call_776142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776142.url(scheme.get, call_776142.host, call_776142.base,
                         call_776142.route, valid.getOrDefault("path"))
  result = hook(call_776142, url, valid)

proc call*(call_776143: Call_GetDescribeValidDBInstanceModifications_776129;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  var query_776144 = newJObject()
  add(query_776144, "Action", newJString(Action))
  add(query_776144, "Version", newJString(Version))
  add(query_776144, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_776143.call(nil, query_776144, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_776129(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_776130, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_776131,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_776181 = ref object of OpenApiRestCall_772581
proc url_PostDownloadDBLogFilePortion_776183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDownloadDBLogFilePortion_776182(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776184 = query.getOrDefault("Action")
  valid_776184 = validateParameter(valid_776184, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_776184 != nil:
    section.add "Action", valid_776184
  var valid_776185 = query.getOrDefault("Version")
  valid_776185 = validateParameter(valid_776185, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776185 != nil:
    section.add "Version", valid_776185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776186 = header.getOrDefault("X-Amz-Date")
  valid_776186 = validateParameter(valid_776186, JString, required = false,
                                 default = nil)
  if valid_776186 != nil:
    section.add "X-Amz-Date", valid_776186
  var valid_776187 = header.getOrDefault("X-Amz-Security-Token")
  valid_776187 = validateParameter(valid_776187, JString, required = false,
                                 default = nil)
  if valid_776187 != nil:
    section.add "X-Amz-Security-Token", valid_776187
  var valid_776188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776188 = validateParameter(valid_776188, JString, required = false,
                                 default = nil)
  if valid_776188 != nil:
    section.add "X-Amz-Content-Sha256", valid_776188
  var valid_776189 = header.getOrDefault("X-Amz-Algorithm")
  valid_776189 = validateParameter(valid_776189, JString, required = false,
                                 default = nil)
  if valid_776189 != nil:
    section.add "X-Amz-Algorithm", valid_776189
  var valid_776190 = header.getOrDefault("X-Amz-Signature")
  valid_776190 = validateParameter(valid_776190, JString, required = false,
                                 default = nil)
  if valid_776190 != nil:
    section.add "X-Amz-Signature", valid_776190
  var valid_776191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776191 = validateParameter(valid_776191, JString, required = false,
                                 default = nil)
  if valid_776191 != nil:
    section.add "X-Amz-SignedHeaders", valid_776191
  var valid_776192 = header.getOrDefault("X-Amz-Credential")
  valid_776192 = validateParameter(valid_776192, JString, required = false,
                                 default = nil)
  if valid_776192 != nil:
    section.add "X-Amz-Credential", valid_776192
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  section = newJObject()
  var valid_776193 = formData.getOrDefault("NumberOfLines")
  valid_776193 = validateParameter(valid_776193, JInt, required = false, default = nil)
  if valid_776193 != nil:
    section.add "NumberOfLines", valid_776193
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_776194 = formData.getOrDefault("DBInstanceIdentifier")
  valid_776194 = validateParameter(valid_776194, JString, required = true,
                                 default = nil)
  if valid_776194 != nil:
    section.add "DBInstanceIdentifier", valid_776194
  var valid_776195 = formData.getOrDefault("Marker")
  valid_776195 = validateParameter(valid_776195, JString, required = false,
                                 default = nil)
  if valid_776195 != nil:
    section.add "Marker", valid_776195
  var valid_776196 = formData.getOrDefault("LogFileName")
  valid_776196 = validateParameter(valid_776196, JString, required = true,
                                 default = nil)
  if valid_776196 != nil:
    section.add "LogFileName", valid_776196
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776197: Call_PostDownloadDBLogFilePortion_776181; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_776197.validator(path, query, header, formData, body)
  let scheme = call_776197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776197.url(scheme.get, call_776197.host, call_776197.base,
                         call_776197.route, valid.getOrDefault("path"))
  result = hook(call_776197, url, valid)

proc call*(call_776198: Call_PostDownloadDBLogFilePortion_776181;
          DBInstanceIdentifier: string; LogFileName: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_776199 = newJObject()
  var formData_776200 = newJObject()
  add(formData_776200, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_776200, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_776200, "Marker", newJString(Marker))
  add(query_776199, "Action", newJString(Action))
  add(formData_776200, "LogFileName", newJString(LogFileName))
  add(query_776199, "Version", newJString(Version))
  result = call_776198.call(nil, query_776199, nil, formData_776200, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_776181(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_776182, base: "/",
    url: url_PostDownloadDBLogFilePortion_776183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_776162 = ref object of OpenApiRestCall_772581
proc url_GetDownloadDBLogFilePortion_776164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDownloadDBLogFilePortion_776163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_776165 = query.getOrDefault("NumberOfLines")
  valid_776165 = validateParameter(valid_776165, JInt, required = false, default = nil)
  if valid_776165 != nil:
    section.add "NumberOfLines", valid_776165
  assert query != nil,
        "query argument is necessary due to required `LogFileName` field"
  var valid_776166 = query.getOrDefault("LogFileName")
  valid_776166 = validateParameter(valid_776166, JString, required = true,
                                 default = nil)
  if valid_776166 != nil:
    section.add "LogFileName", valid_776166
  var valid_776167 = query.getOrDefault("Action")
  valid_776167 = validateParameter(valid_776167, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_776167 != nil:
    section.add "Action", valid_776167
  var valid_776168 = query.getOrDefault("Marker")
  valid_776168 = validateParameter(valid_776168, JString, required = false,
                                 default = nil)
  if valid_776168 != nil:
    section.add "Marker", valid_776168
  var valid_776169 = query.getOrDefault("Version")
  valid_776169 = validateParameter(valid_776169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776169 != nil:
    section.add "Version", valid_776169
  var valid_776170 = query.getOrDefault("DBInstanceIdentifier")
  valid_776170 = validateParameter(valid_776170, JString, required = true,
                                 default = nil)
  if valid_776170 != nil:
    section.add "DBInstanceIdentifier", valid_776170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776171 = header.getOrDefault("X-Amz-Date")
  valid_776171 = validateParameter(valid_776171, JString, required = false,
                                 default = nil)
  if valid_776171 != nil:
    section.add "X-Amz-Date", valid_776171
  var valid_776172 = header.getOrDefault("X-Amz-Security-Token")
  valid_776172 = validateParameter(valid_776172, JString, required = false,
                                 default = nil)
  if valid_776172 != nil:
    section.add "X-Amz-Security-Token", valid_776172
  var valid_776173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776173 = validateParameter(valid_776173, JString, required = false,
                                 default = nil)
  if valid_776173 != nil:
    section.add "X-Amz-Content-Sha256", valid_776173
  var valid_776174 = header.getOrDefault("X-Amz-Algorithm")
  valid_776174 = validateParameter(valid_776174, JString, required = false,
                                 default = nil)
  if valid_776174 != nil:
    section.add "X-Amz-Algorithm", valid_776174
  var valid_776175 = header.getOrDefault("X-Amz-Signature")
  valid_776175 = validateParameter(valid_776175, JString, required = false,
                                 default = nil)
  if valid_776175 != nil:
    section.add "X-Amz-Signature", valid_776175
  var valid_776176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776176 = validateParameter(valid_776176, JString, required = false,
                                 default = nil)
  if valid_776176 != nil:
    section.add "X-Amz-SignedHeaders", valid_776176
  var valid_776177 = header.getOrDefault("X-Amz-Credential")
  valid_776177 = validateParameter(valid_776177, JString, required = false,
                                 default = nil)
  if valid_776177 != nil:
    section.add "X-Amz-Credential", valid_776177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776178: Call_GetDownloadDBLogFilePortion_776162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_776178.validator(path, query, header, formData, body)
  let scheme = call_776178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776178.url(scheme.get, call_776178.host, call_776178.base,
                         call_776178.route, valid.getOrDefault("path"))
  result = hook(call_776178, url, valid)

proc call*(call_776179: Call_GetDownloadDBLogFilePortion_776162;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Action: string = "DownloadDBLogFilePortion"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_776180 = newJObject()
  add(query_776180, "NumberOfLines", newJInt(NumberOfLines))
  add(query_776180, "LogFileName", newJString(LogFileName))
  add(query_776180, "Action", newJString(Action))
  add(query_776180, "Marker", newJString(Marker))
  add(query_776180, "Version", newJString(Version))
  add(query_776180, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_776179.call(nil, query_776180, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_776162(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_776163, base: "/",
    url: url_GetDownloadDBLogFilePortion_776164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_776218 = ref object of OpenApiRestCall_772581
proc url_PostFailoverDBCluster_776220(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostFailoverDBCluster_776219(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776221 = query.getOrDefault("Action")
  valid_776221 = validateParameter(valid_776221, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_776221 != nil:
    section.add "Action", valid_776221
  var valid_776222 = query.getOrDefault("Version")
  valid_776222 = validateParameter(valid_776222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776222 != nil:
    section.add "Version", valid_776222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776223 = header.getOrDefault("X-Amz-Date")
  valid_776223 = validateParameter(valid_776223, JString, required = false,
                                 default = nil)
  if valid_776223 != nil:
    section.add "X-Amz-Date", valid_776223
  var valid_776224 = header.getOrDefault("X-Amz-Security-Token")
  valid_776224 = validateParameter(valid_776224, JString, required = false,
                                 default = nil)
  if valid_776224 != nil:
    section.add "X-Amz-Security-Token", valid_776224
  var valid_776225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776225 = validateParameter(valid_776225, JString, required = false,
                                 default = nil)
  if valid_776225 != nil:
    section.add "X-Amz-Content-Sha256", valid_776225
  var valid_776226 = header.getOrDefault("X-Amz-Algorithm")
  valid_776226 = validateParameter(valid_776226, JString, required = false,
                                 default = nil)
  if valid_776226 != nil:
    section.add "X-Amz-Algorithm", valid_776226
  var valid_776227 = header.getOrDefault("X-Amz-Signature")
  valid_776227 = validateParameter(valid_776227, JString, required = false,
                                 default = nil)
  if valid_776227 != nil:
    section.add "X-Amz-Signature", valid_776227
  var valid_776228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776228 = validateParameter(valid_776228, JString, required = false,
                                 default = nil)
  if valid_776228 != nil:
    section.add "X-Amz-SignedHeaders", valid_776228
  var valid_776229 = header.getOrDefault("X-Amz-Credential")
  valid_776229 = validateParameter(valid_776229, JString, required = false,
                                 default = nil)
  if valid_776229 != nil:
    section.add "X-Amz-Credential", valid_776229
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_776230 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_776230 = validateParameter(valid_776230, JString, required = false,
                                 default = nil)
  if valid_776230 != nil:
    section.add "TargetDBInstanceIdentifier", valid_776230
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776231 = formData.getOrDefault("DBClusterIdentifier")
  valid_776231 = validateParameter(valid_776231, JString, required = true,
                                 default = nil)
  if valid_776231 != nil:
    section.add "DBClusterIdentifier", valid_776231
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776232: Call_PostFailoverDBCluster_776218; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776232.validator(path, query, header, formData, body)
  let scheme = call_776232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776232.url(scheme.get, call_776232.host, call_776232.base,
                         call_776232.route, valid.getOrDefault("path"))
  result = hook(call_776232, url, valid)

proc call*(call_776233: Call_PostFailoverDBCluster_776218;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_776234 = newJObject()
  var formData_776235 = newJObject()
  add(query_776234, "Action", newJString(Action))
  add(formData_776235, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_776235, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776234, "Version", newJString(Version))
  result = call_776233.call(nil, query_776234, nil, formData_776235, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_776218(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_776219, base: "/",
    url: url_PostFailoverDBCluster_776220, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_776201 = ref object of OpenApiRestCall_772581
proc url_GetFailoverDBCluster_776203(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetFailoverDBCluster_776202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776204 = query.getOrDefault("DBClusterIdentifier")
  valid_776204 = validateParameter(valid_776204, JString, required = true,
                                 default = nil)
  if valid_776204 != nil:
    section.add "DBClusterIdentifier", valid_776204
  var valid_776205 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_776205 = validateParameter(valid_776205, JString, required = false,
                                 default = nil)
  if valid_776205 != nil:
    section.add "TargetDBInstanceIdentifier", valid_776205
  var valid_776206 = query.getOrDefault("Action")
  valid_776206 = validateParameter(valid_776206, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_776206 != nil:
    section.add "Action", valid_776206
  var valid_776207 = query.getOrDefault("Version")
  valid_776207 = validateParameter(valid_776207, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776207 != nil:
    section.add "Version", valid_776207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776208 = header.getOrDefault("X-Amz-Date")
  valid_776208 = validateParameter(valid_776208, JString, required = false,
                                 default = nil)
  if valid_776208 != nil:
    section.add "X-Amz-Date", valid_776208
  var valid_776209 = header.getOrDefault("X-Amz-Security-Token")
  valid_776209 = validateParameter(valid_776209, JString, required = false,
                                 default = nil)
  if valid_776209 != nil:
    section.add "X-Amz-Security-Token", valid_776209
  var valid_776210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776210 = validateParameter(valid_776210, JString, required = false,
                                 default = nil)
  if valid_776210 != nil:
    section.add "X-Amz-Content-Sha256", valid_776210
  var valid_776211 = header.getOrDefault("X-Amz-Algorithm")
  valid_776211 = validateParameter(valid_776211, JString, required = false,
                                 default = nil)
  if valid_776211 != nil:
    section.add "X-Amz-Algorithm", valid_776211
  var valid_776212 = header.getOrDefault("X-Amz-Signature")
  valid_776212 = validateParameter(valid_776212, JString, required = false,
                                 default = nil)
  if valid_776212 != nil:
    section.add "X-Amz-Signature", valid_776212
  var valid_776213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776213 = validateParameter(valid_776213, JString, required = false,
                                 default = nil)
  if valid_776213 != nil:
    section.add "X-Amz-SignedHeaders", valid_776213
  var valid_776214 = header.getOrDefault("X-Amz-Credential")
  valid_776214 = validateParameter(valid_776214, JString, required = false,
                                 default = nil)
  if valid_776214 != nil:
    section.add "X-Amz-Credential", valid_776214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776215: Call_GetFailoverDBCluster_776201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776215.validator(path, query, header, formData, body)
  let scheme = call_776215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776215.url(scheme.get, call_776215.host, call_776215.base,
                         call_776215.route, valid.getOrDefault("path"))
  result = hook(call_776215, url, valid)

proc call*(call_776216: Call_GetFailoverDBCluster_776201;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776217 = newJObject()
  add(query_776217, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776217, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_776217, "Action", newJString(Action))
  add(query_776217, "Version", newJString(Version))
  result = call_776216.call(nil, query_776217, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_776201(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_776202, base: "/",
    url: url_GetFailoverDBCluster_776203, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_776253 = ref object of OpenApiRestCall_772581
proc url_PostListTagsForResource_776255(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTagsForResource_776254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776256 = query.getOrDefault("Action")
  valid_776256 = validateParameter(valid_776256, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_776256 != nil:
    section.add "Action", valid_776256
  var valid_776257 = query.getOrDefault("Version")
  valid_776257 = validateParameter(valid_776257, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776257 != nil:
    section.add "Version", valid_776257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776258 = header.getOrDefault("X-Amz-Date")
  valid_776258 = validateParameter(valid_776258, JString, required = false,
                                 default = nil)
  if valid_776258 != nil:
    section.add "X-Amz-Date", valid_776258
  var valid_776259 = header.getOrDefault("X-Amz-Security-Token")
  valid_776259 = validateParameter(valid_776259, JString, required = false,
                                 default = nil)
  if valid_776259 != nil:
    section.add "X-Amz-Security-Token", valid_776259
  var valid_776260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776260 = validateParameter(valid_776260, JString, required = false,
                                 default = nil)
  if valid_776260 != nil:
    section.add "X-Amz-Content-Sha256", valid_776260
  var valid_776261 = header.getOrDefault("X-Amz-Algorithm")
  valid_776261 = validateParameter(valid_776261, JString, required = false,
                                 default = nil)
  if valid_776261 != nil:
    section.add "X-Amz-Algorithm", valid_776261
  var valid_776262 = header.getOrDefault("X-Amz-Signature")
  valid_776262 = validateParameter(valid_776262, JString, required = false,
                                 default = nil)
  if valid_776262 != nil:
    section.add "X-Amz-Signature", valid_776262
  var valid_776263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776263 = validateParameter(valid_776263, JString, required = false,
                                 default = nil)
  if valid_776263 != nil:
    section.add "X-Amz-SignedHeaders", valid_776263
  var valid_776264 = header.getOrDefault("X-Amz-Credential")
  valid_776264 = validateParameter(valid_776264, JString, required = false,
                                 default = nil)
  if valid_776264 != nil:
    section.add "X-Amz-Credential", valid_776264
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_776265 = formData.getOrDefault("Filters")
  valid_776265 = validateParameter(valid_776265, JArray, required = false,
                                 default = nil)
  if valid_776265 != nil:
    section.add "Filters", valid_776265
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_776266 = formData.getOrDefault("ResourceName")
  valid_776266 = validateParameter(valid_776266, JString, required = true,
                                 default = nil)
  if valid_776266 != nil:
    section.add "ResourceName", valid_776266
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776267: Call_PostListTagsForResource_776253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_776267.validator(path, query, header, formData, body)
  let scheme = call_776267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776267.url(scheme.get, call_776267.host, call_776267.base,
                         call_776267.route, valid.getOrDefault("path"))
  result = hook(call_776267, url, valid)

proc call*(call_776268: Call_PostListTagsForResource_776253; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Version: string (required)
  var query_776269 = newJObject()
  var formData_776270 = newJObject()
  add(query_776269, "Action", newJString(Action))
  if Filters != nil:
    formData_776270.add "Filters", Filters
  add(formData_776270, "ResourceName", newJString(ResourceName))
  add(query_776269, "Version", newJString(Version))
  result = call_776268.call(nil, query_776269, nil, formData_776270, nil)

var postListTagsForResource* = Call_PostListTagsForResource_776253(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_776254, base: "/",
    url: url_PostListTagsForResource_776255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_776236 = ref object of OpenApiRestCall_772581
proc url_GetListTagsForResource_776238(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTagsForResource_776237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_776239 = query.getOrDefault("Filters")
  valid_776239 = validateParameter(valid_776239, JArray, required = false,
                                 default = nil)
  if valid_776239 != nil:
    section.add "Filters", valid_776239
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_776240 = query.getOrDefault("ResourceName")
  valid_776240 = validateParameter(valid_776240, JString, required = true,
                                 default = nil)
  if valid_776240 != nil:
    section.add "ResourceName", valid_776240
  var valid_776241 = query.getOrDefault("Action")
  valid_776241 = validateParameter(valid_776241, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_776241 != nil:
    section.add "Action", valid_776241
  var valid_776242 = query.getOrDefault("Version")
  valid_776242 = validateParameter(valid_776242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776242 != nil:
    section.add "Version", valid_776242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776243 = header.getOrDefault("X-Amz-Date")
  valid_776243 = validateParameter(valid_776243, JString, required = false,
                                 default = nil)
  if valid_776243 != nil:
    section.add "X-Amz-Date", valid_776243
  var valid_776244 = header.getOrDefault("X-Amz-Security-Token")
  valid_776244 = validateParameter(valid_776244, JString, required = false,
                                 default = nil)
  if valid_776244 != nil:
    section.add "X-Amz-Security-Token", valid_776244
  var valid_776245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776245 = validateParameter(valid_776245, JString, required = false,
                                 default = nil)
  if valid_776245 != nil:
    section.add "X-Amz-Content-Sha256", valid_776245
  var valid_776246 = header.getOrDefault("X-Amz-Algorithm")
  valid_776246 = validateParameter(valid_776246, JString, required = false,
                                 default = nil)
  if valid_776246 != nil:
    section.add "X-Amz-Algorithm", valid_776246
  var valid_776247 = header.getOrDefault("X-Amz-Signature")
  valid_776247 = validateParameter(valid_776247, JString, required = false,
                                 default = nil)
  if valid_776247 != nil:
    section.add "X-Amz-Signature", valid_776247
  var valid_776248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776248 = validateParameter(valid_776248, JString, required = false,
                                 default = nil)
  if valid_776248 != nil:
    section.add "X-Amz-SignedHeaders", valid_776248
  var valid_776249 = header.getOrDefault("X-Amz-Credential")
  valid_776249 = validateParameter(valid_776249, JString, required = false,
                                 default = nil)
  if valid_776249 != nil:
    section.add "X-Amz-Credential", valid_776249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776250: Call_GetListTagsForResource_776236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_776250.validator(path, query, header, formData, body)
  let scheme = call_776250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776250.url(scheme.get, call_776250.host, call_776250.base,
                         call_776250.route, valid.getOrDefault("path"))
  result = hook(call_776250, url, valid)

proc call*(call_776251: Call_GetListTagsForResource_776236; ResourceName: string;
          Filters: JsonNode = nil; Action: string = "ListTagsForResource";
          Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776252 = newJObject()
  if Filters != nil:
    query_776252.add "Filters", Filters
  add(query_776252, "ResourceName", newJString(ResourceName))
  add(query_776252, "Action", newJString(Action))
  add(query_776252, "Version", newJString(Version))
  result = call_776251.call(nil, query_776252, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_776236(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_776237, base: "/",
    url: url_GetListTagsForResource_776238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_776290 = ref object of OpenApiRestCall_772581
proc url_PostModifyCurrentDBClusterCapacity_776292(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyCurrentDBClusterCapacity_776291(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776293 = query.getOrDefault("Action")
  valid_776293 = validateParameter(valid_776293, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_776293 != nil:
    section.add "Action", valid_776293
  var valid_776294 = query.getOrDefault("Version")
  valid_776294 = validateParameter(valid_776294, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776294 != nil:
    section.add "Version", valid_776294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776295 = header.getOrDefault("X-Amz-Date")
  valid_776295 = validateParameter(valid_776295, JString, required = false,
                                 default = nil)
  if valid_776295 != nil:
    section.add "X-Amz-Date", valid_776295
  var valid_776296 = header.getOrDefault("X-Amz-Security-Token")
  valid_776296 = validateParameter(valid_776296, JString, required = false,
                                 default = nil)
  if valid_776296 != nil:
    section.add "X-Amz-Security-Token", valid_776296
  var valid_776297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776297 = validateParameter(valid_776297, JString, required = false,
                                 default = nil)
  if valid_776297 != nil:
    section.add "X-Amz-Content-Sha256", valid_776297
  var valid_776298 = header.getOrDefault("X-Amz-Algorithm")
  valid_776298 = validateParameter(valid_776298, JString, required = false,
                                 default = nil)
  if valid_776298 != nil:
    section.add "X-Amz-Algorithm", valid_776298
  var valid_776299 = header.getOrDefault("X-Amz-Signature")
  valid_776299 = validateParameter(valid_776299, JString, required = false,
                                 default = nil)
  if valid_776299 != nil:
    section.add "X-Amz-Signature", valid_776299
  var valid_776300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776300 = validateParameter(valid_776300, JString, required = false,
                                 default = nil)
  if valid_776300 != nil:
    section.add "X-Amz-SignedHeaders", valid_776300
  var valid_776301 = header.getOrDefault("X-Amz-Credential")
  valid_776301 = validateParameter(valid_776301, JString, required = false,
                                 default = nil)
  if valid_776301 != nil:
    section.add "X-Amz-Credential", valid_776301
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_776302 = formData.getOrDefault("TimeoutAction")
  valid_776302 = validateParameter(valid_776302, JString, required = false,
                                 default = nil)
  if valid_776302 != nil:
    section.add "TimeoutAction", valid_776302
  var valid_776303 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_776303 = validateParameter(valid_776303, JInt, required = false, default = nil)
  if valid_776303 != nil:
    section.add "SecondsBeforeTimeout", valid_776303
  var valid_776304 = formData.getOrDefault("Capacity")
  valid_776304 = validateParameter(valid_776304, JInt, required = false, default = nil)
  if valid_776304 != nil:
    section.add "Capacity", valid_776304
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776305 = formData.getOrDefault("DBClusterIdentifier")
  valid_776305 = validateParameter(valid_776305, JString, required = true,
                                 default = nil)
  if valid_776305 != nil:
    section.add "DBClusterIdentifier", valid_776305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776306: Call_PostModifyCurrentDBClusterCapacity_776290;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776306.validator(path, query, header, formData, body)
  let scheme = call_776306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776306.url(scheme.get, call_776306.host, call_776306.base,
                         call_776306.route, valid.getOrDefault("path"))
  result = hook(call_776306, url, valid)

proc call*(call_776307: Call_PostModifyCurrentDBClusterCapacity_776290;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_776308 = newJObject()
  var formData_776309 = newJObject()
  add(formData_776309, "TimeoutAction", newJString(TimeoutAction))
  add(formData_776309, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_776308, "Action", newJString(Action))
  add(formData_776309, "Capacity", newJInt(Capacity))
  add(formData_776309, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776308, "Version", newJString(Version))
  result = call_776307.call(nil, query_776308, nil, formData_776309, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_776290(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_776291, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_776292,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_776271 = ref object of OpenApiRestCall_772581
proc url_GetModifyCurrentDBClusterCapacity_776273(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyCurrentDBClusterCapacity_776272(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: JString (required)
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776274 = query.getOrDefault("SecondsBeforeTimeout")
  valid_776274 = validateParameter(valid_776274, JInt, required = false, default = nil)
  if valid_776274 != nil:
    section.add "SecondsBeforeTimeout", valid_776274
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776275 = query.getOrDefault("DBClusterIdentifier")
  valid_776275 = validateParameter(valid_776275, JString, required = true,
                                 default = nil)
  if valid_776275 != nil:
    section.add "DBClusterIdentifier", valid_776275
  var valid_776276 = query.getOrDefault("TimeoutAction")
  valid_776276 = validateParameter(valid_776276, JString, required = false,
                                 default = nil)
  if valid_776276 != nil:
    section.add "TimeoutAction", valid_776276
  var valid_776277 = query.getOrDefault("Action")
  valid_776277 = validateParameter(valid_776277, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_776277 != nil:
    section.add "Action", valid_776277
  var valid_776278 = query.getOrDefault("Capacity")
  valid_776278 = validateParameter(valid_776278, JInt, required = false, default = nil)
  if valid_776278 != nil:
    section.add "Capacity", valid_776278
  var valid_776279 = query.getOrDefault("Version")
  valid_776279 = validateParameter(valid_776279, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776279 != nil:
    section.add "Version", valid_776279
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776280 = header.getOrDefault("X-Amz-Date")
  valid_776280 = validateParameter(valid_776280, JString, required = false,
                                 default = nil)
  if valid_776280 != nil:
    section.add "X-Amz-Date", valid_776280
  var valid_776281 = header.getOrDefault("X-Amz-Security-Token")
  valid_776281 = validateParameter(valid_776281, JString, required = false,
                                 default = nil)
  if valid_776281 != nil:
    section.add "X-Amz-Security-Token", valid_776281
  var valid_776282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776282 = validateParameter(valid_776282, JString, required = false,
                                 default = nil)
  if valid_776282 != nil:
    section.add "X-Amz-Content-Sha256", valid_776282
  var valid_776283 = header.getOrDefault("X-Amz-Algorithm")
  valid_776283 = validateParameter(valid_776283, JString, required = false,
                                 default = nil)
  if valid_776283 != nil:
    section.add "X-Amz-Algorithm", valid_776283
  var valid_776284 = header.getOrDefault("X-Amz-Signature")
  valid_776284 = validateParameter(valid_776284, JString, required = false,
                                 default = nil)
  if valid_776284 != nil:
    section.add "X-Amz-Signature", valid_776284
  var valid_776285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776285 = validateParameter(valid_776285, JString, required = false,
                                 default = nil)
  if valid_776285 != nil:
    section.add "X-Amz-SignedHeaders", valid_776285
  var valid_776286 = header.getOrDefault("X-Amz-Credential")
  valid_776286 = validateParameter(valid_776286, JString, required = false,
                                 default = nil)
  if valid_776286 != nil:
    section.add "X-Amz-Credential", valid_776286
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776287: Call_GetModifyCurrentDBClusterCapacity_776271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776287.validator(path, query, header, formData, body)
  let scheme = call_776287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776287.url(scheme.get, call_776287.host, call_776287.base,
                         call_776287.route, valid.getOrDefault("path"))
  result = hook(call_776287, url, valid)

proc call*(call_776288: Call_GetModifyCurrentDBClusterCapacity_776271;
          DBClusterIdentifier: string; SecondsBeforeTimeout: int = 0;
          TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point is not found in the timeout period.</p>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>Value must be <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, or <code>256</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_776289 = newJObject()
  add(query_776289, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_776289, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776289, "TimeoutAction", newJString(TimeoutAction))
  add(query_776289, "Action", newJString(Action))
  add(query_776289, "Capacity", newJInt(Capacity))
  add(query_776289, "Version", newJString(Version))
  result = call_776288.call(nil, query_776289, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_776271(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_776272, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_776273,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_776351 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBCluster_776353(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBCluster_776352(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776354 = query.getOrDefault("Action")
  valid_776354 = validateParameter(valid_776354, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_776354 != nil:
    section.add "Action", valid_776354
  var valid_776355 = query.getOrDefault("Version")
  valid_776355 = validateParameter(valid_776355, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776355 != nil:
    section.add "Version", valid_776355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776356 = header.getOrDefault("X-Amz-Date")
  valid_776356 = validateParameter(valid_776356, JString, required = false,
                                 default = nil)
  if valid_776356 != nil:
    section.add "X-Amz-Date", valid_776356
  var valid_776357 = header.getOrDefault("X-Amz-Security-Token")
  valid_776357 = validateParameter(valid_776357, JString, required = false,
                                 default = nil)
  if valid_776357 != nil:
    section.add "X-Amz-Security-Token", valid_776357
  var valid_776358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776358 = validateParameter(valid_776358, JString, required = false,
                                 default = nil)
  if valid_776358 != nil:
    section.add "X-Amz-Content-Sha256", valid_776358
  var valid_776359 = header.getOrDefault("X-Amz-Algorithm")
  valid_776359 = validateParameter(valid_776359, JString, required = false,
                                 default = nil)
  if valid_776359 != nil:
    section.add "X-Amz-Algorithm", valid_776359
  var valid_776360 = header.getOrDefault("X-Amz-Signature")
  valid_776360 = validateParameter(valid_776360, JString, required = false,
                                 default = nil)
  if valid_776360 != nil:
    section.add "X-Amz-Signature", valid_776360
  var valid_776361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776361 = validateParameter(valid_776361, JString, required = false,
                                 default = nil)
  if valid_776361 != nil:
    section.add "X-Amz-SignedHeaders", valid_776361
  var valid_776362 = header.getOrDefault("X-Amz-Credential")
  valid_776362 = validateParameter(valid_776362, JString, required = false,
                                 default = nil)
  if valid_776362 != nil:
    section.add "X-Amz-Credential", valid_776362
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  section = newJObject()
  var valid_776363 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_776363 = validateParameter(valid_776363, JString, required = false,
                                 default = nil)
  if valid_776363 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_776363
  var valid_776364 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_776364 = validateParameter(valid_776364, JString, required = false,
                                 default = nil)
  if valid_776364 != nil:
    section.add "PreferredMaintenanceWindow", valid_776364
  var valid_776365 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_776365 = validateParameter(valid_776365, JString, required = false,
                                 default = nil)
  if valid_776365 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_776365
  var valid_776366 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_776366 = validateParameter(valid_776366, JArray, required = false,
                                 default = nil)
  if valid_776366 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_776366
  var valid_776367 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_776367 = validateParameter(valid_776367, JString, required = false,
                                 default = nil)
  if valid_776367 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_776367
  var valid_776368 = formData.getOrDefault("EnableHttpEndpoint")
  valid_776368 = validateParameter(valid_776368, JBool, required = false, default = nil)
  if valid_776368 != nil:
    section.add "EnableHttpEndpoint", valid_776368
  var valid_776369 = formData.getOrDefault("ApplyImmediately")
  valid_776369 = validateParameter(valid_776369, JBool, required = false, default = nil)
  if valid_776369 != nil:
    section.add "ApplyImmediately", valid_776369
  var valid_776370 = formData.getOrDefault("Port")
  valid_776370 = validateParameter(valid_776370, JInt, required = false, default = nil)
  if valid_776370 != nil:
    section.add "Port", valid_776370
  var valid_776371 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_776371 = validateParameter(valid_776371, JArray, required = false,
                                 default = nil)
  if valid_776371 != nil:
    section.add "VpcSecurityGroupIds", valid_776371
  var valid_776372 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_776372 = validateParameter(valid_776372, JBool, required = false, default = nil)
  if valid_776372 != nil:
    section.add "CopyTagsToSnapshot", valid_776372
  var valid_776373 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_776373 = validateParameter(valid_776373, JString, required = false,
                                 default = nil)
  if valid_776373 != nil:
    section.add "DBInstanceParameterGroupName", valid_776373
  var valid_776374 = formData.getOrDefault("OptionGroupName")
  valid_776374 = validateParameter(valid_776374, JString, required = false,
                                 default = nil)
  if valid_776374 != nil:
    section.add "OptionGroupName", valid_776374
  var valid_776375 = formData.getOrDefault("BackupRetentionPeriod")
  valid_776375 = validateParameter(valid_776375, JInt, required = false, default = nil)
  if valid_776375 != nil:
    section.add "BackupRetentionPeriod", valid_776375
  var valid_776376 = formData.getOrDefault("BacktrackWindow")
  valid_776376 = validateParameter(valid_776376, JInt, required = false, default = nil)
  if valid_776376 != nil:
    section.add "BacktrackWindow", valid_776376
  var valid_776377 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_776377 = validateParameter(valid_776377, JString, required = false,
                                 default = nil)
  if valid_776377 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_776377
  var valid_776378 = formData.getOrDefault("MasterUserPassword")
  valid_776378 = validateParameter(valid_776378, JString, required = false,
                                 default = nil)
  if valid_776378 != nil:
    section.add "MasterUserPassword", valid_776378
  var valid_776379 = formData.getOrDefault("DeletionProtection")
  valid_776379 = validateParameter(valid_776379, JBool, required = false, default = nil)
  if valid_776379 != nil:
    section.add "DeletionProtection", valid_776379
  var valid_776380 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_776380 = validateParameter(valid_776380, JString, required = false,
                                 default = nil)
  if valid_776380 != nil:
    section.add "NewDBClusterIdentifier", valid_776380
  var valid_776381 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_776381 = validateParameter(valid_776381, JArray, required = false,
                                 default = nil)
  if valid_776381 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_776381
  var valid_776382 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_776382 = validateParameter(valid_776382, JString, required = false,
                                 default = nil)
  if valid_776382 != nil:
    section.add "DBClusterParameterGroupName", valid_776382
  var valid_776383 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_776383 = validateParameter(valid_776383, JString, required = false,
                                 default = nil)
  if valid_776383 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_776383
  var valid_776384 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_776384 = validateParameter(valid_776384, JBool, required = false, default = nil)
  if valid_776384 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_776384
  var valid_776385 = formData.getOrDefault("PreferredBackupWindow")
  valid_776385 = validateParameter(valid_776385, JString, required = false,
                                 default = nil)
  if valid_776385 != nil:
    section.add "PreferredBackupWindow", valid_776385
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776386 = formData.getOrDefault("DBClusterIdentifier")
  valid_776386 = validateParameter(valid_776386, JString, required = true,
                                 default = nil)
  if valid_776386 != nil:
    section.add "DBClusterIdentifier", valid_776386
  var valid_776387 = formData.getOrDefault("EngineVersion")
  valid_776387 = validateParameter(valid_776387, JString, required = false,
                                 default = nil)
  if valid_776387 != nil:
    section.add "EngineVersion", valid_776387
  var valid_776388 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_776388 = validateParameter(valid_776388, JBool, required = false, default = nil)
  if valid_776388 != nil:
    section.add "AllowMajorVersionUpgrade", valid_776388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776389: Call_PostModifyDBCluster_776351; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776389.validator(path, query, header, formData, body)
  let scheme = call_776389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776389.url(scheme.get, call_776389.host, call_776389.base,
                         call_776389.route, valid.getOrDefault("path"))
  result = hook(call_776389, url, valid)

proc call*(call_776390: Call_PostModifyDBCluster_776351;
          DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          EnableHttpEndpoint: bool = false; ApplyImmediately: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          CopyTagsToSnapshot: bool = false;
          DBInstanceParameterGroupName: string = ""; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; DeletionProtection: bool = false;
          NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; AllowMajorVersionUpgrade: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Version: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  var query_776391 = newJObject()
  var formData_776392 = newJObject()
  add(formData_776392, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_776392, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_776392, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_776392.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_776392, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_776392, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_776392, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_776392, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_776392.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_776392, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_776392, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(formData_776392, "OptionGroupName", newJString(OptionGroupName))
  add(formData_776392, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_776392, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_776392, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_776392, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_776392, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_776392, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_776392.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_776391, "Action", newJString(Action))
  add(formData_776392, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_776392, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_776392, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_776392, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_776392, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_776392, "EngineVersion", newJString(EngineVersion))
  add(query_776391, "Version", newJString(Version))
  add(formData_776392, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  result = call_776390.call(nil, query_776391, nil, formData_776392, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_776351(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_776352, base: "/",
    url: url_PostModifyDBCluster_776353, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_776310 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBCluster_776312(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBCluster_776311(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: JString (required)
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  section = newJObject()
  var valid_776313 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_776313 = validateParameter(valid_776313, JString, required = false,
                                 default = nil)
  if valid_776313 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_776313
  var valid_776314 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_776314 = validateParameter(valid_776314, JString, required = false,
                                 default = nil)
  if valid_776314 != nil:
    section.add "PreferredMaintenanceWindow", valid_776314
  var valid_776315 = query.getOrDefault("DBClusterParameterGroupName")
  valid_776315 = validateParameter(valid_776315, JString, required = false,
                                 default = nil)
  if valid_776315 != nil:
    section.add "DBClusterParameterGroupName", valid_776315
  var valid_776316 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_776316 = validateParameter(valid_776316, JBool, required = false, default = nil)
  if valid_776316 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_776316
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776317 = query.getOrDefault("DBClusterIdentifier")
  valid_776317 = validateParameter(valid_776317, JString, required = true,
                                 default = nil)
  if valid_776317 != nil:
    section.add "DBClusterIdentifier", valid_776317
  var valid_776318 = query.getOrDefault("OptionGroupName")
  valid_776318 = validateParameter(valid_776318, JString, required = false,
                                 default = nil)
  if valid_776318 != nil:
    section.add "OptionGroupName", valid_776318
  var valid_776319 = query.getOrDefault("MasterUserPassword")
  valid_776319 = validateParameter(valid_776319, JString, required = false,
                                 default = nil)
  if valid_776319 != nil:
    section.add "MasterUserPassword", valid_776319
  var valid_776320 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_776320 = validateParameter(valid_776320, JArray, required = false,
                                 default = nil)
  if valid_776320 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_776320
  var valid_776321 = query.getOrDefault("VpcSecurityGroupIds")
  valid_776321 = validateParameter(valid_776321, JArray, required = false,
                                 default = nil)
  if valid_776321 != nil:
    section.add "VpcSecurityGroupIds", valid_776321
  var valid_776322 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_776322 = validateParameter(valid_776322, JArray, required = false,
                                 default = nil)
  if valid_776322 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_776322
  var valid_776323 = query.getOrDefault("BackupRetentionPeriod")
  valid_776323 = validateParameter(valid_776323, JInt, required = false, default = nil)
  if valid_776323 != nil:
    section.add "BackupRetentionPeriod", valid_776323
  var valid_776324 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_776324 = validateParameter(valid_776324, JString, required = false,
                                 default = nil)
  if valid_776324 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_776324
  var valid_776325 = query.getOrDefault("NewDBClusterIdentifier")
  valid_776325 = validateParameter(valid_776325, JString, required = false,
                                 default = nil)
  if valid_776325 != nil:
    section.add "NewDBClusterIdentifier", valid_776325
  var valid_776326 = query.getOrDefault("CopyTagsToSnapshot")
  valid_776326 = validateParameter(valid_776326, JBool, required = false, default = nil)
  if valid_776326 != nil:
    section.add "CopyTagsToSnapshot", valid_776326
  var valid_776327 = query.getOrDefault("DeletionProtection")
  valid_776327 = validateParameter(valid_776327, JBool, required = false, default = nil)
  if valid_776327 != nil:
    section.add "DeletionProtection", valid_776327
  var valid_776328 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_776328 = validateParameter(valid_776328, JBool, required = false, default = nil)
  if valid_776328 != nil:
    section.add "AllowMajorVersionUpgrade", valid_776328
  var valid_776329 = query.getOrDefault("EnableHttpEndpoint")
  valid_776329 = validateParameter(valid_776329, JBool, required = false, default = nil)
  if valid_776329 != nil:
    section.add "EnableHttpEndpoint", valid_776329
  var valid_776330 = query.getOrDefault("Action")
  valid_776330 = validateParameter(valid_776330, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_776330 != nil:
    section.add "Action", valid_776330
  var valid_776331 = query.getOrDefault("BacktrackWindow")
  valid_776331 = validateParameter(valid_776331, JInt, required = false, default = nil)
  if valid_776331 != nil:
    section.add "BacktrackWindow", valid_776331
  var valid_776332 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_776332 = validateParameter(valid_776332, JString, required = false,
                                 default = nil)
  if valid_776332 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_776332
  var valid_776333 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_776333 = validateParameter(valid_776333, JString, required = false,
                                 default = nil)
  if valid_776333 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_776333
  var valid_776334 = query.getOrDefault("EngineVersion")
  valid_776334 = validateParameter(valid_776334, JString, required = false,
                                 default = nil)
  if valid_776334 != nil:
    section.add "EngineVersion", valid_776334
  var valid_776335 = query.getOrDefault("Port")
  valid_776335 = validateParameter(valid_776335, JInt, required = false, default = nil)
  if valid_776335 != nil:
    section.add "Port", valid_776335
  var valid_776336 = query.getOrDefault("PreferredBackupWindow")
  valid_776336 = validateParameter(valid_776336, JString, required = false,
                                 default = nil)
  if valid_776336 != nil:
    section.add "PreferredBackupWindow", valid_776336
  var valid_776337 = query.getOrDefault("Version")
  valid_776337 = validateParameter(valid_776337, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776337 != nil:
    section.add "Version", valid_776337
  var valid_776338 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_776338 = validateParameter(valid_776338, JString, required = false,
                                 default = nil)
  if valid_776338 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_776338
  var valid_776339 = query.getOrDefault("ApplyImmediately")
  valid_776339 = validateParameter(valid_776339, JBool, required = false, default = nil)
  if valid_776339 != nil:
    section.add "ApplyImmediately", valid_776339
  var valid_776340 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_776340 = validateParameter(valid_776340, JString, required = false,
                                 default = nil)
  if valid_776340 != nil:
    section.add "DBInstanceParameterGroupName", valid_776340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776341 = header.getOrDefault("X-Amz-Date")
  valid_776341 = validateParameter(valid_776341, JString, required = false,
                                 default = nil)
  if valid_776341 != nil:
    section.add "X-Amz-Date", valid_776341
  var valid_776342 = header.getOrDefault("X-Amz-Security-Token")
  valid_776342 = validateParameter(valid_776342, JString, required = false,
                                 default = nil)
  if valid_776342 != nil:
    section.add "X-Amz-Security-Token", valid_776342
  var valid_776343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776343 = validateParameter(valid_776343, JString, required = false,
                                 default = nil)
  if valid_776343 != nil:
    section.add "X-Amz-Content-Sha256", valid_776343
  var valid_776344 = header.getOrDefault("X-Amz-Algorithm")
  valid_776344 = validateParameter(valid_776344, JString, required = false,
                                 default = nil)
  if valid_776344 != nil:
    section.add "X-Amz-Algorithm", valid_776344
  var valid_776345 = header.getOrDefault("X-Amz-Signature")
  valid_776345 = validateParameter(valid_776345, JString, required = false,
                                 default = nil)
  if valid_776345 != nil:
    section.add "X-Amz-Signature", valid_776345
  var valid_776346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776346 = validateParameter(valid_776346, JString, required = false,
                                 default = nil)
  if valid_776346 != nil:
    section.add "X-Amz-SignedHeaders", valid_776346
  var valid_776347 = header.getOrDefault("X-Amz-Credential")
  valid_776347 = validateParameter(valid_776347, JString, required = false,
                                 default = nil)
  if valid_776347 != nil:
    section.add "X-Amz-Credential", valid_776347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776348: Call_GetModifyDBCluster_776310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776348.validator(path, query, header, formData, body)
  let scheme = call_776348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776348.url(scheme.get, call_776348.host, call_776348.base,
                         call_776348.route, valid.getOrDefault("path"))
  result = hook(call_776348, url, valid)

proc call*(call_776349: Call_GetModifyDBCluster_776310;
          DBClusterIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationAutoPause: string = "";
          NewDBClusterIdentifier: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; AllowMajorVersionUpgrade: bool = false;
          EnableHttpEndpoint: bool = false; Action: string = "ModifyDBCluster";
          BacktrackWindow: int = 0;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = "";
          ApplyImmediately: bool = false; DBInstanceParameterGroupName: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: string (required)
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  var query_776350 = newJObject()
  add(query_776350, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_776350, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_776350, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_776350, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_776350, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776350, "OptionGroupName", newJString(OptionGroupName))
  add(query_776350, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_776350.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_776350.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_776350.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_776350, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_776350, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_776350, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_776350, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_776350, "DeletionProtection", newJBool(DeletionProtection))
  add(query_776350, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_776350, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_776350, "Action", newJString(Action))
  add(query_776350, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_776350, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_776350, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_776350, "EngineVersion", newJString(EngineVersion))
  add(query_776350, "Port", newJInt(Port))
  add(query_776350, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_776350, "Version", newJString(Version))
  add(query_776350, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_776350, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_776350, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  result = call_776349.call(nil, query_776350, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_776310(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_776311,
    base: "/", url: url_GetModifyDBCluster_776312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_776412 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBClusterEndpoint_776414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBClusterEndpoint_776413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776415 = query.getOrDefault("Action")
  valid_776415 = validateParameter(valid_776415, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_776415 != nil:
    section.add "Action", valid_776415
  var valid_776416 = query.getOrDefault("Version")
  valid_776416 = validateParameter(valid_776416, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776416 != nil:
    section.add "Version", valid_776416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776417 = header.getOrDefault("X-Amz-Date")
  valid_776417 = validateParameter(valid_776417, JString, required = false,
                                 default = nil)
  if valid_776417 != nil:
    section.add "X-Amz-Date", valid_776417
  var valid_776418 = header.getOrDefault("X-Amz-Security-Token")
  valid_776418 = validateParameter(valid_776418, JString, required = false,
                                 default = nil)
  if valid_776418 != nil:
    section.add "X-Amz-Security-Token", valid_776418
  var valid_776419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776419 = validateParameter(valid_776419, JString, required = false,
                                 default = nil)
  if valid_776419 != nil:
    section.add "X-Amz-Content-Sha256", valid_776419
  var valid_776420 = header.getOrDefault("X-Amz-Algorithm")
  valid_776420 = validateParameter(valid_776420, JString, required = false,
                                 default = nil)
  if valid_776420 != nil:
    section.add "X-Amz-Algorithm", valid_776420
  var valid_776421 = header.getOrDefault("X-Amz-Signature")
  valid_776421 = validateParameter(valid_776421, JString, required = false,
                                 default = nil)
  if valid_776421 != nil:
    section.add "X-Amz-Signature", valid_776421
  var valid_776422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776422 = validateParameter(valid_776422, JString, required = false,
                                 default = nil)
  if valid_776422 != nil:
    section.add "X-Amz-SignedHeaders", valid_776422
  var valid_776423 = header.getOrDefault("X-Amz-Credential")
  valid_776423 = validateParameter(valid_776423, JString, required = false,
                                 default = nil)
  if valid_776423 != nil:
    section.add "X-Amz-Credential", valid_776423
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_776424 = formData.getOrDefault("ExcludedMembers")
  valid_776424 = validateParameter(valid_776424, JArray, required = false,
                                 default = nil)
  if valid_776424 != nil:
    section.add "ExcludedMembers", valid_776424
  var valid_776425 = formData.getOrDefault("EndpointType")
  valid_776425 = validateParameter(valid_776425, JString, required = false,
                                 default = nil)
  if valid_776425 != nil:
    section.add "EndpointType", valid_776425
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_776426 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_776426 = validateParameter(valid_776426, JString, required = true,
                                 default = nil)
  if valid_776426 != nil:
    section.add "DBClusterEndpointIdentifier", valid_776426
  var valid_776427 = formData.getOrDefault("StaticMembers")
  valid_776427 = validateParameter(valid_776427, JArray, required = false,
                                 default = nil)
  if valid_776427 != nil:
    section.add "StaticMembers", valid_776427
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776428: Call_PostModifyDBClusterEndpoint_776412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776428.validator(path, query, header, formData, body)
  let scheme = call_776428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776428.url(scheme.get, call_776428.host, call_776428.base,
                         call_776428.route, valid.getOrDefault("path"))
  result = hook(call_776428, url, valid)

proc call*(call_776429: Call_PostModifyDBClusterEndpoint_776412;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          EndpointType: string = ""; Action: string = "ModifyDBClusterEndpoint";
          StaticMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_776430 = newJObject()
  var formData_776431 = newJObject()
  if ExcludedMembers != nil:
    formData_776431.add "ExcludedMembers", ExcludedMembers
  add(formData_776431, "EndpointType", newJString(EndpointType))
  add(query_776430, "Action", newJString(Action))
  add(formData_776431, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_776431.add "StaticMembers", StaticMembers
  add(query_776430, "Version", newJString(Version))
  result = call_776429.call(nil, query_776430, nil, formData_776431, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_776412(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_776413, base: "/",
    url: url_PostModifyDBClusterEndpoint_776414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_776393 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBClusterEndpoint_776395(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBClusterEndpoint_776394(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  var valid_776396 = query.getOrDefault("EndpointType")
  valid_776396 = validateParameter(valid_776396, JString, required = false,
                                 default = nil)
  if valid_776396 != nil:
    section.add "EndpointType", valid_776396
  var valid_776397 = query.getOrDefault("StaticMembers")
  valid_776397 = validateParameter(valid_776397, JArray, required = false,
                                 default = nil)
  if valid_776397 != nil:
    section.add "StaticMembers", valid_776397
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776398 = query.getOrDefault("Action")
  valid_776398 = validateParameter(valid_776398, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_776398 != nil:
    section.add "Action", valid_776398
  var valid_776399 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_776399 = validateParameter(valid_776399, JString, required = true,
                                 default = nil)
  if valid_776399 != nil:
    section.add "DBClusterEndpointIdentifier", valid_776399
  var valid_776400 = query.getOrDefault("ExcludedMembers")
  valid_776400 = validateParameter(valid_776400, JArray, required = false,
                                 default = nil)
  if valid_776400 != nil:
    section.add "ExcludedMembers", valid_776400
  var valid_776401 = query.getOrDefault("Version")
  valid_776401 = validateParameter(valid_776401, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776401 != nil:
    section.add "Version", valid_776401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776402 = header.getOrDefault("X-Amz-Date")
  valid_776402 = validateParameter(valid_776402, JString, required = false,
                                 default = nil)
  if valid_776402 != nil:
    section.add "X-Amz-Date", valid_776402
  var valid_776403 = header.getOrDefault("X-Amz-Security-Token")
  valid_776403 = validateParameter(valid_776403, JString, required = false,
                                 default = nil)
  if valid_776403 != nil:
    section.add "X-Amz-Security-Token", valid_776403
  var valid_776404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776404 = validateParameter(valid_776404, JString, required = false,
                                 default = nil)
  if valid_776404 != nil:
    section.add "X-Amz-Content-Sha256", valid_776404
  var valid_776405 = header.getOrDefault("X-Amz-Algorithm")
  valid_776405 = validateParameter(valid_776405, JString, required = false,
                                 default = nil)
  if valid_776405 != nil:
    section.add "X-Amz-Algorithm", valid_776405
  var valid_776406 = header.getOrDefault("X-Amz-Signature")
  valid_776406 = validateParameter(valid_776406, JString, required = false,
                                 default = nil)
  if valid_776406 != nil:
    section.add "X-Amz-Signature", valid_776406
  var valid_776407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776407 = validateParameter(valid_776407, JString, required = false,
                                 default = nil)
  if valid_776407 != nil:
    section.add "X-Amz-SignedHeaders", valid_776407
  var valid_776408 = header.getOrDefault("X-Amz-Credential")
  valid_776408 = validateParameter(valid_776408, JString, required = false,
                                 default = nil)
  if valid_776408 != nil:
    section.add "X-Amz-Credential", valid_776408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776409: Call_GetModifyDBClusterEndpoint_776393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776409.validator(path, query, header, formData, body)
  let scheme = call_776409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776409.url(scheme.get, call_776409.host, call_776409.base,
                         call_776409.route, valid.getOrDefault("path"))
  result = hook(call_776409, url, valid)

proc call*(call_776410: Call_GetModifyDBClusterEndpoint_776393;
          DBClusterEndpointIdentifier: string; EndpointType: string = "";
          StaticMembers: JsonNode = nil; Action: string = "ModifyDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_776411 = newJObject()
  add(query_776411, "EndpointType", newJString(EndpointType))
  if StaticMembers != nil:
    query_776411.add "StaticMembers", StaticMembers
  add(query_776411, "Action", newJString(Action))
  add(query_776411, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_776411.add "ExcludedMembers", ExcludedMembers
  add(query_776411, "Version", newJString(Version))
  result = call_776410.call(nil, query_776411, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_776393(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_776394, base: "/",
    url: url_GetModifyDBClusterEndpoint_776395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_776449 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBClusterParameterGroup_776451(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBClusterParameterGroup_776450(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776452 = query.getOrDefault("Action")
  valid_776452 = validateParameter(valid_776452, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_776452 != nil:
    section.add "Action", valid_776452
  var valid_776453 = query.getOrDefault("Version")
  valid_776453 = validateParameter(valid_776453, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776453 != nil:
    section.add "Version", valid_776453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776454 = header.getOrDefault("X-Amz-Date")
  valid_776454 = validateParameter(valid_776454, JString, required = false,
                                 default = nil)
  if valid_776454 != nil:
    section.add "X-Amz-Date", valid_776454
  var valid_776455 = header.getOrDefault("X-Amz-Security-Token")
  valid_776455 = validateParameter(valid_776455, JString, required = false,
                                 default = nil)
  if valid_776455 != nil:
    section.add "X-Amz-Security-Token", valid_776455
  var valid_776456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776456 = validateParameter(valid_776456, JString, required = false,
                                 default = nil)
  if valid_776456 != nil:
    section.add "X-Amz-Content-Sha256", valid_776456
  var valid_776457 = header.getOrDefault("X-Amz-Algorithm")
  valid_776457 = validateParameter(valid_776457, JString, required = false,
                                 default = nil)
  if valid_776457 != nil:
    section.add "X-Amz-Algorithm", valid_776457
  var valid_776458 = header.getOrDefault("X-Amz-Signature")
  valid_776458 = validateParameter(valid_776458, JString, required = false,
                                 default = nil)
  if valid_776458 != nil:
    section.add "X-Amz-Signature", valid_776458
  var valid_776459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776459 = validateParameter(valid_776459, JString, required = false,
                                 default = nil)
  if valid_776459 != nil:
    section.add "X-Amz-SignedHeaders", valid_776459
  var valid_776460 = header.getOrDefault("X-Amz-Credential")
  valid_776460 = validateParameter(valid_776460, JString, required = false,
                                 default = nil)
  if valid_776460 != nil:
    section.add "X-Amz-Credential", valid_776460
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_776461 = formData.getOrDefault("Parameters")
  valid_776461 = validateParameter(valid_776461, JArray, required = true, default = nil)
  if valid_776461 != nil:
    section.add "Parameters", valid_776461
  var valid_776462 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_776462 = validateParameter(valid_776462, JString, required = true,
                                 default = nil)
  if valid_776462 != nil:
    section.add "DBClusterParameterGroupName", valid_776462
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776463: Call_PostModifyDBClusterParameterGroup_776449;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776463.validator(path, query, header, formData, body)
  let scheme = call_776463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776463.url(scheme.get, call_776463.host, call_776463.base,
                         call_776463.route, valid.getOrDefault("path"))
  result = hook(call_776463, url, valid)

proc call*(call_776464: Call_PostModifyDBClusterParameterGroup_776449;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_776465 = newJObject()
  var formData_776466 = newJObject()
  if Parameters != nil:
    formData_776466.add "Parameters", Parameters
  add(query_776465, "Action", newJString(Action))
  add(formData_776466, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_776465, "Version", newJString(Version))
  result = call_776464.call(nil, query_776465, nil, formData_776466, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_776449(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_776450, base: "/",
    url: url_PostModifyDBClusterParameterGroup_776451,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_776432 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBClusterParameterGroup_776434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBClusterParameterGroup_776433(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_776435 = query.getOrDefault("DBClusterParameterGroupName")
  valid_776435 = validateParameter(valid_776435, JString, required = true,
                                 default = nil)
  if valid_776435 != nil:
    section.add "DBClusterParameterGroupName", valid_776435
  var valid_776436 = query.getOrDefault("Parameters")
  valid_776436 = validateParameter(valid_776436, JArray, required = true, default = nil)
  if valid_776436 != nil:
    section.add "Parameters", valid_776436
  var valid_776437 = query.getOrDefault("Action")
  valid_776437 = validateParameter(valid_776437, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_776437 != nil:
    section.add "Action", valid_776437
  var valid_776438 = query.getOrDefault("Version")
  valid_776438 = validateParameter(valid_776438, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776438 != nil:
    section.add "Version", valid_776438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776439 = header.getOrDefault("X-Amz-Date")
  valid_776439 = validateParameter(valid_776439, JString, required = false,
                                 default = nil)
  if valid_776439 != nil:
    section.add "X-Amz-Date", valid_776439
  var valid_776440 = header.getOrDefault("X-Amz-Security-Token")
  valid_776440 = validateParameter(valid_776440, JString, required = false,
                                 default = nil)
  if valid_776440 != nil:
    section.add "X-Amz-Security-Token", valid_776440
  var valid_776441 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776441 = validateParameter(valid_776441, JString, required = false,
                                 default = nil)
  if valid_776441 != nil:
    section.add "X-Amz-Content-Sha256", valid_776441
  var valid_776442 = header.getOrDefault("X-Amz-Algorithm")
  valid_776442 = validateParameter(valid_776442, JString, required = false,
                                 default = nil)
  if valid_776442 != nil:
    section.add "X-Amz-Algorithm", valid_776442
  var valid_776443 = header.getOrDefault("X-Amz-Signature")
  valid_776443 = validateParameter(valid_776443, JString, required = false,
                                 default = nil)
  if valid_776443 != nil:
    section.add "X-Amz-Signature", valid_776443
  var valid_776444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776444 = validateParameter(valid_776444, JString, required = false,
                                 default = nil)
  if valid_776444 != nil:
    section.add "X-Amz-SignedHeaders", valid_776444
  var valid_776445 = header.getOrDefault("X-Amz-Credential")
  valid_776445 = validateParameter(valid_776445, JString, required = false,
                                 default = nil)
  if valid_776445 != nil:
    section.add "X-Amz-Credential", valid_776445
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776446: Call_GetModifyDBClusterParameterGroup_776432;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776446.validator(path, query, header, formData, body)
  let scheme = call_776446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776446.url(scheme.get, call_776446.host, call_776446.base,
                         call_776446.route, valid.getOrDefault("path"))
  result = hook(call_776446, url, valid)

proc call*(call_776447: Call_GetModifyDBClusterParameterGroup_776432;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776448 = newJObject()
  add(query_776448, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_776448.add "Parameters", Parameters
  add(query_776448, "Action", newJString(Action))
  add(query_776448, "Version", newJString(Version))
  result = call_776447.call(nil, query_776448, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_776432(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_776433, base: "/",
    url: url_GetModifyDBClusterParameterGroup_776434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_776486 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBClusterSnapshotAttribute_776488(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBClusterSnapshotAttribute_776487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776489 = query.getOrDefault("Action")
  valid_776489 = validateParameter(valid_776489, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_776489 != nil:
    section.add "Action", valid_776489
  var valid_776490 = query.getOrDefault("Version")
  valid_776490 = validateParameter(valid_776490, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776490 != nil:
    section.add "Version", valid_776490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776491 = header.getOrDefault("X-Amz-Date")
  valid_776491 = validateParameter(valid_776491, JString, required = false,
                                 default = nil)
  if valid_776491 != nil:
    section.add "X-Amz-Date", valid_776491
  var valid_776492 = header.getOrDefault("X-Amz-Security-Token")
  valid_776492 = validateParameter(valid_776492, JString, required = false,
                                 default = nil)
  if valid_776492 != nil:
    section.add "X-Amz-Security-Token", valid_776492
  var valid_776493 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776493 = validateParameter(valid_776493, JString, required = false,
                                 default = nil)
  if valid_776493 != nil:
    section.add "X-Amz-Content-Sha256", valid_776493
  var valid_776494 = header.getOrDefault("X-Amz-Algorithm")
  valid_776494 = validateParameter(valid_776494, JString, required = false,
                                 default = nil)
  if valid_776494 != nil:
    section.add "X-Amz-Algorithm", valid_776494
  var valid_776495 = header.getOrDefault("X-Amz-Signature")
  valid_776495 = validateParameter(valid_776495, JString, required = false,
                                 default = nil)
  if valid_776495 != nil:
    section.add "X-Amz-Signature", valid_776495
  var valid_776496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776496 = validateParameter(valid_776496, JString, required = false,
                                 default = nil)
  if valid_776496 != nil:
    section.add "X-Amz-SignedHeaders", valid_776496
  var valid_776497 = header.getOrDefault("X-Amz-Credential")
  valid_776497 = validateParameter(valid_776497, JString, required = false,
                                 default = nil)
  if valid_776497 != nil:
    section.add "X-Amz-Credential", valid_776497
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_776498 = formData.getOrDefault("AttributeName")
  valid_776498 = validateParameter(valid_776498, JString, required = true,
                                 default = nil)
  if valid_776498 != nil:
    section.add "AttributeName", valid_776498
  var valid_776499 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_776499 = validateParameter(valid_776499, JString, required = true,
                                 default = nil)
  if valid_776499 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_776499
  var valid_776500 = formData.getOrDefault("ValuesToRemove")
  valid_776500 = validateParameter(valid_776500, JArray, required = false,
                                 default = nil)
  if valid_776500 != nil:
    section.add "ValuesToRemove", valid_776500
  var valid_776501 = formData.getOrDefault("ValuesToAdd")
  valid_776501 = validateParameter(valid_776501, JArray, required = false,
                                 default = nil)
  if valid_776501 != nil:
    section.add "ValuesToAdd", valid_776501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776502: Call_PostModifyDBClusterSnapshotAttribute_776486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776502.validator(path, query, header, formData, body)
  let scheme = call_776502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776502.url(scheme.get, call_776502.host, call_776502.base,
                         call_776502.route, valid.getOrDefault("path"))
  result = hook(call_776502, url, valid)

proc call*(call_776503: Call_PostModifyDBClusterSnapshotAttribute_776486;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_776504 = newJObject()
  var formData_776505 = newJObject()
  add(formData_776505, "AttributeName", newJString(AttributeName))
  add(formData_776505, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_776504, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_776505.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_776505.add "ValuesToAdd", ValuesToAdd
  add(query_776504, "Version", newJString(Version))
  result = call_776503.call(nil, query_776504, nil, formData_776505, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_776486(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_776487, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_776488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_776467 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBClusterSnapshotAttribute_776469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBClusterSnapshotAttribute_776468(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_776470 = query.getOrDefault("AttributeName")
  valid_776470 = validateParameter(valid_776470, JString, required = true,
                                 default = nil)
  if valid_776470 != nil:
    section.add "AttributeName", valid_776470
  var valid_776471 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_776471 = validateParameter(valid_776471, JString, required = true,
                                 default = nil)
  if valid_776471 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_776471
  var valid_776472 = query.getOrDefault("ValuesToAdd")
  valid_776472 = validateParameter(valid_776472, JArray, required = false,
                                 default = nil)
  if valid_776472 != nil:
    section.add "ValuesToAdd", valid_776472
  var valid_776473 = query.getOrDefault("Action")
  valid_776473 = validateParameter(valid_776473, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_776473 != nil:
    section.add "Action", valid_776473
  var valid_776474 = query.getOrDefault("ValuesToRemove")
  valid_776474 = validateParameter(valid_776474, JArray, required = false,
                                 default = nil)
  if valid_776474 != nil:
    section.add "ValuesToRemove", valid_776474
  var valid_776475 = query.getOrDefault("Version")
  valid_776475 = validateParameter(valid_776475, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776475 != nil:
    section.add "Version", valid_776475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776476 = header.getOrDefault("X-Amz-Date")
  valid_776476 = validateParameter(valid_776476, JString, required = false,
                                 default = nil)
  if valid_776476 != nil:
    section.add "X-Amz-Date", valid_776476
  var valid_776477 = header.getOrDefault("X-Amz-Security-Token")
  valid_776477 = validateParameter(valid_776477, JString, required = false,
                                 default = nil)
  if valid_776477 != nil:
    section.add "X-Amz-Security-Token", valid_776477
  var valid_776478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776478 = validateParameter(valid_776478, JString, required = false,
                                 default = nil)
  if valid_776478 != nil:
    section.add "X-Amz-Content-Sha256", valid_776478
  var valid_776479 = header.getOrDefault("X-Amz-Algorithm")
  valid_776479 = validateParameter(valid_776479, JString, required = false,
                                 default = nil)
  if valid_776479 != nil:
    section.add "X-Amz-Algorithm", valid_776479
  var valid_776480 = header.getOrDefault("X-Amz-Signature")
  valid_776480 = validateParameter(valid_776480, JString, required = false,
                                 default = nil)
  if valid_776480 != nil:
    section.add "X-Amz-Signature", valid_776480
  var valid_776481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776481 = validateParameter(valid_776481, JString, required = false,
                                 default = nil)
  if valid_776481 != nil:
    section.add "X-Amz-SignedHeaders", valid_776481
  var valid_776482 = header.getOrDefault("X-Amz-Credential")
  valid_776482 = validateParameter(valid_776482, JString, required = false,
                                 default = nil)
  if valid_776482 != nil:
    section.add "X-Amz-Credential", valid_776482
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776483: Call_GetModifyDBClusterSnapshotAttribute_776467;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776483.validator(path, query, header, formData, body)
  let scheme = call_776483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776483.url(scheme.get, call_776483.host, call_776483.base,
                         call_776483.route, valid.getOrDefault("path"))
  result = hook(call_776483, url, valid)

proc call*(call_776484: Call_GetModifyDBClusterSnapshotAttribute_776467;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_776485 = newJObject()
  add(query_776485, "AttributeName", newJString(AttributeName))
  add(query_776485, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_776485.add "ValuesToAdd", ValuesToAdd
  add(query_776485, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_776485.add "ValuesToRemove", ValuesToRemove
  add(query_776485, "Version", newJString(Version))
  result = call_776484.call(nil, query_776485, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_776467(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_776468, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_776469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_776563 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBInstance_776565(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBInstance_776564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776566 = query.getOrDefault("Action")
  valid_776566 = validateParameter(valid_776566, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_776566 != nil:
    section.add "Action", valid_776566
  var valid_776567 = query.getOrDefault("Version")
  valid_776567 = validateParameter(valid_776567, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776567 != nil:
    section.add "Version", valid_776567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776568 = header.getOrDefault("X-Amz-Date")
  valid_776568 = validateParameter(valid_776568, JString, required = false,
                                 default = nil)
  if valid_776568 != nil:
    section.add "X-Amz-Date", valid_776568
  var valid_776569 = header.getOrDefault("X-Amz-Security-Token")
  valid_776569 = validateParameter(valid_776569, JString, required = false,
                                 default = nil)
  if valid_776569 != nil:
    section.add "X-Amz-Security-Token", valid_776569
  var valid_776570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776570 = validateParameter(valid_776570, JString, required = false,
                                 default = nil)
  if valid_776570 != nil:
    section.add "X-Amz-Content-Sha256", valid_776570
  var valid_776571 = header.getOrDefault("X-Amz-Algorithm")
  valid_776571 = validateParameter(valid_776571, JString, required = false,
                                 default = nil)
  if valid_776571 != nil:
    section.add "X-Amz-Algorithm", valid_776571
  var valid_776572 = header.getOrDefault("X-Amz-Signature")
  valid_776572 = validateParameter(valid_776572, JString, required = false,
                                 default = nil)
  if valid_776572 != nil:
    section.add "X-Amz-Signature", valid_776572
  var valid_776573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776573 = validateParameter(valid_776573, JString, required = false,
                                 default = nil)
  if valid_776573 != nil:
    section.add "X-Amz-SignedHeaders", valid_776573
  var valid_776574 = header.getOrDefault("X-Amz-Credential")
  valid_776574 = validateParameter(valid_776574, JString, required = false,
                                 default = nil)
  if valid_776574 != nil:
    section.add "X-Amz-Credential", valid_776574
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: JString
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_776575 = formData.getOrDefault("ProcessorFeatures")
  valid_776575 = validateParameter(valid_776575, JArray, required = false,
                                 default = nil)
  if valid_776575 != nil:
    section.add "ProcessorFeatures", valid_776575
  var valid_776576 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_776576 = validateParameter(valid_776576, JArray, required = false,
                                 default = nil)
  if valid_776576 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_776576
  var valid_776577 = formData.getOrDefault("ApplyImmediately")
  valid_776577 = validateParameter(valid_776577, JBool, required = false, default = nil)
  if valid_776577 != nil:
    section.add "ApplyImmediately", valid_776577
  var valid_776578 = formData.getOrDefault("EnablePerformanceInsights")
  valid_776578 = validateParameter(valid_776578, JBool, required = false, default = nil)
  if valid_776578 != nil:
    section.add "EnablePerformanceInsights", valid_776578
  var valid_776579 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_776579 = validateParameter(valid_776579, JArray, required = false,
                                 default = nil)
  if valid_776579 != nil:
    section.add "VpcSecurityGroupIds", valid_776579
  var valid_776580 = formData.getOrDefault("Iops")
  valid_776580 = validateParameter(valid_776580, JInt, required = false, default = nil)
  if valid_776580 != nil:
    section.add "Iops", valid_776580
  var valid_776581 = formData.getOrDefault("BackupRetentionPeriod")
  valid_776581 = validateParameter(valid_776581, JInt, required = false, default = nil)
  if valid_776581 != nil:
    section.add "BackupRetentionPeriod", valid_776581
  var valid_776582 = formData.getOrDefault("MaxAllocatedStorage")
  valid_776582 = validateParameter(valid_776582, JInt, required = false, default = nil)
  if valid_776582 != nil:
    section.add "MaxAllocatedStorage", valid_776582
  var valid_776583 = formData.getOrDefault("TdeCredentialArn")
  valid_776583 = validateParameter(valid_776583, JString, required = false,
                                 default = nil)
  if valid_776583 != nil:
    section.add "TdeCredentialArn", valid_776583
  var valid_776584 = formData.getOrDefault("DeletionProtection")
  valid_776584 = validateParameter(valid_776584, JBool, required = false, default = nil)
  if valid_776584 != nil:
    section.add "DeletionProtection", valid_776584
  var valid_776585 = formData.getOrDefault("DBSubnetGroupName")
  valid_776585 = validateParameter(valid_776585, JString, required = false,
                                 default = nil)
  if valid_776585 != nil:
    section.add "DBSubnetGroupName", valid_776585
  var valid_776586 = formData.getOrDefault("MultiAZ")
  valid_776586 = validateParameter(valid_776586, JBool, required = false, default = nil)
  if valid_776586 != nil:
    section.add "MultiAZ", valid_776586
  var valid_776587 = formData.getOrDefault("DBPortNumber")
  valid_776587 = validateParameter(valid_776587, JInt, required = false, default = nil)
  if valid_776587 != nil:
    section.add "DBPortNumber", valid_776587
  var valid_776588 = formData.getOrDefault("PubliclyAccessible")
  valid_776588 = validateParameter(valid_776588, JBool, required = false, default = nil)
  if valid_776588 != nil:
    section.add "PubliclyAccessible", valid_776588
  var valid_776589 = formData.getOrDefault("StorageType")
  valid_776589 = validateParameter(valid_776589, JString, required = false,
                                 default = nil)
  if valid_776589 != nil:
    section.add "StorageType", valid_776589
  var valid_776590 = formData.getOrDefault("Domain")
  valid_776590 = validateParameter(valid_776590, JString, required = false,
                                 default = nil)
  if valid_776590 != nil:
    section.add "Domain", valid_776590
  var valid_776591 = formData.getOrDefault("LicenseModel")
  valid_776591 = validateParameter(valid_776591, JString, required = false,
                                 default = nil)
  if valid_776591 != nil:
    section.add "LicenseModel", valid_776591
  var valid_776592 = formData.getOrDefault("MonitoringRoleArn")
  valid_776592 = validateParameter(valid_776592, JString, required = false,
                                 default = nil)
  if valid_776592 != nil:
    section.add "MonitoringRoleArn", valid_776592
  var valid_776593 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_776593 = validateParameter(valid_776593, JInt, required = false, default = nil)
  if valid_776593 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_776593
  var valid_776594 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_776594 = validateParameter(valid_776594, JBool, required = false, default = nil)
  if valid_776594 != nil:
    section.add "UseDefaultProcessorFeatures", valid_776594
  var valid_776595 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_776595 = validateParameter(valid_776595, JBool, required = false, default = nil)
  if valid_776595 != nil:
    section.add "AllowMajorVersionUpgrade", valid_776595
  var valid_776596 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_776596 = validateParameter(valid_776596, JString, required = false,
                                 default = nil)
  if valid_776596 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_776596
  var valid_776597 = formData.getOrDefault("DBSecurityGroups")
  valid_776597 = validateParameter(valid_776597, JArray, required = false,
                                 default = nil)
  if valid_776597 != nil:
    section.add "DBSecurityGroups", valid_776597
  var valid_776598 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_776598 = validateParameter(valid_776598, JBool, required = false, default = nil)
  if valid_776598 != nil:
    section.add "CopyTagsToSnapshot", valid_776598
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_776599 = formData.getOrDefault("DBInstanceIdentifier")
  valid_776599 = validateParameter(valid_776599, JString, required = true,
                                 default = nil)
  if valid_776599 != nil:
    section.add "DBInstanceIdentifier", valid_776599
  var valid_776600 = formData.getOrDefault("OptionGroupName")
  valid_776600 = validateParameter(valid_776600, JString, required = false,
                                 default = nil)
  if valid_776600 != nil:
    section.add "OptionGroupName", valid_776600
  var valid_776601 = formData.getOrDefault("DBParameterGroupName")
  valid_776601 = validateParameter(valid_776601, JString, required = false,
                                 default = nil)
  if valid_776601 != nil:
    section.add "DBParameterGroupName", valid_776601
  var valid_776602 = formData.getOrDefault("CACertificateIdentifier")
  valid_776602 = validateParameter(valid_776602, JString, required = false,
                                 default = nil)
  if valid_776602 != nil:
    section.add "CACertificateIdentifier", valid_776602
  var valid_776603 = formData.getOrDefault("MasterUserPassword")
  valid_776603 = validateParameter(valid_776603, JString, required = false,
                                 default = nil)
  if valid_776603 != nil:
    section.add "MasterUserPassword", valid_776603
  var valid_776604 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_776604 = validateParameter(valid_776604, JString, required = false,
                                 default = nil)
  if valid_776604 != nil:
    section.add "NewDBInstanceIdentifier", valid_776604
  var valid_776605 = formData.getOrDefault("TdeCredentialPassword")
  valid_776605 = validateParameter(valid_776605, JString, required = false,
                                 default = nil)
  if valid_776605 != nil:
    section.add "TdeCredentialPassword", valid_776605
  var valid_776606 = formData.getOrDefault("MonitoringInterval")
  valid_776606 = validateParameter(valid_776606, JInt, required = false, default = nil)
  if valid_776606 != nil:
    section.add "MonitoringInterval", valid_776606
  var valid_776607 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_776607 = validateParameter(valid_776607, JArray, required = false,
                                 default = nil)
  if valid_776607 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_776607
  var valid_776608 = formData.getOrDefault("DomainIAMRoleName")
  valid_776608 = validateParameter(valid_776608, JString, required = false,
                                 default = nil)
  if valid_776608 != nil:
    section.add "DomainIAMRoleName", valid_776608
  var valid_776609 = formData.getOrDefault("AllocatedStorage")
  valid_776609 = validateParameter(valid_776609, JInt, required = false, default = nil)
  if valid_776609 != nil:
    section.add "AllocatedStorage", valid_776609
  var valid_776610 = formData.getOrDefault("PromotionTier")
  valid_776610 = validateParameter(valid_776610, JInt, required = false, default = nil)
  if valid_776610 != nil:
    section.add "PromotionTier", valid_776610
  var valid_776611 = formData.getOrDefault("DBInstanceClass")
  valid_776611 = validateParameter(valid_776611, JString, required = false,
                                 default = nil)
  if valid_776611 != nil:
    section.add "DBInstanceClass", valid_776611
  var valid_776612 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_776612 = validateParameter(valid_776612, JBool, required = false, default = nil)
  if valid_776612 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_776612
  var valid_776613 = formData.getOrDefault("PreferredBackupWindow")
  valid_776613 = validateParameter(valid_776613, JString, required = false,
                                 default = nil)
  if valid_776613 != nil:
    section.add "PreferredBackupWindow", valid_776613
  var valid_776614 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_776614 = validateParameter(valid_776614, JBool, required = false, default = nil)
  if valid_776614 != nil:
    section.add "AutoMinorVersionUpgrade", valid_776614
  var valid_776615 = formData.getOrDefault("EngineVersion")
  valid_776615 = validateParameter(valid_776615, JString, required = false,
                                 default = nil)
  if valid_776615 != nil:
    section.add "EngineVersion", valid_776615
  var valid_776616 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_776616 = validateParameter(valid_776616, JString, required = false,
                                 default = nil)
  if valid_776616 != nil:
    section.add "PreferredMaintenanceWindow", valid_776616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776617: Call_PostModifyDBInstance_776563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_776617.validator(path, query, header, formData, body)
  let scheme = call_776617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776617.url(scheme.get, call_776617.host, call_776617.base,
                         call_776617.route, valid.getOrDefault("path"))
  result = hook(call_776617, url, valid)

proc call*(call_776618: Call_PostModifyDBInstance_776563;
          DBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          TdeCredentialArn: string = ""; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: string
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_776619 = newJObject()
  var formData_776620 = newJObject()
  if ProcessorFeatures != nil:
    formData_776620.add "ProcessorFeatures", ProcessorFeatures
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_776620.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_776620, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_776620, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_776620.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_776620, "Iops", newJInt(Iops))
  add(formData_776620, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_776620, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_776620, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_776620, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_776620, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_776620, "MultiAZ", newJBool(MultiAZ))
  add(formData_776620, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_776620, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_776620, "StorageType", newJString(StorageType))
  add(formData_776620, "Domain", newJString(Domain))
  add(formData_776620, "LicenseModel", newJString(LicenseModel))
  add(formData_776620, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_776620, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_776620, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_776620, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_776620, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_776620.add "DBSecurityGroups", DBSecurityGroups
  add(formData_776620, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_776620, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_776620, "OptionGroupName", newJString(OptionGroupName))
  add(formData_776620, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_776620, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_776620, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_776620, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_776620, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_776620, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_776620.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_776620, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_776619, "Action", newJString(Action))
  add(formData_776620, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_776620, "PromotionTier", newJInt(PromotionTier))
  add(formData_776620, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_776620, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_776620, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_776620, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_776620, "EngineVersion", newJString(EngineVersion))
  add(query_776619, "Version", newJString(Version))
  add(formData_776620, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_776618.call(nil, query_776619, nil, formData_776620, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_776563(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_776564, base: "/",
    url: url_PostModifyDBInstance_776565, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_776506 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBInstance_776508(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBInstance_776507(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  section = newJObject()
  var valid_776509 = query.getOrDefault("MonitoringInterval")
  valid_776509 = validateParameter(valid_776509, JInt, required = false, default = nil)
  if valid_776509 != nil:
    section.add "MonitoringInterval", valid_776509
  var valid_776510 = query.getOrDefault("PromotionTier")
  valid_776510 = validateParameter(valid_776510, JInt, required = false, default = nil)
  if valid_776510 != nil:
    section.add "PromotionTier", valid_776510
  var valid_776511 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_776511 = validateParameter(valid_776511, JBool, required = false, default = nil)
  if valid_776511 != nil:
    section.add "UseDefaultProcessorFeatures", valid_776511
  var valid_776512 = query.getOrDefault("MaxAllocatedStorage")
  valid_776512 = validateParameter(valid_776512, JInt, required = false, default = nil)
  if valid_776512 != nil:
    section.add "MaxAllocatedStorage", valid_776512
  var valid_776513 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_776513 = validateParameter(valid_776513, JInt, required = false, default = nil)
  if valid_776513 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_776513
  var valid_776514 = query.getOrDefault("AllocatedStorage")
  valid_776514 = validateParameter(valid_776514, JInt, required = false, default = nil)
  if valid_776514 != nil:
    section.add "AllocatedStorage", valid_776514
  var valid_776515 = query.getOrDefault("StorageType")
  valid_776515 = validateParameter(valid_776515, JString, required = false,
                                 default = nil)
  if valid_776515 != nil:
    section.add "StorageType", valid_776515
  var valid_776516 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_776516 = validateParameter(valid_776516, JBool, required = false, default = nil)
  if valid_776516 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_776516
  var valid_776517 = query.getOrDefault("DBSecurityGroups")
  valid_776517 = validateParameter(valid_776517, JArray, required = false,
                                 default = nil)
  if valid_776517 != nil:
    section.add "DBSecurityGroups", valid_776517
  var valid_776518 = query.getOrDefault("MasterUserPassword")
  valid_776518 = validateParameter(valid_776518, JString, required = false,
                                 default = nil)
  if valid_776518 != nil:
    section.add "MasterUserPassword", valid_776518
  var valid_776519 = query.getOrDefault("MonitoringRoleArn")
  valid_776519 = validateParameter(valid_776519, JString, required = false,
                                 default = nil)
  if valid_776519 != nil:
    section.add "MonitoringRoleArn", valid_776519
  var valid_776520 = query.getOrDefault("MultiAZ")
  valid_776520 = validateParameter(valid_776520, JBool, required = false, default = nil)
  if valid_776520 != nil:
    section.add "MultiAZ", valid_776520
  var valid_776521 = query.getOrDefault("TdeCredentialPassword")
  valid_776521 = validateParameter(valid_776521, JString, required = false,
                                 default = nil)
  if valid_776521 != nil:
    section.add "TdeCredentialPassword", valid_776521
  var valid_776522 = query.getOrDefault("DomainIAMRoleName")
  valid_776522 = validateParameter(valid_776522, JString, required = false,
                                 default = nil)
  if valid_776522 != nil:
    section.add "DomainIAMRoleName", valid_776522
  var valid_776523 = query.getOrDefault("BackupRetentionPeriod")
  valid_776523 = validateParameter(valid_776523, JInt, required = false, default = nil)
  if valid_776523 != nil:
    section.add "BackupRetentionPeriod", valid_776523
  var valid_776524 = query.getOrDefault("CopyTagsToSnapshot")
  valid_776524 = validateParameter(valid_776524, JBool, required = false, default = nil)
  if valid_776524 != nil:
    section.add "CopyTagsToSnapshot", valid_776524
  var valid_776525 = query.getOrDefault("DeletionProtection")
  valid_776525 = validateParameter(valid_776525, JBool, required = false, default = nil)
  if valid_776525 != nil:
    section.add "DeletionProtection", valid_776525
  var valid_776526 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_776526 = validateParameter(valid_776526, JString, required = false,
                                 default = nil)
  if valid_776526 != nil:
    section.add "NewDBInstanceIdentifier", valid_776526
  var valid_776527 = query.getOrDefault("DBSubnetGroupName")
  valid_776527 = validateParameter(valid_776527, JString, required = false,
                                 default = nil)
  if valid_776527 != nil:
    section.add "DBSubnetGroupName", valid_776527
  var valid_776528 = query.getOrDefault("Domain")
  valid_776528 = validateParameter(valid_776528, JString, required = false,
                                 default = nil)
  if valid_776528 != nil:
    section.add "Domain", valid_776528
  var valid_776529 = query.getOrDefault("EngineVersion")
  valid_776529 = validateParameter(valid_776529, JString, required = false,
                                 default = nil)
  if valid_776529 != nil:
    section.add "EngineVersion", valid_776529
  var valid_776530 = query.getOrDefault("PreferredBackupWindow")
  valid_776530 = validateParameter(valid_776530, JString, required = false,
                                 default = nil)
  if valid_776530 != nil:
    section.add "PreferredBackupWindow", valid_776530
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_776531 = query.getOrDefault("DBInstanceIdentifier")
  valid_776531 = validateParameter(valid_776531, JString, required = true,
                                 default = nil)
  if valid_776531 != nil:
    section.add "DBInstanceIdentifier", valid_776531
  var valid_776532 = query.getOrDefault("CACertificateIdentifier")
  valid_776532 = validateParameter(valid_776532, JString, required = false,
                                 default = nil)
  if valid_776532 != nil:
    section.add "CACertificateIdentifier", valid_776532
  var valid_776533 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_776533 = validateParameter(valid_776533, JString, required = false,
                                 default = nil)
  if valid_776533 != nil:
    section.add "PreferredMaintenanceWindow", valid_776533
  var valid_776534 = query.getOrDefault("ProcessorFeatures")
  valid_776534 = validateParameter(valid_776534, JArray, required = false,
                                 default = nil)
  if valid_776534 != nil:
    section.add "ProcessorFeatures", valid_776534
  var valid_776535 = query.getOrDefault("OptionGroupName")
  valid_776535 = validateParameter(valid_776535, JString, required = false,
                                 default = nil)
  if valid_776535 != nil:
    section.add "OptionGroupName", valid_776535
  var valid_776536 = query.getOrDefault("Iops")
  valid_776536 = validateParameter(valid_776536, JInt, required = false, default = nil)
  if valid_776536 != nil:
    section.add "Iops", valid_776536
  var valid_776537 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_776537 = validateParameter(valid_776537, JArray, required = false,
                                 default = nil)
  if valid_776537 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_776537
  var valid_776538 = query.getOrDefault("VpcSecurityGroupIds")
  valid_776538 = validateParameter(valid_776538, JArray, required = false,
                                 default = nil)
  if valid_776538 != nil:
    section.add "VpcSecurityGroupIds", valid_776538
  var valid_776539 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_776539 = validateParameter(valid_776539, JArray, required = false,
                                 default = nil)
  if valid_776539 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_776539
  var valid_776540 = query.getOrDefault("LicenseModel")
  valid_776540 = validateParameter(valid_776540, JString, required = false,
                                 default = nil)
  if valid_776540 != nil:
    section.add "LicenseModel", valid_776540
  var valid_776541 = query.getOrDefault("DBPortNumber")
  valid_776541 = validateParameter(valid_776541, JInt, required = false, default = nil)
  if valid_776541 != nil:
    section.add "DBPortNumber", valid_776541
  var valid_776542 = query.getOrDefault("DBParameterGroupName")
  valid_776542 = validateParameter(valid_776542, JString, required = false,
                                 default = nil)
  if valid_776542 != nil:
    section.add "DBParameterGroupName", valid_776542
  var valid_776543 = query.getOrDefault("DBInstanceClass")
  valid_776543 = validateParameter(valid_776543, JString, required = false,
                                 default = nil)
  if valid_776543 != nil:
    section.add "DBInstanceClass", valid_776543
  var valid_776544 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_776544 = validateParameter(valid_776544, JString, required = false,
                                 default = nil)
  if valid_776544 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_776544
  var valid_776545 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_776545 = validateParameter(valid_776545, JBool, required = false, default = nil)
  if valid_776545 != nil:
    section.add "AllowMajorVersionUpgrade", valid_776545
  var valid_776546 = query.getOrDefault("Action")
  valid_776546 = validateParameter(valid_776546, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_776546 != nil:
    section.add "Action", valid_776546
  var valid_776547 = query.getOrDefault("TdeCredentialArn")
  valid_776547 = validateParameter(valid_776547, JString, required = false,
                                 default = nil)
  if valid_776547 != nil:
    section.add "TdeCredentialArn", valid_776547
  var valid_776548 = query.getOrDefault("PubliclyAccessible")
  valid_776548 = validateParameter(valid_776548, JBool, required = false, default = nil)
  if valid_776548 != nil:
    section.add "PubliclyAccessible", valid_776548
  var valid_776549 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_776549 = validateParameter(valid_776549, JBool, required = false, default = nil)
  if valid_776549 != nil:
    section.add "AutoMinorVersionUpgrade", valid_776549
  var valid_776550 = query.getOrDefault("EnablePerformanceInsights")
  valid_776550 = validateParameter(valid_776550, JBool, required = false, default = nil)
  if valid_776550 != nil:
    section.add "EnablePerformanceInsights", valid_776550
  var valid_776551 = query.getOrDefault("Version")
  valid_776551 = validateParameter(valid_776551, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776551 != nil:
    section.add "Version", valid_776551
  var valid_776552 = query.getOrDefault("ApplyImmediately")
  valid_776552 = validateParameter(valid_776552, JBool, required = false, default = nil)
  if valid_776552 != nil:
    section.add "ApplyImmediately", valid_776552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776553 = header.getOrDefault("X-Amz-Date")
  valid_776553 = validateParameter(valid_776553, JString, required = false,
                                 default = nil)
  if valid_776553 != nil:
    section.add "X-Amz-Date", valid_776553
  var valid_776554 = header.getOrDefault("X-Amz-Security-Token")
  valid_776554 = validateParameter(valid_776554, JString, required = false,
                                 default = nil)
  if valid_776554 != nil:
    section.add "X-Amz-Security-Token", valid_776554
  var valid_776555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776555 = validateParameter(valid_776555, JString, required = false,
                                 default = nil)
  if valid_776555 != nil:
    section.add "X-Amz-Content-Sha256", valid_776555
  var valid_776556 = header.getOrDefault("X-Amz-Algorithm")
  valid_776556 = validateParameter(valid_776556, JString, required = false,
                                 default = nil)
  if valid_776556 != nil:
    section.add "X-Amz-Algorithm", valid_776556
  var valid_776557 = header.getOrDefault("X-Amz-Signature")
  valid_776557 = validateParameter(valid_776557, JString, required = false,
                                 default = nil)
  if valid_776557 != nil:
    section.add "X-Amz-Signature", valid_776557
  var valid_776558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776558 = validateParameter(valid_776558, JString, required = false,
                                 default = nil)
  if valid_776558 != nil:
    section.add "X-Amz-SignedHeaders", valid_776558
  var valid_776559 = header.getOrDefault("X-Amz-Credential")
  valid_776559 = validateParameter(valid_776559, JString, required = false,
                                 default = nil)
  if valid_776559 != nil:
    section.add "X-Amz-Credential", valid_776559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776560: Call_GetModifyDBInstance_776506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_776560.validator(path, query, header, formData, body)
  let scheme = call_776560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776560.url(scheme.get, call_776560.host, call_776560.base,
                         call_776560.route, valid.getOrDefault("path"))
  result = hook(call_776560, url, valid)

proc call*(call_776561: Call_GetModifyDBInstance_776506;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; UseDefaultProcessorFeatures: bool = false;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; NewDBInstanceIdentifier: string = "";
          DBSubnetGroupName: string = ""; Domain: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : The Active Directory Domain to move the instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  var query_776562 = newJObject()
  add(query_776562, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_776562, "PromotionTier", newJInt(PromotionTier))
  add(query_776562, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_776562, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_776562, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_776562, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_776562, "StorageType", newJString(StorageType))
  add(query_776562, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_776562.add "DBSecurityGroups", DBSecurityGroups
  add(query_776562, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_776562, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_776562, "MultiAZ", newJBool(MultiAZ))
  add(query_776562, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_776562, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_776562, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_776562, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_776562, "DeletionProtection", newJBool(DeletionProtection))
  add(query_776562, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_776562, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_776562, "Domain", newJString(Domain))
  add(query_776562, "EngineVersion", newJString(EngineVersion))
  add(query_776562, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_776562, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_776562, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_776562, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_776562.add "ProcessorFeatures", ProcessorFeatures
  add(query_776562, "OptionGroupName", newJString(OptionGroupName))
  add(query_776562, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_776562.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_776562.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_776562.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_776562, "LicenseModel", newJString(LicenseModel))
  add(query_776562, "DBPortNumber", newJInt(DBPortNumber))
  add(query_776562, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_776562, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_776562, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_776562, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_776562, "Action", newJString(Action))
  add(query_776562, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_776562, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_776562, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_776562, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_776562, "Version", newJString(Version))
  add(query_776562, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_776561.call(nil, query_776562, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_776506(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_776507, base: "/",
    url: url_GetModifyDBInstance_776508, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_776638 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBParameterGroup_776640(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBParameterGroup_776639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776641 = query.getOrDefault("Action")
  valid_776641 = validateParameter(valid_776641, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_776641 != nil:
    section.add "Action", valid_776641
  var valid_776642 = query.getOrDefault("Version")
  valid_776642 = validateParameter(valid_776642, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776642 != nil:
    section.add "Version", valid_776642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776643 = header.getOrDefault("X-Amz-Date")
  valid_776643 = validateParameter(valid_776643, JString, required = false,
                                 default = nil)
  if valid_776643 != nil:
    section.add "X-Amz-Date", valid_776643
  var valid_776644 = header.getOrDefault("X-Amz-Security-Token")
  valid_776644 = validateParameter(valid_776644, JString, required = false,
                                 default = nil)
  if valid_776644 != nil:
    section.add "X-Amz-Security-Token", valid_776644
  var valid_776645 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776645 = validateParameter(valid_776645, JString, required = false,
                                 default = nil)
  if valid_776645 != nil:
    section.add "X-Amz-Content-Sha256", valid_776645
  var valid_776646 = header.getOrDefault("X-Amz-Algorithm")
  valid_776646 = validateParameter(valid_776646, JString, required = false,
                                 default = nil)
  if valid_776646 != nil:
    section.add "X-Amz-Algorithm", valid_776646
  var valid_776647 = header.getOrDefault("X-Amz-Signature")
  valid_776647 = validateParameter(valid_776647, JString, required = false,
                                 default = nil)
  if valid_776647 != nil:
    section.add "X-Amz-Signature", valid_776647
  var valid_776648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776648 = validateParameter(valid_776648, JString, required = false,
                                 default = nil)
  if valid_776648 != nil:
    section.add "X-Amz-SignedHeaders", valid_776648
  var valid_776649 = header.getOrDefault("X-Amz-Credential")
  valid_776649 = validateParameter(valid_776649, JString, required = false,
                                 default = nil)
  if valid_776649 != nil:
    section.add "X-Amz-Credential", valid_776649
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_776650 = formData.getOrDefault("DBParameterGroupName")
  valid_776650 = validateParameter(valid_776650, JString, required = true,
                                 default = nil)
  if valid_776650 != nil:
    section.add "DBParameterGroupName", valid_776650
  var valid_776651 = formData.getOrDefault("Parameters")
  valid_776651 = validateParameter(valid_776651, JArray, required = true, default = nil)
  if valid_776651 != nil:
    section.add "Parameters", valid_776651
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776652: Call_PostModifyDBParameterGroup_776638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_776652.validator(path, query, header, formData, body)
  let scheme = call_776652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776652.url(scheme.get, call_776652.host, call_776652.base,
                         call_776652.route, valid.getOrDefault("path"))
  result = hook(call_776652, url, valid)

proc call*(call_776653: Call_PostModifyDBParameterGroup_776638;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776654 = newJObject()
  var formData_776655 = newJObject()
  add(formData_776655, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_776655.add "Parameters", Parameters
  add(query_776654, "Action", newJString(Action))
  add(query_776654, "Version", newJString(Version))
  result = call_776653.call(nil, query_776654, nil, formData_776655, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_776638(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_776639, base: "/",
    url: url_PostModifyDBParameterGroup_776640,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_776621 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBParameterGroup_776623(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBParameterGroup_776622(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_776624 = query.getOrDefault("DBParameterGroupName")
  valid_776624 = validateParameter(valid_776624, JString, required = true,
                                 default = nil)
  if valid_776624 != nil:
    section.add "DBParameterGroupName", valid_776624
  var valid_776625 = query.getOrDefault("Parameters")
  valid_776625 = validateParameter(valid_776625, JArray, required = true, default = nil)
  if valid_776625 != nil:
    section.add "Parameters", valid_776625
  var valid_776626 = query.getOrDefault("Action")
  valid_776626 = validateParameter(valid_776626, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_776626 != nil:
    section.add "Action", valid_776626
  var valid_776627 = query.getOrDefault("Version")
  valid_776627 = validateParameter(valid_776627, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776627 != nil:
    section.add "Version", valid_776627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776628 = header.getOrDefault("X-Amz-Date")
  valid_776628 = validateParameter(valid_776628, JString, required = false,
                                 default = nil)
  if valid_776628 != nil:
    section.add "X-Amz-Date", valid_776628
  var valid_776629 = header.getOrDefault("X-Amz-Security-Token")
  valid_776629 = validateParameter(valid_776629, JString, required = false,
                                 default = nil)
  if valid_776629 != nil:
    section.add "X-Amz-Security-Token", valid_776629
  var valid_776630 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776630 = validateParameter(valid_776630, JString, required = false,
                                 default = nil)
  if valid_776630 != nil:
    section.add "X-Amz-Content-Sha256", valid_776630
  var valid_776631 = header.getOrDefault("X-Amz-Algorithm")
  valid_776631 = validateParameter(valid_776631, JString, required = false,
                                 default = nil)
  if valid_776631 != nil:
    section.add "X-Amz-Algorithm", valid_776631
  var valid_776632 = header.getOrDefault("X-Amz-Signature")
  valid_776632 = validateParameter(valid_776632, JString, required = false,
                                 default = nil)
  if valid_776632 != nil:
    section.add "X-Amz-Signature", valid_776632
  var valid_776633 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776633 = validateParameter(valid_776633, JString, required = false,
                                 default = nil)
  if valid_776633 != nil:
    section.add "X-Amz-SignedHeaders", valid_776633
  var valid_776634 = header.getOrDefault("X-Amz-Credential")
  valid_776634 = validateParameter(valid_776634, JString, required = false,
                                 default = nil)
  if valid_776634 != nil:
    section.add "X-Amz-Credential", valid_776634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776635: Call_GetModifyDBParameterGroup_776621; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_776635.validator(path, query, header, formData, body)
  let scheme = call_776635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776635.url(scheme.get, call_776635.host, call_776635.base,
                         call_776635.route, valid.getOrDefault("path"))
  result = hook(call_776635, url, valid)

proc call*(call_776636: Call_GetModifyDBParameterGroup_776621;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776637 = newJObject()
  add(query_776637, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_776637.add "Parameters", Parameters
  add(query_776637, "Action", newJString(Action))
  add(query_776637, "Version", newJString(Version))
  result = call_776636.call(nil, query_776637, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_776621(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_776622, base: "/",
    url: url_GetModifyDBParameterGroup_776623,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_776674 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBSnapshot_776676(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBSnapshot_776675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776677 = query.getOrDefault("Action")
  valid_776677 = validateParameter(valid_776677, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_776677 != nil:
    section.add "Action", valid_776677
  var valid_776678 = query.getOrDefault("Version")
  valid_776678 = validateParameter(valid_776678, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776678 != nil:
    section.add "Version", valid_776678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776679 = header.getOrDefault("X-Amz-Date")
  valid_776679 = validateParameter(valid_776679, JString, required = false,
                                 default = nil)
  if valid_776679 != nil:
    section.add "X-Amz-Date", valid_776679
  var valid_776680 = header.getOrDefault("X-Amz-Security-Token")
  valid_776680 = validateParameter(valid_776680, JString, required = false,
                                 default = nil)
  if valid_776680 != nil:
    section.add "X-Amz-Security-Token", valid_776680
  var valid_776681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776681 = validateParameter(valid_776681, JString, required = false,
                                 default = nil)
  if valid_776681 != nil:
    section.add "X-Amz-Content-Sha256", valid_776681
  var valid_776682 = header.getOrDefault("X-Amz-Algorithm")
  valid_776682 = validateParameter(valid_776682, JString, required = false,
                                 default = nil)
  if valid_776682 != nil:
    section.add "X-Amz-Algorithm", valid_776682
  var valid_776683 = header.getOrDefault("X-Amz-Signature")
  valid_776683 = validateParameter(valid_776683, JString, required = false,
                                 default = nil)
  if valid_776683 != nil:
    section.add "X-Amz-Signature", valid_776683
  var valid_776684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776684 = validateParameter(valid_776684, JString, required = false,
                                 default = nil)
  if valid_776684 != nil:
    section.add "X-Amz-SignedHeaders", valid_776684
  var valid_776685 = header.getOrDefault("X-Amz-Credential")
  valid_776685 = validateParameter(valid_776685, JString, required = false,
                                 default = nil)
  if valid_776685 != nil:
    section.add "X-Amz-Credential", valid_776685
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  section = newJObject()
  var valid_776686 = formData.getOrDefault("OptionGroupName")
  valid_776686 = validateParameter(valid_776686, JString, required = false,
                                 default = nil)
  if valid_776686 != nil:
    section.add "OptionGroupName", valid_776686
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_776687 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_776687 = validateParameter(valid_776687, JString, required = true,
                                 default = nil)
  if valid_776687 != nil:
    section.add "DBSnapshotIdentifier", valid_776687
  var valid_776688 = formData.getOrDefault("EngineVersion")
  valid_776688 = validateParameter(valid_776688, JString, required = false,
                                 default = nil)
  if valid_776688 != nil:
    section.add "EngineVersion", valid_776688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776689: Call_PostModifyDBSnapshot_776674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_776689.validator(path, query, header, formData, body)
  let scheme = call_776689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776689.url(scheme.get, call_776689.host, call_776689.base,
                         call_776689.route, valid.getOrDefault("path"))
  result = hook(call_776689, url, valid)

proc call*(call_776690: Call_PostModifyDBSnapshot_776674;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: string (required)
  var query_776691 = newJObject()
  var formData_776692 = newJObject()
  add(formData_776692, "OptionGroupName", newJString(OptionGroupName))
  add(formData_776692, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_776691, "Action", newJString(Action))
  add(formData_776692, "EngineVersion", newJString(EngineVersion))
  add(query_776691, "Version", newJString(Version))
  result = call_776690.call(nil, query_776691, nil, formData_776692, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_776674(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_776675, base: "/",
    url: url_PostModifyDBSnapshot_776676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_776656 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBSnapshot_776658(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBSnapshot_776657(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  section = newJObject()
  var valid_776659 = query.getOrDefault("OptionGroupName")
  valid_776659 = validateParameter(valid_776659, JString, required = false,
                                 default = nil)
  if valid_776659 != nil:
    section.add "OptionGroupName", valid_776659
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776660 = query.getOrDefault("Action")
  valid_776660 = validateParameter(valid_776660, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_776660 != nil:
    section.add "Action", valid_776660
  var valid_776661 = query.getOrDefault("EngineVersion")
  valid_776661 = validateParameter(valid_776661, JString, required = false,
                                 default = nil)
  if valid_776661 != nil:
    section.add "EngineVersion", valid_776661
  var valid_776662 = query.getOrDefault("Version")
  valid_776662 = validateParameter(valid_776662, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776662 != nil:
    section.add "Version", valid_776662
  var valid_776663 = query.getOrDefault("DBSnapshotIdentifier")
  valid_776663 = validateParameter(valid_776663, JString, required = true,
                                 default = nil)
  if valid_776663 != nil:
    section.add "DBSnapshotIdentifier", valid_776663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776664 = header.getOrDefault("X-Amz-Date")
  valid_776664 = validateParameter(valid_776664, JString, required = false,
                                 default = nil)
  if valid_776664 != nil:
    section.add "X-Amz-Date", valid_776664
  var valid_776665 = header.getOrDefault("X-Amz-Security-Token")
  valid_776665 = validateParameter(valid_776665, JString, required = false,
                                 default = nil)
  if valid_776665 != nil:
    section.add "X-Amz-Security-Token", valid_776665
  var valid_776666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776666 = validateParameter(valid_776666, JString, required = false,
                                 default = nil)
  if valid_776666 != nil:
    section.add "X-Amz-Content-Sha256", valid_776666
  var valid_776667 = header.getOrDefault("X-Amz-Algorithm")
  valid_776667 = validateParameter(valid_776667, JString, required = false,
                                 default = nil)
  if valid_776667 != nil:
    section.add "X-Amz-Algorithm", valid_776667
  var valid_776668 = header.getOrDefault("X-Amz-Signature")
  valid_776668 = validateParameter(valid_776668, JString, required = false,
                                 default = nil)
  if valid_776668 != nil:
    section.add "X-Amz-Signature", valid_776668
  var valid_776669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776669 = validateParameter(valid_776669, JString, required = false,
                                 default = nil)
  if valid_776669 != nil:
    section.add "X-Amz-SignedHeaders", valid_776669
  var valid_776670 = header.getOrDefault("X-Amz-Credential")
  valid_776670 = validateParameter(valid_776670, JString, required = false,
                                 default = nil)
  if valid_776670 != nil:
    section.add "X-Amz-Credential", valid_776670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776671: Call_GetModifyDBSnapshot_776656; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ## 
  let valid = call_776671.validator(path, query, header, formData, body)
  let scheme = call_776671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776671.url(scheme.get, call_776671.host, call_776671.base,
                         call_776671.route, valid.getOrDefault("path"))
  result = hook(call_776671, url, valid)

proc call*(call_776672: Call_GetModifyDBSnapshot_776656;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL and Oracle. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  var query_776673 = newJObject()
  add(query_776673, "OptionGroupName", newJString(OptionGroupName))
  add(query_776673, "Action", newJString(Action))
  add(query_776673, "EngineVersion", newJString(EngineVersion))
  add(query_776673, "Version", newJString(Version))
  add(query_776673, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_776672.call(nil, query_776673, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_776656(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_776657, base: "/",
    url: url_GetModifyDBSnapshot_776658, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_776712 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBSnapshotAttribute_776714(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBSnapshotAttribute_776713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776715 = query.getOrDefault("Action")
  valid_776715 = validateParameter(valid_776715, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_776715 != nil:
    section.add "Action", valid_776715
  var valid_776716 = query.getOrDefault("Version")
  valid_776716 = validateParameter(valid_776716, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776716 != nil:
    section.add "Version", valid_776716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776717 = header.getOrDefault("X-Amz-Date")
  valid_776717 = validateParameter(valid_776717, JString, required = false,
                                 default = nil)
  if valid_776717 != nil:
    section.add "X-Amz-Date", valid_776717
  var valid_776718 = header.getOrDefault("X-Amz-Security-Token")
  valid_776718 = validateParameter(valid_776718, JString, required = false,
                                 default = nil)
  if valid_776718 != nil:
    section.add "X-Amz-Security-Token", valid_776718
  var valid_776719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776719 = validateParameter(valid_776719, JString, required = false,
                                 default = nil)
  if valid_776719 != nil:
    section.add "X-Amz-Content-Sha256", valid_776719
  var valid_776720 = header.getOrDefault("X-Amz-Algorithm")
  valid_776720 = validateParameter(valid_776720, JString, required = false,
                                 default = nil)
  if valid_776720 != nil:
    section.add "X-Amz-Algorithm", valid_776720
  var valid_776721 = header.getOrDefault("X-Amz-Signature")
  valid_776721 = validateParameter(valid_776721, JString, required = false,
                                 default = nil)
  if valid_776721 != nil:
    section.add "X-Amz-Signature", valid_776721
  var valid_776722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776722 = validateParameter(valid_776722, JString, required = false,
                                 default = nil)
  if valid_776722 != nil:
    section.add "X-Amz-SignedHeaders", valid_776722
  var valid_776723 = header.getOrDefault("X-Amz-Credential")
  valid_776723 = validateParameter(valid_776723, JString, required = false,
                                 default = nil)
  if valid_776723 != nil:
    section.add "X-Amz-Credential", valid_776723
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_776724 = formData.getOrDefault("AttributeName")
  valid_776724 = validateParameter(valid_776724, JString, required = true,
                                 default = nil)
  if valid_776724 != nil:
    section.add "AttributeName", valid_776724
  var valid_776725 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_776725 = validateParameter(valid_776725, JString, required = true,
                                 default = nil)
  if valid_776725 != nil:
    section.add "DBSnapshotIdentifier", valid_776725
  var valid_776726 = formData.getOrDefault("ValuesToRemove")
  valid_776726 = validateParameter(valid_776726, JArray, required = false,
                                 default = nil)
  if valid_776726 != nil:
    section.add "ValuesToRemove", valid_776726
  var valid_776727 = formData.getOrDefault("ValuesToAdd")
  valid_776727 = validateParameter(valid_776727, JArray, required = false,
                                 default = nil)
  if valid_776727 != nil:
    section.add "ValuesToAdd", valid_776727
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776728: Call_PostModifyDBSnapshotAttribute_776712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_776728.validator(path, query, header, formData, body)
  let scheme = call_776728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776728.url(scheme.get, call_776728.host, call_776728.base,
                         call_776728.route, valid.getOrDefault("path"))
  result = hook(call_776728, url, valid)

proc call*(call_776729: Call_PostModifyDBSnapshotAttribute_776712;
          AttributeName: string; DBSnapshotIdentifier: string;
          Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_776730 = newJObject()
  var formData_776731 = newJObject()
  add(formData_776731, "AttributeName", newJString(AttributeName))
  add(formData_776731, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_776730, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_776731.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_776731.add "ValuesToAdd", ValuesToAdd
  add(query_776730, "Version", newJString(Version))
  result = call_776729.call(nil, query_776730, nil, formData_776731, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_776712(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_776713, base: "/",
    url: url_PostModifyDBSnapshotAttribute_776714,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_776693 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBSnapshotAttribute_776695(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBSnapshotAttribute_776694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_776696 = query.getOrDefault("AttributeName")
  valid_776696 = validateParameter(valid_776696, JString, required = true,
                                 default = nil)
  if valid_776696 != nil:
    section.add "AttributeName", valid_776696
  var valid_776697 = query.getOrDefault("ValuesToAdd")
  valid_776697 = validateParameter(valid_776697, JArray, required = false,
                                 default = nil)
  if valid_776697 != nil:
    section.add "ValuesToAdd", valid_776697
  var valid_776698 = query.getOrDefault("Action")
  valid_776698 = validateParameter(valid_776698, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_776698 != nil:
    section.add "Action", valid_776698
  var valid_776699 = query.getOrDefault("ValuesToRemove")
  valid_776699 = validateParameter(valid_776699, JArray, required = false,
                                 default = nil)
  if valid_776699 != nil:
    section.add "ValuesToRemove", valid_776699
  var valid_776700 = query.getOrDefault("Version")
  valid_776700 = validateParameter(valid_776700, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776700 != nil:
    section.add "Version", valid_776700
  var valid_776701 = query.getOrDefault("DBSnapshotIdentifier")
  valid_776701 = validateParameter(valid_776701, JString, required = true,
                                 default = nil)
  if valid_776701 != nil:
    section.add "DBSnapshotIdentifier", valid_776701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776702 = header.getOrDefault("X-Amz-Date")
  valid_776702 = validateParameter(valid_776702, JString, required = false,
                                 default = nil)
  if valid_776702 != nil:
    section.add "X-Amz-Date", valid_776702
  var valid_776703 = header.getOrDefault("X-Amz-Security-Token")
  valid_776703 = validateParameter(valid_776703, JString, required = false,
                                 default = nil)
  if valid_776703 != nil:
    section.add "X-Amz-Security-Token", valid_776703
  var valid_776704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776704 = validateParameter(valid_776704, JString, required = false,
                                 default = nil)
  if valid_776704 != nil:
    section.add "X-Amz-Content-Sha256", valid_776704
  var valid_776705 = header.getOrDefault("X-Amz-Algorithm")
  valid_776705 = validateParameter(valid_776705, JString, required = false,
                                 default = nil)
  if valid_776705 != nil:
    section.add "X-Amz-Algorithm", valid_776705
  var valid_776706 = header.getOrDefault("X-Amz-Signature")
  valid_776706 = validateParameter(valid_776706, JString, required = false,
                                 default = nil)
  if valid_776706 != nil:
    section.add "X-Amz-Signature", valid_776706
  var valid_776707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776707 = validateParameter(valid_776707, JString, required = false,
                                 default = nil)
  if valid_776707 != nil:
    section.add "X-Amz-SignedHeaders", valid_776707
  var valid_776708 = header.getOrDefault("X-Amz-Credential")
  valid_776708 = validateParameter(valid_776708, JString, required = false,
                                 default = nil)
  if valid_776708 != nil:
    section.add "X-Amz-Credential", valid_776708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776709: Call_GetModifyDBSnapshotAttribute_776693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_776709.validator(path, query, header, formData, body)
  let scheme = call_776709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776709.url(scheme.get, call_776709.host, call_776709.base,
                         call_776709.route, valid.getOrDefault("path"))
  result = hook(call_776709, url, valid)

proc call*(call_776710: Call_GetModifyDBSnapshotAttribute_776693;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  var query_776711 = newJObject()
  add(query_776711, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_776711.add "ValuesToAdd", ValuesToAdd
  add(query_776711, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_776711.add "ValuesToRemove", ValuesToRemove
  add(query_776711, "Version", newJString(Version))
  add(query_776711, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_776710.call(nil, query_776711, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_776693(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_776694, base: "/",
    url: url_GetModifyDBSnapshotAttribute_776695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_776750 = ref object of OpenApiRestCall_772581
proc url_PostModifyDBSubnetGroup_776752(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyDBSubnetGroup_776751(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776753 = query.getOrDefault("Action")
  valid_776753 = validateParameter(valid_776753, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_776753 != nil:
    section.add "Action", valid_776753
  var valid_776754 = query.getOrDefault("Version")
  valid_776754 = validateParameter(valid_776754, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776754 != nil:
    section.add "Version", valid_776754
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776755 = header.getOrDefault("X-Amz-Date")
  valid_776755 = validateParameter(valid_776755, JString, required = false,
                                 default = nil)
  if valid_776755 != nil:
    section.add "X-Amz-Date", valid_776755
  var valid_776756 = header.getOrDefault("X-Amz-Security-Token")
  valid_776756 = validateParameter(valid_776756, JString, required = false,
                                 default = nil)
  if valid_776756 != nil:
    section.add "X-Amz-Security-Token", valid_776756
  var valid_776757 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776757 = validateParameter(valid_776757, JString, required = false,
                                 default = nil)
  if valid_776757 != nil:
    section.add "X-Amz-Content-Sha256", valid_776757
  var valid_776758 = header.getOrDefault("X-Amz-Algorithm")
  valid_776758 = validateParameter(valid_776758, JString, required = false,
                                 default = nil)
  if valid_776758 != nil:
    section.add "X-Amz-Algorithm", valid_776758
  var valid_776759 = header.getOrDefault("X-Amz-Signature")
  valid_776759 = validateParameter(valid_776759, JString, required = false,
                                 default = nil)
  if valid_776759 != nil:
    section.add "X-Amz-Signature", valid_776759
  var valid_776760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776760 = validateParameter(valid_776760, JString, required = false,
                                 default = nil)
  if valid_776760 != nil:
    section.add "X-Amz-SignedHeaders", valid_776760
  var valid_776761 = header.getOrDefault("X-Amz-Credential")
  valid_776761 = validateParameter(valid_776761, JString, required = false,
                                 default = nil)
  if valid_776761 != nil:
    section.add "X-Amz-Credential", valid_776761
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_776762 = formData.getOrDefault("DBSubnetGroupName")
  valid_776762 = validateParameter(valid_776762, JString, required = true,
                                 default = nil)
  if valid_776762 != nil:
    section.add "DBSubnetGroupName", valid_776762
  var valid_776763 = formData.getOrDefault("SubnetIds")
  valid_776763 = validateParameter(valid_776763, JArray, required = true, default = nil)
  if valid_776763 != nil:
    section.add "SubnetIds", valid_776763
  var valid_776764 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_776764 = validateParameter(valid_776764, JString, required = false,
                                 default = nil)
  if valid_776764 != nil:
    section.add "DBSubnetGroupDescription", valid_776764
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776765: Call_PostModifyDBSubnetGroup_776750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_776765.validator(path, query, header, formData, body)
  let scheme = call_776765.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776765.url(scheme.get, call_776765.host, call_776765.base,
                         call_776765.route, valid.getOrDefault("path"))
  result = hook(call_776765, url, valid)

proc call*(call_776766: Call_PostModifyDBSubnetGroup_776750;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_776767 = newJObject()
  var formData_776768 = newJObject()
  add(formData_776768, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_776768.add "SubnetIds", SubnetIds
  add(query_776767, "Action", newJString(Action))
  add(formData_776768, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_776767, "Version", newJString(Version))
  result = call_776766.call(nil, query_776767, nil, formData_776768, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_776750(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_776751, base: "/",
    url: url_PostModifyDBSubnetGroup_776752, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_776732 = ref object of OpenApiRestCall_772581
proc url_GetModifyDBSubnetGroup_776734(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyDBSubnetGroup_776733(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776735 = query.getOrDefault("Action")
  valid_776735 = validateParameter(valid_776735, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_776735 != nil:
    section.add "Action", valid_776735
  var valid_776736 = query.getOrDefault("DBSubnetGroupName")
  valid_776736 = validateParameter(valid_776736, JString, required = true,
                                 default = nil)
  if valid_776736 != nil:
    section.add "DBSubnetGroupName", valid_776736
  var valid_776737 = query.getOrDefault("SubnetIds")
  valid_776737 = validateParameter(valid_776737, JArray, required = true, default = nil)
  if valid_776737 != nil:
    section.add "SubnetIds", valid_776737
  var valid_776738 = query.getOrDefault("DBSubnetGroupDescription")
  valid_776738 = validateParameter(valid_776738, JString, required = false,
                                 default = nil)
  if valid_776738 != nil:
    section.add "DBSubnetGroupDescription", valid_776738
  var valid_776739 = query.getOrDefault("Version")
  valid_776739 = validateParameter(valid_776739, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776739 != nil:
    section.add "Version", valid_776739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776740 = header.getOrDefault("X-Amz-Date")
  valid_776740 = validateParameter(valid_776740, JString, required = false,
                                 default = nil)
  if valid_776740 != nil:
    section.add "X-Amz-Date", valid_776740
  var valid_776741 = header.getOrDefault("X-Amz-Security-Token")
  valid_776741 = validateParameter(valid_776741, JString, required = false,
                                 default = nil)
  if valid_776741 != nil:
    section.add "X-Amz-Security-Token", valid_776741
  var valid_776742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776742 = validateParameter(valid_776742, JString, required = false,
                                 default = nil)
  if valid_776742 != nil:
    section.add "X-Amz-Content-Sha256", valid_776742
  var valid_776743 = header.getOrDefault("X-Amz-Algorithm")
  valid_776743 = validateParameter(valid_776743, JString, required = false,
                                 default = nil)
  if valid_776743 != nil:
    section.add "X-Amz-Algorithm", valid_776743
  var valid_776744 = header.getOrDefault("X-Amz-Signature")
  valid_776744 = validateParameter(valid_776744, JString, required = false,
                                 default = nil)
  if valid_776744 != nil:
    section.add "X-Amz-Signature", valid_776744
  var valid_776745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776745 = validateParameter(valid_776745, JString, required = false,
                                 default = nil)
  if valid_776745 != nil:
    section.add "X-Amz-SignedHeaders", valid_776745
  var valid_776746 = header.getOrDefault("X-Amz-Credential")
  valid_776746 = validateParameter(valid_776746, JString, required = false,
                                 default = nil)
  if valid_776746 != nil:
    section.add "X-Amz-Credential", valid_776746
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776747: Call_GetModifyDBSubnetGroup_776732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_776747.validator(path, query, header, formData, body)
  let scheme = call_776747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776747.url(scheme.get, call_776747.host, call_776747.base,
                         call_776747.route, valid.getOrDefault("path"))
  result = hook(call_776747, url, valid)

proc call*(call_776748: Call_GetModifyDBSubnetGroup_776732;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_776749 = newJObject()
  add(query_776749, "Action", newJString(Action))
  add(query_776749, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_776749.add "SubnetIds", SubnetIds
  add(query_776749, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_776749, "Version", newJString(Version))
  result = call_776748.call(nil, query_776749, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_776732(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_776733, base: "/",
    url: url_GetModifyDBSubnetGroup_776734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_776789 = ref object of OpenApiRestCall_772581
proc url_PostModifyEventSubscription_776791(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyEventSubscription_776790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776792 = query.getOrDefault("Action")
  valid_776792 = validateParameter(valid_776792, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_776792 != nil:
    section.add "Action", valid_776792
  var valid_776793 = query.getOrDefault("Version")
  valid_776793 = validateParameter(valid_776793, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776793 != nil:
    section.add "Version", valid_776793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776794 = header.getOrDefault("X-Amz-Date")
  valid_776794 = validateParameter(valid_776794, JString, required = false,
                                 default = nil)
  if valid_776794 != nil:
    section.add "X-Amz-Date", valid_776794
  var valid_776795 = header.getOrDefault("X-Amz-Security-Token")
  valid_776795 = validateParameter(valid_776795, JString, required = false,
                                 default = nil)
  if valid_776795 != nil:
    section.add "X-Amz-Security-Token", valid_776795
  var valid_776796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776796 = validateParameter(valid_776796, JString, required = false,
                                 default = nil)
  if valid_776796 != nil:
    section.add "X-Amz-Content-Sha256", valid_776796
  var valid_776797 = header.getOrDefault("X-Amz-Algorithm")
  valid_776797 = validateParameter(valid_776797, JString, required = false,
                                 default = nil)
  if valid_776797 != nil:
    section.add "X-Amz-Algorithm", valid_776797
  var valid_776798 = header.getOrDefault("X-Amz-Signature")
  valid_776798 = validateParameter(valid_776798, JString, required = false,
                                 default = nil)
  if valid_776798 != nil:
    section.add "X-Amz-Signature", valid_776798
  var valid_776799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776799 = validateParameter(valid_776799, JString, required = false,
                                 default = nil)
  if valid_776799 != nil:
    section.add "X-Amz-SignedHeaders", valid_776799
  var valid_776800 = header.getOrDefault("X-Amz-Credential")
  valid_776800 = validateParameter(valid_776800, JString, required = false,
                                 default = nil)
  if valid_776800 != nil:
    section.add "X-Amz-Credential", valid_776800
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_776801 = formData.getOrDefault("Enabled")
  valid_776801 = validateParameter(valid_776801, JBool, required = false, default = nil)
  if valid_776801 != nil:
    section.add "Enabled", valid_776801
  var valid_776802 = formData.getOrDefault("EventCategories")
  valid_776802 = validateParameter(valid_776802, JArray, required = false,
                                 default = nil)
  if valid_776802 != nil:
    section.add "EventCategories", valid_776802
  var valid_776803 = formData.getOrDefault("SnsTopicArn")
  valid_776803 = validateParameter(valid_776803, JString, required = false,
                                 default = nil)
  if valid_776803 != nil:
    section.add "SnsTopicArn", valid_776803
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_776804 = formData.getOrDefault("SubscriptionName")
  valid_776804 = validateParameter(valid_776804, JString, required = true,
                                 default = nil)
  if valid_776804 != nil:
    section.add "SubscriptionName", valid_776804
  var valid_776805 = formData.getOrDefault("SourceType")
  valid_776805 = validateParameter(valid_776805, JString, required = false,
                                 default = nil)
  if valid_776805 != nil:
    section.add "SourceType", valid_776805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776806: Call_PostModifyEventSubscription_776789; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_776806.validator(path, query, header, formData, body)
  let scheme = call_776806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776806.url(scheme.get, call_776806.host, call_776806.base,
                         call_776806.route, valid.getOrDefault("path"))
  result = hook(call_776806, url, valid)

proc call*(call_776807: Call_PostModifyEventSubscription_776789;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_776808 = newJObject()
  var formData_776809 = newJObject()
  add(formData_776809, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_776809.add "EventCategories", EventCategories
  add(formData_776809, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_776809, "SubscriptionName", newJString(SubscriptionName))
  add(query_776808, "Action", newJString(Action))
  add(query_776808, "Version", newJString(Version))
  add(formData_776809, "SourceType", newJString(SourceType))
  result = call_776807.call(nil, query_776808, nil, formData_776809, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_776789(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_776790, base: "/",
    url: url_PostModifyEventSubscription_776791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_776769 = ref object of OpenApiRestCall_772581
proc url_GetModifyEventSubscription_776771(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyEventSubscription_776770(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_776772 = query.getOrDefault("SourceType")
  valid_776772 = validateParameter(valid_776772, JString, required = false,
                                 default = nil)
  if valid_776772 != nil:
    section.add "SourceType", valid_776772
  var valid_776773 = query.getOrDefault("Enabled")
  valid_776773 = validateParameter(valid_776773, JBool, required = false, default = nil)
  if valid_776773 != nil:
    section.add "Enabled", valid_776773
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776774 = query.getOrDefault("Action")
  valid_776774 = validateParameter(valid_776774, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_776774 != nil:
    section.add "Action", valid_776774
  var valid_776775 = query.getOrDefault("SnsTopicArn")
  valid_776775 = validateParameter(valid_776775, JString, required = false,
                                 default = nil)
  if valid_776775 != nil:
    section.add "SnsTopicArn", valid_776775
  var valid_776776 = query.getOrDefault("EventCategories")
  valid_776776 = validateParameter(valid_776776, JArray, required = false,
                                 default = nil)
  if valid_776776 != nil:
    section.add "EventCategories", valid_776776
  var valid_776777 = query.getOrDefault("SubscriptionName")
  valid_776777 = validateParameter(valid_776777, JString, required = true,
                                 default = nil)
  if valid_776777 != nil:
    section.add "SubscriptionName", valid_776777
  var valid_776778 = query.getOrDefault("Version")
  valid_776778 = validateParameter(valid_776778, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776778 != nil:
    section.add "Version", valid_776778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776779 = header.getOrDefault("X-Amz-Date")
  valid_776779 = validateParameter(valid_776779, JString, required = false,
                                 default = nil)
  if valid_776779 != nil:
    section.add "X-Amz-Date", valid_776779
  var valid_776780 = header.getOrDefault("X-Amz-Security-Token")
  valid_776780 = validateParameter(valid_776780, JString, required = false,
                                 default = nil)
  if valid_776780 != nil:
    section.add "X-Amz-Security-Token", valid_776780
  var valid_776781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776781 = validateParameter(valid_776781, JString, required = false,
                                 default = nil)
  if valid_776781 != nil:
    section.add "X-Amz-Content-Sha256", valid_776781
  var valid_776782 = header.getOrDefault("X-Amz-Algorithm")
  valid_776782 = validateParameter(valid_776782, JString, required = false,
                                 default = nil)
  if valid_776782 != nil:
    section.add "X-Amz-Algorithm", valid_776782
  var valid_776783 = header.getOrDefault("X-Amz-Signature")
  valid_776783 = validateParameter(valid_776783, JString, required = false,
                                 default = nil)
  if valid_776783 != nil:
    section.add "X-Amz-Signature", valid_776783
  var valid_776784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776784 = validateParameter(valid_776784, JString, required = false,
                                 default = nil)
  if valid_776784 != nil:
    section.add "X-Amz-SignedHeaders", valid_776784
  var valid_776785 = header.getOrDefault("X-Amz-Credential")
  valid_776785 = validateParameter(valid_776785, JString, required = false,
                                 default = nil)
  if valid_776785 != nil:
    section.add "X-Amz-Credential", valid_776785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776786: Call_GetModifyEventSubscription_776769; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_776786.validator(path, query, header, formData, body)
  let scheme = call_776786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776786.url(scheme.get, call_776786.host, call_776786.base,
                         call_776786.route, valid.getOrDefault("path"))
  result = hook(call_776786, url, valid)

proc call*(call_776787: Call_GetModifyEventSubscription_776769;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: string (required)
  var query_776788 = newJObject()
  add(query_776788, "SourceType", newJString(SourceType))
  add(query_776788, "Enabled", newJBool(Enabled))
  add(query_776788, "Action", newJString(Action))
  add(query_776788, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_776788.add "EventCategories", EventCategories
  add(query_776788, "SubscriptionName", newJString(SubscriptionName))
  add(query_776788, "Version", newJString(Version))
  result = call_776787.call(nil, query_776788, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_776769(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_776770, base: "/",
    url: url_GetModifyEventSubscription_776771,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_776828 = ref object of OpenApiRestCall_772581
proc url_PostModifyGlobalCluster_776830(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyGlobalCluster_776829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776831 = query.getOrDefault("Action")
  valid_776831 = validateParameter(valid_776831, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_776831 != nil:
    section.add "Action", valid_776831
  var valid_776832 = query.getOrDefault("Version")
  valid_776832 = validateParameter(valid_776832, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776832 != nil:
    section.add "Version", valid_776832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776833 = header.getOrDefault("X-Amz-Date")
  valid_776833 = validateParameter(valid_776833, JString, required = false,
                                 default = nil)
  if valid_776833 != nil:
    section.add "X-Amz-Date", valid_776833
  var valid_776834 = header.getOrDefault("X-Amz-Security-Token")
  valid_776834 = validateParameter(valid_776834, JString, required = false,
                                 default = nil)
  if valid_776834 != nil:
    section.add "X-Amz-Security-Token", valid_776834
  var valid_776835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776835 = validateParameter(valid_776835, JString, required = false,
                                 default = nil)
  if valid_776835 != nil:
    section.add "X-Amz-Content-Sha256", valid_776835
  var valid_776836 = header.getOrDefault("X-Amz-Algorithm")
  valid_776836 = validateParameter(valid_776836, JString, required = false,
                                 default = nil)
  if valid_776836 != nil:
    section.add "X-Amz-Algorithm", valid_776836
  var valid_776837 = header.getOrDefault("X-Amz-Signature")
  valid_776837 = validateParameter(valid_776837, JString, required = false,
                                 default = nil)
  if valid_776837 != nil:
    section.add "X-Amz-Signature", valid_776837
  var valid_776838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776838 = validateParameter(valid_776838, JString, required = false,
                                 default = nil)
  if valid_776838 != nil:
    section.add "X-Amz-SignedHeaders", valid_776838
  var valid_776839 = header.getOrDefault("X-Amz-Credential")
  valid_776839 = validateParameter(valid_776839, JString, required = false,
                                 default = nil)
  if valid_776839 != nil:
    section.add "X-Amz-Credential", valid_776839
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_776840 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_776840 = validateParameter(valid_776840, JString, required = false,
                                 default = nil)
  if valid_776840 != nil:
    section.add "GlobalClusterIdentifier", valid_776840
  var valid_776841 = formData.getOrDefault("DeletionProtection")
  valid_776841 = validateParameter(valid_776841, JBool, required = false, default = nil)
  if valid_776841 != nil:
    section.add "DeletionProtection", valid_776841
  var valid_776842 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_776842 = validateParameter(valid_776842, JString, required = false,
                                 default = nil)
  if valid_776842 != nil:
    section.add "NewGlobalClusterIdentifier", valid_776842
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776843: Call_PostModifyGlobalCluster_776828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776843.validator(path, query, header, formData, body)
  let scheme = call_776843.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776843.url(scheme.get, call_776843.host, call_776843.base,
                         call_776843.route, valid.getOrDefault("path"))
  result = hook(call_776843, url, valid)

proc call*(call_776844: Call_PostModifyGlobalCluster_776828;
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          NewGlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776845 = newJObject()
  var formData_776846 = newJObject()
  add(formData_776846, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_776846, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_776846, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_776845, "Action", newJString(Action))
  add(query_776845, "Version", newJString(Version))
  result = call_776844.call(nil, query_776845, nil, formData_776846, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_776828(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_776829, base: "/",
    url: url_PostModifyGlobalCluster_776830, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_776810 = ref object of OpenApiRestCall_772581
proc url_GetModifyGlobalCluster_776812(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyGlobalCluster_776811(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_776813 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_776813 = validateParameter(valid_776813, JString, required = false,
                                 default = nil)
  if valid_776813 != nil:
    section.add "NewGlobalClusterIdentifier", valid_776813
  var valid_776814 = query.getOrDefault("DeletionProtection")
  valid_776814 = validateParameter(valid_776814, JBool, required = false, default = nil)
  if valid_776814 != nil:
    section.add "DeletionProtection", valid_776814
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776815 = query.getOrDefault("Action")
  valid_776815 = validateParameter(valid_776815, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_776815 != nil:
    section.add "Action", valid_776815
  var valid_776816 = query.getOrDefault("GlobalClusterIdentifier")
  valid_776816 = validateParameter(valid_776816, JString, required = false,
                                 default = nil)
  if valid_776816 != nil:
    section.add "GlobalClusterIdentifier", valid_776816
  var valid_776817 = query.getOrDefault("Version")
  valid_776817 = validateParameter(valid_776817, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776817 != nil:
    section.add "Version", valid_776817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776818 = header.getOrDefault("X-Amz-Date")
  valid_776818 = validateParameter(valid_776818, JString, required = false,
                                 default = nil)
  if valid_776818 != nil:
    section.add "X-Amz-Date", valid_776818
  var valid_776819 = header.getOrDefault("X-Amz-Security-Token")
  valid_776819 = validateParameter(valid_776819, JString, required = false,
                                 default = nil)
  if valid_776819 != nil:
    section.add "X-Amz-Security-Token", valid_776819
  var valid_776820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776820 = validateParameter(valid_776820, JString, required = false,
                                 default = nil)
  if valid_776820 != nil:
    section.add "X-Amz-Content-Sha256", valid_776820
  var valid_776821 = header.getOrDefault("X-Amz-Algorithm")
  valid_776821 = validateParameter(valid_776821, JString, required = false,
                                 default = nil)
  if valid_776821 != nil:
    section.add "X-Amz-Algorithm", valid_776821
  var valid_776822 = header.getOrDefault("X-Amz-Signature")
  valid_776822 = validateParameter(valid_776822, JString, required = false,
                                 default = nil)
  if valid_776822 != nil:
    section.add "X-Amz-Signature", valid_776822
  var valid_776823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776823 = validateParameter(valid_776823, JString, required = false,
                                 default = nil)
  if valid_776823 != nil:
    section.add "X-Amz-SignedHeaders", valid_776823
  var valid_776824 = header.getOrDefault("X-Amz-Credential")
  valid_776824 = validateParameter(valid_776824, JString, required = false,
                                 default = nil)
  if valid_776824 != nil:
    section.add "X-Amz-Credential", valid_776824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776825: Call_GetModifyGlobalCluster_776810; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776825.validator(path, query, header, formData, body)
  let scheme = call_776825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776825.url(scheme.get, call_776825.host, call_776825.base,
                         call_776825.route, valid.getOrDefault("path"))
  result = hook(call_776825, url, valid)

proc call*(call_776826: Call_GetModifyGlobalCluster_776810;
          NewGlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_776827 = newJObject()
  add(query_776827, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_776827, "DeletionProtection", newJBool(DeletionProtection))
  add(query_776827, "Action", newJString(Action))
  add(query_776827, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_776827, "Version", newJString(Version))
  result = call_776826.call(nil, query_776827, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_776810(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_776811, base: "/",
    url: url_GetModifyGlobalCluster_776812, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_776866 = ref object of OpenApiRestCall_772581
proc url_PostModifyOptionGroup_776868(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyOptionGroup_776867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776869 = query.getOrDefault("Action")
  valid_776869 = validateParameter(valid_776869, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_776869 != nil:
    section.add "Action", valid_776869
  var valid_776870 = query.getOrDefault("Version")
  valid_776870 = validateParameter(valid_776870, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776870 != nil:
    section.add "Version", valid_776870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776871 = header.getOrDefault("X-Amz-Date")
  valid_776871 = validateParameter(valid_776871, JString, required = false,
                                 default = nil)
  if valid_776871 != nil:
    section.add "X-Amz-Date", valid_776871
  var valid_776872 = header.getOrDefault("X-Amz-Security-Token")
  valid_776872 = validateParameter(valid_776872, JString, required = false,
                                 default = nil)
  if valid_776872 != nil:
    section.add "X-Amz-Security-Token", valid_776872
  var valid_776873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776873 = validateParameter(valid_776873, JString, required = false,
                                 default = nil)
  if valid_776873 != nil:
    section.add "X-Amz-Content-Sha256", valid_776873
  var valid_776874 = header.getOrDefault("X-Amz-Algorithm")
  valid_776874 = validateParameter(valid_776874, JString, required = false,
                                 default = nil)
  if valid_776874 != nil:
    section.add "X-Amz-Algorithm", valid_776874
  var valid_776875 = header.getOrDefault("X-Amz-Signature")
  valid_776875 = validateParameter(valid_776875, JString, required = false,
                                 default = nil)
  if valid_776875 != nil:
    section.add "X-Amz-Signature", valid_776875
  var valid_776876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776876 = validateParameter(valid_776876, JString, required = false,
                                 default = nil)
  if valid_776876 != nil:
    section.add "X-Amz-SignedHeaders", valid_776876
  var valid_776877 = header.getOrDefault("X-Amz-Credential")
  valid_776877 = validateParameter(valid_776877, JString, required = false,
                                 default = nil)
  if valid_776877 != nil:
    section.add "X-Amz-Credential", valid_776877
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  var valid_776878 = formData.getOrDefault("OptionsToRemove")
  valid_776878 = validateParameter(valid_776878, JArray, required = false,
                                 default = nil)
  if valid_776878 != nil:
    section.add "OptionsToRemove", valid_776878
  var valid_776879 = formData.getOrDefault("ApplyImmediately")
  valid_776879 = validateParameter(valid_776879, JBool, required = false, default = nil)
  if valid_776879 != nil:
    section.add "ApplyImmediately", valid_776879
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_776880 = formData.getOrDefault("OptionGroupName")
  valid_776880 = validateParameter(valid_776880, JString, required = true,
                                 default = nil)
  if valid_776880 != nil:
    section.add "OptionGroupName", valid_776880
  var valid_776881 = formData.getOrDefault("OptionsToInclude")
  valid_776881 = validateParameter(valid_776881, JArray, required = false,
                                 default = nil)
  if valid_776881 != nil:
    section.add "OptionsToInclude", valid_776881
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776882: Call_PostModifyOptionGroup_776866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_776882.validator(path, query, header, formData, body)
  let scheme = call_776882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776882.url(scheme.get, call_776882.host, call_776882.base,
                         call_776882.route, valid.getOrDefault("path"))
  result = hook(call_776882, url, valid)

proc call*(call_776883: Call_PostModifyOptionGroup_776866; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776884 = newJObject()
  var formData_776885 = newJObject()
  if OptionsToRemove != nil:
    formData_776885.add "OptionsToRemove", OptionsToRemove
  add(formData_776885, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_776885, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToInclude != nil:
    formData_776885.add "OptionsToInclude", OptionsToInclude
  add(query_776884, "Action", newJString(Action))
  add(query_776884, "Version", newJString(Version))
  result = call_776883.call(nil, query_776884, nil, formData_776885, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_776866(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_776867, base: "/",
    url: url_PostModifyOptionGroup_776868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_776847 = ref object of OpenApiRestCall_772581
proc url_GetModifyOptionGroup_776849(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyOptionGroup_776848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_776850 = query.getOrDefault("OptionGroupName")
  valid_776850 = validateParameter(valid_776850, JString, required = true,
                                 default = nil)
  if valid_776850 != nil:
    section.add "OptionGroupName", valid_776850
  var valid_776851 = query.getOrDefault("OptionsToRemove")
  valid_776851 = validateParameter(valid_776851, JArray, required = false,
                                 default = nil)
  if valid_776851 != nil:
    section.add "OptionsToRemove", valid_776851
  var valid_776852 = query.getOrDefault("Action")
  valid_776852 = validateParameter(valid_776852, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_776852 != nil:
    section.add "Action", valid_776852
  var valid_776853 = query.getOrDefault("Version")
  valid_776853 = validateParameter(valid_776853, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776853 != nil:
    section.add "Version", valid_776853
  var valid_776854 = query.getOrDefault("ApplyImmediately")
  valid_776854 = validateParameter(valid_776854, JBool, required = false, default = nil)
  if valid_776854 != nil:
    section.add "ApplyImmediately", valid_776854
  var valid_776855 = query.getOrDefault("OptionsToInclude")
  valid_776855 = validateParameter(valid_776855, JArray, required = false,
                                 default = nil)
  if valid_776855 != nil:
    section.add "OptionsToInclude", valid_776855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776856 = header.getOrDefault("X-Amz-Date")
  valid_776856 = validateParameter(valid_776856, JString, required = false,
                                 default = nil)
  if valid_776856 != nil:
    section.add "X-Amz-Date", valid_776856
  var valid_776857 = header.getOrDefault("X-Amz-Security-Token")
  valid_776857 = validateParameter(valid_776857, JString, required = false,
                                 default = nil)
  if valid_776857 != nil:
    section.add "X-Amz-Security-Token", valid_776857
  var valid_776858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776858 = validateParameter(valid_776858, JString, required = false,
                                 default = nil)
  if valid_776858 != nil:
    section.add "X-Amz-Content-Sha256", valid_776858
  var valid_776859 = header.getOrDefault("X-Amz-Algorithm")
  valid_776859 = validateParameter(valid_776859, JString, required = false,
                                 default = nil)
  if valid_776859 != nil:
    section.add "X-Amz-Algorithm", valid_776859
  var valid_776860 = header.getOrDefault("X-Amz-Signature")
  valid_776860 = validateParameter(valid_776860, JString, required = false,
                                 default = nil)
  if valid_776860 != nil:
    section.add "X-Amz-Signature", valid_776860
  var valid_776861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776861 = validateParameter(valid_776861, JString, required = false,
                                 default = nil)
  if valid_776861 != nil:
    section.add "X-Amz-SignedHeaders", valid_776861
  var valid_776862 = header.getOrDefault("X-Amz-Credential")
  valid_776862 = validateParameter(valid_776862, JString, required = false,
                                 default = nil)
  if valid_776862 != nil:
    section.add "X-Amz-Credential", valid_776862
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776863: Call_GetModifyOptionGroup_776847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_776863.validator(path, query, header, formData, body)
  let scheme = call_776863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776863.url(scheme.get, call_776863.host, call_776863.base,
                         call_776863.route, valid.getOrDefault("path"))
  result = hook(call_776863, url, valid)

proc call*(call_776864: Call_GetModifyOptionGroup_776847; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  var query_776865 = newJObject()
  add(query_776865, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToRemove != nil:
    query_776865.add "OptionsToRemove", OptionsToRemove
  add(query_776865, "Action", newJString(Action))
  add(query_776865, "Version", newJString(Version))
  add(query_776865, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    query_776865.add "OptionsToInclude", OptionsToInclude
  result = call_776864.call(nil, query_776865, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_776847(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_776848, base: "/",
    url: url_GetModifyOptionGroup_776849, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_776904 = ref object of OpenApiRestCall_772581
proc url_PostPromoteReadReplica_776906(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPromoteReadReplica_776905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776907 = query.getOrDefault("Action")
  valid_776907 = validateParameter(valid_776907, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_776907 != nil:
    section.add "Action", valid_776907
  var valid_776908 = query.getOrDefault("Version")
  valid_776908 = validateParameter(valid_776908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776908 != nil:
    section.add "Version", valid_776908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776909 = header.getOrDefault("X-Amz-Date")
  valid_776909 = validateParameter(valid_776909, JString, required = false,
                                 default = nil)
  if valid_776909 != nil:
    section.add "X-Amz-Date", valid_776909
  var valid_776910 = header.getOrDefault("X-Amz-Security-Token")
  valid_776910 = validateParameter(valid_776910, JString, required = false,
                                 default = nil)
  if valid_776910 != nil:
    section.add "X-Amz-Security-Token", valid_776910
  var valid_776911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776911 = validateParameter(valid_776911, JString, required = false,
                                 default = nil)
  if valid_776911 != nil:
    section.add "X-Amz-Content-Sha256", valid_776911
  var valid_776912 = header.getOrDefault("X-Amz-Algorithm")
  valid_776912 = validateParameter(valid_776912, JString, required = false,
                                 default = nil)
  if valid_776912 != nil:
    section.add "X-Amz-Algorithm", valid_776912
  var valid_776913 = header.getOrDefault("X-Amz-Signature")
  valid_776913 = validateParameter(valid_776913, JString, required = false,
                                 default = nil)
  if valid_776913 != nil:
    section.add "X-Amz-Signature", valid_776913
  var valid_776914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776914 = validateParameter(valid_776914, JString, required = false,
                                 default = nil)
  if valid_776914 != nil:
    section.add "X-Amz-SignedHeaders", valid_776914
  var valid_776915 = header.getOrDefault("X-Amz-Credential")
  valid_776915 = validateParameter(valid_776915, JString, required = false,
                                 default = nil)
  if valid_776915 != nil:
    section.add "X-Amz-Credential", valid_776915
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_776916 = formData.getOrDefault("DBInstanceIdentifier")
  valid_776916 = validateParameter(valid_776916, JString, required = true,
                                 default = nil)
  if valid_776916 != nil:
    section.add "DBInstanceIdentifier", valid_776916
  var valid_776917 = formData.getOrDefault("BackupRetentionPeriod")
  valid_776917 = validateParameter(valid_776917, JInt, required = false, default = nil)
  if valid_776917 != nil:
    section.add "BackupRetentionPeriod", valid_776917
  var valid_776918 = formData.getOrDefault("PreferredBackupWindow")
  valid_776918 = validateParameter(valid_776918, JString, required = false,
                                 default = nil)
  if valid_776918 != nil:
    section.add "PreferredBackupWindow", valid_776918
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776919: Call_PostPromoteReadReplica_776904; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_776919.validator(path, query, header, formData, body)
  let scheme = call_776919.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776919.url(scheme.get, call_776919.host, call_776919.base,
                         call_776919.route, valid.getOrDefault("path"))
  result = hook(call_776919, url, valid)

proc call*(call_776920: Call_PostPromoteReadReplica_776904;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  var query_776921 = newJObject()
  var formData_776922 = newJObject()
  add(formData_776922, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_776922, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_776921, "Action", newJString(Action))
  add(formData_776922, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_776921, "Version", newJString(Version))
  result = call_776920.call(nil, query_776921, nil, formData_776922, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_776904(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_776905, base: "/",
    url: url_PostPromoteReadReplica_776906, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_776886 = ref object of OpenApiRestCall_772581
proc url_GetPromoteReadReplica_776888(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPromoteReadReplica_776887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_776889 = query.getOrDefault("BackupRetentionPeriod")
  valid_776889 = validateParameter(valid_776889, JInt, required = false, default = nil)
  if valid_776889 != nil:
    section.add "BackupRetentionPeriod", valid_776889
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776890 = query.getOrDefault("Action")
  valid_776890 = validateParameter(valid_776890, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_776890 != nil:
    section.add "Action", valid_776890
  var valid_776891 = query.getOrDefault("PreferredBackupWindow")
  valid_776891 = validateParameter(valid_776891, JString, required = false,
                                 default = nil)
  if valid_776891 != nil:
    section.add "PreferredBackupWindow", valid_776891
  var valid_776892 = query.getOrDefault("Version")
  valid_776892 = validateParameter(valid_776892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776892 != nil:
    section.add "Version", valid_776892
  var valid_776893 = query.getOrDefault("DBInstanceIdentifier")
  valid_776893 = validateParameter(valid_776893, JString, required = true,
                                 default = nil)
  if valid_776893 != nil:
    section.add "DBInstanceIdentifier", valid_776893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776894 = header.getOrDefault("X-Amz-Date")
  valid_776894 = validateParameter(valid_776894, JString, required = false,
                                 default = nil)
  if valid_776894 != nil:
    section.add "X-Amz-Date", valid_776894
  var valid_776895 = header.getOrDefault("X-Amz-Security-Token")
  valid_776895 = validateParameter(valid_776895, JString, required = false,
                                 default = nil)
  if valid_776895 != nil:
    section.add "X-Amz-Security-Token", valid_776895
  var valid_776896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776896 = validateParameter(valid_776896, JString, required = false,
                                 default = nil)
  if valid_776896 != nil:
    section.add "X-Amz-Content-Sha256", valid_776896
  var valid_776897 = header.getOrDefault("X-Amz-Algorithm")
  valid_776897 = validateParameter(valid_776897, JString, required = false,
                                 default = nil)
  if valid_776897 != nil:
    section.add "X-Amz-Algorithm", valid_776897
  var valid_776898 = header.getOrDefault("X-Amz-Signature")
  valid_776898 = validateParameter(valid_776898, JString, required = false,
                                 default = nil)
  if valid_776898 != nil:
    section.add "X-Amz-Signature", valid_776898
  var valid_776899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776899 = validateParameter(valid_776899, JString, required = false,
                                 default = nil)
  if valid_776899 != nil:
    section.add "X-Amz-SignedHeaders", valid_776899
  var valid_776900 = header.getOrDefault("X-Amz-Credential")
  valid_776900 = validateParameter(valid_776900, JString, required = false,
                                 default = nil)
  if valid_776900 != nil:
    section.add "X-Amz-Credential", valid_776900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776901: Call_GetPromoteReadReplica_776886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_776901.validator(path, query, header, formData, body)
  let scheme = call_776901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776901.url(scheme.get, call_776901.host, call_776901.base,
                         call_776901.route, valid.getOrDefault("path"))
  result = hook(call_776901, url, valid)

proc call*(call_776902: Call_GetPromoteReadReplica_776886;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  var query_776903 = newJObject()
  add(query_776903, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_776903, "Action", newJString(Action))
  add(query_776903, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_776903, "Version", newJString(Version))
  add(query_776903, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_776902.call(nil, query_776903, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_776886(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_776887, base: "/",
    url: url_GetPromoteReadReplica_776888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_776939 = ref object of OpenApiRestCall_772581
proc url_PostPromoteReadReplicaDBCluster_776941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPromoteReadReplicaDBCluster_776940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776942 = query.getOrDefault("Action")
  valid_776942 = validateParameter(valid_776942, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_776942 != nil:
    section.add "Action", valid_776942
  var valid_776943 = query.getOrDefault("Version")
  valid_776943 = validateParameter(valid_776943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776943 != nil:
    section.add "Version", valid_776943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776944 = header.getOrDefault("X-Amz-Date")
  valid_776944 = validateParameter(valid_776944, JString, required = false,
                                 default = nil)
  if valid_776944 != nil:
    section.add "X-Amz-Date", valid_776944
  var valid_776945 = header.getOrDefault("X-Amz-Security-Token")
  valid_776945 = validateParameter(valid_776945, JString, required = false,
                                 default = nil)
  if valid_776945 != nil:
    section.add "X-Amz-Security-Token", valid_776945
  var valid_776946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776946 = validateParameter(valid_776946, JString, required = false,
                                 default = nil)
  if valid_776946 != nil:
    section.add "X-Amz-Content-Sha256", valid_776946
  var valid_776947 = header.getOrDefault("X-Amz-Algorithm")
  valid_776947 = validateParameter(valid_776947, JString, required = false,
                                 default = nil)
  if valid_776947 != nil:
    section.add "X-Amz-Algorithm", valid_776947
  var valid_776948 = header.getOrDefault("X-Amz-Signature")
  valid_776948 = validateParameter(valid_776948, JString, required = false,
                                 default = nil)
  if valid_776948 != nil:
    section.add "X-Amz-Signature", valid_776948
  var valid_776949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776949 = validateParameter(valid_776949, JString, required = false,
                                 default = nil)
  if valid_776949 != nil:
    section.add "X-Amz-SignedHeaders", valid_776949
  var valid_776950 = header.getOrDefault("X-Amz-Credential")
  valid_776950 = validateParameter(valid_776950, JString, required = false,
                                 default = nil)
  if valid_776950 != nil:
    section.add "X-Amz-Credential", valid_776950
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776951 = formData.getOrDefault("DBClusterIdentifier")
  valid_776951 = validateParameter(valid_776951, JString, required = true,
                                 default = nil)
  if valid_776951 != nil:
    section.add "DBClusterIdentifier", valid_776951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776952: Call_PostPromoteReadReplicaDBCluster_776939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776952.validator(path, query, header, formData, body)
  let scheme = call_776952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776952.url(scheme.get, call_776952.host, call_776952.base,
                         call_776952.route, valid.getOrDefault("path"))
  result = hook(call_776952, url, valid)

proc call*(call_776953: Call_PostPromoteReadReplicaDBCluster_776939;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Version: string (required)
  var query_776954 = newJObject()
  var formData_776955 = newJObject()
  add(query_776954, "Action", newJString(Action))
  add(formData_776955, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776954, "Version", newJString(Version))
  result = call_776953.call(nil, query_776954, nil, formData_776955, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_776939(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_776940, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_776941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_776923 = ref object of OpenApiRestCall_772581
proc url_GetPromoteReadReplicaDBCluster_776925(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPromoteReadReplicaDBCluster_776924(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_776926 = query.getOrDefault("DBClusterIdentifier")
  valid_776926 = validateParameter(valid_776926, JString, required = true,
                                 default = nil)
  if valid_776926 != nil:
    section.add "DBClusterIdentifier", valid_776926
  var valid_776927 = query.getOrDefault("Action")
  valid_776927 = validateParameter(valid_776927, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_776927 != nil:
    section.add "Action", valid_776927
  var valid_776928 = query.getOrDefault("Version")
  valid_776928 = validateParameter(valid_776928, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776928 != nil:
    section.add "Version", valid_776928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776929 = header.getOrDefault("X-Amz-Date")
  valid_776929 = validateParameter(valid_776929, JString, required = false,
                                 default = nil)
  if valid_776929 != nil:
    section.add "X-Amz-Date", valid_776929
  var valid_776930 = header.getOrDefault("X-Amz-Security-Token")
  valid_776930 = validateParameter(valid_776930, JString, required = false,
                                 default = nil)
  if valid_776930 != nil:
    section.add "X-Amz-Security-Token", valid_776930
  var valid_776931 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776931 = validateParameter(valid_776931, JString, required = false,
                                 default = nil)
  if valid_776931 != nil:
    section.add "X-Amz-Content-Sha256", valid_776931
  var valid_776932 = header.getOrDefault("X-Amz-Algorithm")
  valid_776932 = validateParameter(valid_776932, JString, required = false,
                                 default = nil)
  if valid_776932 != nil:
    section.add "X-Amz-Algorithm", valid_776932
  var valid_776933 = header.getOrDefault("X-Amz-Signature")
  valid_776933 = validateParameter(valid_776933, JString, required = false,
                                 default = nil)
  if valid_776933 != nil:
    section.add "X-Amz-Signature", valid_776933
  var valid_776934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776934 = validateParameter(valid_776934, JString, required = false,
                                 default = nil)
  if valid_776934 != nil:
    section.add "X-Amz-SignedHeaders", valid_776934
  var valid_776935 = header.getOrDefault("X-Amz-Credential")
  valid_776935 = validateParameter(valid_776935, JString, required = false,
                                 default = nil)
  if valid_776935 != nil:
    section.add "X-Amz-Credential", valid_776935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776936: Call_GetPromoteReadReplicaDBCluster_776923; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_776936.validator(path, query, header, formData, body)
  let scheme = call_776936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776936.url(scheme.get, call_776936.host, call_776936.base,
                         call_776936.route, valid.getOrDefault("path"))
  result = hook(call_776936, url, valid)

proc call*(call_776937: Call_GetPromoteReadReplicaDBCluster_776923;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776938 = newJObject()
  add(query_776938, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_776938, "Action", newJString(Action))
  add(query_776938, "Version", newJString(Version))
  result = call_776937.call(nil, query_776938, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_776923(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_776924, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_776925,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_776975 = ref object of OpenApiRestCall_772581
proc url_PostPurchaseReservedDBInstancesOffering_776977(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPurchaseReservedDBInstancesOffering_776976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776978 = query.getOrDefault("Action")
  valid_776978 = validateParameter(valid_776978, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_776978 != nil:
    section.add "Action", valid_776978
  var valid_776979 = query.getOrDefault("Version")
  valid_776979 = validateParameter(valid_776979, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776979 != nil:
    section.add "Version", valid_776979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776980 = header.getOrDefault("X-Amz-Date")
  valid_776980 = validateParameter(valid_776980, JString, required = false,
                                 default = nil)
  if valid_776980 != nil:
    section.add "X-Amz-Date", valid_776980
  var valid_776981 = header.getOrDefault("X-Amz-Security-Token")
  valid_776981 = validateParameter(valid_776981, JString, required = false,
                                 default = nil)
  if valid_776981 != nil:
    section.add "X-Amz-Security-Token", valid_776981
  var valid_776982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776982 = validateParameter(valid_776982, JString, required = false,
                                 default = nil)
  if valid_776982 != nil:
    section.add "X-Amz-Content-Sha256", valid_776982
  var valid_776983 = header.getOrDefault("X-Amz-Algorithm")
  valid_776983 = validateParameter(valid_776983, JString, required = false,
                                 default = nil)
  if valid_776983 != nil:
    section.add "X-Amz-Algorithm", valid_776983
  var valid_776984 = header.getOrDefault("X-Amz-Signature")
  valid_776984 = validateParameter(valid_776984, JString, required = false,
                                 default = nil)
  if valid_776984 != nil:
    section.add "X-Amz-Signature", valid_776984
  var valid_776985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776985 = validateParameter(valid_776985, JString, required = false,
                                 default = nil)
  if valid_776985 != nil:
    section.add "X-Amz-SignedHeaders", valid_776985
  var valid_776986 = header.getOrDefault("X-Amz-Credential")
  valid_776986 = validateParameter(valid_776986, JString, required = false,
                                 default = nil)
  if valid_776986 != nil:
    section.add "X-Amz-Credential", valid_776986
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  section = newJObject()
  var valid_776987 = formData.getOrDefault("ReservedDBInstanceId")
  valid_776987 = validateParameter(valid_776987, JString, required = false,
                                 default = nil)
  if valid_776987 != nil:
    section.add "ReservedDBInstanceId", valid_776987
  var valid_776988 = formData.getOrDefault("Tags")
  valid_776988 = validateParameter(valid_776988, JArray, required = false,
                                 default = nil)
  if valid_776988 != nil:
    section.add "Tags", valid_776988
  var valid_776989 = formData.getOrDefault("DBInstanceCount")
  valid_776989 = validateParameter(valid_776989, JInt, required = false, default = nil)
  if valid_776989 != nil:
    section.add "DBInstanceCount", valid_776989
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_776990 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_776990 = validateParameter(valid_776990, JString, required = true,
                                 default = nil)
  if valid_776990 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_776990
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776991: Call_PostPurchaseReservedDBInstancesOffering_776975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_776991.validator(path, query, header, formData, body)
  let scheme = call_776991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776991.url(scheme.get, call_776991.host, call_776991.base,
                         call_776991.route, valid.getOrDefault("path"))
  result = hook(call_776991, url, valid)

proc call*(call_776992: Call_PostPurchaseReservedDBInstancesOffering_776975;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = ""; Tags: JsonNode = nil;
          DBInstanceCount: int = 0;
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_776993 = newJObject()
  var formData_776994 = newJObject()
  add(formData_776994, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  if Tags != nil:
    formData_776994.add "Tags", Tags
  add(formData_776994, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_776993, "Action", newJString(Action))
  add(formData_776994, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776993, "Version", newJString(Version))
  result = call_776992.call(nil, query_776993, nil, formData_776994, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_776975(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_776976, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_776977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_776956 = ref object of OpenApiRestCall_772581
proc url_GetPurchaseReservedDBInstancesOffering_776958(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPurchaseReservedDBInstancesOffering_776957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_776959 = query.getOrDefault("DBInstanceCount")
  valid_776959 = validateParameter(valid_776959, JInt, required = false, default = nil)
  if valid_776959 != nil:
    section.add "DBInstanceCount", valid_776959
  var valid_776960 = query.getOrDefault("Tags")
  valid_776960 = validateParameter(valid_776960, JArray, required = false,
                                 default = nil)
  if valid_776960 != nil:
    section.add "Tags", valid_776960
  var valid_776961 = query.getOrDefault("ReservedDBInstanceId")
  valid_776961 = validateParameter(valid_776961, JString, required = false,
                                 default = nil)
  if valid_776961 != nil:
    section.add "ReservedDBInstanceId", valid_776961
  assert query != nil, "query argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_776962 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_776962 = validateParameter(valid_776962, JString, required = true,
                                 default = nil)
  if valid_776962 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_776962
  var valid_776963 = query.getOrDefault("Action")
  valid_776963 = validateParameter(valid_776963, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_776963 != nil:
    section.add "Action", valid_776963
  var valid_776964 = query.getOrDefault("Version")
  valid_776964 = validateParameter(valid_776964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_776964 != nil:
    section.add "Version", valid_776964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_776965 = header.getOrDefault("X-Amz-Date")
  valid_776965 = validateParameter(valid_776965, JString, required = false,
                                 default = nil)
  if valid_776965 != nil:
    section.add "X-Amz-Date", valid_776965
  var valid_776966 = header.getOrDefault("X-Amz-Security-Token")
  valid_776966 = validateParameter(valid_776966, JString, required = false,
                                 default = nil)
  if valid_776966 != nil:
    section.add "X-Amz-Security-Token", valid_776966
  var valid_776967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_776967 = validateParameter(valid_776967, JString, required = false,
                                 default = nil)
  if valid_776967 != nil:
    section.add "X-Amz-Content-Sha256", valid_776967
  var valid_776968 = header.getOrDefault("X-Amz-Algorithm")
  valid_776968 = validateParameter(valid_776968, JString, required = false,
                                 default = nil)
  if valid_776968 != nil:
    section.add "X-Amz-Algorithm", valid_776968
  var valid_776969 = header.getOrDefault("X-Amz-Signature")
  valid_776969 = validateParameter(valid_776969, JString, required = false,
                                 default = nil)
  if valid_776969 != nil:
    section.add "X-Amz-Signature", valid_776969
  var valid_776970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_776970 = validateParameter(valid_776970, JString, required = false,
                                 default = nil)
  if valid_776970 != nil:
    section.add "X-Amz-SignedHeaders", valid_776970
  var valid_776971 = header.getOrDefault("X-Amz-Credential")
  valid_776971 = validateParameter(valid_776971, JString, required = false,
                                 default = nil)
  if valid_776971 != nil:
    section.add "X-Amz-Credential", valid_776971
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_776972: Call_GetPurchaseReservedDBInstancesOffering_776956;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_776972.validator(path, query, header, formData, body)
  let scheme = call_776972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_776972.url(scheme.get, call_776972.host, call_776972.base,
                         call_776972.route, valid.getOrDefault("path"))
  result = hook(call_776972, url, valid)

proc call*(call_776973: Call_GetPurchaseReservedDBInstancesOffering_776956;
          ReservedDBInstancesOfferingId: string; DBInstanceCount: int = 0;
          Tags: JsonNode = nil; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_776974 = newJObject()
  add(query_776974, "DBInstanceCount", newJInt(DBInstanceCount))
  if Tags != nil:
    query_776974.add "Tags", Tags
  add(query_776974, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_776974, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_776974, "Action", newJString(Action))
  add(query_776974, "Version", newJString(Version))
  result = call_776973.call(nil, query_776974, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_776956(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_776957, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_776958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_777012 = ref object of OpenApiRestCall_772581
proc url_PostRebootDBInstance_777014(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRebootDBInstance_777013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777015 = query.getOrDefault("Action")
  valid_777015 = validateParameter(valid_777015, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_777015 != nil:
    section.add "Action", valid_777015
  var valid_777016 = query.getOrDefault("Version")
  valid_777016 = validateParameter(valid_777016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777016 != nil:
    section.add "Version", valid_777016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777017 = header.getOrDefault("X-Amz-Date")
  valid_777017 = validateParameter(valid_777017, JString, required = false,
                                 default = nil)
  if valid_777017 != nil:
    section.add "X-Amz-Date", valid_777017
  var valid_777018 = header.getOrDefault("X-Amz-Security-Token")
  valid_777018 = validateParameter(valid_777018, JString, required = false,
                                 default = nil)
  if valid_777018 != nil:
    section.add "X-Amz-Security-Token", valid_777018
  var valid_777019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777019 = validateParameter(valid_777019, JString, required = false,
                                 default = nil)
  if valid_777019 != nil:
    section.add "X-Amz-Content-Sha256", valid_777019
  var valid_777020 = header.getOrDefault("X-Amz-Algorithm")
  valid_777020 = validateParameter(valid_777020, JString, required = false,
                                 default = nil)
  if valid_777020 != nil:
    section.add "X-Amz-Algorithm", valid_777020
  var valid_777021 = header.getOrDefault("X-Amz-Signature")
  valid_777021 = validateParameter(valid_777021, JString, required = false,
                                 default = nil)
  if valid_777021 != nil:
    section.add "X-Amz-Signature", valid_777021
  var valid_777022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777022 = validateParameter(valid_777022, JString, required = false,
                                 default = nil)
  if valid_777022 != nil:
    section.add "X-Amz-SignedHeaders", valid_777022
  var valid_777023 = header.getOrDefault("X-Amz-Credential")
  valid_777023 = validateParameter(valid_777023, JString, required = false,
                                 default = nil)
  if valid_777023 != nil:
    section.add "X-Amz-Credential", valid_777023
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_777024 = formData.getOrDefault("DBInstanceIdentifier")
  valid_777024 = validateParameter(valid_777024, JString, required = true,
                                 default = nil)
  if valid_777024 != nil:
    section.add "DBInstanceIdentifier", valid_777024
  var valid_777025 = formData.getOrDefault("ForceFailover")
  valid_777025 = validateParameter(valid_777025, JBool, required = false, default = nil)
  if valid_777025 != nil:
    section.add "ForceFailover", valid_777025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777026: Call_PostRebootDBInstance_777012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_777026.validator(path, query, header, formData, body)
  let scheme = call_777026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777026.url(scheme.get, call_777026.host, call_777026.base,
                         call_777026.route, valid.getOrDefault("path"))
  result = hook(call_777026, url, valid)

proc call*(call_777027: Call_PostRebootDBInstance_777012;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: string (required)
  var query_777028 = newJObject()
  var formData_777029 = newJObject()
  add(formData_777029, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_777028, "Action", newJString(Action))
  add(formData_777029, "ForceFailover", newJBool(ForceFailover))
  add(query_777028, "Version", newJString(Version))
  result = call_777027.call(nil, query_777028, nil, formData_777029, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_777012(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_777013, base: "/",
    url: url_PostRebootDBInstance_777014, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_776995 = ref object of OpenApiRestCall_772581
proc url_GetRebootDBInstance_776997(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRebootDBInstance_776996(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_776998 = query.getOrDefault("Action")
  valid_776998 = validateParameter(valid_776998, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_776998 != nil:
    section.add "Action", valid_776998
  var valid_776999 = query.getOrDefault("ForceFailover")
  valid_776999 = validateParameter(valid_776999, JBool, required = false, default = nil)
  if valid_776999 != nil:
    section.add "ForceFailover", valid_776999
  var valid_777000 = query.getOrDefault("Version")
  valid_777000 = validateParameter(valid_777000, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777000 != nil:
    section.add "Version", valid_777000
  var valid_777001 = query.getOrDefault("DBInstanceIdentifier")
  valid_777001 = validateParameter(valid_777001, JString, required = true,
                                 default = nil)
  if valid_777001 != nil:
    section.add "DBInstanceIdentifier", valid_777001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777002 = header.getOrDefault("X-Amz-Date")
  valid_777002 = validateParameter(valid_777002, JString, required = false,
                                 default = nil)
  if valid_777002 != nil:
    section.add "X-Amz-Date", valid_777002
  var valid_777003 = header.getOrDefault("X-Amz-Security-Token")
  valid_777003 = validateParameter(valid_777003, JString, required = false,
                                 default = nil)
  if valid_777003 != nil:
    section.add "X-Amz-Security-Token", valid_777003
  var valid_777004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777004 = validateParameter(valid_777004, JString, required = false,
                                 default = nil)
  if valid_777004 != nil:
    section.add "X-Amz-Content-Sha256", valid_777004
  var valid_777005 = header.getOrDefault("X-Amz-Algorithm")
  valid_777005 = validateParameter(valid_777005, JString, required = false,
                                 default = nil)
  if valid_777005 != nil:
    section.add "X-Amz-Algorithm", valid_777005
  var valid_777006 = header.getOrDefault("X-Amz-Signature")
  valid_777006 = validateParameter(valid_777006, JString, required = false,
                                 default = nil)
  if valid_777006 != nil:
    section.add "X-Amz-Signature", valid_777006
  var valid_777007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777007 = validateParameter(valid_777007, JString, required = false,
                                 default = nil)
  if valid_777007 != nil:
    section.add "X-Amz-SignedHeaders", valid_777007
  var valid_777008 = header.getOrDefault("X-Amz-Credential")
  valid_777008 = validateParameter(valid_777008, JString, required = false,
                                 default = nil)
  if valid_777008 != nil:
    section.add "X-Amz-Credential", valid_777008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777009: Call_GetRebootDBInstance_776995; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_777009.validator(path, query, header, formData, body)
  let scheme = call_777009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777009.url(scheme.get, call_777009.host, call_777009.base,
                         call_777009.route, valid.getOrDefault("path"))
  result = hook(call_777009, url, valid)

proc call*(call_777010: Call_GetRebootDBInstance_776995;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance is not configured for Multi-AZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_777011 = newJObject()
  add(query_777011, "Action", newJString(Action))
  add(query_777011, "ForceFailover", newJBool(ForceFailover))
  add(query_777011, "Version", newJString(Version))
  add(query_777011, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_777010.call(nil, query_777011, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_776995(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_776996, base: "/",
    url: url_GetRebootDBInstance_776997, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_777047 = ref object of OpenApiRestCall_772581
proc url_PostRemoveFromGlobalCluster_777049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveFromGlobalCluster_777048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777050 = query.getOrDefault("Action")
  valid_777050 = validateParameter(valid_777050, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_777050 != nil:
    section.add "Action", valid_777050
  var valid_777051 = query.getOrDefault("Version")
  valid_777051 = validateParameter(valid_777051, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777051 != nil:
    section.add "Version", valid_777051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777052 = header.getOrDefault("X-Amz-Date")
  valid_777052 = validateParameter(valid_777052, JString, required = false,
                                 default = nil)
  if valid_777052 != nil:
    section.add "X-Amz-Date", valid_777052
  var valid_777053 = header.getOrDefault("X-Amz-Security-Token")
  valid_777053 = validateParameter(valid_777053, JString, required = false,
                                 default = nil)
  if valid_777053 != nil:
    section.add "X-Amz-Security-Token", valid_777053
  var valid_777054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777054 = validateParameter(valid_777054, JString, required = false,
                                 default = nil)
  if valid_777054 != nil:
    section.add "X-Amz-Content-Sha256", valid_777054
  var valid_777055 = header.getOrDefault("X-Amz-Algorithm")
  valid_777055 = validateParameter(valid_777055, JString, required = false,
                                 default = nil)
  if valid_777055 != nil:
    section.add "X-Amz-Algorithm", valid_777055
  var valid_777056 = header.getOrDefault("X-Amz-Signature")
  valid_777056 = validateParameter(valid_777056, JString, required = false,
                                 default = nil)
  if valid_777056 != nil:
    section.add "X-Amz-Signature", valid_777056
  var valid_777057 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777057 = validateParameter(valid_777057, JString, required = false,
                                 default = nil)
  if valid_777057 != nil:
    section.add "X-Amz-SignedHeaders", valid_777057
  var valid_777058 = header.getOrDefault("X-Amz-Credential")
  valid_777058 = validateParameter(valid_777058, JString, required = false,
                                 default = nil)
  if valid_777058 != nil:
    section.add "X-Amz-Credential", valid_777058
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_777059 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_777059 = validateParameter(valid_777059, JString, required = false,
                                 default = nil)
  if valid_777059 != nil:
    section.add "GlobalClusterIdentifier", valid_777059
  var valid_777060 = formData.getOrDefault("DbClusterIdentifier")
  valid_777060 = validateParameter(valid_777060, JString, required = false,
                                 default = nil)
  if valid_777060 != nil:
    section.add "DbClusterIdentifier", valid_777060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777061: Call_PostRemoveFromGlobalCluster_777047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777061.validator(path, query, header, formData, body)
  let scheme = call_777061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777061.url(scheme.get, call_777061.host, call_777061.base,
                         call_777061.route, valid.getOrDefault("path"))
  result = hook(call_777061, url, valid)

proc call*(call_777062: Call_PostRemoveFromGlobalCluster_777047;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777063 = newJObject()
  var formData_777064 = newJObject()
  add(formData_777064, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_777064, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_777063, "Action", newJString(Action))
  add(query_777063, "Version", newJString(Version))
  result = call_777062.call(nil, query_777063, nil, formData_777064, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_777047(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_777048, base: "/",
    url: url_PostRemoveFromGlobalCluster_777049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_777030 = ref object of OpenApiRestCall_772581
proc url_GetRemoveFromGlobalCluster_777032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveFromGlobalCluster_777031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_777033 = query.getOrDefault("DbClusterIdentifier")
  valid_777033 = validateParameter(valid_777033, JString, required = false,
                                 default = nil)
  if valid_777033 != nil:
    section.add "DbClusterIdentifier", valid_777033
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777034 = query.getOrDefault("Action")
  valid_777034 = validateParameter(valid_777034, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_777034 != nil:
    section.add "Action", valid_777034
  var valid_777035 = query.getOrDefault("GlobalClusterIdentifier")
  valid_777035 = validateParameter(valid_777035, JString, required = false,
                                 default = nil)
  if valid_777035 != nil:
    section.add "GlobalClusterIdentifier", valid_777035
  var valid_777036 = query.getOrDefault("Version")
  valid_777036 = validateParameter(valid_777036, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777036 != nil:
    section.add "Version", valid_777036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777037 = header.getOrDefault("X-Amz-Date")
  valid_777037 = validateParameter(valid_777037, JString, required = false,
                                 default = nil)
  if valid_777037 != nil:
    section.add "X-Amz-Date", valid_777037
  var valid_777038 = header.getOrDefault("X-Amz-Security-Token")
  valid_777038 = validateParameter(valid_777038, JString, required = false,
                                 default = nil)
  if valid_777038 != nil:
    section.add "X-Amz-Security-Token", valid_777038
  var valid_777039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777039 = validateParameter(valid_777039, JString, required = false,
                                 default = nil)
  if valid_777039 != nil:
    section.add "X-Amz-Content-Sha256", valid_777039
  var valid_777040 = header.getOrDefault("X-Amz-Algorithm")
  valid_777040 = validateParameter(valid_777040, JString, required = false,
                                 default = nil)
  if valid_777040 != nil:
    section.add "X-Amz-Algorithm", valid_777040
  var valid_777041 = header.getOrDefault("X-Amz-Signature")
  valid_777041 = validateParameter(valid_777041, JString, required = false,
                                 default = nil)
  if valid_777041 != nil:
    section.add "X-Amz-Signature", valid_777041
  var valid_777042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777042 = validateParameter(valid_777042, JString, required = false,
                                 default = nil)
  if valid_777042 != nil:
    section.add "X-Amz-SignedHeaders", valid_777042
  var valid_777043 = header.getOrDefault("X-Amz-Credential")
  valid_777043 = validateParameter(valid_777043, JString, required = false,
                                 default = nil)
  if valid_777043 != nil:
    section.add "X-Amz-Credential", valid_777043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777044: Call_GetRemoveFromGlobalCluster_777030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777044.validator(path, query, header, formData, body)
  let scheme = call_777044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777044.url(scheme.get, call_777044.host, call_777044.base,
                         call_777044.route, valid.getOrDefault("path"))
  result = hook(call_777044, url, valid)

proc call*(call_777045: Call_GetRemoveFromGlobalCluster_777030;
          DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: string (required)
  var query_777046 = newJObject()
  add(query_777046, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_777046, "Action", newJString(Action))
  add(query_777046, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_777046, "Version", newJString(Version))
  result = call_777045.call(nil, query_777046, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_777030(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_777031, base: "/",
    url: url_GetRemoveFromGlobalCluster_777032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_777083 = ref object of OpenApiRestCall_772581
proc url_PostRemoveRoleFromDBCluster_777085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromDBCluster_777084(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777086 = query.getOrDefault("Action")
  valid_777086 = validateParameter(valid_777086, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_777086 != nil:
    section.add "Action", valid_777086
  var valid_777087 = query.getOrDefault("Version")
  valid_777087 = validateParameter(valid_777087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777087 != nil:
    section.add "Version", valid_777087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777088 = header.getOrDefault("X-Amz-Date")
  valid_777088 = validateParameter(valid_777088, JString, required = false,
                                 default = nil)
  if valid_777088 != nil:
    section.add "X-Amz-Date", valid_777088
  var valid_777089 = header.getOrDefault("X-Amz-Security-Token")
  valid_777089 = validateParameter(valid_777089, JString, required = false,
                                 default = nil)
  if valid_777089 != nil:
    section.add "X-Amz-Security-Token", valid_777089
  var valid_777090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777090 = validateParameter(valid_777090, JString, required = false,
                                 default = nil)
  if valid_777090 != nil:
    section.add "X-Amz-Content-Sha256", valid_777090
  var valid_777091 = header.getOrDefault("X-Amz-Algorithm")
  valid_777091 = validateParameter(valid_777091, JString, required = false,
                                 default = nil)
  if valid_777091 != nil:
    section.add "X-Amz-Algorithm", valid_777091
  var valid_777092 = header.getOrDefault("X-Amz-Signature")
  valid_777092 = validateParameter(valid_777092, JString, required = false,
                                 default = nil)
  if valid_777092 != nil:
    section.add "X-Amz-Signature", valid_777092
  var valid_777093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777093 = validateParameter(valid_777093, JString, required = false,
                                 default = nil)
  if valid_777093 != nil:
    section.add "X-Amz-SignedHeaders", valid_777093
  var valid_777094 = header.getOrDefault("X-Amz-Credential")
  valid_777094 = validateParameter(valid_777094, JString, required = false,
                                 default = nil)
  if valid_777094 != nil:
    section.add "X-Amz-Credential", valid_777094
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_777095 = formData.getOrDefault("RoleArn")
  valid_777095 = validateParameter(valid_777095, JString, required = true,
                                 default = nil)
  if valid_777095 != nil:
    section.add "RoleArn", valid_777095
  var valid_777096 = formData.getOrDefault("DBClusterIdentifier")
  valid_777096 = validateParameter(valid_777096, JString, required = true,
                                 default = nil)
  if valid_777096 != nil:
    section.add "DBClusterIdentifier", valid_777096
  var valid_777097 = formData.getOrDefault("FeatureName")
  valid_777097 = validateParameter(valid_777097, JString, required = false,
                                 default = nil)
  if valid_777097 != nil:
    section.add "FeatureName", valid_777097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777098: Call_PostRemoveRoleFromDBCluster_777083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777098.validator(path, query, header, formData, body)
  let scheme = call_777098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777098.url(scheme.get, call_777098.host, call_777098.base,
                         call_777098.route, valid.getOrDefault("path"))
  result = hook(call_777098, url, valid)

proc call*(call_777099: Call_PostRemoveRoleFromDBCluster_777083; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_777100 = newJObject()
  var formData_777101 = newJObject()
  add(formData_777101, "RoleArn", newJString(RoleArn))
  add(query_777100, "Action", newJString(Action))
  add(formData_777101, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777100, "Version", newJString(Version))
  add(formData_777101, "FeatureName", newJString(FeatureName))
  result = call_777099.call(nil, query_777100, nil, formData_777101, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_777083(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_777084, base: "/",
    url: url_PostRemoveRoleFromDBCluster_777085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_777065 = ref object of OpenApiRestCall_772581
proc url_GetRemoveRoleFromDBCluster_777067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromDBCluster_777066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_777068 = query.getOrDefault("DBClusterIdentifier")
  valid_777068 = validateParameter(valid_777068, JString, required = true,
                                 default = nil)
  if valid_777068 != nil:
    section.add "DBClusterIdentifier", valid_777068
  var valid_777069 = query.getOrDefault("RoleArn")
  valid_777069 = validateParameter(valid_777069, JString, required = true,
                                 default = nil)
  if valid_777069 != nil:
    section.add "RoleArn", valid_777069
  var valid_777070 = query.getOrDefault("Action")
  valid_777070 = validateParameter(valid_777070, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_777070 != nil:
    section.add "Action", valid_777070
  var valid_777071 = query.getOrDefault("FeatureName")
  valid_777071 = validateParameter(valid_777071, JString, required = false,
                                 default = nil)
  if valid_777071 != nil:
    section.add "FeatureName", valid_777071
  var valid_777072 = query.getOrDefault("Version")
  valid_777072 = validateParameter(valid_777072, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777072 != nil:
    section.add "Version", valid_777072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777073 = header.getOrDefault("X-Amz-Date")
  valid_777073 = validateParameter(valid_777073, JString, required = false,
                                 default = nil)
  if valid_777073 != nil:
    section.add "X-Amz-Date", valid_777073
  var valid_777074 = header.getOrDefault("X-Amz-Security-Token")
  valid_777074 = validateParameter(valid_777074, JString, required = false,
                                 default = nil)
  if valid_777074 != nil:
    section.add "X-Amz-Security-Token", valid_777074
  var valid_777075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777075 = validateParameter(valid_777075, JString, required = false,
                                 default = nil)
  if valid_777075 != nil:
    section.add "X-Amz-Content-Sha256", valid_777075
  var valid_777076 = header.getOrDefault("X-Amz-Algorithm")
  valid_777076 = validateParameter(valid_777076, JString, required = false,
                                 default = nil)
  if valid_777076 != nil:
    section.add "X-Amz-Algorithm", valid_777076
  var valid_777077 = header.getOrDefault("X-Amz-Signature")
  valid_777077 = validateParameter(valid_777077, JString, required = false,
                                 default = nil)
  if valid_777077 != nil:
    section.add "X-Amz-Signature", valid_777077
  var valid_777078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777078 = validateParameter(valid_777078, JString, required = false,
                                 default = nil)
  if valid_777078 != nil:
    section.add "X-Amz-SignedHeaders", valid_777078
  var valid_777079 = header.getOrDefault("X-Amz-Credential")
  valid_777079 = validateParameter(valid_777079, JString, required = false,
                                 default = nil)
  if valid_777079 != nil:
    section.add "X-Amz-Credential", valid_777079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777080: Call_GetRemoveRoleFromDBCluster_777065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777080.validator(path, query, header, formData, body)
  let scheme = call_777080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777080.url(scheme.get, call_777080.host, call_777080.base,
                         call_777080.route, valid.getOrDefault("path"))
  result = hook(call_777080, url, valid)

proc call*(call_777081: Call_GetRemoveRoleFromDBCluster_777065;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_777082 = newJObject()
  add(query_777082, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777082, "RoleArn", newJString(RoleArn))
  add(query_777082, "Action", newJString(Action))
  add(query_777082, "FeatureName", newJString(FeatureName))
  add(query_777082, "Version", newJString(Version))
  result = call_777081.call(nil, query_777082, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_777065(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_777066, base: "/",
    url: url_GetRemoveRoleFromDBCluster_777067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_777120 = ref object of OpenApiRestCall_772581
proc url_PostRemoveRoleFromDBInstance_777122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromDBInstance_777121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777123 = query.getOrDefault("Action")
  valid_777123 = validateParameter(valid_777123, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_777123 != nil:
    section.add "Action", valid_777123
  var valid_777124 = query.getOrDefault("Version")
  valid_777124 = validateParameter(valid_777124, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777124 != nil:
    section.add "Version", valid_777124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777125 = header.getOrDefault("X-Amz-Date")
  valid_777125 = validateParameter(valid_777125, JString, required = false,
                                 default = nil)
  if valid_777125 != nil:
    section.add "X-Amz-Date", valid_777125
  var valid_777126 = header.getOrDefault("X-Amz-Security-Token")
  valid_777126 = validateParameter(valid_777126, JString, required = false,
                                 default = nil)
  if valid_777126 != nil:
    section.add "X-Amz-Security-Token", valid_777126
  var valid_777127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777127 = validateParameter(valid_777127, JString, required = false,
                                 default = nil)
  if valid_777127 != nil:
    section.add "X-Amz-Content-Sha256", valid_777127
  var valid_777128 = header.getOrDefault("X-Amz-Algorithm")
  valid_777128 = validateParameter(valid_777128, JString, required = false,
                                 default = nil)
  if valid_777128 != nil:
    section.add "X-Amz-Algorithm", valid_777128
  var valid_777129 = header.getOrDefault("X-Amz-Signature")
  valid_777129 = validateParameter(valid_777129, JString, required = false,
                                 default = nil)
  if valid_777129 != nil:
    section.add "X-Amz-Signature", valid_777129
  var valid_777130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777130 = validateParameter(valid_777130, JString, required = false,
                                 default = nil)
  if valid_777130 != nil:
    section.add "X-Amz-SignedHeaders", valid_777130
  var valid_777131 = header.getOrDefault("X-Amz-Credential")
  valid_777131 = validateParameter(valid_777131, JString, required = false,
                                 default = nil)
  if valid_777131 != nil:
    section.add "X-Amz-Credential", valid_777131
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_777132 = formData.getOrDefault("DBInstanceIdentifier")
  valid_777132 = validateParameter(valid_777132, JString, required = true,
                                 default = nil)
  if valid_777132 != nil:
    section.add "DBInstanceIdentifier", valid_777132
  var valid_777133 = formData.getOrDefault("RoleArn")
  valid_777133 = validateParameter(valid_777133, JString, required = true,
                                 default = nil)
  if valid_777133 != nil:
    section.add "RoleArn", valid_777133
  var valid_777134 = formData.getOrDefault("FeatureName")
  valid_777134 = validateParameter(valid_777134, JString, required = true,
                                 default = nil)
  if valid_777134 != nil:
    section.add "FeatureName", valid_777134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777135: Call_PostRemoveRoleFromDBInstance_777120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_777135.validator(path, query, header, formData, body)
  let scheme = call_777135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777135.url(scheme.get, call_777135.host, call_777135.base,
                         call_777135.route, valid.getOrDefault("path"))
  result = hook(call_777135, url, valid)

proc call*(call_777136: Call_PostRemoveRoleFromDBInstance_777120;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  var query_777137 = newJObject()
  var formData_777138 = newJObject()
  add(formData_777138, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_777138, "RoleArn", newJString(RoleArn))
  add(query_777137, "Action", newJString(Action))
  add(query_777137, "Version", newJString(Version))
  add(formData_777138, "FeatureName", newJString(FeatureName))
  result = call_777136.call(nil, query_777137, nil, formData_777138, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_777120(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_777121, base: "/",
    url: url_PostRemoveRoleFromDBInstance_777122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_777102 = ref object of OpenApiRestCall_772581
proc url_GetRemoveRoleFromDBInstance_777104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromDBInstance_777103(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_777105 = query.getOrDefault("RoleArn")
  valid_777105 = validateParameter(valid_777105, JString, required = true,
                                 default = nil)
  if valid_777105 != nil:
    section.add "RoleArn", valid_777105
  var valid_777106 = query.getOrDefault("Action")
  valid_777106 = validateParameter(valid_777106, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_777106 != nil:
    section.add "Action", valid_777106
  var valid_777107 = query.getOrDefault("FeatureName")
  valid_777107 = validateParameter(valid_777107, JString, required = true,
                                 default = nil)
  if valid_777107 != nil:
    section.add "FeatureName", valid_777107
  var valid_777108 = query.getOrDefault("Version")
  valid_777108 = validateParameter(valid_777108, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777108 != nil:
    section.add "Version", valid_777108
  var valid_777109 = query.getOrDefault("DBInstanceIdentifier")
  valid_777109 = validateParameter(valid_777109, JString, required = true,
                                 default = nil)
  if valid_777109 != nil:
    section.add "DBInstanceIdentifier", valid_777109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777110 = header.getOrDefault("X-Amz-Date")
  valid_777110 = validateParameter(valid_777110, JString, required = false,
                                 default = nil)
  if valid_777110 != nil:
    section.add "X-Amz-Date", valid_777110
  var valid_777111 = header.getOrDefault("X-Amz-Security-Token")
  valid_777111 = validateParameter(valid_777111, JString, required = false,
                                 default = nil)
  if valid_777111 != nil:
    section.add "X-Amz-Security-Token", valid_777111
  var valid_777112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777112 = validateParameter(valid_777112, JString, required = false,
                                 default = nil)
  if valid_777112 != nil:
    section.add "X-Amz-Content-Sha256", valid_777112
  var valid_777113 = header.getOrDefault("X-Amz-Algorithm")
  valid_777113 = validateParameter(valid_777113, JString, required = false,
                                 default = nil)
  if valid_777113 != nil:
    section.add "X-Amz-Algorithm", valid_777113
  var valid_777114 = header.getOrDefault("X-Amz-Signature")
  valid_777114 = validateParameter(valid_777114, JString, required = false,
                                 default = nil)
  if valid_777114 != nil:
    section.add "X-Amz-Signature", valid_777114
  var valid_777115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777115 = validateParameter(valid_777115, JString, required = false,
                                 default = nil)
  if valid_777115 != nil:
    section.add "X-Amz-SignedHeaders", valid_777115
  var valid_777116 = header.getOrDefault("X-Amz-Credential")
  valid_777116 = validateParameter(valid_777116, JString, required = false,
                                 default = nil)
  if valid_777116 != nil:
    section.add "X-Amz-Credential", valid_777116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777117: Call_GetRemoveRoleFromDBInstance_777102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_777117.validator(path, query, header, formData, body)
  let scheme = call_777117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777117.url(scheme.get, call_777117.host, call_777117.base,
                         call_777117.route, valid.getOrDefault("path"))
  result = hook(call_777117, url, valid)

proc call*(call_777118: Call_GetRemoveRoleFromDBInstance_777102; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  var query_777119 = newJObject()
  add(query_777119, "RoleArn", newJString(RoleArn))
  add(query_777119, "Action", newJString(Action))
  add(query_777119, "FeatureName", newJString(FeatureName))
  add(query_777119, "Version", newJString(Version))
  add(query_777119, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_777118.call(nil, query_777119, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_777102(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_777103, base: "/",
    url: url_GetRemoveRoleFromDBInstance_777104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_777156 = ref object of OpenApiRestCall_772581
proc url_PostRemoveSourceIdentifierFromSubscription_777158(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_777157(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777159 = query.getOrDefault("Action")
  valid_777159 = validateParameter(valid_777159, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_777159 != nil:
    section.add "Action", valid_777159
  var valid_777160 = query.getOrDefault("Version")
  valid_777160 = validateParameter(valid_777160, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777160 != nil:
    section.add "Version", valid_777160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777161 = header.getOrDefault("X-Amz-Date")
  valid_777161 = validateParameter(valid_777161, JString, required = false,
                                 default = nil)
  if valid_777161 != nil:
    section.add "X-Amz-Date", valid_777161
  var valid_777162 = header.getOrDefault("X-Amz-Security-Token")
  valid_777162 = validateParameter(valid_777162, JString, required = false,
                                 default = nil)
  if valid_777162 != nil:
    section.add "X-Amz-Security-Token", valid_777162
  var valid_777163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777163 = validateParameter(valid_777163, JString, required = false,
                                 default = nil)
  if valid_777163 != nil:
    section.add "X-Amz-Content-Sha256", valid_777163
  var valid_777164 = header.getOrDefault("X-Amz-Algorithm")
  valid_777164 = validateParameter(valid_777164, JString, required = false,
                                 default = nil)
  if valid_777164 != nil:
    section.add "X-Amz-Algorithm", valid_777164
  var valid_777165 = header.getOrDefault("X-Amz-Signature")
  valid_777165 = validateParameter(valid_777165, JString, required = false,
                                 default = nil)
  if valid_777165 != nil:
    section.add "X-Amz-Signature", valid_777165
  var valid_777166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777166 = validateParameter(valid_777166, JString, required = false,
                                 default = nil)
  if valid_777166 != nil:
    section.add "X-Amz-SignedHeaders", valid_777166
  var valid_777167 = header.getOrDefault("X-Amz-Credential")
  valid_777167 = validateParameter(valid_777167, JString, required = false,
                                 default = nil)
  if valid_777167 != nil:
    section.add "X-Amz-Credential", valid_777167
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_777168 = formData.getOrDefault("SourceIdentifier")
  valid_777168 = validateParameter(valid_777168, JString, required = true,
                                 default = nil)
  if valid_777168 != nil:
    section.add "SourceIdentifier", valid_777168
  var valid_777169 = formData.getOrDefault("SubscriptionName")
  valid_777169 = validateParameter(valid_777169, JString, required = true,
                                 default = nil)
  if valid_777169 != nil:
    section.add "SubscriptionName", valid_777169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777170: Call_PostRemoveSourceIdentifierFromSubscription_777156;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_777170.validator(path, query, header, formData, body)
  let scheme = call_777170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777170.url(scheme.get, call_777170.host, call_777170.base,
                         call_777170.route, valid.getOrDefault("path"))
  result = hook(call_777170, url, valid)

proc call*(call_777171: Call_PostRemoveSourceIdentifierFromSubscription_777156;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777172 = newJObject()
  var formData_777173 = newJObject()
  add(formData_777173, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_777173, "SubscriptionName", newJString(SubscriptionName))
  add(query_777172, "Action", newJString(Action))
  add(query_777172, "Version", newJString(Version))
  result = call_777171.call(nil, query_777172, nil, formData_777173, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_777156(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_777157,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_777158,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_777139 = ref object of OpenApiRestCall_772581
proc url_GetRemoveSourceIdentifierFromSubscription_777141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_777140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777142 = query.getOrDefault("Action")
  valid_777142 = validateParameter(valid_777142, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_777142 != nil:
    section.add "Action", valid_777142
  var valid_777143 = query.getOrDefault("SourceIdentifier")
  valid_777143 = validateParameter(valid_777143, JString, required = true,
                                 default = nil)
  if valid_777143 != nil:
    section.add "SourceIdentifier", valid_777143
  var valid_777144 = query.getOrDefault("SubscriptionName")
  valid_777144 = validateParameter(valid_777144, JString, required = true,
                                 default = nil)
  if valid_777144 != nil:
    section.add "SubscriptionName", valid_777144
  var valid_777145 = query.getOrDefault("Version")
  valid_777145 = validateParameter(valid_777145, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777145 != nil:
    section.add "Version", valid_777145
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777146 = header.getOrDefault("X-Amz-Date")
  valid_777146 = validateParameter(valid_777146, JString, required = false,
                                 default = nil)
  if valid_777146 != nil:
    section.add "X-Amz-Date", valid_777146
  var valid_777147 = header.getOrDefault("X-Amz-Security-Token")
  valid_777147 = validateParameter(valid_777147, JString, required = false,
                                 default = nil)
  if valid_777147 != nil:
    section.add "X-Amz-Security-Token", valid_777147
  var valid_777148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777148 = validateParameter(valid_777148, JString, required = false,
                                 default = nil)
  if valid_777148 != nil:
    section.add "X-Amz-Content-Sha256", valid_777148
  var valid_777149 = header.getOrDefault("X-Amz-Algorithm")
  valid_777149 = validateParameter(valid_777149, JString, required = false,
                                 default = nil)
  if valid_777149 != nil:
    section.add "X-Amz-Algorithm", valid_777149
  var valid_777150 = header.getOrDefault("X-Amz-Signature")
  valid_777150 = validateParameter(valid_777150, JString, required = false,
                                 default = nil)
  if valid_777150 != nil:
    section.add "X-Amz-Signature", valid_777150
  var valid_777151 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777151 = validateParameter(valid_777151, JString, required = false,
                                 default = nil)
  if valid_777151 != nil:
    section.add "X-Amz-SignedHeaders", valid_777151
  var valid_777152 = header.getOrDefault("X-Amz-Credential")
  valid_777152 = validateParameter(valid_777152, JString, required = false,
                                 default = nil)
  if valid_777152 != nil:
    section.add "X-Amz-Credential", valid_777152
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777153: Call_GetRemoveSourceIdentifierFromSubscription_777139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_777153.validator(path, query, header, formData, body)
  let scheme = call_777153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777153.url(scheme.get, call_777153.host, call_777153.base,
                         call_777153.route, valid.getOrDefault("path"))
  result = hook(call_777153, url, valid)

proc call*(call_777154: Call_GetRemoveSourceIdentifierFromSubscription_777139;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_777155 = newJObject()
  add(query_777155, "Action", newJString(Action))
  add(query_777155, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_777155, "SubscriptionName", newJString(SubscriptionName))
  add(query_777155, "Version", newJString(Version))
  result = call_777154.call(nil, query_777155, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_777139(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_777140,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_777141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_777191 = ref object of OpenApiRestCall_772581
proc url_PostRemoveTagsFromResource_777193(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveTagsFromResource_777192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777194 = query.getOrDefault("Action")
  valid_777194 = validateParameter(valid_777194, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_777194 != nil:
    section.add "Action", valid_777194
  var valid_777195 = query.getOrDefault("Version")
  valid_777195 = validateParameter(valid_777195, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777195 != nil:
    section.add "Version", valid_777195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777196 = header.getOrDefault("X-Amz-Date")
  valid_777196 = validateParameter(valid_777196, JString, required = false,
                                 default = nil)
  if valid_777196 != nil:
    section.add "X-Amz-Date", valid_777196
  var valid_777197 = header.getOrDefault("X-Amz-Security-Token")
  valid_777197 = validateParameter(valid_777197, JString, required = false,
                                 default = nil)
  if valid_777197 != nil:
    section.add "X-Amz-Security-Token", valid_777197
  var valid_777198 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777198 = validateParameter(valid_777198, JString, required = false,
                                 default = nil)
  if valid_777198 != nil:
    section.add "X-Amz-Content-Sha256", valid_777198
  var valid_777199 = header.getOrDefault("X-Amz-Algorithm")
  valid_777199 = validateParameter(valid_777199, JString, required = false,
                                 default = nil)
  if valid_777199 != nil:
    section.add "X-Amz-Algorithm", valid_777199
  var valid_777200 = header.getOrDefault("X-Amz-Signature")
  valid_777200 = validateParameter(valid_777200, JString, required = false,
                                 default = nil)
  if valid_777200 != nil:
    section.add "X-Amz-Signature", valid_777200
  var valid_777201 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777201 = validateParameter(valid_777201, JString, required = false,
                                 default = nil)
  if valid_777201 != nil:
    section.add "X-Amz-SignedHeaders", valid_777201
  var valid_777202 = header.getOrDefault("X-Amz-Credential")
  valid_777202 = validateParameter(valid_777202, JString, required = false,
                                 default = nil)
  if valid_777202 != nil:
    section.add "X-Amz-Credential", valid_777202
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_777203 = formData.getOrDefault("TagKeys")
  valid_777203 = validateParameter(valid_777203, JArray, required = true, default = nil)
  if valid_777203 != nil:
    section.add "TagKeys", valid_777203
  var valid_777204 = formData.getOrDefault("ResourceName")
  valid_777204 = validateParameter(valid_777204, JString, required = true,
                                 default = nil)
  if valid_777204 != nil:
    section.add "ResourceName", valid_777204
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777205: Call_PostRemoveTagsFromResource_777191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_777205.validator(path, query, header, formData, body)
  let scheme = call_777205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777205.url(scheme.get, call_777205.host, call_777205.base,
                         call_777205.route, valid.getOrDefault("path"))
  result = hook(call_777205, url, valid)

proc call*(call_777206: Call_PostRemoveTagsFromResource_777191; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_777207 = newJObject()
  var formData_777208 = newJObject()
  add(query_777207, "Action", newJString(Action))
  if TagKeys != nil:
    formData_777208.add "TagKeys", TagKeys
  add(formData_777208, "ResourceName", newJString(ResourceName))
  add(query_777207, "Version", newJString(Version))
  result = call_777206.call(nil, query_777207, nil, formData_777208, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_777191(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_777192, base: "/",
    url: url_PostRemoveTagsFromResource_777193,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_777174 = ref object of OpenApiRestCall_772581
proc url_GetRemoveTagsFromResource_777176(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveTagsFromResource_777175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_777177 = query.getOrDefault("ResourceName")
  valid_777177 = validateParameter(valid_777177, JString, required = true,
                                 default = nil)
  if valid_777177 != nil:
    section.add "ResourceName", valid_777177
  var valid_777178 = query.getOrDefault("Action")
  valid_777178 = validateParameter(valid_777178, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_777178 != nil:
    section.add "Action", valid_777178
  var valid_777179 = query.getOrDefault("TagKeys")
  valid_777179 = validateParameter(valid_777179, JArray, required = true, default = nil)
  if valid_777179 != nil:
    section.add "TagKeys", valid_777179
  var valid_777180 = query.getOrDefault("Version")
  valid_777180 = validateParameter(valid_777180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777180 != nil:
    section.add "Version", valid_777180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777181 = header.getOrDefault("X-Amz-Date")
  valid_777181 = validateParameter(valid_777181, JString, required = false,
                                 default = nil)
  if valid_777181 != nil:
    section.add "X-Amz-Date", valid_777181
  var valid_777182 = header.getOrDefault("X-Amz-Security-Token")
  valid_777182 = validateParameter(valid_777182, JString, required = false,
                                 default = nil)
  if valid_777182 != nil:
    section.add "X-Amz-Security-Token", valid_777182
  var valid_777183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777183 = validateParameter(valid_777183, JString, required = false,
                                 default = nil)
  if valid_777183 != nil:
    section.add "X-Amz-Content-Sha256", valid_777183
  var valid_777184 = header.getOrDefault("X-Amz-Algorithm")
  valid_777184 = validateParameter(valid_777184, JString, required = false,
                                 default = nil)
  if valid_777184 != nil:
    section.add "X-Amz-Algorithm", valid_777184
  var valid_777185 = header.getOrDefault("X-Amz-Signature")
  valid_777185 = validateParameter(valid_777185, JString, required = false,
                                 default = nil)
  if valid_777185 != nil:
    section.add "X-Amz-Signature", valid_777185
  var valid_777186 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777186 = validateParameter(valid_777186, JString, required = false,
                                 default = nil)
  if valid_777186 != nil:
    section.add "X-Amz-SignedHeaders", valid_777186
  var valid_777187 = header.getOrDefault("X-Amz-Credential")
  valid_777187 = validateParameter(valid_777187, JString, required = false,
                                 default = nil)
  if valid_777187 != nil:
    section.add "X-Amz-Credential", valid_777187
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777188: Call_GetRemoveTagsFromResource_777174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_777188.validator(path, query, header, formData, body)
  let scheme = call_777188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777188.url(scheme.get, call_777188.host, call_777188.base,
                         call_777188.route, valid.getOrDefault("path"))
  result = hook(call_777188, url, valid)

proc call*(call_777189: Call_GetRemoveTagsFromResource_777174;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_777190 = newJObject()
  add(query_777190, "ResourceName", newJString(ResourceName))
  add(query_777190, "Action", newJString(Action))
  if TagKeys != nil:
    query_777190.add "TagKeys", TagKeys
  add(query_777190, "Version", newJString(Version))
  result = call_777189.call(nil, query_777190, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_777174(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_777175, base: "/",
    url: url_GetRemoveTagsFromResource_777176,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_777227 = ref object of OpenApiRestCall_772581
proc url_PostResetDBClusterParameterGroup_777229(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetDBClusterParameterGroup_777228(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777230 = query.getOrDefault("Action")
  valid_777230 = validateParameter(valid_777230, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_777230 != nil:
    section.add "Action", valid_777230
  var valid_777231 = query.getOrDefault("Version")
  valid_777231 = validateParameter(valid_777231, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777231 != nil:
    section.add "Version", valid_777231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777232 = header.getOrDefault("X-Amz-Date")
  valid_777232 = validateParameter(valid_777232, JString, required = false,
                                 default = nil)
  if valid_777232 != nil:
    section.add "X-Amz-Date", valid_777232
  var valid_777233 = header.getOrDefault("X-Amz-Security-Token")
  valid_777233 = validateParameter(valid_777233, JString, required = false,
                                 default = nil)
  if valid_777233 != nil:
    section.add "X-Amz-Security-Token", valid_777233
  var valid_777234 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777234 = validateParameter(valid_777234, JString, required = false,
                                 default = nil)
  if valid_777234 != nil:
    section.add "X-Amz-Content-Sha256", valid_777234
  var valid_777235 = header.getOrDefault("X-Amz-Algorithm")
  valid_777235 = validateParameter(valid_777235, JString, required = false,
                                 default = nil)
  if valid_777235 != nil:
    section.add "X-Amz-Algorithm", valid_777235
  var valid_777236 = header.getOrDefault("X-Amz-Signature")
  valid_777236 = validateParameter(valid_777236, JString, required = false,
                                 default = nil)
  if valid_777236 != nil:
    section.add "X-Amz-Signature", valid_777236
  var valid_777237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777237 = validateParameter(valid_777237, JString, required = false,
                                 default = nil)
  if valid_777237 != nil:
    section.add "X-Amz-SignedHeaders", valid_777237
  var valid_777238 = header.getOrDefault("X-Amz-Credential")
  valid_777238 = validateParameter(valid_777238, JString, required = false,
                                 default = nil)
  if valid_777238 != nil:
    section.add "X-Amz-Credential", valid_777238
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_777239 = formData.getOrDefault("Parameters")
  valid_777239 = validateParameter(valid_777239, JArray, required = false,
                                 default = nil)
  if valid_777239 != nil:
    section.add "Parameters", valid_777239
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_777240 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_777240 = validateParameter(valid_777240, JString, required = true,
                                 default = nil)
  if valid_777240 != nil:
    section.add "DBClusterParameterGroupName", valid_777240
  var valid_777241 = formData.getOrDefault("ResetAllParameters")
  valid_777241 = validateParameter(valid_777241, JBool, required = false, default = nil)
  if valid_777241 != nil:
    section.add "ResetAllParameters", valid_777241
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777242: Call_PostResetDBClusterParameterGroup_777227;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777242.validator(path, query, header, formData, body)
  let scheme = call_777242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777242.url(scheme.get, call_777242.host, call_777242.base,
                         call_777242.route, valid.getOrDefault("path"))
  result = hook(call_777242, url, valid)

proc call*(call_777243: Call_PostResetDBClusterParameterGroup_777227;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_777244 = newJObject()
  var formData_777245 = newJObject()
  if Parameters != nil:
    formData_777245.add "Parameters", Parameters
  add(query_777244, "Action", newJString(Action))
  add(formData_777245, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_777245, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_777244, "Version", newJString(Version))
  result = call_777243.call(nil, query_777244, nil, formData_777245, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_777227(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_777228, base: "/",
    url: url_PostResetDBClusterParameterGroup_777229,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_777209 = ref object of OpenApiRestCall_772581
proc url_GetResetDBClusterParameterGroup_777211(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetDBClusterParameterGroup_777210(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_777212 = query.getOrDefault("DBClusterParameterGroupName")
  valid_777212 = validateParameter(valid_777212, JString, required = true,
                                 default = nil)
  if valid_777212 != nil:
    section.add "DBClusterParameterGroupName", valid_777212
  var valid_777213 = query.getOrDefault("Parameters")
  valid_777213 = validateParameter(valid_777213, JArray, required = false,
                                 default = nil)
  if valid_777213 != nil:
    section.add "Parameters", valid_777213
  var valid_777214 = query.getOrDefault("Action")
  valid_777214 = validateParameter(valid_777214, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_777214 != nil:
    section.add "Action", valid_777214
  var valid_777215 = query.getOrDefault("ResetAllParameters")
  valid_777215 = validateParameter(valid_777215, JBool, required = false, default = nil)
  if valid_777215 != nil:
    section.add "ResetAllParameters", valid_777215
  var valid_777216 = query.getOrDefault("Version")
  valid_777216 = validateParameter(valid_777216, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777216 != nil:
    section.add "Version", valid_777216
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777217 = header.getOrDefault("X-Amz-Date")
  valid_777217 = validateParameter(valid_777217, JString, required = false,
                                 default = nil)
  if valid_777217 != nil:
    section.add "X-Amz-Date", valid_777217
  var valid_777218 = header.getOrDefault("X-Amz-Security-Token")
  valid_777218 = validateParameter(valid_777218, JString, required = false,
                                 default = nil)
  if valid_777218 != nil:
    section.add "X-Amz-Security-Token", valid_777218
  var valid_777219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777219 = validateParameter(valid_777219, JString, required = false,
                                 default = nil)
  if valid_777219 != nil:
    section.add "X-Amz-Content-Sha256", valid_777219
  var valid_777220 = header.getOrDefault("X-Amz-Algorithm")
  valid_777220 = validateParameter(valid_777220, JString, required = false,
                                 default = nil)
  if valid_777220 != nil:
    section.add "X-Amz-Algorithm", valid_777220
  var valid_777221 = header.getOrDefault("X-Amz-Signature")
  valid_777221 = validateParameter(valid_777221, JString, required = false,
                                 default = nil)
  if valid_777221 != nil:
    section.add "X-Amz-Signature", valid_777221
  var valid_777222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777222 = validateParameter(valid_777222, JString, required = false,
                                 default = nil)
  if valid_777222 != nil:
    section.add "X-Amz-SignedHeaders", valid_777222
  var valid_777223 = header.getOrDefault("X-Amz-Credential")
  valid_777223 = validateParameter(valid_777223, JString, required = false,
                                 default = nil)
  if valid_777223 != nil:
    section.add "X-Amz-Credential", valid_777223
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777224: Call_GetResetDBClusterParameterGroup_777209;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777224.validator(path, query, header, formData, body)
  let scheme = call_777224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777224.url(scheme.get, call_777224.host, call_777224.base,
                         call_777224.route, valid.getOrDefault("path"))
  result = hook(call_777224, url, valid)

proc call*(call_777225: Call_GetResetDBClusterParameterGroup_777209;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_777226 = newJObject()
  add(query_777226, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_777226.add "Parameters", Parameters
  add(query_777226, "Action", newJString(Action))
  add(query_777226, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_777226, "Version", newJString(Version))
  result = call_777225.call(nil, query_777226, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_777209(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_777210, base: "/",
    url: url_GetResetDBClusterParameterGroup_777211,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_777264 = ref object of OpenApiRestCall_772581
proc url_PostResetDBParameterGroup_777266(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetDBParameterGroup_777265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777267 = query.getOrDefault("Action")
  valid_777267 = validateParameter(valid_777267, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_777267 != nil:
    section.add "Action", valid_777267
  var valid_777268 = query.getOrDefault("Version")
  valid_777268 = validateParameter(valid_777268, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777268 != nil:
    section.add "Version", valid_777268
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777269 = header.getOrDefault("X-Amz-Date")
  valid_777269 = validateParameter(valid_777269, JString, required = false,
                                 default = nil)
  if valid_777269 != nil:
    section.add "X-Amz-Date", valid_777269
  var valid_777270 = header.getOrDefault("X-Amz-Security-Token")
  valid_777270 = validateParameter(valid_777270, JString, required = false,
                                 default = nil)
  if valid_777270 != nil:
    section.add "X-Amz-Security-Token", valid_777270
  var valid_777271 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777271 = validateParameter(valid_777271, JString, required = false,
                                 default = nil)
  if valid_777271 != nil:
    section.add "X-Amz-Content-Sha256", valid_777271
  var valid_777272 = header.getOrDefault("X-Amz-Algorithm")
  valid_777272 = validateParameter(valid_777272, JString, required = false,
                                 default = nil)
  if valid_777272 != nil:
    section.add "X-Amz-Algorithm", valid_777272
  var valid_777273 = header.getOrDefault("X-Amz-Signature")
  valid_777273 = validateParameter(valid_777273, JString, required = false,
                                 default = nil)
  if valid_777273 != nil:
    section.add "X-Amz-Signature", valid_777273
  var valid_777274 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777274 = validateParameter(valid_777274, JString, required = false,
                                 default = nil)
  if valid_777274 != nil:
    section.add "X-Amz-SignedHeaders", valid_777274
  var valid_777275 = header.getOrDefault("X-Amz-Credential")
  valid_777275 = validateParameter(valid_777275, JString, required = false,
                                 default = nil)
  if valid_777275 != nil:
    section.add "X-Amz-Credential", valid_777275
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_777276 = formData.getOrDefault("DBParameterGroupName")
  valid_777276 = validateParameter(valid_777276, JString, required = true,
                                 default = nil)
  if valid_777276 != nil:
    section.add "DBParameterGroupName", valid_777276
  var valid_777277 = formData.getOrDefault("Parameters")
  valid_777277 = validateParameter(valid_777277, JArray, required = false,
                                 default = nil)
  if valid_777277 != nil:
    section.add "Parameters", valid_777277
  var valid_777278 = formData.getOrDefault("ResetAllParameters")
  valid_777278 = validateParameter(valid_777278, JBool, required = false, default = nil)
  if valid_777278 != nil:
    section.add "ResetAllParameters", valid_777278
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777279: Call_PostResetDBParameterGroup_777264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_777279.validator(path, query, header, formData, body)
  let scheme = call_777279.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777279.url(scheme.get, call_777279.host, call_777279.base,
                         call_777279.route, valid.getOrDefault("path"))
  result = hook(call_777279, url, valid)

proc call*(call_777280: Call_PostResetDBParameterGroup_777264;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_777281 = newJObject()
  var formData_777282 = newJObject()
  add(formData_777282, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_777282.add "Parameters", Parameters
  add(query_777281, "Action", newJString(Action))
  add(formData_777282, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_777281, "Version", newJString(Version))
  result = call_777280.call(nil, query_777281, nil, formData_777282, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_777264(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_777265, base: "/",
    url: url_PostResetDBParameterGroup_777266,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_777246 = ref object of OpenApiRestCall_772581
proc url_GetResetDBParameterGroup_777248(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetDBParameterGroup_777247(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_777249 = query.getOrDefault("DBParameterGroupName")
  valid_777249 = validateParameter(valid_777249, JString, required = true,
                                 default = nil)
  if valid_777249 != nil:
    section.add "DBParameterGroupName", valid_777249
  var valid_777250 = query.getOrDefault("Parameters")
  valid_777250 = validateParameter(valid_777250, JArray, required = false,
                                 default = nil)
  if valid_777250 != nil:
    section.add "Parameters", valid_777250
  var valid_777251 = query.getOrDefault("Action")
  valid_777251 = validateParameter(valid_777251, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_777251 != nil:
    section.add "Action", valid_777251
  var valid_777252 = query.getOrDefault("ResetAllParameters")
  valid_777252 = validateParameter(valid_777252, JBool, required = false, default = nil)
  if valid_777252 != nil:
    section.add "ResetAllParameters", valid_777252
  var valid_777253 = query.getOrDefault("Version")
  valid_777253 = validateParameter(valid_777253, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777253 != nil:
    section.add "Version", valid_777253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777254 = header.getOrDefault("X-Amz-Date")
  valid_777254 = validateParameter(valid_777254, JString, required = false,
                                 default = nil)
  if valid_777254 != nil:
    section.add "X-Amz-Date", valid_777254
  var valid_777255 = header.getOrDefault("X-Amz-Security-Token")
  valid_777255 = validateParameter(valid_777255, JString, required = false,
                                 default = nil)
  if valid_777255 != nil:
    section.add "X-Amz-Security-Token", valid_777255
  var valid_777256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777256 = validateParameter(valid_777256, JString, required = false,
                                 default = nil)
  if valid_777256 != nil:
    section.add "X-Amz-Content-Sha256", valid_777256
  var valid_777257 = header.getOrDefault("X-Amz-Algorithm")
  valid_777257 = validateParameter(valid_777257, JString, required = false,
                                 default = nil)
  if valid_777257 != nil:
    section.add "X-Amz-Algorithm", valid_777257
  var valid_777258 = header.getOrDefault("X-Amz-Signature")
  valid_777258 = validateParameter(valid_777258, JString, required = false,
                                 default = nil)
  if valid_777258 != nil:
    section.add "X-Amz-Signature", valid_777258
  var valid_777259 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777259 = validateParameter(valid_777259, JString, required = false,
                                 default = nil)
  if valid_777259 != nil:
    section.add "X-Amz-SignedHeaders", valid_777259
  var valid_777260 = header.getOrDefault("X-Amz-Credential")
  valid_777260 = validateParameter(valid_777260, JString, required = false,
                                 default = nil)
  if valid_777260 != nil:
    section.add "X-Amz-Credential", valid_777260
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777261: Call_GetResetDBParameterGroup_777246; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_777261.validator(path, query, header, formData, body)
  let scheme = call_777261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777261.url(scheme.get, call_777261.host, call_777261.base,
                         call_777261.route, valid.getOrDefault("path"))
  result = hook(call_777261, url, valid)

proc call*(call_777262: Call_GetResetDBParameterGroup_777246;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_777263 = newJObject()
  add(query_777263, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_777263.add "Parameters", Parameters
  add(query_777263, "Action", newJString(Action))
  add(query_777263, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_777263, "Version", newJString(Version))
  result = call_777262.call(nil, query_777263, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_777246(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_777247, base: "/",
    url: url_GetResetDBParameterGroup_777248, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_777327 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBClusterFromS3_777329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBClusterFromS3_777328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777330 = query.getOrDefault("Action")
  valid_777330 = validateParameter(valid_777330, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_777330 != nil:
    section.add "Action", valid_777330
  var valid_777331 = query.getOrDefault("Version")
  valid_777331 = validateParameter(valid_777331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777331 != nil:
    section.add "Version", valid_777331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777332 = header.getOrDefault("X-Amz-Date")
  valid_777332 = validateParameter(valid_777332, JString, required = false,
                                 default = nil)
  if valid_777332 != nil:
    section.add "X-Amz-Date", valid_777332
  var valid_777333 = header.getOrDefault("X-Amz-Security-Token")
  valid_777333 = validateParameter(valid_777333, JString, required = false,
                                 default = nil)
  if valid_777333 != nil:
    section.add "X-Amz-Security-Token", valid_777333
  var valid_777334 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777334 = validateParameter(valid_777334, JString, required = false,
                                 default = nil)
  if valid_777334 != nil:
    section.add "X-Amz-Content-Sha256", valid_777334
  var valid_777335 = header.getOrDefault("X-Amz-Algorithm")
  valid_777335 = validateParameter(valid_777335, JString, required = false,
                                 default = nil)
  if valid_777335 != nil:
    section.add "X-Amz-Algorithm", valid_777335
  var valid_777336 = header.getOrDefault("X-Amz-Signature")
  valid_777336 = validateParameter(valid_777336, JString, required = false,
                                 default = nil)
  if valid_777336 != nil:
    section.add "X-Amz-Signature", valid_777336
  var valid_777337 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777337 = validateParameter(valid_777337, JString, required = false,
                                 default = nil)
  if valid_777337 != nil:
    section.add "X-Amz-SignedHeaders", valid_777337
  var valid_777338 = header.getOrDefault("X-Amz-Credential")
  valid_777338 = validateParameter(valid_777338, JString, required = false,
                                 default = nil)
  if valid_777338 != nil:
    section.add "X-Amz-Credential", valid_777338
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `S3BucketName` field"
  var valid_777339 = formData.getOrDefault("S3BucketName")
  valid_777339 = validateParameter(valid_777339, JString, required = true,
                                 default = nil)
  if valid_777339 != nil:
    section.add "S3BucketName", valid_777339
  var valid_777340 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777340 = validateParameter(valid_777340, JBool, required = false, default = nil)
  if valid_777340 != nil:
    section.add "CopyTagsToSnapshot", valid_777340
  var valid_777341 = formData.getOrDefault("Port")
  valid_777341 = validateParameter(valid_777341, JInt, required = false, default = nil)
  if valid_777341 != nil:
    section.add "Port", valid_777341
  var valid_777342 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777342 = validateParameter(valid_777342, JArray, required = false,
                                 default = nil)
  if valid_777342 != nil:
    section.add "VpcSecurityGroupIds", valid_777342
  var valid_777343 = formData.getOrDefault("Engine")
  valid_777343 = validateParameter(valid_777343, JString, required = true,
                                 default = nil)
  if valid_777343 != nil:
    section.add "Engine", valid_777343
  var valid_777344 = formData.getOrDefault("SourceEngine")
  valid_777344 = validateParameter(valid_777344, JString, required = true,
                                 default = nil)
  if valid_777344 != nil:
    section.add "SourceEngine", valid_777344
  var valid_777345 = formData.getOrDefault("OptionGroupName")
  valid_777345 = validateParameter(valid_777345, JString, required = false,
                                 default = nil)
  if valid_777345 != nil:
    section.add "OptionGroupName", valid_777345
  var valid_777346 = formData.getOrDefault("BackupRetentionPeriod")
  valid_777346 = validateParameter(valid_777346, JInt, required = false, default = nil)
  if valid_777346 != nil:
    section.add "BackupRetentionPeriod", valid_777346
  var valid_777347 = formData.getOrDefault("BacktrackWindow")
  valid_777347 = validateParameter(valid_777347, JInt, required = false, default = nil)
  if valid_777347 != nil:
    section.add "BacktrackWindow", valid_777347
  var valid_777348 = formData.getOrDefault("Tags")
  valid_777348 = validateParameter(valid_777348, JArray, required = false,
                                 default = nil)
  if valid_777348 != nil:
    section.add "Tags", valid_777348
  var valid_777349 = formData.getOrDefault("MasterUserPassword")
  valid_777349 = validateParameter(valid_777349, JString, required = true,
                                 default = nil)
  if valid_777349 != nil:
    section.add "MasterUserPassword", valid_777349
  var valid_777350 = formData.getOrDefault("SourceEngineVersion")
  valid_777350 = validateParameter(valid_777350, JString, required = true,
                                 default = nil)
  if valid_777350 != nil:
    section.add "SourceEngineVersion", valid_777350
  var valid_777351 = formData.getOrDefault("S3Prefix")
  valid_777351 = validateParameter(valid_777351, JString, required = false,
                                 default = nil)
  if valid_777351 != nil:
    section.add "S3Prefix", valid_777351
  var valid_777352 = formData.getOrDefault("DeletionProtection")
  valid_777352 = validateParameter(valid_777352, JBool, required = false, default = nil)
  if valid_777352 != nil:
    section.add "DeletionProtection", valid_777352
  var valid_777353 = formData.getOrDefault("DBSubnetGroupName")
  valid_777353 = validateParameter(valid_777353, JString, required = false,
                                 default = nil)
  if valid_777353 != nil:
    section.add "DBSubnetGroupName", valid_777353
  var valid_777354 = formData.getOrDefault("S3IngestionRoleArn")
  valid_777354 = validateParameter(valid_777354, JString, required = true,
                                 default = nil)
  if valid_777354 != nil:
    section.add "S3IngestionRoleArn", valid_777354
  var valid_777355 = formData.getOrDefault("AvailabilityZones")
  valid_777355 = validateParameter(valid_777355, JArray, required = false,
                                 default = nil)
  if valid_777355 != nil:
    section.add "AvailabilityZones", valid_777355
  var valid_777356 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_777356 = validateParameter(valid_777356, JString, required = false,
                                 default = nil)
  if valid_777356 != nil:
    section.add "DBClusterParameterGroupName", valid_777356
  var valid_777357 = formData.getOrDefault("MasterUsername")
  valid_777357 = validateParameter(valid_777357, JString, required = true,
                                 default = nil)
  if valid_777357 != nil:
    section.add "MasterUsername", valid_777357
  var valid_777358 = formData.getOrDefault("DatabaseName")
  valid_777358 = validateParameter(valid_777358, JString, required = false,
                                 default = nil)
  if valid_777358 != nil:
    section.add "DatabaseName", valid_777358
  var valid_777359 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777359 = validateParameter(valid_777359, JArray, required = false,
                                 default = nil)
  if valid_777359 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777359
  var valid_777360 = formData.getOrDefault("CharacterSetName")
  valid_777360 = validateParameter(valid_777360, JString, required = false,
                                 default = nil)
  if valid_777360 != nil:
    section.add "CharacterSetName", valid_777360
  var valid_777361 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777361 = validateParameter(valid_777361, JBool, required = false, default = nil)
  if valid_777361 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777361
  var valid_777362 = formData.getOrDefault("PreferredBackupWindow")
  valid_777362 = validateParameter(valid_777362, JString, required = false,
                                 default = nil)
  if valid_777362 != nil:
    section.add "PreferredBackupWindow", valid_777362
  var valid_777363 = formData.getOrDefault("KmsKeyId")
  valid_777363 = validateParameter(valid_777363, JString, required = false,
                                 default = nil)
  if valid_777363 != nil:
    section.add "KmsKeyId", valid_777363
  var valid_777364 = formData.getOrDefault("StorageEncrypted")
  valid_777364 = validateParameter(valid_777364, JBool, required = false, default = nil)
  if valid_777364 != nil:
    section.add "StorageEncrypted", valid_777364
  var valid_777365 = formData.getOrDefault("DBClusterIdentifier")
  valid_777365 = validateParameter(valid_777365, JString, required = true,
                                 default = nil)
  if valid_777365 != nil:
    section.add "DBClusterIdentifier", valid_777365
  var valid_777366 = formData.getOrDefault("EngineVersion")
  valid_777366 = validateParameter(valid_777366, JString, required = false,
                                 default = nil)
  if valid_777366 != nil:
    section.add "EngineVersion", valid_777366
  var valid_777367 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_777367 = validateParameter(valid_777367, JString, required = false,
                                 default = nil)
  if valid_777367 != nil:
    section.add "PreferredMaintenanceWindow", valid_777367
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777368: Call_PostRestoreDBClusterFromS3_777327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777368.validator(path, query, header, formData, body)
  let scheme = call_777368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777368.url(scheme.get, call_777368.host, call_777368.base,
                         call_777368.route, valid.getOrDefault("path"))
  result = hook(call_777368, url, valid)

proc call*(call_777369: Call_PostRestoreDBClusterFromS3_777327;
          S3BucketName: string; Engine: string; SourceEngine: string;
          MasterUserPassword: string; SourceEngineVersion: string;
          S3IngestionRoleArn: string; MasterUsername: string;
          DBClusterIdentifier: string; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          BacktrackWindow: int = 0; Tags: JsonNode = nil; S3Prefix: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromS3";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_777370 = newJObject()
  var formData_777371 = newJObject()
  add(formData_777371, "S3BucketName", newJString(S3BucketName))
  add(formData_777371, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777371, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_777371.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777371, "Engine", newJString(Engine))
  add(formData_777371, "SourceEngine", newJString(SourceEngine))
  add(formData_777371, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777371, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_777371, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_777371.add "Tags", Tags
  add(formData_777371, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_777371, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_777371, "S3Prefix", newJString(S3Prefix))
  add(formData_777371, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777371, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_777371, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_777370, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_777371.add "AvailabilityZones", AvailabilityZones
  add(formData_777371, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_777371, "MasterUsername", newJString(MasterUsername))
  add(formData_777371, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_777371.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777371, "CharacterSetName", newJString(CharacterSetName))
  add(formData_777371, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777371, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_777371, "KmsKeyId", newJString(KmsKeyId))
  add(formData_777371, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_777371, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_777371, "EngineVersion", newJString(EngineVersion))
  add(query_777370, "Version", newJString(Version))
  add(formData_777371, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_777369.call(nil, query_777370, nil, formData_777371, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_777327(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_777328, base: "/",
    url: url_PostRestoreDBClusterFromS3_777329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_777283 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBClusterFromS3_777285(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBClusterFromS3_777284(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_777286 = query.getOrDefault("Engine")
  valid_777286 = validateParameter(valid_777286, JString, required = true,
                                 default = nil)
  if valid_777286 != nil:
    section.add "Engine", valid_777286
  var valid_777287 = query.getOrDefault("S3BucketName")
  valid_777287 = validateParameter(valid_777287, JString, required = true,
                                 default = nil)
  if valid_777287 != nil:
    section.add "S3BucketName", valid_777287
  var valid_777288 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_777288 = validateParameter(valid_777288, JString, required = false,
                                 default = nil)
  if valid_777288 != nil:
    section.add "PreferredMaintenanceWindow", valid_777288
  var valid_777289 = query.getOrDefault("DBClusterParameterGroupName")
  valid_777289 = validateParameter(valid_777289, JString, required = false,
                                 default = nil)
  if valid_777289 != nil:
    section.add "DBClusterParameterGroupName", valid_777289
  var valid_777290 = query.getOrDefault("StorageEncrypted")
  valid_777290 = validateParameter(valid_777290, JBool, required = false, default = nil)
  if valid_777290 != nil:
    section.add "StorageEncrypted", valid_777290
  var valid_777291 = query.getOrDefault("S3Prefix")
  valid_777291 = validateParameter(valid_777291, JString, required = false,
                                 default = nil)
  if valid_777291 != nil:
    section.add "S3Prefix", valid_777291
  var valid_777292 = query.getOrDefault("AvailabilityZones")
  valid_777292 = validateParameter(valid_777292, JArray, required = false,
                                 default = nil)
  if valid_777292 != nil:
    section.add "AvailabilityZones", valid_777292
  var valid_777293 = query.getOrDefault("DatabaseName")
  valid_777293 = validateParameter(valid_777293, JString, required = false,
                                 default = nil)
  if valid_777293 != nil:
    section.add "DatabaseName", valid_777293
  var valid_777294 = query.getOrDefault("DBClusterIdentifier")
  valid_777294 = validateParameter(valid_777294, JString, required = true,
                                 default = nil)
  if valid_777294 != nil:
    section.add "DBClusterIdentifier", valid_777294
  var valid_777295 = query.getOrDefault("OptionGroupName")
  valid_777295 = validateParameter(valid_777295, JString, required = false,
                                 default = nil)
  if valid_777295 != nil:
    section.add "OptionGroupName", valid_777295
  var valid_777296 = query.getOrDefault("MasterUserPassword")
  valid_777296 = validateParameter(valid_777296, JString, required = true,
                                 default = nil)
  if valid_777296 != nil:
    section.add "MasterUserPassword", valid_777296
  var valid_777297 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777297 = validateParameter(valid_777297, JBool, required = false, default = nil)
  if valid_777297 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777297
  var valid_777298 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777298 = validateParameter(valid_777298, JArray, required = false,
                                 default = nil)
  if valid_777298 != nil:
    section.add "VpcSecurityGroupIds", valid_777298
  var valid_777299 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777299 = validateParameter(valid_777299, JArray, required = false,
                                 default = nil)
  if valid_777299 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777299
  var valid_777300 = query.getOrDefault("Tags")
  valid_777300 = validateParameter(valid_777300, JArray, required = false,
                                 default = nil)
  if valid_777300 != nil:
    section.add "Tags", valid_777300
  var valid_777301 = query.getOrDefault("BackupRetentionPeriod")
  valid_777301 = validateParameter(valid_777301, JInt, required = false, default = nil)
  if valid_777301 != nil:
    section.add "BackupRetentionPeriod", valid_777301
  var valid_777302 = query.getOrDefault("S3IngestionRoleArn")
  valid_777302 = validateParameter(valid_777302, JString, required = true,
                                 default = nil)
  if valid_777302 != nil:
    section.add "S3IngestionRoleArn", valid_777302
  var valid_777303 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777303 = validateParameter(valid_777303, JBool, required = false, default = nil)
  if valid_777303 != nil:
    section.add "CopyTagsToSnapshot", valid_777303
  var valid_777304 = query.getOrDefault("DeletionProtection")
  valid_777304 = validateParameter(valid_777304, JBool, required = false, default = nil)
  if valid_777304 != nil:
    section.add "DeletionProtection", valid_777304
  var valid_777305 = query.getOrDefault("Action")
  valid_777305 = validateParameter(valid_777305, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_777305 != nil:
    section.add "Action", valid_777305
  var valid_777306 = query.getOrDefault("CharacterSetName")
  valid_777306 = validateParameter(valid_777306, JString, required = false,
                                 default = nil)
  if valid_777306 != nil:
    section.add "CharacterSetName", valid_777306
  var valid_777307 = query.getOrDefault("DBSubnetGroupName")
  valid_777307 = validateParameter(valid_777307, JString, required = false,
                                 default = nil)
  if valid_777307 != nil:
    section.add "DBSubnetGroupName", valid_777307
  var valid_777308 = query.getOrDefault("KmsKeyId")
  valid_777308 = validateParameter(valid_777308, JString, required = false,
                                 default = nil)
  if valid_777308 != nil:
    section.add "KmsKeyId", valid_777308
  var valid_777309 = query.getOrDefault("SourceEngine")
  valid_777309 = validateParameter(valid_777309, JString, required = true,
                                 default = nil)
  if valid_777309 != nil:
    section.add "SourceEngine", valid_777309
  var valid_777310 = query.getOrDefault("BacktrackWindow")
  valid_777310 = validateParameter(valid_777310, JInt, required = false, default = nil)
  if valid_777310 != nil:
    section.add "BacktrackWindow", valid_777310
  var valid_777311 = query.getOrDefault("EngineVersion")
  valid_777311 = validateParameter(valid_777311, JString, required = false,
                                 default = nil)
  if valid_777311 != nil:
    section.add "EngineVersion", valid_777311
  var valid_777312 = query.getOrDefault("Port")
  valid_777312 = validateParameter(valid_777312, JInt, required = false, default = nil)
  if valid_777312 != nil:
    section.add "Port", valid_777312
  var valid_777313 = query.getOrDefault("SourceEngineVersion")
  valid_777313 = validateParameter(valid_777313, JString, required = true,
                                 default = nil)
  if valid_777313 != nil:
    section.add "SourceEngineVersion", valid_777313
  var valid_777314 = query.getOrDefault("PreferredBackupWindow")
  valid_777314 = validateParameter(valid_777314, JString, required = false,
                                 default = nil)
  if valid_777314 != nil:
    section.add "PreferredBackupWindow", valid_777314
  var valid_777315 = query.getOrDefault("Version")
  valid_777315 = validateParameter(valid_777315, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777315 != nil:
    section.add "Version", valid_777315
  var valid_777316 = query.getOrDefault("MasterUsername")
  valid_777316 = validateParameter(valid_777316, JString, required = true,
                                 default = nil)
  if valid_777316 != nil:
    section.add "MasterUsername", valid_777316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777317 = header.getOrDefault("X-Amz-Date")
  valid_777317 = validateParameter(valid_777317, JString, required = false,
                                 default = nil)
  if valid_777317 != nil:
    section.add "X-Amz-Date", valid_777317
  var valid_777318 = header.getOrDefault("X-Amz-Security-Token")
  valid_777318 = validateParameter(valid_777318, JString, required = false,
                                 default = nil)
  if valid_777318 != nil:
    section.add "X-Amz-Security-Token", valid_777318
  var valid_777319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777319 = validateParameter(valid_777319, JString, required = false,
                                 default = nil)
  if valid_777319 != nil:
    section.add "X-Amz-Content-Sha256", valid_777319
  var valid_777320 = header.getOrDefault("X-Amz-Algorithm")
  valid_777320 = validateParameter(valid_777320, JString, required = false,
                                 default = nil)
  if valid_777320 != nil:
    section.add "X-Amz-Algorithm", valid_777320
  var valid_777321 = header.getOrDefault("X-Amz-Signature")
  valid_777321 = validateParameter(valid_777321, JString, required = false,
                                 default = nil)
  if valid_777321 != nil:
    section.add "X-Amz-Signature", valid_777321
  var valid_777322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777322 = validateParameter(valid_777322, JString, required = false,
                                 default = nil)
  if valid_777322 != nil:
    section.add "X-Amz-SignedHeaders", valid_777322
  var valid_777323 = header.getOrDefault("X-Amz-Credential")
  valid_777323 = validateParameter(valid_777323, JString, required = false,
                                 default = nil)
  if valid_777323 != nil:
    section.add "X-Amz-Credential", valid_777323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777324: Call_GetRestoreDBClusterFromS3_777283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777324.validator(path, query, header, formData, body)
  let scheme = call_777324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777324.url(scheme.get, call_777324.host, call_777324.base,
                         call_777324.route, valid.getOrDefault("path"))
  result = hook(call_777324, url, valid)

proc call*(call_777325: Call_GetRestoreDBClusterFromS3_777283; Engine: string;
          S3BucketName: string; DBClusterIdentifier: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          SourceEngine: string; SourceEngineVersion: string; MasterUsername: string;
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          S3Prefix: string = ""; AvailabilityZones: JsonNode = nil;
          DatabaseName: string = ""; OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromS3"; CharacterSetName: string = "";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_777326 = newJObject()
  add(query_777326, "Engine", newJString(Engine))
  add(query_777326, "S3BucketName", newJString(S3BucketName))
  add(query_777326, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_777326, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_777326, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_777326, "S3Prefix", newJString(S3Prefix))
  if AvailabilityZones != nil:
    query_777326.add "AvailabilityZones", AvailabilityZones
  add(query_777326, "DatabaseName", newJString(DatabaseName))
  add(query_777326, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777326, "OptionGroupName", newJString(OptionGroupName))
  add(query_777326, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_777326, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_777326.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_777326.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_777326.add "Tags", Tags
  add(query_777326, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_777326, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_777326, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777326, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777326, "Action", newJString(Action))
  add(query_777326, "CharacterSetName", newJString(CharacterSetName))
  add(query_777326, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777326, "KmsKeyId", newJString(KmsKeyId))
  add(query_777326, "SourceEngine", newJString(SourceEngine))
  add(query_777326, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_777326, "EngineVersion", newJString(EngineVersion))
  add(query_777326, "Port", newJInt(Port))
  add(query_777326, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_777326, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_777326, "Version", newJString(Version))
  add(query_777326, "MasterUsername", newJString(MasterUsername))
  result = call_777325.call(nil, query_777326, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_777283(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_777284, base: "/",
    url: url_GetRestoreDBClusterFromS3_777285,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_777411 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBClusterFromSnapshot_777413(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBClusterFromSnapshot_777412(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777414 = query.getOrDefault("Action")
  valid_777414 = validateParameter(valid_777414, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_777414 != nil:
    section.add "Action", valid_777414
  var valid_777415 = query.getOrDefault("Version")
  valid_777415 = validateParameter(valid_777415, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777415 != nil:
    section.add "Version", valid_777415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777416 = header.getOrDefault("X-Amz-Date")
  valid_777416 = validateParameter(valid_777416, JString, required = false,
                                 default = nil)
  if valid_777416 != nil:
    section.add "X-Amz-Date", valid_777416
  var valid_777417 = header.getOrDefault("X-Amz-Security-Token")
  valid_777417 = validateParameter(valid_777417, JString, required = false,
                                 default = nil)
  if valid_777417 != nil:
    section.add "X-Amz-Security-Token", valid_777417
  var valid_777418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777418 = validateParameter(valid_777418, JString, required = false,
                                 default = nil)
  if valid_777418 != nil:
    section.add "X-Amz-Content-Sha256", valid_777418
  var valid_777419 = header.getOrDefault("X-Amz-Algorithm")
  valid_777419 = validateParameter(valid_777419, JString, required = false,
                                 default = nil)
  if valid_777419 != nil:
    section.add "X-Amz-Algorithm", valid_777419
  var valid_777420 = header.getOrDefault("X-Amz-Signature")
  valid_777420 = validateParameter(valid_777420, JString, required = false,
                                 default = nil)
  if valid_777420 != nil:
    section.add "X-Amz-Signature", valid_777420
  var valid_777421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777421 = validateParameter(valid_777421, JString, required = false,
                                 default = nil)
  if valid_777421 != nil:
    section.add "X-Amz-SignedHeaders", valid_777421
  var valid_777422 = header.getOrDefault("X-Amz-Credential")
  valid_777422 = validateParameter(valid_777422, JString, required = false,
                                 default = nil)
  if valid_777422 != nil:
    section.add "X-Amz-Credential", valid_777422
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  section = newJObject()
  var valid_777423 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_777423 = validateParameter(valid_777423, JString, required = false,
                                 default = nil)
  if valid_777423 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_777423
  var valid_777424 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_777424 = validateParameter(valid_777424, JString, required = false,
                                 default = nil)
  if valid_777424 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_777424
  var valid_777425 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_777425 = validateParameter(valid_777425, JString, required = false,
                                 default = nil)
  if valid_777425 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_777425
  var valid_777426 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777426 = validateParameter(valid_777426, JBool, required = false, default = nil)
  if valid_777426 != nil:
    section.add "CopyTagsToSnapshot", valid_777426
  var valid_777427 = formData.getOrDefault("Port")
  valid_777427 = validateParameter(valid_777427, JInt, required = false, default = nil)
  if valid_777427 != nil:
    section.add "Port", valid_777427
  var valid_777428 = formData.getOrDefault("EngineMode")
  valid_777428 = validateParameter(valid_777428, JString, required = false,
                                 default = nil)
  if valid_777428 != nil:
    section.add "EngineMode", valid_777428
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_777429 = formData.getOrDefault("Engine")
  valid_777429 = validateParameter(valid_777429, JString, required = true,
                                 default = nil)
  if valid_777429 != nil:
    section.add "Engine", valid_777429
  var valid_777430 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777430 = validateParameter(valid_777430, JArray, required = false,
                                 default = nil)
  if valid_777430 != nil:
    section.add "VpcSecurityGroupIds", valid_777430
  var valid_777431 = formData.getOrDefault("OptionGroupName")
  valid_777431 = validateParameter(valid_777431, JString, required = false,
                                 default = nil)
  if valid_777431 != nil:
    section.add "OptionGroupName", valid_777431
  var valid_777432 = formData.getOrDefault("BacktrackWindow")
  valid_777432 = validateParameter(valid_777432, JInt, required = false, default = nil)
  if valid_777432 != nil:
    section.add "BacktrackWindow", valid_777432
  var valid_777433 = formData.getOrDefault("Tags")
  valid_777433 = validateParameter(valid_777433, JArray, required = false,
                                 default = nil)
  if valid_777433 != nil:
    section.add "Tags", valid_777433
  var valid_777434 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_777434 = validateParameter(valid_777434, JString, required = false,
                                 default = nil)
  if valid_777434 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_777434
  var valid_777435 = formData.getOrDefault("DeletionProtection")
  valid_777435 = validateParameter(valid_777435, JBool, required = false, default = nil)
  if valid_777435 != nil:
    section.add "DeletionProtection", valid_777435
  var valid_777436 = formData.getOrDefault("DBSubnetGroupName")
  valid_777436 = validateParameter(valid_777436, JString, required = false,
                                 default = nil)
  if valid_777436 != nil:
    section.add "DBSubnetGroupName", valid_777436
  var valid_777437 = formData.getOrDefault("AvailabilityZones")
  valid_777437 = validateParameter(valid_777437, JArray, required = false,
                                 default = nil)
  if valid_777437 != nil:
    section.add "AvailabilityZones", valid_777437
  var valid_777438 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_777438 = validateParameter(valid_777438, JString, required = false,
                                 default = nil)
  if valid_777438 != nil:
    section.add "DBClusterParameterGroupName", valid_777438
  var valid_777439 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_777439 = validateParameter(valid_777439, JString, required = false,
                                 default = nil)
  if valid_777439 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_777439
  var valid_777440 = formData.getOrDefault("DatabaseName")
  valid_777440 = validateParameter(valid_777440, JString, required = false,
                                 default = nil)
  if valid_777440 != nil:
    section.add "DatabaseName", valid_777440
  var valid_777441 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777441 = validateParameter(valid_777441, JArray, required = false,
                                 default = nil)
  if valid_777441 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777441
  var valid_777442 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777442 = validateParameter(valid_777442, JBool, required = false, default = nil)
  if valid_777442 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777442
  var valid_777443 = formData.getOrDefault("KmsKeyId")
  valid_777443 = validateParameter(valid_777443, JString, required = false,
                                 default = nil)
  if valid_777443 != nil:
    section.add "KmsKeyId", valid_777443
  var valid_777444 = formData.getOrDefault("SnapshotIdentifier")
  valid_777444 = validateParameter(valid_777444, JString, required = true,
                                 default = nil)
  if valid_777444 != nil:
    section.add "SnapshotIdentifier", valid_777444
  var valid_777445 = formData.getOrDefault("DBClusterIdentifier")
  valid_777445 = validateParameter(valid_777445, JString, required = true,
                                 default = nil)
  if valid_777445 != nil:
    section.add "DBClusterIdentifier", valid_777445
  var valid_777446 = formData.getOrDefault("EngineVersion")
  valid_777446 = validateParameter(valid_777446, JString, required = false,
                                 default = nil)
  if valid_777446 != nil:
    section.add "EngineVersion", valid_777446
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777447: Call_PostRestoreDBClusterFromSnapshot_777411;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777447.validator(path, query, header, formData, body)
  let scheme = call_777447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777447.url(scheme.get, call_777447.host, call_777447.base,
                         call_777447.route, valid.getOrDefault("path"))
  result = hook(call_777447, url, valid)

proc call*(call_777448: Call_PostRestoreDBClusterFromSnapshot_777411;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          ScalingConfigurationMinCapacity: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  var query_777449 = newJObject()
  var formData_777450 = newJObject()
  add(formData_777450, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_777450, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_777450, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_777450, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777450, "Port", newJInt(Port))
  add(formData_777450, "EngineMode", newJString(EngineMode))
  add(formData_777450, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_777450.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777450, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777450, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_777450.add "Tags", Tags
  add(formData_777450, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_777450, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777450, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777449, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_777450.add "AvailabilityZones", AvailabilityZones
  add(formData_777450, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_777450, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_777450, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_777450.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777450, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777450, "KmsKeyId", newJString(KmsKeyId))
  add(formData_777450, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_777450, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_777450, "EngineVersion", newJString(EngineVersion))
  add(query_777449, "Version", newJString(Version))
  result = call_777448.call(nil, query_777449, nil, formData_777450, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_777411(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_777412, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_777413,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_777372 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBClusterFromSnapshot_777374(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBClusterFromSnapshot_777373(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_777375 = query.getOrDefault("Engine")
  valid_777375 = validateParameter(valid_777375, JString, required = true,
                                 default = nil)
  if valid_777375 != nil:
    section.add "Engine", valid_777375
  var valid_777376 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_777376 = validateParameter(valid_777376, JString, required = false,
                                 default = nil)
  if valid_777376 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_777376
  var valid_777377 = query.getOrDefault("DBClusterParameterGroupName")
  valid_777377 = validateParameter(valid_777377, JString, required = false,
                                 default = nil)
  if valid_777377 != nil:
    section.add "DBClusterParameterGroupName", valid_777377
  var valid_777378 = query.getOrDefault("AvailabilityZones")
  valid_777378 = validateParameter(valid_777378, JArray, required = false,
                                 default = nil)
  if valid_777378 != nil:
    section.add "AvailabilityZones", valid_777378
  var valid_777379 = query.getOrDefault("DatabaseName")
  valid_777379 = validateParameter(valid_777379, JString, required = false,
                                 default = nil)
  if valid_777379 != nil:
    section.add "DatabaseName", valid_777379
  var valid_777380 = query.getOrDefault("DBClusterIdentifier")
  valid_777380 = validateParameter(valid_777380, JString, required = true,
                                 default = nil)
  if valid_777380 != nil:
    section.add "DBClusterIdentifier", valid_777380
  var valid_777381 = query.getOrDefault("OptionGroupName")
  valid_777381 = validateParameter(valid_777381, JString, required = false,
                                 default = nil)
  if valid_777381 != nil:
    section.add "OptionGroupName", valid_777381
  var valid_777382 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777382 = validateParameter(valid_777382, JBool, required = false, default = nil)
  if valid_777382 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777382
  var valid_777383 = query.getOrDefault("EngineMode")
  valid_777383 = validateParameter(valid_777383, JString, required = false,
                                 default = nil)
  if valid_777383 != nil:
    section.add "EngineMode", valid_777383
  var valid_777384 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777384 = validateParameter(valid_777384, JArray, required = false,
                                 default = nil)
  if valid_777384 != nil:
    section.add "VpcSecurityGroupIds", valid_777384
  var valid_777385 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777385 = validateParameter(valid_777385, JArray, required = false,
                                 default = nil)
  if valid_777385 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777385
  var valid_777386 = query.getOrDefault("Tags")
  valid_777386 = validateParameter(valid_777386, JArray, required = false,
                                 default = nil)
  if valid_777386 != nil:
    section.add "Tags", valid_777386
  var valid_777387 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_777387 = validateParameter(valid_777387, JString, required = false,
                                 default = nil)
  if valid_777387 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_777387
  var valid_777388 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777388 = validateParameter(valid_777388, JBool, required = false, default = nil)
  if valid_777388 != nil:
    section.add "CopyTagsToSnapshot", valid_777388
  var valid_777389 = query.getOrDefault("DeletionProtection")
  valid_777389 = validateParameter(valid_777389, JBool, required = false, default = nil)
  if valid_777389 != nil:
    section.add "DeletionProtection", valid_777389
  var valid_777390 = query.getOrDefault("Action")
  valid_777390 = validateParameter(valid_777390, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_777390 != nil:
    section.add "Action", valid_777390
  var valid_777391 = query.getOrDefault("DBSubnetGroupName")
  valid_777391 = validateParameter(valid_777391, JString, required = false,
                                 default = nil)
  if valid_777391 != nil:
    section.add "DBSubnetGroupName", valid_777391
  var valid_777392 = query.getOrDefault("KmsKeyId")
  valid_777392 = validateParameter(valid_777392, JString, required = false,
                                 default = nil)
  if valid_777392 != nil:
    section.add "KmsKeyId", valid_777392
  var valid_777393 = query.getOrDefault("BacktrackWindow")
  valid_777393 = validateParameter(valid_777393, JInt, required = false, default = nil)
  if valid_777393 != nil:
    section.add "BacktrackWindow", valid_777393
  var valid_777394 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_777394 = validateParameter(valid_777394, JString, required = false,
                                 default = nil)
  if valid_777394 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_777394
  var valid_777395 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_777395 = validateParameter(valid_777395, JString, required = false,
                                 default = nil)
  if valid_777395 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_777395
  var valid_777396 = query.getOrDefault("EngineVersion")
  valid_777396 = validateParameter(valid_777396, JString, required = false,
                                 default = nil)
  if valid_777396 != nil:
    section.add "EngineVersion", valid_777396
  var valid_777397 = query.getOrDefault("Port")
  valid_777397 = validateParameter(valid_777397, JInt, required = false, default = nil)
  if valid_777397 != nil:
    section.add "Port", valid_777397
  var valid_777398 = query.getOrDefault("SnapshotIdentifier")
  valid_777398 = validateParameter(valid_777398, JString, required = true,
                                 default = nil)
  if valid_777398 != nil:
    section.add "SnapshotIdentifier", valid_777398
  var valid_777399 = query.getOrDefault("Version")
  valid_777399 = validateParameter(valid_777399, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777399 != nil:
    section.add "Version", valid_777399
  var valid_777400 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_777400 = validateParameter(valid_777400, JString, required = false,
                                 default = nil)
  if valid_777400 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_777400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777401 = header.getOrDefault("X-Amz-Date")
  valid_777401 = validateParameter(valid_777401, JString, required = false,
                                 default = nil)
  if valid_777401 != nil:
    section.add "X-Amz-Date", valid_777401
  var valid_777402 = header.getOrDefault("X-Amz-Security-Token")
  valid_777402 = validateParameter(valid_777402, JString, required = false,
                                 default = nil)
  if valid_777402 != nil:
    section.add "X-Amz-Security-Token", valid_777402
  var valid_777403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777403 = validateParameter(valid_777403, JString, required = false,
                                 default = nil)
  if valid_777403 != nil:
    section.add "X-Amz-Content-Sha256", valid_777403
  var valid_777404 = header.getOrDefault("X-Amz-Algorithm")
  valid_777404 = validateParameter(valid_777404, JString, required = false,
                                 default = nil)
  if valid_777404 != nil:
    section.add "X-Amz-Algorithm", valid_777404
  var valid_777405 = header.getOrDefault("X-Amz-Signature")
  valid_777405 = validateParameter(valid_777405, JString, required = false,
                                 default = nil)
  if valid_777405 != nil:
    section.add "X-Amz-Signature", valid_777405
  var valid_777406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777406 = validateParameter(valid_777406, JString, required = false,
                                 default = nil)
  if valid_777406 != nil:
    section.add "X-Amz-SignedHeaders", valid_777406
  var valid_777407 = header.getOrDefault("X-Amz-Credential")
  valid_777407 = validateParameter(valid_777407, JString, required = false,
                                 default = nil)
  if valid_777407 != nil:
    section.add "X-Amz-Credential", valid_777407
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777408: Call_GetRestoreDBClusterFromSnapshot_777372;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777408.validator(path, query, header, formData, body)
  let scheme = call_777408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777408.url(scheme.get, call_777408.host, call_777408.base,
                         call_777408.route, valid.getOrDefault("path"))
  result = hook(call_777408, url, valid)

proc call*(call_777409: Call_GetRestoreDBClusterFromSnapshot_777372;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>Valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point is not found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_777410 = newJObject()
  add(query_777410, "Engine", newJString(Engine))
  add(query_777410, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_777410, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_777410.add "AvailabilityZones", AvailabilityZones
  add(query_777410, "DatabaseName", newJString(DatabaseName))
  add(query_777410, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777410, "OptionGroupName", newJString(OptionGroupName))
  add(query_777410, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_777410, "EngineMode", newJString(EngineMode))
  if VpcSecurityGroupIds != nil:
    query_777410.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_777410.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_777410.add "Tags", Tags
  add(query_777410, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_777410, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777410, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777410, "Action", newJString(Action))
  add(query_777410, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777410, "KmsKeyId", newJString(KmsKeyId))
  add(query_777410, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_777410, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_777410, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_777410, "EngineVersion", newJString(EngineVersion))
  add(query_777410, "Port", newJInt(Port))
  add(query_777410, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_777410, "Version", newJString(Version))
  add(query_777410, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_777409.call(nil, query_777410, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_777372(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_777373, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_777374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_777483 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBClusterToPointInTime_777485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBClusterToPointInTime_777484(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777486 = query.getOrDefault("Action")
  valid_777486 = validateParameter(valid_777486, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_777486 != nil:
    section.add "Action", valid_777486
  var valid_777487 = query.getOrDefault("Version")
  valid_777487 = validateParameter(valid_777487, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777487 != nil:
    section.add "Version", valid_777487
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777488 = header.getOrDefault("X-Amz-Date")
  valid_777488 = validateParameter(valid_777488, JString, required = false,
                                 default = nil)
  if valid_777488 != nil:
    section.add "X-Amz-Date", valid_777488
  var valid_777489 = header.getOrDefault("X-Amz-Security-Token")
  valid_777489 = validateParameter(valid_777489, JString, required = false,
                                 default = nil)
  if valid_777489 != nil:
    section.add "X-Amz-Security-Token", valid_777489
  var valid_777490 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777490 = validateParameter(valid_777490, JString, required = false,
                                 default = nil)
  if valid_777490 != nil:
    section.add "X-Amz-Content-Sha256", valid_777490
  var valid_777491 = header.getOrDefault("X-Amz-Algorithm")
  valid_777491 = validateParameter(valid_777491, JString, required = false,
                                 default = nil)
  if valid_777491 != nil:
    section.add "X-Amz-Algorithm", valid_777491
  var valid_777492 = header.getOrDefault("X-Amz-Signature")
  valid_777492 = validateParameter(valid_777492, JString, required = false,
                                 default = nil)
  if valid_777492 != nil:
    section.add "X-Amz-Signature", valid_777492
  var valid_777493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777493 = validateParameter(valid_777493, JString, required = false,
                                 default = nil)
  if valid_777493 != nil:
    section.add "X-Amz-SignedHeaders", valid_777493
  var valid_777494 = header.getOrDefault("X-Amz-Credential")
  valid_777494 = validateParameter(valid_777494, JString, required = false,
                                 default = nil)
  if valid_777494 != nil:
    section.add "X-Amz-Credential", valid_777494
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_777495 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_777495 = validateParameter(valid_777495, JString, required = true,
                                 default = nil)
  if valid_777495 != nil:
    section.add "SourceDBClusterIdentifier", valid_777495
  var valid_777496 = formData.getOrDefault("UseLatestRestorableTime")
  valid_777496 = validateParameter(valid_777496, JBool, required = false, default = nil)
  if valid_777496 != nil:
    section.add "UseLatestRestorableTime", valid_777496
  var valid_777497 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777497 = validateParameter(valid_777497, JBool, required = false, default = nil)
  if valid_777497 != nil:
    section.add "CopyTagsToSnapshot", valid_777497
  var valid_777498 = formData.getOrDefault("Port")
  valid_777498 = validateParameter(valid_777498, JInt, required = false, default = nil)
  if valid_777498 != nil:
    section.add "Port", valid_777498
  var valid_777499 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777499 = validateParameter(valid_777499, JArray, required = false,
                                 default = nil)
  if valid_777499 != nil:
    section.add "VpcSecurityGroupIds", valid_777499
  var valid_777500 = formData.getOrDefault("RestoreToTime")
  valid_777500 = validateParameter(valid_777500, JString, required = false,
                                 default = nil)
  if valid_777500 != nil:
    section.add "RestoreToTime", valid_777500
  var valid_777501 = formData.getOrDefault("OptionGroupName")
  valid_777501 = validateParameter(valid_777501, JString, required = false,
                                 default = nil)
  if valid_777501 != nil:
    section.add "OptionGroupName", valid_777501
  var valid_777502 = formData.getOrDefault("BacktrackWindow")
  valid_777502 = validateParameter(valid_777502, JInt, required = false, default = nil)
  if valid_777502 != nil:
    section.add "BacktrackWindow", valid_777502
  var valid_777503 = formData.getOrDefault("Tags")
  valid_777503 = validateParameter(valid_777503, JArray, required = false,
                                 default = nil)
  if valid_777503 != nil:
    section.add "Tags", valid_777503
  var valid_777504 = formData.getOrDefault("DeletionProtection")
  valid_777504 = validateParameter(valid_777504, JBool, required = false, default = nil)
  if valid_777504 != nil:
    section.add "DeletionProtection", valid_777504
  var valid_777505 = formData.getOrDefault("DBSubnetGroupName")
  valid_777505 = validateParameter(valid_777505, JString, required = false,
                                 default = nil)
  if valid_777505 != nil:
    section.add "DBSubnetGroupName", valid_777505
  var valid_777506 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_777506 = validateParameter(valid_777506, JString, required = false,
                                 default = nil)
  if valid_777506 != nil:
    section.add "DBClusterParameterGroupName", valid_777506
  var valid_777507 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777507 = validateParameter(valid_777507, JArray, required = false,
                                 default = nil)
  if valid_777507 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777507
  var valid_777508 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777508 = validateParameter(valid_777508, JBool, required = false, default = nil)
  if valid_777508 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777508
  var valid_777509 = formData.getOrDefault("KmsKeyId")
  valid_777509 = validateParameter(valid_777509, JString, required = false,
                                 default = nil)
  if valid_777509 != nil:
    section.add "KmsKeyId", valid_777509
  var valid_777510 = formData.getOrDefault("RestoreType")
  valid_777510 = validateParameter(valid_777510, JString, required = false,
                                 default = nil)
  if valid_777510 != nil:
    section.add "RestoreType", valid_777510
  var valid_777511 = formData.getOrDefault("DBClusterIdentifier")
  valid_777511 = validateParameter(valid_777511, JString, required = true,
                                 default = nil)
  if valid_777511 != nil:
    section.add "DBClusterIdentifier", valid_777511
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777512: Call_PostRestoreDBClusterToPointInTime_777483;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777512.validator(path, query, header, formData, body)
  let scheme = call_777512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777512.url(scheme.get, call_777512.host, call_777512.base,
                         call_777512.route, valid.getOrDefault("path"))
  result = hook(call_777512, url, valid)

proc call*(call_777513: Call_PostRestoreDBClusterToPointInTime_777483;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          RestoreToTime: string = ""; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_777514 = newJObject()
  var formData_777515 = newJObject()
  add(formData_777515, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_777515, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_777515, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777515, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_777515.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777515, "RestoreToTime", newJString(RestoreToTime))
  add(formData_777515, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777515, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_777515.add "Tags", Tags
  add(formData_777515, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777515, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777514, "Action", newJString(Action))
  add(formData_777515, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_777515.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777515, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777515, "KmsKeyId", newJString(KmsKeyId))
  add(formData_777515, "RestoreType", newJString(RestoreType))
  add(formData_777515, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777514, "Version", newJString(Version))
  result = call_777513.call(nil, query_777514, nil, formData_777515, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_777483(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_777484, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_777485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_777451 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBClusterToPointInTime_777453(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBClusterToPointInTime_777452(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_777454 = query.getOrDefault("RestoreToTime")
  valid_777454 = validateParameter(valid_777454, JString, required = false,
                                 default = nil)
  if valid_777454 != nil:
    section.add "RestoreToTime", valid_777454
  var valid_777455 = query.getOrDefault("DBClusterParameterGroupName")
  valid_777455 = validateParameter(valid_777455, JString, required = false,
                                 default = nil)
  if valid_777455 != nil:
    section.add "DBClusterParameterGroupName", valid_777455
  var valid_777456 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777456 = validateParameter(valid_777456, JBool, required = false, default = nil)
  if valid_777456 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777456
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_777457 = query.getOrDefault("DBClusterIdentifier")
  valid_777457 = validateParameter(valid_777457, JString, required = true,
                                 default = nil)
  if valid_777457 != nil:
    section.add "DBClusterIdentifier", valid_777457
  var valid_777458 = query.getOrDefault("OptionGroupName")
  valid_777458 = validateParameter(valid_777458, JString, required = false,
                                 default = nil)
  if valid_777458 != nil:
    section.add "OptionGroupName", valid_777458
  var valid_777459 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777459 = validateParameter(valid_777459, JArray, required = false,
                                 default = nil)
  if valid_777459 != nil:
    section.add "VpcSecurityGroupIds", valid_777459
  var valid_777460 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777460 = validateParameter(valid_777460, JArray, required = false,
                                 default = nil)
  if valid_777460 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777460
  var valid_777461 = query.getOrDefault("Tags")
  valid_777461 = validateParameter(valid_777461, JArray, required = false,
                                 default = nil)
  if valid_777461 != nil:
    section.add "Tags", valid_777461
  var valid_777462 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777462 = validateParameter(valid_777462, JBool, required = false, default = nil)
  if valid_777462 != nil:
    section.add "CopyTagsToSnapshot", valid_777462
  var valid_777463 = query.getOrDefault("RestoreType")
  valid_777463 = validateParameter(valid_777463, JString, required = false,
                                 default = nil)
  if valid_777463 != nil:
    section.add "RestoreType", valid_777463
  var valid_777464 = query.getOrDefault("DeletionProtection")
  valid_777464 = validateParameter(valid_777464, JBool, required = false, default = nil)
  if valid_777464 != nil:
    section.add "DeletionProtection", valid_777464
  var valid_777465 = query.getOrDefault("UseLatestRestorableTime")
  valid_777465 = validateParameter(valid_777465, JBool, required = false, default = nil)
  if valid_777465 != nil:
    section.add "UseLatestRestorableTime", valid_777465
  var valid_777466 = query.getOrDefault("Action")
  valid_777466 = validateParameter(valid_777466, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_777466 != nil:
    section.add "Action", valid_777466
  var valid_777467 = query.getOrDefault("DBSubnetGroupName")
  valid_777467 = validateParameter(valid_777467, JString, required = false,
                                 default = nil)
  if valid_777467 != nil:
    section.add "DBSubnetGroupName", valid_777467
  var valid_777468 = query.getOrDefault("KmsKeyId")
  valid_777468 = validateParameter(valid_777468, JString, required = false,
                                 default = nil)
  if valid_777468 != nil:
    section.add "KmsKeyId", valid_777468
  var valid_777469 = query.getOrDefault("BacktrackWindow")
  valid_777469 = validateParameter(valid_777469, JInt, required = false, default = nil)
  if valid_777469 != nil:
    section.add "BacktrackWindow", valid_777469
  var valid_777470 = query.getOrDefault("Port")
  valid_777470 = validateParameter(valid_777470, JInt, required = false, default = nil)
  if valid_777470 != nil:
    section.add "Port", valid_777470
  var valid_777471 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_777471 = validateParameter(valid_777471, JString, required = true,
                                 default = nil)
  if valid_777471 != nil:
    section.add "SourceDBClusterIdentifier", valid_777471
  var valid_777472 = query.getOrDefault("Version")
  valid_777472 = validateParameter(valid_777472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777472 != nil:
    section.add "Version", valid_777472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777473 = header.getOrDefault("X-Amz-Date")
  valid_777473 = validateParameter(valid_777473, JString, required = false,
                                 default = nil)
  if valid_777473 != nil:
    section.add "X-Amz-Date", valid_777473
  var valid_777474 = header.getOrDefault("X-Amz-Security-Token")
  valid_777474 = validateParameter(valid_777474, JString, required = false,
                                 default = nil)
  if valid_777474 != nil:
    section.add "X-Amz-Security-Token", valid_777474
  var valid_777475 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777475 = validateParameter(valid_777475, JString, required = false,
                                 default = nil)
  if valid_777475 != nil:
    section.add "X-Amz-Content-Sha256", valid_777475
  var valid_777476 = header.getOrDefault("X-Amz-Algorithm")
  valid_777476 = validateParameter(valid_777476, JString, required = false,
                                 default = nil)
  if valid_777476 != nil:
    section.add "X-Amz-Algorithm", valid_777476
  var valid_777477 = header.getOrDefault("X-Amz-Signature")
  valid_777477 = validateParameter(valid_777477, JString, required = false,
                                 default = nil)
  if valid_777477 != nil:
    section.add "X-Amz-Signature", valid_777477
  var valid_777478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777478 = validateParameter(valid_777478, JString, required = false,
                                 default = nil)
  if valid_777478 != nil:
    section.add "X-Amz-SignedHeaders", valid_777478
  var valid_777479 = header.getOrDefault("X-Amz-Credential")
  valid_777479 = validateParameter(valid_777479, JString, required = false,
                                 default = nil)
  if valid_777479 != nil:
    section.add "X-Amz-Credential", valid_777479
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777480: Call_GetRestoreDBClusterToPointInTime_777451;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777480.validator(path, query, header, formData, body)
  let scheme = call_777480.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777480.url(scheme.get, call_777480.host, call_777480.base,
                         call_777480.route, valid.getOrDefault("path"))
  result = hook(call_777480, url, valid)

proc call*(call_777481: Call_GetRestoreDBClusterToPointInTime_777451;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          CopyTagsToSnapshot: bool = false; RestoreType: string = "";
          DeletionProtection: bool = false; UseLatestRestorableTime: bool = false;
          Action: string = "RestoreDBClusterToPointInTime";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster is not restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_777482 = newJObject()
  add(query_777482, "RestoreToTime", newJString(RestoreToTime))
  add(query_777482, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_777482, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_777482, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777482, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_777482.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_777482.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_777482.add "Tags", Tags
  add(query_777482, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777482, "RestoreType", newJString(RestoreType))
  add(query_777482, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777482, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_777482, "Action", newJString(Action))
  add(query_777482, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777482, "KmsKeyId", newJString(KmsKeyId))
  add(query_777482, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_777482, "Port", newJInt(Port))
  add(query_777482, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_777482, "Version", newJString(Version))
  result = call_777481.call(nil, query_777482, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_777451(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_777452, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_777453,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_777559 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBInstanceFromDBSnapshot_777561(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_777560(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777562 = query.getOrDefault("Action")
  valid_777562 = validateParameter(valid_777562, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_777562 != nil:
    section.add "Action", valid_777562
  var valid_777563 = query.getOrDefault("Version")
  valid_777563 = validateParameter(valid_777563, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777563 != nil:
    section.add "Version", valid_777563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777564 = header.getOrDefault("X-Amz-Date")
  valid_777564 = validateParameter(valid_777564, JString, required = false,
                                 default = nil)
  if valid_777564 != nil:
    section.add "X-Amz-Date", valid_777564
  var valid_777565 = header.getOrDefault("X-Amz-Security-Token")
  valid_777565 = validateParameter(valid_777565, JString, required = false,
                                 default = nil)
  if valid_777565 != nil:
    section.add "X-Amz-Security-Token", valid_777565
  var valid_777566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777566 = validateParameter(valid_777566, JString, required = false,
                                 default = nil)
  if valid_777566 != nil:
    section.add "X-Amz-Content-Sha256", valid_777566
  var valid_777567 = header.getOrDefault("X-Amz-Algorithm")
  valid_777567 = validateParameter(valid_777567, JString, required = false,
                                 default = nil)
  if valid_777567 != nil:
    section.add "X-Amz-Algorithm", valid_777567
  var valid_777568 = header.getOrDefault("X-Amz-Signature")
  valid_777568 = validateParameter(valid_777568, JString, required = false,
                                 default = nil)
  if valid_777568 != nil:
    section.add "X-Amz-Signature", valid_777568
  var valid_777569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777569 = validateParameter(valid_777569, JString, required = false,
                                 default = nil)
  if valid_777569 != nil:
    section.add "X-Amz-SignedHeaders", valid_777569
  var valid_777570 = header.getOrDefault("X-Amz-Credential")
  valid_777570 = validateParameter(valid_777570, JString, required = false,
                                 default = nil)
  if valid_777570 != nil:
    section.add "X-Amz-Credential", valid_777570
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_777571 = formData.getOrDefault("ProcessorFeatures")
  valid_777571 = validateParameter(valid_777571, JArray, required = false,
                                 default = nil)
  if valid_777571 != nil:
    section.add "ProcessorFeatures", valid_777571
  var valid_777572 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777572 = validateParameter(valid_777572, JBool, required = false, default = nil)
  if valid_777572 != nil:
    section.add "CopyTagsToSnapshot", valid_777572
  var valid_777573 = formData.getOrDefault("Port")
  valid_777573 = validateParameter(valid_777573, JInt, required = false, default = nil)
  if valid_777573 != nil:
    section.add "Port", valid_777573
  var valid_777574 = formData.getOrDefault("Engine")
  valid_777574 = validateParameter(valid_777574, JString, required = false,
                                 default = nil)
  if valid_777574 != nil:
    section.add "Engine", valid_777574
  var valid_777575 = formData.getOrDefault("Iops")
  valid_777575 = validateParameter(valid_777575, JInt, required = false, default = nil)
  if valid_777575 != nil:
    section.add "Iops", valid_777575
  var valid_777576 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777576 = validateParameter(valid_777576, JArray, required = false,
                                 default = nil)
  if valid_777576 != nil:
    section.add "VpcSecurityGroupIds", valid_777576
  var valid_777577 = formData.getOrDefault("DBName")
  valid_777577 = validateParameter(valid_777577, JString, required = false,
                                 default = nil)
  if valid_777577 != nil:
    section.add "DBName", valid_777577
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_777578 = formData.getOrDefault("DBInstanceIdentifier")
  valid_777578 = validateParameter(valid_777578, JString, required = true,
                                 default = nil)
  if valid_777578 != nil:
    section.add "DBInstanceIdentifier", valid_777578
  var valid_777579 = formData.getOrDefault("OptionGroupName")
  valid_777579 = validateParameter(valid_777579, JString, required = false,
                                 default = nil)
  if valid_777579 != nil:
    section.add "OptionGroupName", valid_777579
  var valid_777580 = formData.getOrDefault("DBParameterGroupName")
  valid_777580 = validateParameter(valid_777580, JString, required = false,
                                 default = nil)
  if valid_777580 != nil:
    section.add "DBParameterGroupName", valid_777580
  var valid_777581 = formData.getOrDefault("Tags")
  valid_777581 = validateParameter(valid_777581, JArray, required = false,
                                 default = nil)
  if valid_777581 != nil:
    section.add "Tags", valid_777581
  var valid_777582 = formData.getOrDefault("TdeCredentialArn")
  valid_777582 = validateParameter(valid_777582, JString, required = false,
                                 default = nil)
  if valid_777582 != nil:
    section.add "TdeCredentialArn", valid_777582
  var valid_777583 = formData.getOrDefault("DeletionProtection")
  valid_777583 = validateParameter(valid_777583, JBool, required = false, default = nil)
  if valid_777583 != nil:
    section.add "DeletionProtection", valid_777583
  var valid_777584 = formData.getOrDefault("DBSubnetGroupName")
  valid_777584 = validateParameter(valid_777584, JString, required = false,
                                 default = nil)
  if valid_777584 != nil:
    section.add "DBSubnetGroupName", valid_777584
  var valid_777585 = formData.getOrDefault("TdeCredentialPassword")
  valid_777585 = validateParameter(valid_777585, JString, required = false,
                                 default = nil)
  if valid_777585 != nil:
    section.add "TdeCredentialPassword", valid_777585
  var valid_777586 = formData.getOrDefault("AvailabilityZone")
  valid_777586 = validateParameter(valid_777586, JString, required = false,
                                 default = nil)
  if valid_777586 != nil:
    section.add "AvailabilityZone", valid_777586
  var valid_777587 = formData.getOrDefault("MultiAZ")
  valid_777587 = validateParameter(valid_777587, JBool, required = false, default = nil)
  if valid_777587 != nil:
    section.add "MultiAZ", valid_777587
  var valid_777588 = formData.getOrDefault("DomainIAMRoleName")
  valid_777588 = validateParameter(valid_777588, JString, required = false,
                                 default = nil)
  if valid_777588 != nil:
    section.add "DomainIAMRoleName", valid_777588
  var valid_777589 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_777589 = validateParameter(valid_777589, JString, required = true,
                                 default = nil)
  if valid_777589 != nil:
    section.add "DBSnapshotIdentifier", valid_777589
  var valid_777590 = formData.getOrDefault("PubliclyAccessible")
  valid_777590 = validateParameter(valid_777590, JBool, required = false, default = nil)
  if valid_777590 != nil:
    section.add "PubliclyAccessible", valid_777590
  var valid_777591 = formData.getOrDefault("StorageType")
  valid_777591 = validateParameter(valid_777591, JString, required = false,
                                 default = nil)
  if valid_777591 != nil:
    section.add "StorageType", valid_777591
  var valid_777592 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777592 = validateParameter(valid_777592, JArray, required = false,
                                 default = nil)
  if valid_777592 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777592
  var valid_777593 = formData.getOrDefault("DBInstanceClass")
  valid_777593 = validateParameter(valid_777593, JString, required = false,
                                 default = nil)
  if valid_777593 != nil:
    section.add "DBInstanceClass", valid_777593
  var valid_777594 = formData.getOrDefault("Domain")
  valid_777594 = validateParameter(valid_777594, JString, required = false,
                                 default = nil)
  if valid_777594 != nil:
    section.add "Domain", valid_777594
  var valid_777595 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777595 = validateParameter(valid_777595, JBool, required = false, default = nil)
  if valid_777595 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777595
  var valid_777596 = formData.getOrDefault("LicenseModel")
  valid_777596 = validateParameter(valid_777596, JString, required = false,
                                 default = nil)
  if valid_777596 != nil:
    section.add "LicenseModel", valid_777596
  var valid_777597 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_777597 = validateParameter(valid_777597, JBool, required = false, default = nil)
  if valid_777597 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777597
  var valid_777598 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_777598 = validateParameter(valid_777598, JBool, required = false, default = nil)
  if valid_777598 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777598
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777599: Call_PostRestoreDBInstanceFromDBSnapshot_777559;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_777599.validator(path, query, header, formData, body)
  let scheme = call_777599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777599.url(scheme.get, call_777599.host, call_777599.base,
                         call_777599.route, valid.getOrDefault("path"))
  result = hook(call_777599, url, valid)

proc call*(call_777600: Call_PostRestoreDBInstanceFromDBSnapshot_777559;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          Domain: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          LicenseModel: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_777601 = newJObject()
  var formData_777602 = newJObject()
  if ProcessorFeatures != nil:
    formData_777602.add "ProcessorFeatures", ProcessorFeatures
  add(formData_777602, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777602, "Port", newJInt(Port))
  add(formData_777602, "Engine", newJString(Engine))
  add(formData_777602, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_777602.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777602, "DBName", newJString(DBName))
  add(formData_777602, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_777602, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777602, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_777602.add "Tags", Tags
  add(formData_777602, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_777602, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777602, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_777602, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_777602, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_777602, "MultiAZ", newJBool(MultiAZ))
  add(formData_777602, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_777602, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_777601, "Action", newJString(Action))
  add(formData_777602, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_777602, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_777602.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777602, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_777602, "Domain", newJString(Domain))
  add(formData_777602, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777602, "LicenseModel", newJString(LicenseModel))
  add(formData_777602, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_777601, "Version", newJString(Version))
  add(formData_777602, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_777600.call(nil, query_777601, nil, formData_777602, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_777559(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_777560, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_777561,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_777516 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBInstanceFromDBSnapshot_777518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_777517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  section = newJObject()
  var valid_777519 = query.getOrDefault("Engine")
  valid_777519 = validateParameter(valid_777519, JString, required = false,
                                 default = nil)
  if valid_777519 != nil:
    section.add "Engine", valid_777519
  var valid_777520 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_777520 = validateParameter(valid_777520, JBool, required = false, default = nil)
  if valid_777520 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777520
  var valid_777521 = query.getOrDefault("ProcessorFeatures")
  valid_777521 = validateParameter(valid_777521, JArray, required = false,
                                 default = nil)
  if valid_777521 != nil:
    section.add "ProcessorFeatures", valid_777521
  var valid_777522 = query.getOrDefault("StorageType")
  valid_777522 = validateParameter(valid_777522, JString, required = false,
                                 default = nil)
  if valid_777522 != nil:
    section.add "StorageType", valid_777522
  var valid_777523 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777523 = validateParameter(valid_777523, JBool, required = false, default = nil)
  if valid_777523 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777523
  var valid_777524 = query.getOrDefault("OptionGroupName")
  valid_777524 = validateParameter(valid_777524, JString, required = false,
                                 default = nil)
  if valid_777524 != nil:
    section.add "OptionGroupName", valid_777524
  var valid_777525 = query.getOrDefault("AvailabilityZone")
  valid_777525 = validateParameter(valid_777525, JString, required = false,
                                 default = nil)
  if valid_777525 != nil:
    section.add "AvailabilityZone", valid_777525
  var valid_777526 = query.getOrDefault("Iops")
  valid_777526 = validateParameter(valid_777526, JInt, required = false, default = nil)
  if valid_777526 != nil:
    section.add "Iops", valid_777526
  var valid_777527 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777527 = validateParameter(valid_777527, JArray, required = false,
                                 default = nil)
  if valid_777527 != nil:
    section.add "VpcSecurityGroupIds", valid_777527
  var valid_777528 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777528 = validateParameter(valid_777528, JArray, required = false,
                                 default = nil)
  if valid_777528 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777528
  var valid_777529 = query.getOrDefault("MultiAZ")
  valid_777529 = validateParameter(valid_777529, JBool, required = false, default = nil)
  if valid_777529 != nil:
    section.add "MultiAZ", valid_777529
  var valid_777530 = query.getOrDefault("TdeCredentialPassword")
  valid_777530 = validateParameter(valid_777530, JString, required = false,
                                 default = nil)
  if valid_777530 != nil:
    section.add "TdeCredentialPassword", valid_777530
  var valid_777531 = query.getOrDefault("LicenseModel")
  valid_777531 = validateParameter(valid_777531, JString, required = false,
                                 default = nil)
  if valid_777531 != nil:
    section.add "LicenseModel", valid_777531
  var valid_777532 = query.getOrDefault("Tags")
  valid_777532 = validateParameter(valid_777532, JArray, required = false,
                                 default = nil)
  if valid_777532 != nil:
    section.add "Tags", valid_777532
  var valid_777533 = query.getOrDefault("DBName")
  valid_777533 = validateParameter(valid_777533, JString, required = false,
                                 default = nil)
  if valid_777533 != nil:
    section.add "DBName", valid_777533
  var valid_777534 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777534 = validateParameter(valid_777534, JBool, required = false, default = nil)
  if valid_777534 != nil:
    section.add "CopyTagsToSnapshot", valid_777534
  var valid_777535 = query.getOrDefault("DomainIAMRoleName")
  valid_777535 = validateParameter(valid_777535, JString, required = false,
                                 default = nil)
  if valid_777535 != nil:
    section.add "DomainIAMRoleName", valid_777535
  var valid_777536 = query.getOrDefault("DBInstanceClass")
  valid_777536 = validateParameter(valid_777536, JString, required = false,
                                 default = nil)
  if valid_777536 != nil:
    section.add "DBInstanceClass", valid_777536
  var valid_777537 = query.getOrDefault("DBParameterGroupName")
  valid_777537 = validateParameter(valid_777537, JString, required = false,
                                 default = nil)
  if valid_777537 != nil:
    section.add "DBParameterGroupName", valid_777537
  var valid_777538 = query.getOrDefault("DeletionProtection")
  valid_777538 = validateParameter(valid_777538, JBool, required = false, default = nil)
  if valid_777538 != nil:
    section.add "DeletionProtection", valid_777538
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777539 = query.getOrDefault("Action")
  valid_777539 = validateParameter(valid_777539, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_777539 != nil:
    section.add "Action", valid_777539
  var valid_777540 = query.getOrDefault("DBSubnetGroupName")
  valid_777540 = validateParameter(valid_777540, JString, required = false,
                                 default = nil)
  if valid_777540 != nil:
    section.add "DBSubnetGroupName", valid_777540
  var valid_777541 = query.getOrDefault("Domain")
  valid_777541 = validateParameter(valid_777541, JString, required = false,
                                 default = nil)
  if valid_777541 != nil:
    section.add "Domain", valid_777541
  var valid_777542 = query.getOrDefault("TdeCredentialArn")
  valid_777542 = validateParameter(valid_777542, JString, required = false,
                                 default = nil)
  if valid_777542 != nil:
    section.add "TdeCredentialArn", valid_777542
  var valid_777543 = query.getOrDefault("PubliclyAccessible")
  valid_777543 = validateParameter(valid_777543, JBool, required = false, default = nil)
  if valid_777543 != nil:
    section.add "PubliclyAccessible", valid_777543
  var valid_777544 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_777544 = validateParameter(valid_777544, JBool, required = false, default = nil)
  if valid_777544 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777544
  var valid_777545 = query.getOrDefault("Port")
  valid_777545 = validateParameter(valid_777545, JInt, required = false, default = nil)
  if valid_777545 != nil:
    section.add "Port", valid_777545
  var valid_777546 = query.getOrDefault("Version")
  valid_777546 = validateParameter(valid_777546, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777546 != nil:
    section.add "Version", valid_777546
  var valid_777547 = query.getOrDefault("DBInstanceIdentifier")
  valid_777547 = validateParameter(valid_777547, JString, required = true,
                                 default = nil)
  if valid_777547 != nil:
    section.add "DBInstanceIdentifier", valid_777547
  var valid_777548 = query.getOrDefault("DBSnapshotIdentifier")
  valid_777548 = validateParameter(valid_777548, JString, required = true,
                                 default = nil)
  if valid_777548 != nil:
    section.add "DBSnapshotIdentifier", valid_777548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777549 = header.getOrDefault("X-Amz-Date")
  valid_777549 = validateParameter(valid_777549, JString, required = false,
                                 default = nil)
  if valid_777549 != nil:
    section.add "X-Amz-Date", valid_777549
  var valid_777550 = header.getOrDefault("X-Amz-Security-Token")
  valid_777550 = validateParameter(valid_777550, JString, required = false,
                                 default = nil)
  if valid_777550 != nil:
    section.add "X-Amz-Security-Token", valid_777550
  var valid_777551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777551 = validateParameter(valid_777551, JString, required = false,
                                 default = nil)
  if valid_777551 != nil:
    section.add "X-Amz-Content-Sha256", valid_777551
  var valid_777552 = header.getOrDefault("X-Amz-Algorithm")
  valid_777552 = validateParameter(valid_777552, JString, required = false,
                                 default = nil)
  if valid_777552 != nil:
    section.add "X-Amz-Algorithm", valid_777552
  var valid_777553 = header.getOrDefault("X-Amz-Signature")
  valid_777553 = validateParameter(valid_777553, JString, required = false,
                                 default = nil)
  if valid_777553 != nil:
    section.add "X-Amz-Signature", valid_777553
  var valid_777554 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777554 = validateParameter(valid_777554, JString, required = false,
                                 default = nil)
  if valid_777554 != nil:
    section.add "X-Amz-SignedHeaders", valid_777554
  var valid_777555 = header.getOrDefault("X-Amz-Credential")
  valid_777555 = validateParameter(valid_777555, JString, required = false,
                                 default = nil)
  if valid_777555 != nil:
    section.add "X-Amz-Credential", valid_777555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777556: Call_GetRestoreDBInstanceFromDBSnapshot_777516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_777556.validator(path, query, header, formData, body)
  let scheme = call_777556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777556.url(scheme.get, call_777556.host, call_777556.base,
                         call_777556.route, valid.getOrDefault("path"))
  result = hook(call_777556, url, valid)

proc call*(call_777557: Call_GetRestoreDBInstanceFromDBSnapshot_777516;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Engine: string = ""; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DomainIAMRoleName: string = ""; DBInstanceClass: string = "";
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  var query_777558 = newJObject()
  add(query_777558, "Engine", newJString(Engine))
  add(query_777558, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_777558.add "ProcessorFeatures", ProcessorFeatures
  add(query_777558, "StorageType", newJString(StorageType))
  add(query_777558, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_777558, "OptionGroupName", newJString(OptionGroupName))
  add(query_777558, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_777558, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_777558.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_777558.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_777558, "MultiAZ", newJBool(MultiAZ))
  add(query_777558, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_777558, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_777558.add "Tags", Tags
  add(query_777558, "DBName", newJString(DBName))
  add(query_777558, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777558, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_777558, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_777558, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_777558, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777558, "Action", newJString(Action))
  add(query_777558, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777558, "Domain", newJString(Domain))
  add(query_777558, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_777558, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_777558, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_777558, "Port", newJInt(Port))
  add(query_777558, "Version", newJString(Version))
  add(query_777558, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_777558, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_777557.call(nil, query_777558, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_777516(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_777517, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_777518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_777661 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBInstanceFromS3_777663(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBInstanceFromS3_777662(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777664 = query.getOrDefault("Action")
  valid_777664 = validateParameter(valid_777664, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_777664 != nil:
    section.add "Action", valid_777664
  var valid_777665 = query.getOrDefault("Version")
  valid_777665 = validateParameter(valid_777665, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777665 != nil:
    section.add "Version", valid_777665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777666 = header.getOrDefault("X-Amz-Date")
  valid_777666 = validateParameter(valid_777666, JString, required = false,
                                 default = nil)
  if valid_777666 != nil:
    section.add "X-Amz-Date", valid_777666
  var valid_777667 = header.getOrDefault("X-Amz-Security-Token")
  valid_777667 = validateParameter(valid_777667, JString, required = false,
                                 default = nil)
  if valid_777667 != nil:
    section.add "X-Amz-Security-Token", valid_777667
  var valid_777668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777668 = validateParameter(valid_777668, JString, required = false,
                                 default = nil)
  if valid_777668 != nil:
    section.add "X-Amz-Content-Sha256", valid_777668
  var valid_777669 = header.getOrDefault("X-Amz-Algorithm")
  valid_777669 = validateParameter(valid_777669, JString, required = false,
                                 default = nil)
  if valid_777669 != nil:
    section.add "X-Amz-Algorithm", valid_777669
  var valid_777670 = header.getOrDefault("X-Amz-Signature")
  valid_777670 = validateParameter(valid_777670, JString, required = false,
                                 default = nil)
  if valid_777670 != nil:
    section.add "X-Amz-Signature", valid_777670
  var valid_777671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777671 = validateParameter(valid_777671, JString, required = false,
                                 default = nil)
  if valid_777671 != nil:
    section.add "X-Amz-SignedHeaders", valid_777671
  var valid_777672 = header.getOrDefault("X-Amz-Credential")
  valid_777672 = validateParameter(valid_777672, JString, required = false,
                                 default = nil)
  if valid_777672 != nil:
    section.add "X-Amz-Credential", valid_777672
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  var valid_777673 = formData.getOrDefault("ProcessorFeatures")
  valid_777673 = validateParameter(valid_777673, JArray, required = false,
                                 default = nil)
  if valid_777673 != nil:
    section.add "ProcessorFeatures", valid_777673
  var valid_777674 = formData.getOrDefault("EnablePerformanceInsights")
  valid_777674 = validateParameter(valid_777674, JBool, required = false, default = nil)
  if valid_777674 != nil:
    section.add "EnablePerformanceInsights", valid_777674
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_777675 = formData.getOrDefault("Engine")
  valid_777675 = validateParameter(valid_777675, JString, required = true,
                                 default = nil)
  if valid_777675 != nil:
    section.add "Engine", valid_777675
  var valid_777676 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777676 = validateParameter(valid_777676, JArray, required = false,
                                 default = nil)
  if valid_777676 != nil:
    section.add "VpcSecurityGroupIds", valid_777676
  var valid_777677 = formData.getOrDefault("Iops")
  valid_777677 = validateParameter(valid_777677, JInt, required = false, default = nil)
  if valid_777677 != nil:
    section.add "Iops", valid_777677
  var valid_777678 = formData.getOrDefault("BackupRetentionPeriod")
  valid_777678 = validateParameter(valid_777678, JInt, required = false, default = nil)
  if valid_777678 != nil:
    section.add "BackupRetentionPeriod", valid_777678
  var valid_777679 = formData.getOrDefault("Tags")
  valid_777679 = validateParameter(valid_777679, JArray, required = false,
                                 default = nil)
  if valid_777679 != nil:
    section.add "Tags", valid_777679
  var valid_777680 = formData.getOrDefault("DeletionProtection")
  valid_777680 = validateParameter(valid_777680, JBool, required = false, default = nil)
  if valid_777680 != nil:
    section.add "DeletionProtection", valid_777680
  var valid_777681 = formData.getOrDefault("DBSubnetGroupName")
  valid_777681 = validateParameter(valid_777681, JString, required = false,
                                 default = nil)
  if valid_777681 != nil:
    section.add "DBSubnetGroupName", valid_777681
  var valid_777682 = formData.getOrDefault("MultiAZ")
  valid_777682 = validateParameter(valid_777682, JBool, required = false, default = nil)
  if valid_777682 != nil:
    section.add "MultiAZ", valid_777682
  var valid_777683 = formData.getOrDefault("PubliclyAccessible")
  valid_777683 = validateParameter(valid_777683, JBool, required = false, default = nil)
  if valid_777683 != nil:
    section.add "PubliclyAccessible", valid_777683
  var valid_777684 = formData.getOrDefault("StorageType")
  valid_777684 = validateParameter(valid_777684, JString, required = false,
                                 default = nil)
  if valid_777684 != nil:
    section.add "StorageType", valid_777684
  var valid_777685 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777685 = validateParameter(valid_777685, JArray, required = false,
                                 default = nil)
  if valid_777685 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777685
  var valid_777686 = formData.getOrDefault("LicenseModel")
  valid_777686 = validateParameter(valid_777686, JString, required = false,
                                 default = nil)
  if valid_777686 != nil:
    section.add "LicenseModel", valid_777686
  var valid_777687 = formData.getOrDefault("KmsKeyId")
  valid_777687 = validateParameter(valid_777687, JString, required = false,
                                 default = nil)
  if valid_777687 != nil:
    section.add "KmsKeyId", valid_777687
  var valid_777688 = formData.getOrDefault("StorageEncrypted")
  valid_777688 = validateParameter(valid_777688, JBool, required = false, default = nil)
  if valid_777688 != nil:
    section.add "StorageEncrypted", valid_777688
  var valid_777689 = formData.getOrDefault("MonitoringRoleArn")
  valid_777689 = validateParameter(valid_777689, JString, required = false,
                                 default = nil)
  if valid_777689 != nil:
    section.add "MonitoringRoleArn", valid_777689
  var valid_777690 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_777690 = validateParameter(valid_777690, JInt, required = false, default = nil)
  if valid_777690 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_777690
  var valid_777691 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_777691 = validateParameter(valid_777691, JBool, required = false, default = nil)
  if valid_777691 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777691
  var valid_777692 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_777692 = validateParameter(valid_777692, JString, required = false,
                                 default = nil)
  if valid_777692 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_777692
  var valid_777693 = formData.getOrDefault("S3BucketName")
  valid_777693 = validateParameter(valid_777693, JString, required = true,
                                 default = nil)
  if valid_777693 != nil:
    section.add "S3BucketName", valid_777693
  var valid_777694 = formData.getOrDefault("DBSecurityGroups")
  valid_777694 = validateParameter(valid_777694, JArray, required = false,
                                 default = nil)
  if valid_777694 != nil:
    section.add "DBSecurityGroups", valid_777694
  var valid_777695 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777695 = validateParameter(valid_777695, JBool, required = false, default = nil)
  if valid_777695 != nil:
    section.add "CopyTagsToSnapshot", valid_777695
  var valid_777696 = formData.getOrDefault("Port")
  valid_777696 = validateParameter(valid_777696, JInt, required = false, default = nil)
  if valid_777696 != nil:
    section.add "Port", valid_777696
  var valid_777697 = formData.getOrDefault("SourceEngine")
  valid_777697 = validateParameter(valid_777697, JString, required = true,
                                 default = nil)
  if valid_777697 != nil:
    section.add "SourceEngine", valid_777697
  var valid_777698 = formData.getOrDefault("DBName")
  valid_777698 = validateParameter(valid_777698, JString, required = false,
                                 default = nil)
  if valid_777698 != nil:
    section.add "DBName", valid_777698
  var valid_777699 = formData.getOrDefault("DBInstanceIdentifier")
  valid_777699 = validateParameter(valid_777699, JString, required = true,
                                 default = nil)
  if valid_777699 != nil:
    section.add "DBInstanceIdentifier", valid_777699
  var valid_777700 = formData.getOrDefault("OptionGroupName")
  valid_777700 = validateParameter(valid_777700, JString, required = false,
                                 default = nil)
  if valid_777700 != nil:
    section.add "OptionGroupName", valid_777700
  var valid_777701 = formData.getOrDefault("DBParameterGroupName")
  valid_777701 = validateParameter(valid_777701, JString, required = false,
                                 default = nil)
  if valid_777701 != nil:
    section.add "DBParameterGroupName", valid_777701
  var valid_777702 = formData.getOrDefault("MasterUserPassword")
  valid_777702 = validateParameter(valid_777702, JString, required = false,
                                 default = nil)
  if valid_777702 != nil:
    section.add "MasterUserPassword", valid_777702
  var valid_777703 = formData.getOrDefault("SourceEngineVersion")
  valid_777703 = validateParameter(valid_777703, JString, required = true,
                                 default = nil)
  if valid_777703 != nil:
    section.add "SourceEngineVersion", valid_777703
  var valid_777704 = formData.getOrDefault("S3Prefix")
  valid_777704 = validateParameter(valid_777704, JString, required = false,
                                 default = nil)
  if valid_777704 != nil:
    section.add "S3Prefix", valid_777704
  var valid_777705 = formData.getOrDefault("AvailabilityZone")
  valid_777705 = validateParameter(valid_777705, JString, required = false,
                                 default = nil)
  if valid_777705 != nil:
    section.add "AvailabilityZone", valid_777705
  var valid_777706 = formData.getOrDefault("MonitoringInterval")
  valid_777706 = validateParameter(valid_777706, JInt, required = false, default = nil)
  if valid_777706 != nil:
    section.add "MonitoringInterval", valid_777706
  var valid_777707 = formData.getOrDefault("S3IngestionRoleArn")
  valid_777707 = validateParameter(valid_777707, JString, required = true,
                                 default = nil)
  if valid_777707 != nil:
    section.add "S3IngestionRoleArn", valid_777707
  var valid_777708 = formData.getOrDefault("AllocatedStorage")
  valid_777708 = validateParameter(valid_777708, JInt, required = false, default = nil)
  if valid_777708 != nil:
    section.add "AllocatedStorage", valid_777708
  var valid_777709 = formData.getOrDefault("MasterUsername")
  valid_777709 = validateParameter(valid_777709, JString, required = false,
                                 default = nil)
  if valid_777709 != nil:
    section.add "MasterUsername", valid_777709
  var valid_777710 = formData.getOrDefault("DBInstanceClass")
  valid_777710 = validateParameter(valid_777710, JString, required = true,
                                 default = nil)
  if valid_777710 != nil:
    section.add "DBInstanceClass", valid_777710
  var valid_777711 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777711 = validateParameter(valid_777711, JBool, required = false, default = nil)
  if valid_777711 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777711
  var valid_777712 = formData.getOrDefault("PreferredBackupWindow")
  valid_777712 = validateParameter(valid_777712, JString, required = false,
                                 default = nil)
  if valid_777712 != nil:
    section.add "PreferredBackupWindow", valid_777712
  var valid_777713 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_777713 = validateParameter(valid_777713, JBool, required = false, default = nil)
  if valid_777713 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777713
  var valid_777714 = formData.getOrDefault("EngineVersion")
  valid_777714 = validateParameter(valid_777714, JString, required = false,
                                 default = nil)
  if valid_777714 != nil:
    section.add "EngineVersion", valid_777714
  var valid_777715 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_777715 = validateParameter(valid_777715, JString, required = false,
                                 default = nil)
  if valid_777715 != nil:
    section.add "PreferredMaintenanceWindow", valid_777715
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777716: Call_PostRestoreDBInstanceFromS3_777661; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_777716.validator(path, query, header, formData, body)
  let scheme = call_777716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777716.url(scheme.get, call_777716.host, call_777716.base,
                         call_777716.route, valid.getOrDefault("path"))
  result = hook(call_777716, url, valid)

proc call*(call_777717: Call_PostRestoreDBInstanceFromS3_777661; Engine: string;
          S3BucketName: string; SourceEngine: string; DBInstanceIdentifier: string;
          SourceEngineVersion: string; S3IngestionRoleArn: string;
          DBInstanceClass: string; ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          LicenseModel: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          S3Prefix: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; Action: string = "RestoreDBInstanceFromS3";
          AllocatedStorage: int = 0; MasterUsername: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_777718 = newJObject()
  var formData_777719 = newJObject()
  if ProcessorFeatures != nil:
    formData_777719.add "ProcessorFeatures", ProcessorFeatures
  add(formData_777719, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_777719, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_777719.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777719, "Iops", newJInt(Iops))
  add(formData_777719, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_777719.add "Tags", Tags
  add(formData_777719, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777719, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_777719, "MultiAZ", newJBool(MultiAZ))
  add(formData_777719, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_777719, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_777719.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777719, "LicenseModel", newJString(LicenseModel))
  add(formData_777719, "KmsKeyId", newJString(KmsKeyId))
  add(formData_777719, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_777719, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_777719, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_777719, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_777719, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_777719, "S3BucketName", newJString(S3BucketName))
  if DBSecurityGroups != nil:
    formData_777719.add "DBSecurityGroups", DBSecurityGroups
  add(formData_777719, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777719, "Port", newJInt(Port))
  add(formData_777719, "SourceEngine", newJString(SourceEngine))
  add(formData_777719, "DBName", newJString(DBName))
  add(formData_777719, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_777719, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777719, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_777719, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_777719, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_777719, "S3Prefix", newJString(S3Prefix))
  add(formData_777719, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_777719, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_777719, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_777718, "Action", newJString(Action))
  add(formData_777719, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_777719, "MasterUsername", newJString(MasterUsername))
  add(formData_777719, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_777719, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777719, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_777719, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_777719, "EngineVersion", newJString(EngineVersion))
  add(query_777718, "Version", newJString(Version))
  add(formData_777719, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_777717.call(nil, query_777718, nil, formData_777719, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_777661(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_777662, base: "/",
    url: url_PostRestoreDBInstanceFromS3_777663,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_777603 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBInstanceFromS3_777605(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBInstanceFromS3_777604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_777606 = query.getOrDefault("MonitoringInterval")
  valid_777606 = validateParameter(valid_777606, JInt, required = false, default = nil)
  if valid_777606 != nil:
    section.add "MonitoringInterval", valid_777606
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_777607 = query.getOrDefault("Engine")
  valid_777607 = validateParameter(valid_777607, JString, required = true,
                                 default = nil)
  if valid_777607 != nil:
    section.add "Engine", valid_777607
  var valid_777608 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_777608 = validateParameter(valid_777608, JBool, required = false, default = nil)
  if valid_777608 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777608
  var valid_777609 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_777609 = validateParameter(valid_777609, JInt, required = false, default = nil)
  if valid_777609 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_777609
  var valid_777610 = query.getOrDefault("StorageEncrypted")
  valid_777610 = validateParameter(valid_777610, JBool, required = false, default = nil)
  if valid_777610 != nil:
    section.add "StorageEncrypted", valid_777610
  var valid_777611 = query.getOrDefault("AllocatedStorage")
  valid_777611 = validateParameter(valid_777611, JInt, required = false, default = nil)
  if valid_777611 != nil:
    section.add "AllocatedStorage", valid_777611
  var valid_777612 = query.getOrDefault("StorageType")
  valid_777612 = validateParameter(valid_777612, JString, required = false,
                                 default = nil)
  if valid_777612 != nil:
    section.add "StorageType", valid_777612
  var valid_777613 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777613 = validateParameter(valid_777613, JBool, required = false, default = nil)
  if valid_777613 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777613
  var valid_777614 = query.getOrDefault("S3Prefix")
  valid_777614 = validateParameter(valid_777614, JString, required = false,
                                 default = nil)
  if valid_777614 != nil:
    section.add "S3Prefix", valid_777614
  var valid_777615 = query.getOrDefault("DBSecurityGroups")
  valid_777615 = validateParameter(valid_777615, JArray, required = false,
                                 default = nil)
  if valid_777615 != nil:
    section.add "DBSecurityGroups", valid_777615
  var valid_777616 = query.getOrDefault("MasterUserPassword")
  valid_777616 = validateParameter(valid_777616, JString, required = false,
                                 default = nil)
  if valid_777616 != nil:
    section.add "MasterUserPassword", valid_777616
  var valid_777617 = query.getOrDefault("MonitoringRoleArn")
  valid_777617 = validateParameter(valid_777617, JString, required = false,
                                 default = nil)
  if valid_777617 != nil:
    section.add "MonitoringRoleArn", valid_777617
  var valid_777618 = query.getOrDefault("MultiAZ")
  valid_777618 = validateParameter(valid_777618, JBool, required = false, default = nil)
  if valid_777618 != nil:
    section.add "MultiAZ", valid_777618
  var valid_777619 = query.getOrDefault("BackupRetentionPeriod")
  valid_777619 = validateParameter(valid_777619, JInt, required = false, default = nil)
  if valid_777619 != nil:
    section.add "BackupRetentionPeriod", valid_777619
  var valid_777620 = query.getOrDefault("DBName")
  valid_777620 = validateParameter(valid_777620, JString, required = false,
                                 default = nil)
  if valid_777620 != nil:
    section.add "DBName", valid_777620
  var valid_777621 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777621 = validateParameter(valid_777621, JBool, required = false, default = nil)
  if valid_777621 != nil:
    section.add "CopyTagsToSnapshot", valid_777621
  var valid_777622 = query.getOrDefault("DeletionProtection")
  valid_777622 = validateParameter(valid_777622, JBool, required = false, default = nil)
  if valid_777622 != nil:
    section.add "DeletionProtection", valid_777622
  var valid_777623 = query.getOrDefault("DBSubnetGroupName")
  valid_777623 = validateParameter(valid_777623, JString, required = false,
                                 default = nil)
  if valid_777623 != nil:
    section.add "DBSubnetGroupName", valid_777623
  var valid_777624 = query.getOrDefault("KmsKeyId")
  valid_777624 = validateParameter(valid_777624, JString, required = false,
                                 default = nil)
  if valid_777624 != nil:
    section.add "KmsKeyId", valid_777624
  var valid_777625 = query.getOrDefault("SourceEngine")
  valid_777625 = validateParameter(valid_777625, JString, required = true,
                                 default = nil)
  if valid_777625 != nil:
    section.add "SourceEngine", valid_777625
  var valid_777626 = query.getOrDefault("EngineVersion")
  valid_777626 = validateParameter(valid_777626, JString, required = false,
                                 default = nil)
  if valid_777626 != nil:
    section.add "EngineVersion", valid_777626
  var valid_777627 = query.getOrDefault("SourceEngineVersion")
  valid_777627 = validateParameter(valid_777627, JString, required = true,
                                 default = nil)
  if valid_777627 != nil:
    section.add "SourceEngineVersion", valid_777627
  var valid_777628 = query.getOrDefault("PreferredBackupWindow")
  valid_777628 = validateParameter(valid_777628, JString, required = false,
                                 default = nil)
  if valid_777628 != nil:
    section.add "PreferredBackupWindow", valid_777628
  var valid_777629 = query.getOrDefault("DBInstanceIdentifier")
  valid_777629 = validateParameter(valid_777629, JString, required = true,
                                 default = nil)
  if valid_777629 != nil:
    section.add "DBInstanceIdentifier", valid_777629
  var valid_777630 = query.getOrDefault("MasterUsername")
  valid_777630 = validateParameter(valid_777630, JString, required = false,
                                 default = nil)
  if valid_777630 != nil:
    section.add "MasterUsername", valid_777630
  var valid_777631 = query.getOrDefault("S3BucketName")
  valid_777631 = validateParameter(valid_777631, JString, required = true,
                                 default = nil)
  if valid_777631 != nil:
    section.add "S3BucketName", valid_777631
  var valid_777632 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_777632 = validateParameter(valid_777632, JString, required = false,
                                 default = nil)
  if valid_777632 != nil:
    section.add "PreferredMaintenanceWindow", valid_777632
  var valid_777633 = query.getOrDefault("ProcessorFeatures")
  valid_777633 = validateParameter(valid_777633, JArray, required = false,
                                 default = nil)
  if valid_777633 != nil:
    section.add "ProcessorFeatures", valid_777633
  var valid_777634 = query.getOrDefault("OptionGroupName")
  valid_777634 = validateParameter(valid_777634, JString, required = false,
                                 default = nil)
  if valid_777634 != nil:
    section.add "OptionGroupName", valid_777634
  var valid_777635 = query.getOrDefault("AvailabilityZone")
  valid_777635 = validateParameter(valid_777635, JString, required = false,
                                 default = nil)
  if valid_777635 != nil:
    section.add "AvailabilityZone", valid_777635
  var valid_777636 = query.getOrDefault("Iops")
  valid_777636 = validateParameter(valid_777636, JInt, required = false, default = nil)
  if valid_777636 != nil:
    section.add "Iops", valid_777636
  var valid_777637 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777637 = validateParameter(valid_777637, JArray, required = false,
                                 default = nil)
  if valid_777637 != nil:
    section.add "VpcSecurityGroupIds", valid_777637
  var valid_777638 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777638 = validateParameter(valid_777638, JArray, required = false,
                                 default = nil)
  if valid_777638 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777638
  var valid_777639 = query.getOrDefault("LicenseModel")
  valid_777639 = validateParameter(valid_777639, JString, required = false,
                                 default = nil)
  if valid_777639 != nil:
    section.add "LicenseModel", valid_777639
  var valid_777640 = query.getOrDefault("Tags")
  valid_777640 = validateParameter(valid_777640, JArray, required = false,
                                 default = nil)
  if valid_777640 != nil:
    section.add "Tags", valid_777640
  var valid_777641 = query.getOrDefault("S3IngestionRoleArn")
  valid_777641 = validateParameter(valid_777641, JString, required = true,
                                 default = nil)
  if valid_777641 != nil:
    section.add "S3IngestionRoleArn", valid_777641
  var valid_777642 = query.getOrDefault("DBParameterGroupName")
  valid_777642 = validateParameter(valid_777642, JString, required = false,
                                 default = nil)
  if valid_777642 != nil:
    section.add "DBParameterGroupName", valid_777642
  var valid_777643 = query.getOrDefault("DBInstanceClass")
  valid_777643 = validateParameter(valid_777643, JString, required = true,
                                 default = nil)
  if valid_777643 != nil:
    section.add "DBInstanceClass", valid_777643
  var valid_777644 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_777644 = validateParameter(valid_777644, JString, required = false,
                                 default = nil)
  if valid_777644 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_777644
  var valid_777645 = query.getOrDefault("Action")
  valid_777645 = validateParameter(valid_777645, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_777645 != nil:
    section.add "Action", valid_777645
  var valid_777646 = query.getOrDefault("PubliclyAccessible")
  valid_777646 = validateParameter(valid_777646, JBool, required = false, default = nil)
  if valid_777646 != nil:
    section.add "PubliclyAccessible", valid_777646
  var valid_777647 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_777647 = validateParameter(valid_777647, JBool, required = false, default = nil)
  if valid_777647 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777647
  var valid_777648 = query.getOrDefault("Port")
  valid_777648 = validateParameter(valid_777648, JInt, required = false, default = nil)
  if valid_777648 != nil:
    section.add "Port", valid_777648
  var valid_777649 = query.getOrDefault("EnablePerformanceInsights")
  valid_777649 = validateParameter(valid_777649, JBool, required = false, default = nil)
  if valid_777649 != nil:
    section.add "EnablePerformanceInsights", valid_777649
  var valid_777650 = query.getOrDefault("Version")
  valid_777650 = validateParameter(valid_777650, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777650 != nil:
    section.add "Version", valid_777650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777651 = header.getOrDefault("X-Amz-Date")
  valid_777651 = validateParameter(valid_777651, JString, required = false,
                                 default = nil)
  if valid_777651 != nil:
    section.add "X-Amz-Date", valid_777651
  var valid_777652 = header.getOrDefault("X-Amz-Security-Token")
  valid_777652 = validateParameter(valid_777652, JString, required = false,
                                 default = nil)
  if valid_777652 != nil:
    section.add "X-Amz-Security-Token", valid_777652
  var valid_777653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777653 = validateParameter(valid_777653, JString, required = false,
                                 default = nil)
  if valid_777653 != nil:
    section.add "X-Amz-Content-Sha256", valid_777653
  var valid_777654 = header.getOrDefault("X-Amz-Algorithm")
  valid_777654 = validateParameter(valid_777654, JString, required = false,
                                 default = nil)
  if valid_777654 != nil:
    section.add "X-Amz-Algorithm", valid_777654
  var valid_777655 = header.getOrDefault("X-Amz-Signature")
  valid_777655 = validateParameter(valid_777655, JString, required = false,
                                 default = nil)
  if valid_777655 != nil:
    section.add "X-Amz-Signature", valid_777655
  var valid_777656 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777656 = validateParameter(valid_777656, JString, required = false,
                                 default = nil)
  if valid_777656 != nil:
    section.add "X-Amz-SignedHeaders", valid_777656
  var valid_777657 = header.getOrDefault("X-Amz-Credential")
  valid_777657 = validateParameter(valid_777657, JString, required = false,
                                 default = nil)
  if valid_777657 != nil:
    section.add "X-Amz-Credential", valid_777657
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777658: Call_GetRestoreDBInstanceFromS3_777603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_777658.validator(path, query, header, formData, body)
  let scheme = call_777658.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777658.url(scheme.get, call_777658.host, call_777658.base,
                         call_777658.route, valid.getOrDefault("path"))
  result = hook(call_777658, url, valid)

proc call*(call_777659: Call_GetRestoreDBInstanceFromS3_777603; Engine: string;
          SourceEngine: string; SourceEngineVersion: string;
          DBInstanceIdentifier: string; S3BucketName: string;
          S3IngestionRoleArn: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          S3Prefix: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; BackupRetentionPeriod: int = 0; DBName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_777660 = newJObject()
  add(query_777660, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_777660, "Engine", newJString(Engine))
  add(query_777660, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_777660, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_777660, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_777660, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_777660, "StorageType", newJString(StorageType))
  add(query_777660, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_777660, "S3Prefix", newJString(S3Prefix))
  if DBSecurityGroups != nil:
    query_777660.add "DBSecurityGroups", DBSecurityGroups
  add(query_777660, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_777660, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_777660, "MultiAZ", newJBool(MultiAZ))
  add(query_777660, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_777660, "DBName", newJString(DBName))
  add(query_777660, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777660, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777660, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777660, "KmsKeyId", newJString(KmsKeyId))
  add(query_777660, "SourceEngine", newJString(SourceEngine))
  add(query_777660, "EngineVersion", newJString(EngineVersion))
  add(query_777660, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_777660, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_777660, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_777660, "MasterUsername", newJString(MasterUsername))
  add(query_777660, "S3BucketName", newJString(S3BucketName))
  add(query_777660, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_777660.add "ProcessorFeatures", ProcessorFeatures
  add(query_777660, "OptionGroupName", newJString(OptionGroupName))
  add(query_777660, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_777660, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_777660.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_777660.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_777660, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_777660.add "Tags", Tags
  add(query_777660, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_777660, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_777660, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_777660, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_777660, "Action", newJString(Action))
  add(query_777660, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_777660, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_777660, "Port", newJInt(Port))
  add(query_777660, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_777660, "Version", newJString(Version))
  result = call_777659.call(nil, query_777660, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_777603(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_777604, base: "/",
    url: url_GetRestoreDBInstanceFromS3_777605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_777766 = ref object of OpenApiRestCall_772581
proc url_PostRestoreDBInstanceToPointInTime_777768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRestoreDBInstanceToPointInTime_777767(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777769 = query.getOrDefault("Action")
  valid_777769 = validateParameter(valid_777769, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_777769 != nil:
    section.add "Action", valid_777769
  var valid_777770 = query.getOrDefault("Version")
  valid_777770 = validateParameter(valid_777770, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777770 != nil:
    section.add "Version", valid_777770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777771 = header.getOrDefault("X-Amz-Date")
  valid_777771 = validateParameter(valid_777771, JString, required = false,
                                 default = nil)
  if valid_777771 != nil:
    section.add "X-Amz-Date", valid_777771
  var valid_777772 = header.getOrDefault("X-Amz-Security-Token")
  valid_777772 = validateParameter(valid_777772, JString, required = false,
                                 default = nil)
  if valid_777772 != nil:
    section.add "X-Amz-Security-Token", valid_777772
  var valid_777773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777773 = validateParameter(valid_777773, JString, required = false,
                                 default = nil)
  if valid_777773 != nil:
    section.add "X-Amz-Content-Sha256", valid_777773
  var valid_777774 = header.getOrDefault("X-Amz-Algorithm")
  valid_777774 = validateParameter(valid_777774, JString, required = false,
                                 default = nil)
  if valid_777774 != nil:
    section.add "X-Amz-Algorithm", valid_777774
  var valid_777775 = header.getOrDefault("X-Amz-Signature")
  valid_777775 = validateParameter(valid_777775, JString, required = false,
                                 default = nil)
  if valid_777775 != nil:
    section.add "X-Amz-Signature", valid_777775
  var valid_777776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777776 = validateParameter(valid_777776, JString, required = false,
                                 default = nil)
  if valid_777776 != nil:
    section.add "X-Amz-SignedHeaders", valid_777776
  var valid_777777 = header.getOrDefault("X-Amz-Credential")
  valid_777777 = validateParameter(valid_777777, JString, required = false,
                                 default = nil)
  if valid_777777 != nil:
    section.add "X-Amz-Credential", valid_777777
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_777778 = formData.getOrDefault("ProcessorFeatures")
  valid_777778 = validateParameter(valid_777778, JArray, required = false,
                                 default = nil)
  if valid_777778 != nil:
    section.add "ProcessorFeatures", valid_777778
  var valid_777779 = formData.getOrDefault("UseLatestRestorableTime")
  valid_777779 = validateParameter(valid_777779, JBool, required = false, default = nil)
  if valid_777779 != nil:
    section.add "UseLatestRestorableTime", valid_777779
  var valid_777780 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_777780 = validateParameter(valid_777780, JBool, required = false, default = nil)
  if valid_777780 != nil:
    section.add "CopyTagsToSnapshot", valid_777780
  var valid_777781 = formData.getOrDefault("Port")
  valid_777781 = validateParameter(valid_777781, JInt, required = false, default = nil)
  if valid_777781 != nil:
    section.add "Port", valid_777781
  var valid_777782 = formData.getOrDefault("Engine")
  valid_777782 = validateParameter(valid_777782, JString, required = false,
                                 default = nil)
  if valid_777782 != nil:
    section.add "Engine", valid_777782
  var valid_777783 = formData.getOrDefault("Iops")
  valid_777783 = validateParameter(valid_777783, JInt, required = false, default = nil)
  if valid_777783 != nil:
    section.add "Iops", valid_777783
  var valid_777784 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_777784 = validateParameter(valid_777784, JArray, required = false,
                                 default = nil)
  if valid_777784 != nil:
    section.add "VpcSecurityGroupIds", valid_777784
  var valid_777785 = formData.getOrDefault("DBName")
  valid_777785 = validateParameter(valid_777785, JString, required = false,
                                 default = nil)
  if valid_777785 != nil:
    section.add "DBName", valid_777785
  var valid_777786 = formData.getOrDefault("OptionGroupName")
  valid_777786 = validateParameter(valid_777786, JString, required = false,
                                 default = nil)
  if valid_777786 != nil:
    section.add "OptionGroupName", valid_777786
  var valid_777787 = formData.getOrDefault("DBParameterGroupName")
  valid_777787 = validateParameter(valid_777787, JString, required = false,
                                 default = nil)
  if valid_777787 != nil:
    section.add "DBParameterGroupName", valid_777787
  var valid_777788 = formData.getOrDefault("Tags")
  valid_777788 = validateParameter(valid_777788, JArray, required = false,
                                 default = nil)
  if valid_777788 != nil:
    section.add "Tags", valid_777788
  var valid_777789 = formData.getOrDefault("TdeCredentialArn")
  valid_777789 = validateParameter(valid_777789, JString, required = false,
                                 default = nil)
  if valid_777789 != nil:
    section.add "TdeCredentialArn", valid_777789
  var valid_777790 = formData.getOrDefault("DeletionProtection")
  valid_777790 = validateParameter(valid_777790, JBool, required = false, default = nil)
  if valid_777790 != nil:
    section.add "DeletionProtection", valid_777790
  var valid_777791 = formData.getOrDefault("DBSubnetGroupName")
  valid_777791 = validateParameter(valid_777791, JString, required = false,
                                 default = nil)
  if valid_777791 != nil:
    section.add "DBSubnetGroupName", valid_777791
  var valid_777792 = formData.getOrDefault("TdeCredentialPassword")
  valid_777792 = validateParameter(valid_777792, JString, required = false,
                                 default = nil)
  if valid_777792 != nil:
    section.add "TdeCredentialPassword", valid_777792
  var valid_777793 = formData.getOrDefault("AvailabilityZone")
  valid_777793 = validateParameter(valid_777793, JString, required = false,
                                 default = nil)
  if valid_777793 != nil:
    section.add "AvailabilityZone", valid_777793
  var valid_777794 = formData.getOrDefault("MultiAZ")
  valid_777794 = validateParameter(valid_777794, JBool, required = false, default = nil)
  if valid_777794 != nil:
    section.add "MultiAZ", valid_777794
  var valid_777795 = formData.getOrDefault("DomainIAMRoleName")
  valid_777795 = validateParameter(valid_777795, JString, required = false,
                                 default = nil)
  if valid_777795 != nil:
    section.add "DomainIAMRoleName", valid_777795
  var valid_777796 = formData.getOrDefault("RestoreTime")
  valid_777796 = validateParameter(valid_777796, JString, required = false,
                                 default = nil)
  if valid_777796 != nil:
    section.add "RestoreTime", valid_777796
  var valid_777797 = formData.getOrDefault("PubliclyAccessible")
  valid_777797 = validateParameter(valid_777797, JBool, required = false, default = nil)
  if valid_777797 != nil:
    section.add "PubliclyAccessible", valid_777797
  var valid_777798 = formData.getOrDefault("StorageType")
  valid_777798 = validateParameter(valid_777798, JString, required = false,
                                 default = nil)
  if valid_777798 != nil:
    section.add "StorageType", valid_777798
  var valid_777799 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_777799 = validateParameter(valid_777799, JArray, required = false,
                                 default = nil)
  if valid_777799 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777799
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_777800 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_777800 = validateParameter(valid_777800, JString, required = true,
                                 default = nil)
  if valid_777800 != nil:
    section.add "TargetDBInstanceIdentifier", valid_777800
  var valid_777801 = formData.getOrDefault("DBInstanceClass")
  valid_777801 = validateParameter(valid_777801, JString, required = false,
                                 default = nil)
  if valid_777801 != nil:
    section.add "DBInstanceClass", valid_777801
  var valid_777802 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_777802 = validateParameter(valid_777802, JString, required = false,
                                 default = nil)
  if valid_777802 != nil:
    section.add "SourceDBInstanceIdentifier", valid_777802
  var valid_777803 = formData.getOrDefault("Domain")
  valid_777803 = validateParameter(valid_777803, JString, required = false,
                                 default = nil)
  if valid_777803 != nil:
    section.add "Domain", valid_777803
  var valid_777804 = formData.getOrDefault("LicenseModel")
  valid_777804 = validateParameter(valid_777804, JString, required = false,
                                 default = nil)
  if valid_777804 != nil:
    section.add "LicenseModel", valid_777804
  var valid_777805 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777805 = validateParameter(valid_777805, JBool, required = false, default = nil)
  if valid_777805 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777805
  var valid_777806 = formData.getOrDefault("SourceDbiResourceId")
  valid_777806 = validateParameter(valid_777806, JString, required = false,
                                 default = nil)
  if valid_777806 != nil:
    section.add "SourceDbiResourceId", valid_777806
  var valid_777807 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_777807 = validateParameter(valid_777807, JBool, required = false, default = nil)
  if valid_777807 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777807
  var valid_777808 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_777808 = validateParameter(valid_777808, JBool, required = false, default = nil)
  if valid_777808 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777808
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777809: Call_PostRestoreDBInstanceToPointInTime_777766;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_777809.validator(path, query, header, formData, body)
  let scheme = call_777809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777809.url(scheme.get, call_777809.host, call_777809.base,
                         call_777809.route, valid.getOrDefault("path"))
  result = hook(call_777809, url, valid)

proc call*(call_777810: Call_PostRestoreDBInstanceToPointInTime_777766;
          TargetDBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceToPointInTime";
          RestoreTime: string = ""; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          DBInstanceClass: string = ""; SourceDBInstanceIdentifier: string = "";
          Domain: string = ""; LicenseModel: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          SourceDbiResourceId: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_777811 = newJObject()
  var formData_777812 = newJObject()
  if ProcessorFeatures != nil:
    formData_777812.add "ProcessorFeatures", ProcessorFeatures
  add(formData_777812, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_777812, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_777812, "Port", newJInt(Port))
  add(formData_777812, "Engine", newJString(Engine))
  add(formData_777812, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_777812.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_777812, "DBName", newJString(DBName))
  add(formData_777812, "OptionGroupName", newJString(OptionGroupName))
  add(formData_777812, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_777812.add "Tags", Tags
  add(formData_777812, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_777812, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_777812, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_777812, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_777812, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_777812, "MultiAZ", newJBool(MultiAZ))
  add(formData_777812, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_777811, "Action", newJString(Action))
  add(formData_777812, "RestoreTime", newJString(RestoreTime))
  add(formData_777812, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_777812, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_777812.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_777812, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_777812, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_777812, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_777812, "Domain", newJString(Domain))
  add(formData_777812, "LicenseModel", newJString(LicenseModel))
  add(formData_777812, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_777812, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_777812, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_777811, "Version", newJString(Version))
  add(formData_777812, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_777810.call(nil, query_777811, nil, formData_777812, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_777766(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_777767, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_777768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_777720 = ref object of OpenApiRestCall_772581
proc url_GetRestoreDBInstanceToPointInTime_777722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRestoreDBInstanceToPointInTime_777721(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: JString (required)
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  section = newJObject()
  var valid_777723 = query.getOrDefault("Engine")
  valid_777723 = validateParameter(valid_777723, JString, required = false,
                                 default = nil)
  if valid_777723 != nil:
    section.add "Engine", valid_777723
  var valid_777724 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_777724 = validateParameter(valid_777724, JBool, required = false, default = nil)
  if valid_777724 != nil:
    section.add "UseDefaultProcessorFeatures", valid_777724
  var valid_777725 = query.getOrDefault("ProcessorFeatures")
  valid_777725 = validateParameter(valid_777725, JArray, required = false,
                                 default = nil)
  if valid_777725 != nil:
    section.add "ProcessorFeatures", valid_777725
  var valid_777726 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_777726 = validateParameter(valid_777726, JString, required = false,
                                 default = nil)
  if valid_777726 != nil:
    section.add "SourceDBInstanceIdentifier", valid_777726
  var valid_777727 = query.getOrDefault("StorageType")
  valid_777727 = validateParameter(valid_777727, JString, required = false,
                                 default = nil)
  if valid_777727 != nil:
    section.add "StorageType", valid_777727
  var valid_777728 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_777728 = validateParameter(valid_777728, JBool, required = false, default = nil)
  if valid_777728 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_777728
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_777729 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_777729 = validateParameter(valid_777729, JString, required = true,
                                 default = nil)
  if valid_777729 != nil:
    section.add "TargetDBInstanceIdentifier", valid_777729
  var valid_777730 = query.getOrDefault("AvailabilityZone")
  valid_777730 = validateParameter(valid_777730, JString, required = false,
                                 default = nil)
  if valid_777730 != nil:
    section.add "AvailabilityZone", valid_777730
  var valid_777731 = query.getOrDefault("Iops")
  valid_777731 = validateParameter(valid_777731, JInt, required = false, default = nil)
  if valid_777731 != nil:
    section.add "Iops", valid_777731
  var valid_777732 = query.getOrDefault("OptionGroupName")
  valid_777732 = validateParameter(valid_777732, JString, required = false,
                                 default = nil)
  if valid_777732 != nil:
    section.add "OptionGroupName", valid_777732
  var valid_777733 = query.getOrDefault("VpcSecurityGroupIds")
  valid_777733 = validateParameter(valid_777733, JArray, required = false,
                                 default = nil)
  if valid_777733 != nil:
    section.add "VpcSecurityGroupIds", valid_777733
  var valid_777734 = query.getOrDefault("RestoreTime")
  valid_777734 = validateParameter(valid_777734, JString, required = false,
                                 default = nil)
  if valid_777734 != nil:
    section.add "RestoreTime", valid_777734
  var valid_777735 = query.getOrDefault("MultiAZ")
  valid_777735 = validateParameter(valid_777735, JBool, required = false, default = nil)
  if valid_777735 != nil:
    section.add "MultiAZ", valid_777735
  var valid_777736 = query.getOrDefault("TdeCredentialPassword")
  valid_777736 = validateParameter(valid_777736, JString, required = false,
                                 default = nil)
  if valid_777736 != nil:
    section.add "TdeCredentialPassword", valid_777736
  var valid_777737 = query.getOrDefault("LicenseModel")
  valid_777737 = validateParameter(valid_777737, JString, required = false,
                                 default = nil)
  if valid_777737 != nil:
    section.add "LicenseModel", valid_777737
  var valid_777738 = query.getOrDefault("CopyTagsToSnapshot")
  valid_777738 = validateParameter(valid_777738, JBool, required = false, default = nil)
  if valid_777738 != nil:
    section.add "CopyTagsToSnapshot", valid_777738
  var valid_777739 = query.getOrDefault("DBName")
  valid_777739 = validateParameter(valid_777739, JString, required = false,
                                 default = nil)
  if valid_777739 != nil:
    section.add "DBName", valid_777739
  var valid_777740 = query.getOrDefault("Tags")
  valid_777740 = validateParameter(valid_777740, JArray, required = false,
                                 default = nil)
  if valid_777740 != nil:
    section.add "Tags", valid_777740
  var valid_777741 = query.getOrDefault("DomainIAMRoleName")
  valid_777741 = validateParameter(valid_777741, JString, required = false,
                                 default = nil)
  if valid_777741 != nil:
    section.add "DomainIAMRoleName", valid_777741
  var valid_777742 = query.getOrDefault("DBInstanceClass")
  valid_777742 = validateParameter(valid_777742, JString, required = false,
                                 default = nil)
  if valid_777742 != nil:
    section.add "DBInstanceClass", valid_777742
  var valid_777743 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_777743 = validateParameter(valid_777743, JArray, required = false,
                                 default = nil)
  if valid_777743 != nil:
    section.add "EnableCloudwatchLogsExports", valid_777743
  var valid_777744 = query.getOrDefault("UseLatestRestorableTime")
  valid_777744 = validateParameter(valid_777744, JBool, required = false, default = nil)
  if valid_777744 != nil:
    section.add "UseLatestRestorableTime", valid_777744
  var valid_777745 = query.getOrDefault("DBParameterGroupName")
  valid_777745 = validateParameter(valid_777745, JString, required = false,
                                 default = nil)
  if valid_777745 != nil:
    section.add "DBParameterGroupName", valid_777745
  var valid_777746 = query.getOrDefault("DeletionProtection")
  valid_777746 = validateParameter(valid_777746, JBool, required = false, default = nil)
  if valid_777746 != nil:
    section.add "DeletionProtection", valid_777746
  var valid_777747 = query.getOrDefault("Action")
  valid_777747 = validateParameter(valid_777747, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_777747 != nil:
    section.add "Action", valid_777747
  var valid_777748 = query.getOrDefault("DBSubnetGroupName")
  valid_777748 = validateParameter(valid_777748, JString, required = false,
                                 default = nil)
  if valid_777748 != nil:
    section.add "DBSubnetGroupName", valid_777748
  var valid_777749 = query.getOrDefault("Domain")
  valid_777749 = validateParameter(valid_777749, JString, required = false,
                                 default = nil)
  if valid_777749 != nil:
    section.add "Domain", valid_777749
  var valid_777750 = query.getOrDefault("TdeCredentialArn")
  valid_777750 = validateParameter(valid_777750, JString, required = false,
                                 default = nil)
  if valid_777750 != nil:
    section.add "TdeCredentialArn", valid_777750
  var valid_777751 = query.getOrDefault("PubliclyAccessible")
  valid_777751 = validateParameter(valid_777751, JBool, required = false, default = nil)
  if valid_777751 != nil:
    section.add "PubliclyAccessible", valid_777751
  var valid_777752 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_777752 = validateParameter(valid_777752, JBool, required = false, default = nil)
  if valid_777752 != nil:
    section.add "AutoMinorVersionUpgrade", valid_777752
  var valid_777753 = query.getOrDefault("Port")
  valid_777753 = validateParameter(valid_777753, JInt, required = false, default = nil)
  if valid_777753 != nil:
    section.add "Port", valid_777753
  var valid_777754 = query.getOrDefault("Version")
  valid_777754 = validateParameter(valid_777754, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777754 != nil:
    section.add "Version", valid_777754
  var valid_777755 = query.getOrDefault("SourceDbiResourceId")
  valid_777755 = validateParameter(valid_777755, JString, required = false,
                                 default = nil)
  if valid_777755 != nil:
    section.add "SourceDbiResourceId", valid_777755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777756 = header.getOrDefault("X-Amz-Date")
  valid_777756 = validateParameter(valid_777756, JString, required = false,
                                 default = nil)
  if valid_777756 != nil:
    section.add "X-Amz-Date", valid_777756
  var valid_777757 = header.getOrDefault("X-Amz-Security-Token")
  valid_777757 = validateParameter(valid_777757, JString, required = false,
                                 default = nil)
  if valid_777757 != nil:
    section.add "X-Amz-Security-Token", valid_777757
  var valid_777758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777758 = validateParameter(valid_777758, JString, required = false,
                                 default = nil)
  if valid_777758 != nil:
    section.add "X-Amz-Content-Sha256", valid_777758
  var valid_777759 = header.getOrDefault("X-Amz-Algorithm")
  valid_777759 = validateParameter(valid_777759, JString, required = false,
                                 default = nil)
  if valid_777759 != nil:
    section.add "X-Amz-Algorithm", valid_777759
  var valid_777760 = header.getOrDefault("X-Amz-Signature")
  valid_777760 = validateParameter(valid_777760, JString, required = false,
                                 default = nil)
  if valid_777760 != nil:
    section.add "X-Amz-Signature", valid_777760
  var valid_777761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777761 = validateParameter(valid_777761, JString, required = false,
                                 default = nil)
  if valid_777761 != nil:
    section.add "X-Amz-SignedHeaders", valid_777761
  var valid_777762 = header.getOrDefault("X-Amz-Credential")
  valid_777762 = validateParameter(valid_777762, JString, required = false,
                                 default = nil)
  if valid_777762 != nil:
    section.add "X-Amz-Credential", valid_777762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777763: Call_GetRestoreDBInstanceToPointInTime_777720;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_777763.validator(path, query, header, formData, body)
  let scheme = call_777763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777763.url(scheme.get, call_777763.host, call_777763.base,
                         call_777763.route, valid.getOrDefault("path"))
  result = hook(call_777763, url, valid)

proc call*(call_777764: Call_GetRestoreDBInstanceToPointInTime_777720;
          TargetDBInstanceIdentifier: string; Engine: string = "";
          UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          SourceDBInstanceIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZone: string = ""; Iops: int = 0; OptionGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; RestoreTime: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          LicenseModel: string = ""; CopyTagsToSnapshot: bool = false;
          DBName: string = ""; Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          DBInstanceClass: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          UseLatestRestorableTime: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"; SourceDbiResourceId: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine is not supported.</p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter is not used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance is not restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to restore the instance in.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: string (required)
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  var query_777765 = newJObject()
  add(query_777765, "Engine", newJString(Engine))
  add(query_777765, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_777765.add "ProcessorFeatures", ProcessorFeatures
  add(query_777765, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_777765, "StorageType", newJString(StorageType))
  add(query_777765, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_777765, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_777765, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_777765, "Iops", newJInt(Iops))
  add(query_777765, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_777765.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_777765, "RestoreTime", newJString(RestoreTime))
  add(query_777765, "MultiAZ", newJBool(MultiAZ))
  add(query_777765, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_777765, "LicenseModel", newJString(LicenseModel))
  add(query_777765, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_777765, "DBName", newJString(DBName))
  if Tags != nil:
    query_777765.add "Tags", Tags
  add(query_777765, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_777765, "DBInstanceClass", newJString(DBInstanceClass))
  if EnableCloudwatchLogsExports != nil:
    query_777765.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_777765, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_777765, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_777765, "DeletionProtection", newJBool(DeletionProtection))
  add(query_777765, "Action", newJString(Action))
  add(query_777765, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_777765, "Domain", newJString(Domain))
  add(query_777765, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_777765, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_777765, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_777765, "Port", newJInt(Port))
  add(query_777765, "Version", newJString(Version))
  add(query_777765, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  result = call_777764.call(nil, query_777765, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_777720(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_777721, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_777722,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_777833 = ref object of OpenApiRestCall_772581
proc url_PostRevokeDBSecurityGroupIngress_777835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRevokeDBSecurityGroupIngress_777834(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777836 = query.getOrDefault("Action")
  valid_777836 = validateParameter(valid_777836, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_777836 != nil:
    section.add "Action", valid_777836
  var valid_777837 = query.getOrDefault("Version")
  valid_777837 = validateParameter(valid_777837, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777837 != nil:
    section.add "Version", valid_777837
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777838 = header.getOrDefault("X-Amz-Date")
  valid_777838 = validateParameter(valid_777838, JString, required = false,
                                 default = nil)
  if valid_777838 != nil:
    section.add "X-Amz-Date", valid_777838
  var valid_777839 = header.getOrDefault("X-Amz-Security-Token")
  valid_777839 = validateParameter(valid_777839, JString, required = false,
                                 default = nil)
  if valid_777839 != nil:
    section.add "X-Amz-Security-Token", valid_777839
  var valid_777840 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777840 = validateParameter(valid_777840, JString, required = false,
                                 default = nil)
  if valid_777840 != nil:
    section.add "X-Amz-Content-Sha256", valid_777840
  var valid_777841 = header.getOrDefault("X-Amz-Algorithm")
  valid_777841 = validateParameter(valid_777841, JString, required = false,
                                 default = nil)
  if valid_777841 != nil:
    section.add "X-Amz-Algorithm", valid_777841
  var valid_777842 = header.getOrDefault("X-Amz-Signature")
  valid_777842 = validateParameter(valid_777842, JString, required = false,
                                 default = nil)
  if valid_777842 != nil:
    section.add "X-Amz-Signature", valid_777842
  var valid_777843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777843 = validateParameter(valid_777843, JString, required = false,
                                 default = nil)
  if valid_777843 != nil:
    section.add "X-Amz-SignedHeaders", valid_777843
  var valid_777844 = header.getOrDefault("X-Amz-Credential")
  valid_777844 = validateParameter(valid_777844, JString, required = false,
                                 default = nil)
  if valid_777844 != nil:
    section.add "X-Amz-Credential", valid_777844
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_777845 = formData.getOrDefault("DBSecurityGroupName")
  valid_777845 = validateParameter(valid_777845, JString, required = true,
                                 default = nil)
  if valid_777845 != nil:
    section.add "DBSecurityGroupName", valid_777845
  var valid_777846 = formData.getOrDefault("EC2SecurityGroupName")
  valid_777846 = validateParameter(valid_777846, JString, required = false,
                                 default = nil)
  if valid_777846 != nil:
    section.add "EC2SecurityGroupName", valid_777846
  var valid_777847 = formData.getOrDefault("EC2SecurityGroupId")
  valid_777847 = validateParameter(valid_777847, JString, required = false,
                                 default = nil)
  if valid_777847 != nil:
    section.add "EC2SecurityGroupId", valid_777847
  var valid_777848 = formData.getOrDefault("CIDRIP")
  valid_777848 = validateParameter(valid_777848, JString, required = false,
                                 default = nil)
  if valid_777848 != nil:
    section.add "CIDRIP", valid_777848
  var valid_777849 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_777849 = validateParameter(valid_777849, JString, required = false,
                                 default = nil)
  if valid_777849 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_777849
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777850: Call_PostRevokeDBSecurityGroupIngress_777833;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_777850.validator(path, query, header, formData, body)
  let scheme = call_777850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777850.url(scheme.get, call_777850.host, call_777850.base,
                         call_777850.route, valid.getOrDefault("path"))
  result = hook(call_777850, url, valid)

proc call*(call_777851: Call_PostRevokeDBSecurityGroupIngress_777833;
          DBSecurityGroupName: string;
          Action: string = "RevokeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_777852 = newJObject()
  var formData_777853 = newJObject()
  add(formData_777853, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_777852, "Action", newJString(Action))
  add(formData_777853, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_777853, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_777853, "CIDRIP", newJString(CIDRIP))
  add(query_777852, "Version", newJString(Version))
  add(formData_777853, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_777851.call(nil, query_777852, nil, formData_777853, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_777833(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_777834, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_777835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_777813 = ref object of OpenApiRestCall_772581
proc url_GetRevokeDBSecurityGroupIngress_777815(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRevokeDBSecurityGroupIngress_777814(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_777816 = query.getOrDefault("EC2SecurityGroupId")
  valid_777816 = validateParameter(valid_777816, JString, required = false,
                                 default = nil)
  if valid_777816 != nil:
    section.add "EC2SecurityGroupId", valid_777816
  var valid_777817 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_777817 = validateParameter(valid_777817, JString, required = false,
                                 default = nil)
  if valid_777817 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_777817
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_777818 = query.getOrDefault("DBSecurityGroupName")
  valid_777818 = validateParameter(valid_777818, JString, required = true,
                                 default = nil)
  if valid_777818 != nil:
    section.add "DBSecurityGroupName", valid_777818
  var valid_777819 = query.getOrDefault("Action")
  valid_777819 = validateParameter(valid_777819, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_777819 != nil:
    section.add "Action", valid_777819
  var valid_777820 = query.getOrDefault("CIDRIP")
  valid_777820 = validateParameter(valid_777820, JString, required = false,
                                 default = nil)
  if valid_777820 != nil:
    section.add "CIDRIP", valid_777820
  var valid_777821 = query.getOrDefault("EC2SecurityGroupName")
  valid_777821 = validateParameter(valid_777821, JString, required = false,
                                 default = nil)
  if valid_777821 != nil:
    section.add "EC2SecurityGroupName", valid_777821
  var valid_777822 = query.getOrDefault("Version")
  valid_777822 = validateParameter(valid_777822, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777822 != nil:
    section.add "Version", valid_777822
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777823 = header.getOrDefault("X-Amz-Date")
  valid_777823 = validateParameter(valid_777823, JString, required = false,
                                 default = nil)
  if valid_777823 != nil:
    section.add "X-Amz-Date", valid_777823
  var valid_777824 = header.getOrDefault("X-Amz-Security-Token")
  valid_777824 = validateParameter(valid_777824, JString, required = false,
                                 default = nil)
  if valid_777824 != nil:
    section.add "X-Amz-Security-Token", valid_777824
  var valid_777825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777825 = validateParameter(valid_777825, JString, required = false,
                                 default = nil)
  if valid_777825 != nil:
    section.add "X-Amz-Content-Sha256", valid_777825
  var valid_777826 = header.getOrDefault("X-Amz-Algorithm")
  valid_777826 = validateParameter(valid_777826, JString, required = false,
                                 default = nil)
  if valid_777826 != nil:
    section.add "X-Amz-Algorithm", valid_777826
  var valid_777827 = header.getOrDefault("X-Amz-Signature")
  valid_777827 = validateParameter(valid_777827, JString, required = false,
                                 default = nil)
  if valid_777827 != nil:
    section.add "X-Amz-Signature", valid_777827
  var valid_777828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777828 = validateParameter(valid_777828, JString, required = false,
                                 default = nil)
  if valid_777828 != nil:
    section.add "X-Amz-SignedHeaders", valid_777828
  var valid_777829 = header.getOrDefault("X-Amz-Credential")
  valid_777829 = validateParameter(valid_777829, JString, required = false,
                                 default = nil)
  if valid_777829 != nil:
    section.add "X-Amz-Credential", valid_777829
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777830: Call_GetRevokeDBSecurityGroupIngress_777813;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_777830.validator(path, query, header, formData, body)
  let scheme = call_777830.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777830.url(scheme.get, call_777830.host, call_777830.base,
                         call_777830.route, valid.getOrDefault("path"))
  result = hook(call_777830, url, valid)

proc call*(call_777831: Call_GetRevokeDBSecurityGroupIngress_777813;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS Account Number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_777832 = newJObject()
  add(query_777832, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_777832, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_777832, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_777832, "Action", newJString(Action))
  add(query_777832, "CIDRIP", newJString(CIDRIP))
  add(query_777832, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_777832, "Version", newJString(Version))
  result = call_777831.call(nil, query_777832, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_777813(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_777814, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_777815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_777873 = ref object of OpenApiRestCall_772581
proc url_PostStartActivityStream_777875(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStartActivityStream_777874(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777876 = query.getOrDefault("Action")
  valid_777876 = validateParameter(valid_777876, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_777876 != nil:
    section.add "Action", valid_777876
  var valid_777877 = query.getOrDefault("Version")
  valid_777877 = validateParameter(valid_777877, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777877 != nil:
    section.add "Version", valid_777877
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777878 = header.getOrDefault("X-Amz-Date")
  valid_777878 = validateParameter(valid_777878, JString, required = false,
                                 default = nil)
  if valid_777878 != nil:
    section.add "X-Amz-Date", valid_777878
  var valid_777879 = header.getOrDefault("X-Amz-Security-Token")
  valid_777879 = validateParameter(valid_777879, JString, required = false,
                                 default = nil)
  if valid_777879 != nil:
    section.add "X-Amz-Security-Token", valid_777879
  var valid_777880 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777880 = validateParameter(valid_777880, JString, required = false,
                                 default = nil)
  if valid_777880 != nil:
    section.add "X-Amz-Content-Sha256", valid_777880
  var valid_777881 = header.getOrDefault("X-Amz-Algorithm")
  valid_777881 = validateParameter(valid_777881, JString, required = false,
                                 default = nil)
  if valid_777881 != nil:
    section.add "X-Amz-Algorithm", valid_777881
  var valid_777882 = header.getOrDefault("X-Amz-Signature")
  valid_777882 = validateParameter(valid_777882, JString, required = false,
                                 default = nil)
  if valid_777882 != nil:
    section.add "X-Amz-Signature", valid_777882
  var valid_777883 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777883 = validateParameter(valid_777883, JString, required = false,
                                 default = nil)
  if valid_777883 != nil:
    section.add "X-Amz-SignedHeaders", valid_777883
  var valid_777884 = header.getOrDefault("X-Amz-Credential")
  valid_777884 = validateParameter(valid_777884, JString, required = false,
                                 default = nil)
  if valid_777884 != nil:
    section.add "X-Amz-Credential", valid_777884
  result.add "header", section
  ## parameters in `formData` object:
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Mode` field"
  var valid_777885 = formData.getOrDefault("Mode")
  valid_777885 = validateParameter(valid_777885, JString, required = true,
                                 default = newJString("sync"))
  if valid_777885 != nil:
    section.add "Mode", valid_777885
  var valid_777886 = formData.getOrDefault("ApplyImmediately")
  valid_777886 = validateParameter(valid_777886, JBool, required = false, default = nil)
  if valid_777886 != nil:
    section.add "ApplyImmediately", valid_777886
  var valid_777887 = formData.getOrDefault("ResourceArn")
  valid_777887 = validateParameter(valid_777887, JString, required = true,
                                 default = nil)
  if valid_777887 != nil:
    section.add "ResourceArn", valid_777887
  var valid_777888 = formData.getOrDefault("KmsKeyId")
  valid_777888 = validateParameter(valid_777888, JString, required = true,
                                 default = nil)
  if valid_777888 != nil:
    section.add "KmsKeyId", valid_777888
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777889: Call_PostStartActivityStream_777873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_777889.validator(path, query, header, formData, body)
  let scheme = call_777889.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777889.url(scheme.get, call_777889.host, call_777889.base,
                         call_777889.route, valid.getOrDefault("path"))
  result = hook(call_777889, url, valid)

proc call*(call_777890: Call_PostStartActivityStream_777873; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Version: string (required)
  var query_777891 = newJObject()
  var formData_777892 = newJObject()
  add(formData_777892, "Mode", newJString(Mode))
  add(formData_777892, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_777891, "Action", newJString(Action))
  add(formData_777892, "ResourceArn", newJString(ResourceArn))
  add(formData_777892, "KmsKeyId", newJString(KmsKeyId))
  add(query_777891, "Version", newJString(Version))
  result = call_777890.call(nil, query_777891, nil, formData_777892, nil)

var postStartActivityStream* = Call_PostStartActivityStream_777873(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_777874, base: "/",
    url: url_PostStartActivityStream_777875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_777854 = ref object of OpenApiRestCall_772581
proc url_GetStartActivityStream_777856(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStartActivityStream_777855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: JString (required)
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_777857 = query.getOrDefault("ResourceArn")
  valid_777857 = validateParameter(valid_777857, JString, required = true,
                                 default = nil)
  if valid_777857 != nil:
    section.add "ResourceArn", valid_777857
  var valid_777858 = query.getOrDefault("Action")
  valid_777858 = validateParameter(valid_777858, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_777858 != nil:
    section.add "Action", valid_777858
  var valid_777859 = query.getOrDefault("KmsKeyId")
  valid_777859 = validateParameter(valid_777859, JString, required = true,
                                 default = nil)
  if valid_777859 != nil:
    section.add "KmsKeyId", valid_777859
  var valid_777860 = query.getOrDefault("Mode")
  valid_777860 = validateParameter(valid_777860, JString, required = true,
                                 default = newJString("sync"))
  if valid_777860 != nil:
    section.add "Mode", valid_777860
  var valid_777861 = query.getOrDefault("Version")
  valid_777861 = validateParameter(valid_777861, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777861 != nil:
    section.add "Version", valid_777861
  var valid_777862 = query.getOrDefault("ApplyImmediately")
  valid_777862 = validateParameter(valid_777862, JBool, required = false, default = nil)
  if valid_777862 != nil:
    section.add "ApplyImmediately", valid_777862
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777863 = header.getOrDefault("X-Amz-Date")
  valid_777863 = validateParameter(valid_777863, JString, required = false,
                                 default = nil)
  if valid_777863 != nil:
    section.add "X-Amz-Date", valid_777863
  var valid_777864 = header.getOrDefault("X-Amz-Security-Token")
  valid_777864 = validateParameter(valid_777864, JString, required = false,
                                 default = nil)
  if valid_777864 != nil:
    section.add "X-Amz-Security-Token", valid_777864
  var valid_777865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777865 = validateParameter(valid_777865, JString, required = false,
                                 default = nil)
  if valid_777865 != nil:
    section.add "X-Amz-Content-Sha256", valid_777865
  var valid_777866 = header.getOrDefault("X-Amz-Algorithm")
  valid_777866 = validateParameter(valid_777866, JString, required = false,
                                 default = nil)
  if valid_777866 != nil:
    section.add "X-Amz-Algorithm", valid_777866
  var valid_777867 = header.getOrDefault("X-Amz-Signature")
  valid_777867 = validateParameter(valid_777867, JString, required = false,
                                 default = nil)
  if valid_777867 != nil:
    section.add "X-Amz-Signature", valid_777867
  var valid_777868 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777868 = validateParameter(valid_777868, JString, required = false,
                                 default = nil)
  if valid_777868 != nil:
    section.add "X-Amz-SignedHeaders", valid_777868
  var valid_777869 = header.getOrDefault("X-Amz-Credential")
  valid_777869 = validateParameter(valid_777869, JString, required = false,
                                 default = nil)
  if valid_777869 != nil:
    section.add "X-Amz-Credential", valid_777869
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777870: Call_GetStartActivityStream_777854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_777870.validator(path, query, header, formData, body)
  let scheme = call_777870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777870.url(scheme.get, call_777870.host, call_777870.base,
                         call_777870.route, valid.getOrDefault("path"))
  result = hook(call_777870, url, valid)

proc call*(call_777871: Call_GetStartActivityStream_777854; ResourceArn: string;
          KmsKeyId: string; Action: string = "StartActivityStream";
          Mode: string = "sync"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: string (required)
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  var query_777872 = newJObject()
  add(query_777872, "ResourceArn", newJString(ResourceArn))
  add(query_777872, "Action", newJString(Action))
  add(query_777872, "KmsKeyId", newJString(KmsKeyId))
  add(query_777872, "Mode", newJString(Mode))
  add(query_777872, "Version", newJString(Version))
  add(query_777872, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_777871.call(nil, query_777872, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_777854(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_777855, base: "/",
    url: url_GetStartActivityStream_777856, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_777909 = ref object of OpenApiRestCall_772581
proc url_PostStartDBCluster_777911(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStartDBCluster_777910(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777912 = query.getOrDefault("Action")
  valid_777912 = validateParameter(valid_777912, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_777912 != nil:
    section.add "Action", valid_777912
  var valid_777913 = query.getOrDefault("Version")
  valid_777913 = validateParameter(valid_777913, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777913 != nil:
    section.add "Version", valid_777913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777914 = header.getOrDefault("X-Amz-Date")
  valid_777914 = validateParameter(valid_777914, JString, required = false,
                                 default = nil)
  if valid_777914 != nil:
    section.add "X-Amz-Date", valid_777914
  var valid_777915 = header.getOrDefault("X-Amz-Security-Token")
  valid_777915 = validateParameter(valid_777915, JString, required = false,
                                 default = nil)
  if valid_777915 != nil:
    section.add "X-Amz-Security-Token", valid_777915
  var valid_777916 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777916 = validateParameter(valid_777916, JString, required = false,
                                 default = nil)
  if valid_777916 != nil:
    section.add "X-Amz-Content-Sha256", valid_777916
  var valid_777917 = header.getOrDefault("X-Amz-Algorithm")
  valid_777917 = validateParameter(valid_777917, JString, required = false,
                                 default = nil)
  if valid_777917 != nil:
    section.add "X-Amz-Algorithm", valid_777917
  var valid_777918 = header.getOrDefault("X-Amz-Signature")
  valid_777918 = validateParameter(valid_777918, JString, required = false,
                                 default = nil)
  if valid_777918 != nil:
    section.add "X-Amz-Signature", valid_777918
  var valid_777919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777919 = validateParameter(valid_777919, JString, required = false,
                                 default = nil)
  if valid_777919 != nil:
    section.add "X-Amz-SignedHeaders", valid_777919
  var valid_777920 = header.getOrDefault("X-Amz-Credential")
  valid_777920 = validateParameter(valid_777920, JString, required = false,
                                 default = nil)
  if valid_777920 != nil:
    section.add "X-Amz-Credential", valid_777920
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_777921 = formData.getOrDefault("DBClusterIdentifier")
  valid_777921 = validateParameter(valid_777921, JString, required = true,
                                 default = nil)
  if valid_777921 != nil:
    section.add "DBClusterIdentifier", valid_777921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777922: Call_PostStartDBCluster_777909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777922.validator(path, query, header, formData, body)
  let scheme = call_777922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777922.url(scheme.get, call_777922.host, call_777922.base,
                         call_777922.route, valid.getOrDefault("path"))
  result = hook(call_777922, url, valid)

proc call*(call_777923: Call_PostStartDBCluster_777909;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_777924 = newJObject()
  var formData_777925 = newJObject()
  add(query_777924, "Action", newJString(Action))
  add(formData_777925, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777924, "Version", newJString(Version))
  result = call_777923.call(nil, query_777924, nil, formData_777925, nil)

var postStartDBCluster* = Call_PostStartDBCluster_777909(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_777910, base: "/",
    url: url_PostStartDBCluster_777911, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_777893 = ref object of OpenApiRestCall_772581
proc url_GetStartDBCluster_777895(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStartDBCluster_777894(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_777896 = query.getOrDefault("DBClusterIdentifier")
  valid_777896 = validateParameter(valid_777896, JString, required = true,
                                 default = nil)
  if valid_777896 != nil:
    section.add "DBClusterIdentifier", valid_777896
  var valid_777897 = query.getOrDefault("Action")
  valid_777897 = validateParameter(valid_777897, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_777897 != nil:
    section.add "Action", valid_777897
  var valid_777898 = query.getOrDefault("Version")
  valid_777898 = validateParameter(valid_777898, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777898 != nil:
    section.add "Version", valid_777898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777899 = header.getOrDefault("X-Amz-Date")
  valid_777899 = validateParameter(valid_777899, JString, required = false,
                                 default = nil)
  if valid_777899 != nil:
    section.add "X-Amz-Date", valid_777899
  var valid_777900 = header.getOrDefault("X-Amz-Security-Token")
  valid_777900 = validateParameter(valid_777900, JString, required = false,
                                 default = nil)
  if valid_777900 != nil:
    section.add "X-Amz-Security-Token", valid_777900
  var valid_777901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777901 = validateParameter(valid_777901, JString, required = false,
                                 default = nil)
  if valid_777901 != nil:
    section.add "X-Amz-Content-Sha256", valid_777901
  var valid_777902 = header.getOrDefault("X-Amz-Algorithm")
  valid_777902 = validateParameter(valid_777902, JString, required = false,
                                 default = nil)
  if valid_777902 != nil:
    section.add "X-Amz-Algorithm", valid_777902
  var valid_777903 = header.getOrDefault("X-Amz-Signature")
  valid_777903 = validateParameter(valid_777903, JString, required = false,
                                 default = nil)
  if valid_777903 != nil:
    section.add "X-Amz-Signature", valid_777903
  var valid_777904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777904 = validateParameter(valid_777904, JString, required = false,
                                 default = nil)
  if valid_777904 != nil:
    section.add "X-Amz-SignedHeaders", valid_777904
  var valid_777905 = header.getOrDefault("X-Amz-Credential")
  valid_777905 = validateParameter(valid_777905, JString, required = false,
                                 default = nil)
  if valid_777905 != nil:
    section.add "X-Amz-Credential", valid_777905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777906: Call_GetStartDBCluster_777893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_777906.validator(path, query, header, formData, body)
  let scheme = call_777906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777906.url(scheme.get, call_777906.host, call_777906.base,
                         call_777906.route, valid.getOrDefault("path"))
  result = hook(call_777906, url, valid)

proc call*(call_777907: Call_GetStartDBCluster_777893; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777908 = newJObject()
  add(query_777908, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_777908, "Action", newJString(Action))
  add(query_777908, "Version", newJString(Version))
  result = call_777907.call(nil, query_777908, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_777893(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_777894,
    base: "/", url: url_GetStartDBCluster_777895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_777942 = ref object of OpenApiRestCall_772581
proc url_PostStartDBInstance_777944(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStartDBInstance_777943(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777945 = query.getOrDefault("Action")
  valid_777945 = validateParameter(valid_777945, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_777945 != nil:
    section.add "Action", valid_777945
  var valid_777946 = query.getOrDefault("Version")
  valid_777946 = validateParameter(valid_777946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777946 != nil:
    section.add "Version", valid_777946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777947 = header.getOrDefault("X-Amz-Date")
  valid_777947 = validateParameter(valid_777947, JString, required = false,
                                 default = nil)
  if valid_777947 != nil:
    section.add "X-Amz-Date", valid_777947
  var valid_777948 = header.getOrDefault("X-Amz-Security-Token")
  valid_777948 = validateParameter(valid_777948, JString, required = false,
                                 default = nil)
  if valid_777948 != nil:
    section.add "X-Amz-Security-Token", valid_777948
  var valid_777949 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777949 = validateParameter(valid_777949, JString, required = false,
                                 default = nil)
  if valid_777949 != nil:
    section.add "X-Amz-Content-Sha256", valid_777949
  var valid_777950 = header.getOrDefault("X-Amz-Algorithm")
  valid_777950 = validateParameter(valid_777950, JString, required = false,
                                 default = nil)
  if valid_777950 != nil:
    section.add "X-Amz-Algorithm", valid_777950
  var valid_777951 = header.getOrDefault("X-Amz-Signature")
  valid_777951 = validateParameter(valid_777951, JString, required = false,
                                 default = nil)
  if valid_777951 != nil:
    section.add "X-Amz-Signature", valid_777951
  var valid_777952 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777952 = validateParameter(valid_777952, JString, required = false,
                                 default = nil)
  if valid_777952 != nil:
    section.add "X-Amz-SignedHeaders", valid_777952
  var valid_777953 = header.getOrDefault("X-Amz-Credential")
  valid_777953 = validateParameter(valid_777953, JString, required = false,
                                 default = nil)
  if valid_777953 != nil:
    section.add "X-Amz-Credential", valid_777953
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_777954 = formData.getOrDefault("DBInstanceIdentifier")
  valid_777954 = validateParameter(valid_777954, JString, required = true,
                                 default = nil)
  if valid_777954 != nil:
    section.add "DBInstanceIdentifier", valid_777954
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777955: Call_PostStartDBInstance_777942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_777955.validator(path, query, header, formData, body)
  let scheme = call_777955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777955.url(scheme.get, call_777955.host, call_777955.base,
                         call_777955.route, valid.getOrDefault("path"))
  result = hook(call_777955, url, valid)

proc call*(call_777956: Call_PostStartDBInstance_777942;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_777957 = newJObject()
  var formData_777958 = newJObject()
  add(formData_777958, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_777957, "Action", newJString(Action))
  add(query_777957, "Version", newJString(Version))
  result = call_777956.call(nil, query_777957, nil, formData_777958, nil)

var postStartDBInstance* = Call_PostStartDBInstance_777942(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_777943, base: "/",
    url: url_PostStartDBInstance_777944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_777926 = ref object of OpenApiRestCall_772581
proc url_GetStartDBInstance_777928(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStartDBInstance_777927(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777929 = query.getOrDefault("Action")
  valid_777929 = validateParameter(valid_777929, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_777929 != nil:
    section.add "Action", valid_777929
  var valid_777930 = query.getOrDefault("Version")
  valid_777930 = validateParameter(valid_777930, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777930 != nil:
    section.add "Version", valid_777930
  var valid_777931 = query.getOrDefault("DBInstanceIdentifier")
  valid_777931 = validateParameter(valid_777931, JString, required = true,
                                 default = nil)
  if valid_777931 != nil:
    section.add "DBInstanceIdentifier", valid_777931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777932 = header.getOrDefault("X-Amz-Date")
  valid_777932 = validateParameter(valid_777932, JString, required = false,
                                 default = nil)
  if valid_777932 != nil:
    section.add "X-Amz-Date", valid_777932
  var valid_777933 = header.getOrDefault("X-Amz-Security-Token")
  valid_777933 = validateParameter(valid_777933, JString, required = false,
                                 default = nil)
  if valid_777933 != nil:
    section.add "X-Amz-Security-Token", valid_777933
  var valid_777934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777934 = validateParameter(valid_777934, JString, required = false,
                                 default = nil)
  if valid_777934 != nil:
    section.add "X-Amz-Content-Sha256", valid_777934
  var valid_777935 = header.getOrDefault("X-Amz-Algorithm")
  valid_777935 = validateParameter(valid_777935, JString, required = false,
                                 default = nil)
  if valid_777935 != nil:
    section.add "X-Amz-Algorithm", valid_777935
  var valid_777936 = header.getOrDefault("X-Amz-Signature")
  valid_777936 = validateParameter(valid_777936, JString, required = false,
                                 default = nil)
  if valid_777936 != nil:
    section.add "X-Amz-Signature", valid_777936
  var valid_777937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777937 = validateParameter(valid_777937, JString, required = false,
                                 default = nil)
  if valid_777937 != nil:
    section.add "X-Amz-SignedHeaders", valid_777937
  var valid_777938 = header.getOrDefault("X-Amz-Credential")
  valid_777938 = validateParameter(valid_777938, JString, required = false,
                                 default = nil)
  if valid_777938 != nil:
    section.add "X-Amz-Credential", valid_777938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777939: Call_GetStartDBInstance_777926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_777939.validator(path, query, header, formData, body)
  let scheme = call_777939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777939.url(scheme.get, call_777939.host, call_777939.base,
                         call_777939.route, valid.getOrDefault("path"))
  result = hook(call_777939, url, valid)

proc call*(call_777940: Call_GetStartDBInstance_777926;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  var query_777941 = newJObject()
  add(query_777941, "Action", newJString(Action))
  add(query_777941, "Version", newJString(Version))
  add(query_777941, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_777940.call(nil, query_777941, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_777926(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_777927,
    base: "/", url: url_GetStartDBInstance_777928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_777976 = ref object of OpenApiRestCall_772581
proc url_PostStopActivityStream_777978(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStopActivityStream_777977(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_777979 = query.getOrDefault("Action")
  valid_777979 = validateParameter(valid_777979, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_777979 != nil:
    section.add "Action", valid_777979
  var valid_777980 = query.getOrDefault("Version")
  valid_777980 = validateParameter(valid_777980, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777980 != nil:
    section.add "Version", valid_777980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777981 = header.getOrDefault("X-Amz-Date")
  valid_777981 = validateParameter(valid_777981, JString, required = false,
                                 default = nil)
  if valid_777981 != nil:
    section.add "X-Amz-Date", valid_777981
  var valid_777982 = header.getOrDefault("X-Amz-Security-Token")
  valid_777982 = validateParameter(valid_777982, JString, required = false,
                                 default = nil)
  if valid_777982 != nil:
    section.add "X-Amz-Security-Token", valid_777982
  var valid_777983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777983 = validateParameter(valid_777983, JString, required = false,
                                 default = nil)
  if valid_777983 != nil:
    section.add "X-Amz-Content-Sha256", valid_777983
  var valid_777984 = header.getOrDefault("X-Amz-Algorithm")
  valid_777984 = validateParameter(valid_777984, JString, required = false,
                                 default = nil)
  if valid_777984 != nil:
    section.add "X-Amz-Algorithm", valid_777984
  var valid_777985 = header.getOrDefault("X-Amz-Signature")
  valid_777985 = validateParameter(valid_777985, JString, required = false,
                                 default = nil)
  if valid_777985 != nil:
    section.add "X-Amz-Signature", valid_777985
  var valid_777986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777986 = validateParameter(valid_777986, JString, required = false,
                                 default = nil)
  if valid_777986 != nil:
    section.add "X-Amz-SignedHeaders", valid_777986
  var valid_777987 = header.getOrDefault("X-Amz-Credential")
  valid_777987 = validateParameter(valid_777987, JString, required = false,
                                 default = nil)
  if valid_777987 != nil:
    section.add "X-Amz-Credential", valid_777987
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  section = newJObject()
  var valid_777988 = formData.getOrDefault("ApplyImmediately")
  valid_777988 = validateParameter(valid_777988, JBool, required = false, default = nil)
  if valid_777988 != nil:
    section.add "ApplyImmediately", valid_777988
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_777989 = formData.getOrDefault("ResourceArn")
  valid_777989 = validateParameter(valid_777989, JString, required = true,
                                 default = nil)
  if valid_777989 != nil:
    section.add "ResourceArn", valid_777989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777990: Call_PostStopActivityStream_777976; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_777990.validator(path, query, header, formData, body)
  let scheme = call_777990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777990.url(scheme.get, call_777990.host, call_777990.base,
                         call_777990.route, valid.getOrDefault("path"))
  result = hook(call_777990, url, valid)

proc call*(call_777991: Call_PostStopActivityStream_777976; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Version: string (required)
  var query_777992 = newJObject()
  var formData_777993 = newJObject()
  add(formData_777993, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_777992, "Action", newJString(Action))
  add(formData_777993, "ResourceArn", newJString(ResourceArn))
  add(query_777992, "Version", newJString(Version))
  result = call_777991.call(nil, query_777992, nil, formData_777993, nil)

var postStopActivityStream* = Call_PostStopActivityStream_777976(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_777977, base: "/",
    url: url_PostStopActivityStream_777978, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_777959 = ref object of OpenApiRestCall_772581
proc url_GetStopActivityStream_777961(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStopActivityStream_777960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_777962 = query.getOrDefault("ResourceArn")
  valid_777962 = validateParameter(valid_777962, JString, required = true,
                                 default = nil)
  if valid_777962 != nil:
    section.add "ResourceArn", valid_777962
  var valid_777963 = query.getOrDefault("Action")
  valid_777963 = validateParameter(valid_777963, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_777963 != nil:
    section.add "Action", valid_777963
  var valid_777964 = query.getOrDefault("Version")
  valid_777964 = validateParameter(valid_777964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777964 != nil:
    section.add "Version", valid_777964
  var valid_777965 = query.getOrDefault("ApplyImmediately")
  valid_777965 = validateParameter(valid_777965, JBool, required = false, default = nil)
  if valid_777965 != nil:
    section.add "ApplyImmediately", valid_777965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_777966 = header.getOrDefault("X-Amz-Date")
  valid_777966 = validateParameter(valid_777966, JString, required = false,
                                 default = nil)
  if valid_777966 != nil:
    section.add "X-Amz-Date", valid_777966
  var valid_777967 = header.getOrDefault("X-Amz-Security-Token")
  valid_777967 = validateParameter(valid_777967, JString, required = false,
                                 default = nil)
  if valid_777967 != nil:
    section.add "X-Amz-Security-Token", valid_777967
  var valid_777968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_777968 = validateParameter(valid_777968, JString, required = false,
                                 default = nil)
  if valid_777968 != nil:
    section.add "X-Amz-Content-Sha256", valid_777968
  var valid_777969 = header.getOrDefault("X-Amz-Algorithm")
  valid_777969 = validateParameter(valid_777969, JString, required = false,
                                 default = nil)
  if valid_777969 != nil:
    section.add "X-Amz-Algorithm", valid_777969
  var valid_777970 = header.getOrDefault("X-Amz-Signature")
  valid_777970 = validateParameter(valid_777970, JString, required = false,
                                 default = nil)
  if valid_777970 != nil:
    section.add "X-Amz-Signature", valid_777970
  var valid_777971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_777971 = validateParameter(valid_777971, JString, required = false,
                                 default = nil)
  if valid_777971 != nil:
    section.add "X-Amz-SignedHeaders", valid_777971
  var valid_777972 = header.getOrDefault("X-Amz-Credential")
  valid_777972 = validateParameter(valid_777972, JString, required = false,
                                 default = nil)
  if valid_777972 != nil:
    section.add "X-Amz-Credential", valid_777972
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_777973: Call_GetStopActivityStream_777959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_777973.validator(path, query, header, formData, body)
  let scheme = call_777973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_777973.url(scheme.get, call_777973.host, call_777973.base,
                         call_777973.route, valid.getOrDefault("path"))
  result = hook(call_777973, url, valid)

proc call*(call_777974: Call_GetStopActivityStream_777959; ResourceArn: string;
          Action: string = "StopActivityStream"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  var query_777975 = newJObject()
  add(query_777975, "ResourceArn", newJString(ResourceArn))
  add(query_777975, "Action", newJString(Action))
  add(query_777975, "Version", newJString(Version))
  add(query_777975, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_777974.call(nil, query_777975, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_777959(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_777960, base: "/",
    url: url_GetStopActivityStream_777961, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_778010 = ref object of OpenApiRestCall_772581
proc url_PostStopDBCluster_778012(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStopDBCluster_778011(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778013 = query.getOrDefault("Action")
  valid_778013 = validateParameter(valid_778013, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_778013 != nil:
    section.add "Action", valid_778013
  var valid_778014 = query.getOrDefault("Version")
  valid_778014 = validateParameter(valid_778014, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_778014 != nil:
    section.add "Version", valid_778014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778015 = header.getOrDefault("X-Amz-Date")
  valid_778015 = validateParameter(valid_778015, JString, required = false,
                                 default = nil)
  if valid_778015 != nil:
    section.add "X-Amz-Date", valid_778015
  var valid_778016 = header.getOrDefault("X-Amz-Security-Token")
  valid_778016 = validateParameter(valid_778016, JString, required = false,
                                 default = nil)
  if valid_778016 != nil:
    section.add "X-Amz-Security-Token", valid_778016
  var valid_778017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778017 = validateParameter(valid_778017, JString, required = false,
                                 default = nil)
  if valid_778017 != nil:
    section.add "X-Amz-Content-Sha256", valid_778017
  var valid_778018 = header.getOrDefault("X-Amz-Algorithm")
  valid_778018 = validateParameter(valid_778018, JString, required = false,
                                 default = nil)
  if valid_778018 != nil:
    section.add "X-Amz-Algorithm", valid_778018
  var valid_778019 = header.getOrDefault("X-Amz-Signature")
  valid_778019 = validateParameter(valid_778019, JString, required = false,
                                 default = nil)
  if valid_778019 != nil:
    section.add "X-Amz-Signature", valid_778019
  var valid_778020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778020 = validateParameter(valid_778020, JString, required = false,
                                 default = nil)
  if valid_778020 != nil:
    section.add "X-Amz-SignedHeaders", valid_778020
  var valid_778021 = header.getOrDefault("X-Amz-Credential")
  valid_778021 = validateParameter(valid_778021, JString, required = false,
                                 default = nil)
  if valid_778021 != nil:
    section.add "X-Amz-Credential", valid_778021
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_778022 = formData.getOrDefault("DBClusterIdentifier")
  valid_778022 = validateParameter(valid_778022, JString, required = true,
                                 default = nil)
  if valid_778022 != nil:
    section.add "DBClusterIdentifier", valid_778022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778023: Call_PostStopDBCluster_778010; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_778023.validator(path, query, header, formData, body)
  let scheme = call_778023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778023.url(scheme.get, call_778023.host, call_778023.base,
                         call_778023.route, valid.getOrDefault("path"))
  result = hook(call_778023, url, valid)

proc call*(call_778024: Call_PostStopDBCluster_778010; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_778025 = newJObject()
  var formData_778026 = newJObject()
  add(query_778025, "Action", newJString(Action))
  add(formData_778026, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_778025, "Version", newJString(Version))
  result = call_778024.call(nil, query_778025, nil, formData_778026, nil)

var postStopDBCluster* = Call_PostStopDBCluster_778010(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_778011,
    base: "/", url: url_PostStopDBCluster_778012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_777994 = ref object of OpenApiRestCall_772581
proc url_GetStopDBCluster_777996(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStopDBCluster_777995(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_777997 = query.getOrDefault("DBClusterIdentifier")
  valid_777997 = validateParameter(valid_777997, JString, required = true,
                                 default = nil)
  if valid_777997 != nil:
    section.add "DBClusterIdentifier", valid_777997
  var valid_777998 = query.getOrDefault("Action")
  valid_777998 = validateParameter(valid_777998, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_777998 != nil:
    section.add "Action", valid_777998
  var valid_777999 = query.getOrDefault("Version")
  valid_777999 = validateParameter(valid_777999, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_777999 != nil:
    section.add "Version", valid_777999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778000 = header.getOrDefault("X-Amz-Date")
  valid_778000 = validateParameter(valid_778000, JString, required = false,
                                 default = nil)
  if valid_778000 != nil:
    section.add "X-Amz-Date", valid_778000
  var valid_778001 = header.getOrDefault("X-Amz-Security-Token")
  valid_778001 = validateParameter(valid_778001, JString, required = false,
                                 default = nil)
  if valid_778001 != nil:
    section.add "X-Amz-Security-Token", valid_778001
  var valid_778002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778002 = validateParameter(valid_778002, JString, required = false,
                                 default = nil)
  if valid_778002 != nil:
    section.add "X-Amz-Content-Sha256", valid_778002
  var valid_778003 = header.getOrDefault("X-Amz-Algorithm")
  valid_778003 = validateParameter(valid_778003, JString, required = false,
                                 default = nil)
  if valid_778003 != nil:
    section.add "X-Amz-Algorithm", valid_778003
  var valid_778004 = header.getOrDefault("X-Amz-Signature")
  valid_778004 = validateParameter(valid_778004, JString, required = false,
                                 default = nil)
  if valid_778004 != nil:
    section.add "X-Amz-Signature", valid_778004
  var valid_778005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778005 = validateParameter(valid_778005, JString, required = false,
                                 default = nil)
  if valid_778005 != nil:
    section.add "X-Amz-SignedHeaders", valid_778005
  var valid_778006 = header.getOrDefault("X-Amz-Credential")
  valid_778006 = validateParameter(valid_778006, JString, required = false,
                                 default = nil)
  if valid_778006 != nil:
    section.add "X-Amz-Credential", valid_778006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778007: Call_GetStopDBCluster_777994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_778007.validator(path, query, header, formData, body)
  let scheme = call_778007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778007.url(scheme.get, call_778007.host, call_778007.base,
                         call_778007.route, valid.getOrDefault("path"))
  result = hook(call_778007, url, valid)

proc call*(call_778008: Call_GetStopDBCluster_777994; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778009 = newJObject()
  add(query_778009, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_778009, "Action", newJString(Action))
  add(query_778009, "Version", newJString(Version))
  result = call_778008.call(nil, query_778009, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_777994(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_777995,
    base: "/", url: url_GetStopDBCluster_777996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_778044 = ref object of OpenApiRestCall_772581
proc url_PostStopDBInstance_778046(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostStopDBInstance_778045(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778047 = query.getOrDefault("Action")
  valid_778047 = validateParameter(valid_778047, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_778047 != nil:
    section.add "Action", valid_778047
  var valid_778048 = query.getOrDefault("Version")
  valid_778048 = validateParameter(valid_778048, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_778048 != nil:
    section.add "Version", valid_778048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778049 = header.getOrDefault("X-Amz-Date")
  valid_778049 = validateParameter(valid_778049, JString, required = false,
                                 default = nil)
  if valid_778049 != nil:
    section.add "X-Amz-Date", valid_778049
  var valid_778050 = header.getOrDefault("X-Amz-Security-Token")
  valid_778050 = validateParameter(valid_778050, JString, required = false,
                                 default = nil)
  if valid_778050 != nil:
    section.add "X-Amz-Security-Token", valid_778050
  var valid_778051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778051 = validateParameter(valid_778051, JString, required = false,
                                 default = nil)
  if valid_778051 != nil:
    section.add "X-Amz-Content-Sha256", valid_778051
  var valid_778052 = header.getOrDefault("X-Amz-Algorithm")
  valid_778052 = validateParameter(valid_778052, JString, required = false,
                                 default = nil)
  if valid_778052 != nil:
    section.add "X-Amz-Algorithm", valid_778052
  var valid_778053 = header.getOrDefault("X-Amz-Signature")
  valid_778053 = validateParameter(valid_778053, JString, required = false,
                                 default = nil)
  if valid_778053 != nil:
    section.add "X-Amz-Signature", valid_778053
  var valid_778054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778054 = validateParameter(valid_778054, JString, required = false,
                                 default = nil)
  if valid_778054 != nil:
    section.add "X-Amz-SignedHeaders", valid_778054
  var valid_778055 = header.getOrDefault("X-Amz-Credential")
  valid_778055 = validateParameter(valid_778055, JString, required = false,
                                 default = nil)
  if valid_778055 != nil:
    section.add "X-Amz-Credential", valid_778055
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_778056 = formData.getOrDefault("DBInstanceIdentifier")
  valid_778056 = validateParameter(valid_778056, JString, required = true,
                                 default = nil)
  if valid_778056 != nil:
    section.add "DBInstanceIdentifier", valid_778056
  var valid_778057 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_778057 = validateParameter(valid_778057, JString, required = false,
                                 default = nil)
  if valid_778057 != nil:
    section.add "DBSnapshotIdentifier", valid_778057
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778058: Call_PostStopDBInstance_778044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_778058.validator(path, query, header, formData, body)
  let scheme = call_778058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778058.url(scheme.get, call_778058.host, call_778058.base,
                         call_778058.route, valid.getOrDefault("path"))
  result = hook(call_778058, url, valid)

proc call*(call_778059: Call_PostStopDBInstance_778044;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_778060 = newJObject()
  var formData_778061 = newJObject()
  add(formData_778061, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_778061, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_778060, "Action", newJString(Action))
  add(query_778060, "Version", newJString(Version))
  result = call_778059.call(nil, query_778060, nil, formData_778061, nil)

var postStopDBInstance* = Call_PostStopDBInstance_778044(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_778045, base: "/",
    url: url_PostStopDBInstance_778046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_778027 = ref object of OpenApiRestCall_772581
proc url_GetStopDBInstance_778029(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetStopDBInstance_778028(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_778030 = query.getOrDefault("Action")
  valid_778030 = validateParameter(valid_778030, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_778030 != nil:
    section.add "Action", valid_778030
  var valid_778031 = query.getOrDefault("Version")
  valid_778031 = validateParameter(valid_778031, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_778031 != nil:
    section.add "Version", valid_778031
  var valid_778032 = query.getOrDefault("DBInstanceIdentifier")
  valid_778032 = validateParameter(valid_778032, JString, required = true,
                                 default = nil)
  if valid_778032 != nil:
    section.add "DBInstanceIdentifier", valid_778032
  var valid_778033 = query.getOrDefault("DBSnapshotIdentifier")
  valid_778033 = validateParameter(valid_778033, JString, required = false,
                                 default = nil)
  if valid_778033 != nil:
    section.add "DBSnapshotIdentifier", valid_778033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_778034 = header.getOrDefault("X-Amz-Date")
  valid_778034 = validateParameter(valid_778034, JString, required = false,
                                 default = nil)
  if valid_778034 != nil:
    section.add "X-Amz-Date", valid_778034
  var valid_778035 = header.getOrDefault("X-Amz-Security-Token")
  valid_778035 = validateParameter(valid_778035, JString, required = false,
                                 default = nil)
  if valid_778035 != nil:
    section.add "X-Amz-Security-Token", valid_778035
  var valid_778036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_778036 = validateParameter(valid_778036, JString, required = false,
                                 default = nil)
  if valid_778036 != nil:
    section.add "X-Amz-Content-Sha256", valid_778036
  var valid_778037 = header.getOrDefault("X-Amz-Algorithm")
  valid_778037 = validateParameter(valid_778037, JString, required = false,
                                 default = nil)
  if valid_778037 != nil:
    section.add "X-Amz-Algorithm", valid_778037
  var valid_778038 = header.getOrDefault("X-Amz-Signature")
  valid_778038 = validateParameter(valid_778038, JString, required = false,
                                 default = nil)
  if valid_778038 != nil:
    section.add "X-Amz-Signature", valid_778038
  var valid_778039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_778039 = validateParameter(valid_778039, JString, required = false,
                                 default = nil)
  if valid_778039 != nil:
    section.add "X-Amz-SignedHeaders", valid_778039
  var valid_778040 = header.getOrDefault("X-Amz-Credential")
  valid_778040 = validateParameter(valid_778040, JString, required = false,
                                 default = nil)
  if valid_778040 != nil:
    section.add "X-Amz-Credential", valid_778040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_778041: Call_GetStopDBInstance_778027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_778041.validator(path, query, header, formData, body)
  let scheme = call_778041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_778041.url(scheme.get, call_778041.host, call_778041.base,
                         call_778041.route, valid.getOrDefault("path"))
  result = hook(call_778041, url, valid)

proc call*(call_778042: Call_GetStopDBInstance_778027;
          DBInstanceIdentifier: string; Action: string = "StopDBInstance";
          Version: string = "2014-10-31"; DBSnapshotIdentifier: string = ""): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  var query_778043 = newJObject()
  add(query_778043, "Action", newJString(Action))
  add(query_778043, "Version", newJString(Version))
  add(query_778043, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_778043, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_778042.call(nil, query_778043, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_778027(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_778028,
    base: "/", url: url_GetStopDBInstance_778029,
    schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
