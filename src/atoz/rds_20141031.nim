
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_601389 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_601389](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_601389): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_602000 = ref object of OpenApiRestCall_601389
proc url_PostAddRoleToDBCluster_602002(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_602001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602003 = query.getOrDefault("Action")
  valid_602003 = validateParameter(valid_602003, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_602003 != nil:
    section.add "Action", valid_602003
  var valid_602004 = query.getOrDefault("Version")
  valid_602004 = validateParameter(valid_602004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602004 != nil:
    section.add "Version", valid_602004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602005 = header.getOrDefault("X-Amz-Signature")
  valid_602005 = validateParameter(valid_602005, JString, required = false,
                                 default = nil)
  if valid_602005 != nil:
    section.add "X-Amz-Signature", valid_602005
  var valid_602006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Content-Sha256", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-Date")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-Date", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Credential")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Credential", valid_602008
  var valid_602009 = header.getOrDefault("X-Amz-Security-Token")
  valid_602009 = validateParameter(valid_602009, JString, required = false,
                                 default = nil)
  if valid_602009 != nil:
    section.add "X-Amz-Security-Token", valid_602009
  var valid_602010 = header.getOrDefault("X-Amz-Algorithm")
  valid_602010 = validateParameter(valid_602010, JString, required = false,
                                 default = nil)
  if valid_602010 != nil:
    section.add "X-Amz-Algorithm", valid_602010
  var valid_602011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602011 = validateParameter(valid_602011, JString, required = false,
                                 default = nil)
  if valid_602011 != nil:
    section.add "X-Amz-SignedHeaders", valid_602011
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_602012 = formData.getOrDefault("FeatureName")
  valid_602012 = validateParameter(valid_602012, JString, required = false,
                                 default = nil)
  if valid_602012 != nil:
    section.add "FeatureName", valid_602012
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_602013 = formData.getOrDefault("RoleArn")
  valid_602013 = validateParameter(valid_602013, JString, required = true,
                                 default = nil)
  if valid_602013 != nil:
    section.add "RoleArn", valid_602013
  var valid_602014 = formData.getOrDefault("DBClusterIdentifier")
  valid_602014 = validateParameter(valid_602014, JString, required = true,
                                 default = nil)
  if valid_602014 != nil:
    section.add "DBClusterIdentifier", valid_602014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602015: Call_PostAddRoleToDBCluster_602000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602015.validator(path, query, header, formData, body)
  let scheme = call_602015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602015.url(scheme.get, call_602015.host, call_602015.base,
                         call_602015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602015, url, valid)

proc call*(call_602016: Call_PostAddRoleToDBCluster_602000; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_602017 = newJObject()
  var formData_602018 = newJObject()
  add(formData_602018, "FeatureName", newJString(FeatureName))
  add(formData_602018, "RoleArn", newJString(RoleArn))
  add(query_602017, "Action", newJString(Action))
  add(query_602017, "Version", newJString(Version))
  add(formData_602018, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_602016.call(nil, query_602017, nil, formData_602018, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_602000(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_602001, base: "/",
    url: url_PostAddRoleToDBCluster_602002, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_601727 = ref object of OpenApiRestCall_601389
proc url_GetAddRoleToDBCluster_601729(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_601728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_601841 = query.getOrDefault("RoleArn")
  valid_601841 = validateParameter(valid_601841, JString, required = true,
                                 default = nil)
  if valid_601841 != nil:
    section.add "RoleArn", valid_601841
  var valid_601842 = query.getOrDefault("DBClusterIdentifier")
  valid_601842 = validateParameter(valid_601842, JString, required = true,
                                 default = nil)
  if valid_601842 != nil:
    section.add "DBClusterIdentifier", valid_601842
  var valid_601843 = query.getOrDefault("FeatureName")
  valid_601843 = validateParameter(valid_601843, JString, required = false,
                                 default = nil)
  if valid_601843 != nil:
    section.add "FeatureName", valid_601843
  var valid_601857 = query.getOrDefault("Action")
  valid_601857 = validateParameter(valid_601857, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_601857 != nil:
    section.add "Action", valid_601857
  var valid_601858 = query.getOrDefault("Version")
  valid_601858 = validateParameter(valid_601858, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_601858 != nil:
    section.add "Version", valid_601858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_601859 = header.getOrDefault("X-Amz-Signature")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "X-Amz-Signature", valid_601859
  var valid_601860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601860 = validateParameter(valid_601860, JString, required = false,
                                 default = nil)
  if valid_601860 != nil:
    section.add "X-Amz-Content-Sha256", valid_601860
  var valid_601861 = header.getOrDefault("X-Amz-Date")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-Date", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Credential")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Credential", valid_601862
  var valid_601863 = header.getOrDefault("X-Amz-Security-Token")
  valid_601863 = validateParameter(valid_601863, JString, required = false,
                                 default = nil)
  if valid_601863 != nil:
    section.add "X-Amz-Security-Token", valid_601863
  var valid_601864 = header.getOrDefault("X-Amz-Algorithm")
  valid_601864 = validateParameter(valid_601864, JString, required = false,
                                 default = nil)
  if valid_601864 != nil:
    section.add "X-Amz-Algorithm", valid_601864
  var valid_601865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601865 = validateParameter(valid_601865, JString, required = false,
                                 default = nil)
  if valid_601865 != nil:
    section.add "X-Amz-SignedHeaders", valid_601865
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601888: Call_GetAddRoleToDBCluster_601727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_601888.validator(path, query, header, formData, body)
  let scheme = call_601888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601888.url(scheme.get, call_601888.host, call_601888.base,
                         call_601888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_601888, url, valid)

proc call*(call_601959: Call_GetAddRoleToDBCluster_601727; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601960 = newJObject()
  add(query_601960, "RoleArn", newJString(RoleArn))
  add(query_601960, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_601960, "FeatureName", newJString(FeatureName))
  add(query_601960, "Action", newJString(Action))
  add(query_601960, "Version", newJString(Version))
  result = call_601959.call(nil, query_601960, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_601727(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_601728, base: "/",
    url: url_GetAddRoleToDBCluster_601729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_602037 = ref object of OpenApiRestCall_601389
proc url_PostAddRoleToDBInstance_602039(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_602038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602040 = query.getOrDefault("Action")
  valid_602040 = validateParameter(valid_602040, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_602040 != nil:
    section.add "Action", valid_602040
  var valid_602041 = query.getOrDefault("Version")
  valid_602041 = validateParameter(valid_602041, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602041 != nil:
    section.add "Version", valid_602041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602042 = header.getOrDefault("X-Amz-Signature")
  valid_602042 = validateParameter(valid_602042, JString, required = false,
                                 default = nil)
  if valid_602042 != nil:
    section.add "X-Amz-Signature", valid_602042
  var valid_602043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602043 = validateParameter(valid_602043, JString, required = false,
                                 default = nil)
  if valid_602043 != nil:
    section.add "X-Amz-Content-Sha256", valid_602043
  var valid_602044 = header.getOrDefault("X-Amz-Date")
  valid_602044 = validateParameter(valid_602044, JString, required = false,
                                 default = nil)
  if valid_602044 != nil:
    section.add "X-Amz-Date", valid_602044
  var valid_602045 = header.getOrDefault("X-Amz-Credential")
  valid_602045 = validateParameter(valid_602045, JString, required = false,
                                 default = nil)
  if valid_602045 != nil:
    section.add "X-Amz-Credential", valid_602045
  var valid_602046 = header.getOrDefault("X-Amz-Security-Token")
  valid_602046 = validateParameter(valid_602046, JString, required = false,
                                 default = nil)
  if valid_602046 != nil:
    section.add "X-Amz-Security-Token", valid_602046
  var valid_602047 = header.getOrDefault("X-Amz-Algorithm")
  valid_602047 = validateParameter(valid_602047, JString, required = false,
                                 default = nil)
  if valid_602047 != nil:
    section.add "X-Amz-Algorithm", valid_602047
  var valid_602048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602048 = validateParameter(valid_602048, JString, required = false,
                                 default = nil)
  if valid_602048 != nil:
    section.add "X-Amz-SignedHeaders", valid_602048
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_602049 = formData.getOrDefault("FeatureName")
  valid_602049 = validateParameter(valid_602049, JString, required = true,
                                 default = nil)
  if valid_602049 != nil:
    section.add "FeatureName", valid_602049
  var valid_602050 = formData.getOrDefault("RoleArn")
  valid_602050 = validateParameter(valid_602050, JString, required = true,
                                 default = nil)
  if valid_602050 != nil:
    section.add "RoleArn", valid_602050
  var valid_602051 = formData.getOrDefault("DBInstanceIdentifier")
  valid_602051 = validateParameter(valid_602051, JString, required = true,
                                 default = nil)
  if valid_602051 != nil:
    section.add "DBInstanceIdentifier", valid_602051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602052: Call_PostAddRoleToDBInstance_602037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_602052.validator(path, query, header, formData, body)
  let scheme = call_602052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602052.url(scheme.get, call_602052.host, call_602052.base,
                         call_602052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602052, url, valid)

proc call*(call_602053: Call_PostAddRoleToDBInstance_602037; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602054 = newJObject()
  var formData_602055 = newJObject()
  add(formData_602055, "FeatureName", newJString(FeatureName))
  add(formData_602055, "RoleArn", newJString(RoleArn))
  add(formData_602055, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_602054, "Action", newJString(Action))
  add(query_602054, "Version", newJString(Version))
  result = call_602053.call(nil, query_602054, nil, formData_602055, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_602037(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_602038, base: "/",
    url: url_PostAddRoleToDBInstance_602039, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_602019 = ref object of OpenApiRestCall_601389
proc url_GetAddRoleToDBInstance_602021(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_602020(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_602022 = query.getOrDefault("RoleArn")
  valid_602022 = validateParameter(valid_602022, JString, required = true,
                                 default = nil)
  if valid_602022 != nil:
    section.add "RoleArn", valid_602022
  var valid_602023 = query.getOrDefault("FeatureName")
  valid_602023 = validateParameter(valid_602023, JString, required = true,
                                 default = nil)
  if valid_602023 != nil:
    section.add "FeatureName", valid_602023
  var valid_602024 = query.getOrDefault("DBInstanceIdentifier")
  valid_602024 = validateParameter(valid_602024, JString, required = true,
                                 default = nil)
  if valid_602024 != nil:
    section.add "DBInstanceIdentifier", valid_602024
  var valid_602025 = query.getOrDefault("Action")
  valid_602025 = validateParameter(valid_602025, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_602025 != nil:
    section.add "Action", valid_602025
  var valid_602026 = query.getOrDefault("Version")
  valid_602026 = validateParameter(valid_602026, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602026 != nil:
    section.add "Version", valid_602026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602027 = header.getOrDefault("X-Amz-Signature")
  valid_602027 = validateParameter(valid_602027, JString, required = false,
                                 default = nil)
  if valid_602027 != nil:
    section.add "X-Amz-Signature", valid_602027
  var valid_602028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602028 = validateParameter(valid_602028, JString, required = false,
                                 default = nil)
  if valid_602028 != nil:
    section.add "X-Amz-Content-Sha256", valid_602028
  var valid_602029 = header.getOrDefault("X-Amz-Date")
  valid_602029 = validateParameter(valid_602029, JString, required = false,
                                 default = nil)
  if valid_602029 != nil:
    section.add "X-Amz-Date", valid_602029
  var valid_602030 = header.getOrDefault("X-Amz-Credential")
  valid_602030 = validateParameter(valid_602030, JString, required = false,
                                 default = nil)
  if valid_602030 != nil:
    section.add "X-Amz-Credential", valid_602030
  var valid_602031 = header.getOrDefault("X-Amz-Security-Token")
  valid_602031 = validateParameter(valid_602031, JString, required = false,
                                 default = nil)
  if valid_602031 != nil:
    section.add "X-Amz-Security-Token", valid_602031
  var valid_602032 = header.getOrDefault("X-Amz-Algorithm")
  valid_602032 = validateParameter(valid_602032, JString, required = false,
                                 default = nil)
  if valid_602032 != nil:
    section.add "X-Amz-Algorithm", valid_602032
  var valid_602033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602033 = validateParameter(valid_602033, JString, required = false,
                                 default = nil)
  if valid_602033 != nil:
    section.add "X-Amz-SignedHeaders", valid_602033
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602034: Call_GetAddRoleToDBInstance_602019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_602034.validator(path, query, header, formData, body)
  let scheme = call_602034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602034.url(scheme.get, call_602034.host, call_602034.base,
                         call_602034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602034, url, valid)

proc call*(call_602035: Call_GetAddRoleToDBInstance_602019; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602036 = newJObject()
  add(query_602036, "RoleArn", newJString(RoleArn))
  add(query_602036, "FeatureName", newJString(FeatureName))
  add(query_602036, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_602036, "Action", newJString(Action))
  add(query_602036, "Version", newJString(Version))
  result = call_602035.call(nil, query_602036, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_602019(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_602020, base: "/",
    url: url_GetAddRoleToDBInstance_602021, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_602073 = ref object of OpenApiRestCall_601389
proc url_PostAddSourceIdentifierToSubscription_602075(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_602074(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602076 = query.getOrDefault("Action")
  valid_602076 = validateParameter(valid_602076, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_602076 != nil:
    section.add "Action", valid_602076
  var valid_602077 = query.getOrDefault("Version")
  valid_602077 = validateParameter(valid_602077, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602077 != nil:
    section.add "Version", valid_602077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602078 = header.getOrDefault("X-Amz-Signature")
  valid_602078 = validateParameter(valid_602078, JString, required = false,
                                 default = nil)
  if valid_602078 != nil:
    section.add "X-Amz-Signature", valid_602078
  var valid_602079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602079 = validateParameter(valid_602079, JString, required = false,
                                 default = nil)
  if valid_602079 != nil:
    section.add "X-Amz-Content-Sha256", valid_602079
  var valid_602080 = header.getOrDefault("X-Amz-Date")
  valid_602080 = validateParameter(valid_602080, JString, required = false,
                                 default = nil)
  if valid_602080 != nil:
    section.add "X-Amz-Date", valid_602080
  var valid_602081 = header.getOrDefault("X-Amz-Credential")
  valid_602081 = validateParameter(valid_602081, JString, required = false,
                                 default = nil)
  if valid_602081 != nil:
    section.add "X-Amz-Credential", valid_602081
  var valid_602082 = header.getOrDefault("X-Amz-Security-Token")
  valid_602082 = validateParameter(valid_602082, JString, required = false,
                                 default = nil)
  if valid_602082 != nil:
    section.add "X-Amz-Security-Token", valid_602082
  var valid_602083 = header.getOrDefault("X-Amz-Algorithm")
  valid_602083 = validateParameter(valid_602083, JString, required = false,
                                 default = nil)
  if valid_602083 != nil:
    section.add "X-Amz-Algorithm", valid_602083
  var valid_602084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602084 = validateParameter(valid_602084, JString, required = false,
                                 default = nil)
  if valid_602084 != nil:
    section.add "X-Amz-SignedHeaders", valid_602084
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_602085 = formData.getOrDefault("SubscriptionName")
  valid_602085 = validateParameter(valid_602085, JString, required = true,
                                 default = nil)
  if valid_602085 != nil:
    section.add "SubscriptionName", valid_602085
  var valid_602086 = formData.getOrDefault("SourceIdentifier")
  valid_602086 = validateParameter(valid_602086, JString, required = true,
                                 default = nil)
  if valid_602086 != nil:
    section.add "SourceIdentifier", valid_602086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602087: Call_PostAddSourceIdentifierToSubscription_602073;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_602087.validator(path, query, header, formData, body)
  let scheme = call_602087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602087.url(scheme.get, call_602087.host, call_602087.base,
                         call_602087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602087, url, valid)

proc call*(call_602088: Call_PostAddSourceIdentifierToSubscription_602073;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602089 = newJObject()
  var formData_602090 = newJObject()
  add(formData_602090, "SubscriptionName", newJString(SubscriptionName))
  add(formData_602090, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_602089, "Action", newJString(Action))
  add(query_602089, "Version", newJString(Version))
  result = call_602088.call(nil, query_602089, nil, formData_602090, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_602073(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_602074, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_602075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_602056 = ref object of OpenApiRestCall_601389
proc url_GetAddSourceIdentifierToSubscription_602058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_602057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_602059 = query.getOrDefault("SourceIdentifier")
  valid_602059 = validateParameter(valid_602059, JString, required = true,
                                 default = nil)
  if valid_602059 != nil:
    section.add "SourceIdentifier", valid_602059
  var valid_602060 = query.getOrDefault("SubscriptionName")
  valid_602060 = validateParameter(valid_602060, JString, required = true,
                                 default = nil)
  if valid_602060 != nil:
    section.add "SubscriptionName", valid_602060
  var valid_602061 = query.getOrDefault("Action")
  valid_602061 = validateParameter(valid_602061, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_602061 != nil:
    section.add "Action", valid_602061
  var valid_602062 = query.getOrDefault("Version")
  valid_602062 = validateParameter(valid_602062, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602062 != nil:
    section.add "Version", valid_602062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602063 = header.getOrDefault("X-Amz-Signature")
  valid_602063 = validateParameter(valid_602063, JString, required = false,
                                 default = nil)
  if valid_602063 != nil:
    section.add "X-Amz-Signature", valid_602063
  var valid_602064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602064 = validateParameter(valid_602064, JString, required = false,
                                 default = nil)
  if valid_602064 != nil:
    section.add "X-Amz-Content-Sha256", valid_602064
  var valid_602065 = header.getOrDefault("X-Amz-Date")
  valid_602065 = validateParameter(valid_602065, JString, required = false,
                                 default = nil)
  if valid_602065 != nil:
    section.add "X-Amz-Date", valid_602065
  var valid_602066 = header.getOrDefault("X-Amz-Credential")
  valid_602066 = validateParameter(valid_602066, JString, required = false,
                                 default = nil)
  if valid_602066 != nil:
    section.add "X-Amz-Credential", valid_602066
  var valid_602067 = header.getOrDefault("X-Amz-Security-Token")
  valid_602067 = validateParameter(valid_602067, JString, required = false,
                                 default = nil)
  if valid_602067 != nil:
    section.add "X-Amz-Security-Token", valid_602067
  var valid_602068 = header.getOrDefault("X-Amz-Algorithm")
  valid_602068 = validateParameter(valid_602068, JString, required = false,
                                 default = nil)
  if valid_602068 != nil:
    section.add "X-Amz-Algorithm", valid_602068
  var valid_602069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602069 = validateParameter(valid_602069, JString, required = false,
                                 default = nil)
  if valid_602069 != nil:
    section.add "X-Amz-SignedHeaders", valid_602069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602070: Call_GetAddSourceIdentifierToSubscription_602056;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_602070.validator(path, query, header, formData, body)
  let scheme = call_602070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602070.url(scheme.get, call_602070.host, call_602070.base,
                         call_602070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602070, url, valid)

proc call*(call_602071: Call_GetAddSourceIdentifierToSubscription_602056;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602072 = newJObject()
  add(query_602072, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_602072, "SubscriptionName", newJString(SubscriptionName))
  add(query_602072, "Action", newJString(Action))
  add(query_602072, "Version", newJString(Version))
  result = call_602071.call(nil, query_602072, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_602056(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_602057, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_602058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_602108 = ref object of OpenApiRestCall_601389
proc url_PostAddTagsToResource_602110(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_602109(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602111 = query.getOrDefault("Action")
  valid_602111 = validateParameter(valid_602111, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_602111 != nil:
    section.add "Action", valid_602111
  var valid_602112 = query.getOrDefault("Version")
  valid_602112 = validateParameter(valid_602112, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602112 != nil:
    section.add "Version", valid_602112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602113 = header.getOrDefault("X-Amz-Signature")
  valid_602113 = validateParameter(valid_602113, JString, required = false,
                                 default = nil)
  if valid_602113 != nil:
    section.add "X-Amz-Signature", valid_602113
  var valid_602114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602114 = validateParameter(valid_602114, JString, required = false,
                                 default = nil)
  if valid_602114 != nil:
    section.add "X-Amz-Content-Sha256", valid_602114
  var valid_602115 = header.getOrDefault("X-Amz-Date")
  valid_602115 = validateParameter(valid_602115, JString, required = false,
                                 default = nil)
  if valid_602115 != nil:
    section.add "X-Amz-Date", valid_602115
  var valid_602116 = header.getOrDefault("X-Amz-Credential")
  valid_602116 = validateParameter(valid_602116, JString, required = false,
                                 default = nil)
  if valid_602116 != nil:
    section.add "X-Amz-Credential", valid_602116
  var valid_602117 = header.getOrDefault("X-Amz-Security-Token")
  valid_602117 = validateParameter(valid_602117, JString, required = false,
                                 default = nil)
  if valid_602117 != nil:
    section.add "X-Amz-Security-Token", valid_602117
  var valid_602118 = header.getOrDefault("X-Amz-Algorithm")
  valid_602118 = validateParameter(valid_602118, JString, required = false,
                                 default = nil)
  if valid_602118 != nil:
    section.add "X-Amz-Algorithm", valid_602118
  var valid_602119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602119 = validateParameter(valid_602119, JString, required = false,
                                 default = nil)
  if valid_602119 != nil:
    section.add "X-Amz-SignedHeaders", valid_602119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_602120 = formData.getOrDefault("Tags")
  valid_602120 = validateParameter(valid_602120, JArray, required = true, default = nil)
  if valid_602120 != nil:
    section.add "Tags", valid_602120
  var valid_602121 = formData.getOrDefault("ResourceName")
  valid_602121 = validateParameter(valid_602121, JString, required = true,
                                 default = nil)
  if valid_602121 != nil:
    section.add "ResourceName", valid_602121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602122: Call_PostAddTagsToResource_602108; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_602122.validator(path, query, header, formData, body)
  let scheme = call_602122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602122.url(scheme.get, call_602122.host, call_602122.base,
                         call_602122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602122, url, valid)

proc call*(call_602123: Call_PostAddTagsToResource_602108; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_602124 = newJObject()
  var formData_602125 = newJObject()
  add(query_602124, "Action", newJString(Action))
  if Tags != nil:
    formData_602125.add "Tags", Tags
  add(query_602124, "Version", newJString(Version))
  add(formData_602125, "ResourceName", newJString(ResourceName))
  result = call_602123.call(nil, query_602124, nil, formData_602125, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_602108(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_602109, base: "/",
    url: url_PostAddTagsToResource_602110, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_602091 = ref object of OpenApiRestCall_601389
proc url_GetAddTagsToResource_602093(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_602092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_602094 = query.getOrDefault("Tags")
  valid_602094 = validateParameter(valid_602094, JArray, required = true, default = nil)
  if valid_602094 != nil:
    section.add "Tags", valid_602094
  var valid_602095 = query.getOrDefault("ResourceName")
  valid_602095 = validateParameter(valid_602095, JString, required = true,
                                 default = nil)
  if valid_602095 != nil:
    section.add "ResourceName", valid_602095
  var valid_602096 = query.getOrDefault("Action")
  valid_602096 = validateParameter(valid_602096, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_602096 != nil:
    section.add "Action", valid_602096
  var valid_602097 = query.getOrDefault("Version")
  valid_602097 = validateParameter(valid_602097, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602097 != nil:
    section.add "Version", valid_602097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602098 = header.getOrDefault("X-Amz-Signature")
  valid_602098 = validateParameter(valid_602098, JString, required = false,
                                 default = nil)
  if valid_602098 != nil:
    section.add "X-Amz-Signature", valid_602098
  var valid_602099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602099 = validateParameter(valid_602099, JString, required = false,
                                 default = nil)
  if valid_602099 != nil:
    section.add "X-Amz-Content-Sha256", valid_602099
  var valid_602100 = header.getOrDefault("X-Amz-Date")
  valid_602100 = validateParameter(valid_602100, JString, required = false,
                                 default = nil)
  if valid_602100 != nil:
    section.add "X-Amz-Date", valid_602100
  var valid_602101 = header.getOrDefault("X-Amz-Credential")
  valid_602101 = validateParameter(valid_602101, JString, required = false,
                                 default = nil)
  if valid_602101 != nil:
    section.add "X-Amz-Credential", valid_602101
  var valid_602102 = header.getOrDefault("X-Amz-Security-Token")
  valid_602102 = validateParameter(valid_602102, JString, required = false,
                                 default = nil)
  if valid_602102 != nil:
    section.add "X-Amz-Security-Token", valid_602102
  var valid_602103 = header.getOrDefault("X-Amz-Algorithm")
  valid_602103 = validateParameter(valid_602103, JString, required = false,
                                 default = nil)
  if valid_602103 != nil:
    section.add "X-Amz-Algorithm", valid_602103
  var valid_602104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602104 = validateParameter(valid_602104, JString, required = false,
                                 default = nil)
  if valid_602104 != nil:
    section.add "X-Amz-SignedHeaders", valid_602104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602105: Call_GetAddTagsToResource_602091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_602105.validator(path, query, header, formData, body)
  let scheme = call_602105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602105.url(scheme.get, call_602105.host, call_602105.base,
                         call_602105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602105, url, valid)

proc call*(call_602106: Call_GetAddTagsToResource_602091; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602107 = newJObject()
  if Tags != nil:
    query_602107.add "Tags", Tags
  add(query_602107, "ResourceName", newJString(ResourceName))
  add(query_602107, "Action", newJString(Action))
  add(query_602107, "Version", newJString(Version))
  result = call_602106.call(nil, query_602107, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_602091(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_602092, base: "/",
    url: url_GetAddTagsToResource_602093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_602144 = ref object of OpenApiRestCall_601389
proc url_PostApplyPendingMaintenanceAction_602146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_602145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602147 = query.getOrDefault("Action")
  valid_602147 = validateParameter(valid_602147, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_602147 != nil:
    section.add "Action", valid_602147
  var valid_602148 = query.getOrDefault("Version")
  valid_602148 = validateParameter(valid_602148, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602148 != nil:
    section.add "Version", valid_602148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602149 = header.getOrDefault("X-Amz-Signature")
  valid_602149 = validateParameter(valid_602149, JString, required = false,
                                 default = nil)
  if valid_602149 != nil:
    section.add "X-Amz-Signature", valid_602149
  var valid_602150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602150 = validateParameter(valid_602150, JString, required = false,
                                 default = nil)
  if valid_602150 != nil:
    section.add "X-Amz-Content-Sha256", valid_602150
  var valid_602151 = header.getOrDefault("X-Amz-Date")
  valid_602151 = validateParameter(valid_602151, JString, required = false,
                                 default = nil)
  if valid_602151 != nil:
    section.add "X-Amz-Date", valid_602151
  var valid_602152 = header.getOrDefault("X-Amz-Credential")
  valid_602152 = validateParameter(valid_602152, JString, required = false,
                                 default = nil)
  if valid_602152 != nil:
    section.add "X-Amz-Credential", valid_602152
  var valid_602153 = header.getOrDefault("X-Amz-Security-Token")
  valid_602153 = validateParameter(valid_602153, JString, required = false,
                                 default = nil)
  if valid_602153 != nil:
    section.add "X-Amz-Security-Token", valid_602153
  var valid_602154 = header.getOrDefault("X-Amz-Algorithm")
  valid_602154 = validateParameter(valid_602154, JString, required = false,
                                 default = nil)
  if valid_602154 != nil:
    section.add "X-Amz-Algorithm", valid_602154
  var valid_602155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602155 = validateParameter(valid_602155, JString, required = false,
                                 default = nil)
  if valid_602155 != nil:
    section.add "X-Amz-SignedHeaders", valid_602155
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_602156 = formData.getOrDefault("ResourceIdentifier")
  valid_602156 = validateParameter(valid_602156, JString, required = true,
                                 default = nil)
  if valid_602156 != nil:
    section.add "ResourceIdentifier", valid_602156
  var valid_602157 = formData.getOrDefault("ApplyAction")
  valid_602157 = validateParameter(valid_602157, JString, required = true,
                                 default = nil)
  if valid_602157 != nil:
    section.add "ApplyAction", valid_602157
  var valid_602158 = formData.getOrDefault("OptInType")
  valid_602158 = validateParameter(valid_602158, JString, required = true,
                                 default = nil)
  if valid_602158 != nil:
    section.add "OptInType", valid_602158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602159: Call_PostApplyPendingMaintenanceAction_602144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_602159.validator(path, query, header, formData, body)
  let scheme = call_602159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602159.url(scheme.get, call_602159.host, call_602159.base,
                         call_602159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602159, url, valid)

proc call*(call_602160: Call_PostApplyPendingMaintenanceAction_602144;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_602161 = newJObject()
  var formData_602162 = newJObject()
  add(formData_602162, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_602162, "ApplyAction", newJString(ApplyAction))
  add(query_602161, "Action", newJString(Action))
  add(formData_602162, "OptInType", newJString(OptInType))
  add(query_602161, "Version", newJString(Version))
  result = call_602160.call(nil, query_602161, nil, formData_602162, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_602144(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_602145, base: "/",
    url: url_PostApplyPendingMaintenanceAction_602146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_602126 = ref object of OpenApiRestCall_601389
proc url_GetApplyPendingMaintenanceAction_602128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_602127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_602129 = query.getOrDefault("ResourceIdentifier")
  valid_602129 = validateParameter(valid_602129, JString, required = true,
                                 default = nil)
  if valid_602129 != nil:
    section.add "ResourceIdentifier", valid_602129
  var valid_602130 = query.getOrDefault("ApplyAction")
  valid_602130 = validateParameter(valid_602130, JString, required = true,
                                 default = nil)
  if valid_602130 != nil:
    section.add "ApplyAction", valid_602130
  var valid_602131 = query.getOrDefault("Action")
  valid_602131 = validateParameter(valid_602131, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_602131 != nil:
    section.add "Action", valid_602131
  var valid_602132 = query.getOrDefault("OptInType")
  valid_602132 = validateParameter(valid_602132, JString, required = true,
                                 default = nil)
  if valid_602132 != nil:
    section.add "OptInType", valid_602132
  var valid_602133 = query.getOrDefault("Version")
  valid_602133 = validateParameter(valid_602133, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602133 != nil:
    section.add "Version", valid_602133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602134 = header.getOrDefault("X-Amz-Signature")
  valid_602134 = validateParameter(valid_602134, JString, required = false,
                                 default = nil)
  if valid_602134 != nil:
    section.add "X-Amz-Signature", valid_602134
  var valid_602135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-Content-Sha256", valid_602135
  var valid_602136 = header.getOrDefault("X-Amz-Date")
  valid_602136 = validateParameter(valid_602136, JString, required = false,
                                 default = nil)
  if valid_602136 != nil:
    section.add "X-Amz-Date", valid_602136
  var valid_602137 = header.getOrDefault("X-Amz-Credential")
  valid_602137 = validateParameter(valid_602137, JString, required = false,
                                 default = nil)
  if valid_602137 != nil:
    section.add "X-Amz-Credential", valid_602137
  var valid_602138 = header.getOrDefault("X-Amz-Security-Token")
  valid_602138 = validateParameter(valid_602138, JString, required = false,
                                 default = nil)
  if valid_602138 != nil:
    section.add "X-Amz-Security-Token", valid_602138
  var valid_602139 = header.getOrDefault("X-Amz-Algorithm")
  valid_602139 = validateParameter(valid_602139, JString, required = false,
                                 default = nil)
  if valid_602139 != nil:
    section.add "X-Amz-Algorithm", valid_602139
  var valid_602140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602140 = validateParameter(valid_602140, JString, required = false,
                                 default = nil)
  if valid_602140 != nil:
    section.add "X-Amz-SignedHeaders", valid_602140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602141: Call_GetApplyPendingMaintenanceAction_602126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_602141.validator(path, query, header, formData, body)
  let scheme = call_602141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602141.url(scheme.get, call_602141.host, call_602141.base,
                         call_602141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602141, url, valid)

proc call*(call_602142: Call_GetApplyPendingMaintenanceAction_602126;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_602143 = newJObject()
  add(query_602143, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_602143, "ApplyAction", newJString(ApplyAction))
  add(query_602143, "Action", newJString(Action))
  add(query_602143, "OptInType", newJString(OptInType))
  add(query_602143, "Version", newJString(Version))
  result = call_602142.call(nil, query_602143, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_602126(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_602127, base: "/",
    url: url_GetApplyPendingMaintenanceAction_602128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_602183 = ref object of OpenApiRestCall_601389
proc url_PostAuthorizeDBSecurityGroupIngress_602185(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_602184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602186 = query.getOrDefault("Action")
  valid_602186 = validateParameter(valid_602186, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_602186 != nil:
    section.add "Action", valid_602186
  var valid_602187 = query.getOrDefault("Version")
  valid_602187 = validateParameter(valid_602187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602187 != nil:
    section.add "Version", valid_602187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602188 = header.getOrDefault("X-Amz-Signature")
  valid_602188 = validateParameter(valid_602188, JString, required = false,
                                 default = nil)
  if valid_602188 != nil:
    section.add "X-Amz-Signature", valid_602188
  var valid_602189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602189 = validateParameter(valid_602189, JString, required = false,
                                 default = nil)
  if valid_602189 != nil:
    section.add "X-Amz-Content-Sha256", valid_602189
  var valid_602190 = header.getOrDefault("X-Amz-Date")
  valid_602190 = validateParameter(valid_602190, JString, required = false,
                                 default = nil)
  if valid_602190 != nil:
    section.add "X-Amz-Date", valid_602190
  var valid_602191 = header.getOrDefault("X-Amz-Credential")
  valid_602191 = validateParameter(valid_602191, JString, required = false,
                                 default = nil)
  if valid_602191 != nil:
    section.add "X-Amz-Credential", valid_602191
  var valid_602192 = header.getOrDefault("X-Amz-Security-Token")
  valid_602192 = validateParameter(valid_602192, JString, required = false,
                                 default = nil)
  if valid_602192 != nil:
    section.add "X-Amz-Security-Token", valid_602192
  var valid_602193 = header.getOrDefault("X-Amz-Algorithm")
  valid_602193 = validateParameter(valid_602193, JString, required = false,
                                 default = nil)
  if valid_602193 != nil:
    section.add "X-Amz-Algorithm", valid_602193
  var valid_602194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602194 = validateParameter(valid_602194, JString, required = false,
                                 default = nil)
  if valid_602194 != nil:
    section.add "X-Amz-SignedHeaders", valid_602194
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_602195 = formData.getOrDefault("DBSecurityGroupName")
  valid_602195 = validateParameter(valid_602195, JString, required = true,
                                 default = nil)
  if valid_602195 != nil:
    section.add "DBSecurityGroupName", valid_602195
  var valid_602196 = formData.getOrDefault("EC2SecurityGroupName")
  valid_602196 = validateParameter(valid_602196, JString, required = false,
                                 default = nil)
  if valid_602196 != nil:
    section.add "EC2SecurityGroupName", valid_602196
  var valid_602197 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602197 = validateParameter(valid_602197, JString, required = false,
                                 default = nil)
  if valid_602197 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602197
  var valid_602198 = formData.getOrDefault("EC2SecurityGroupId")
  valid_602198 = validateParameter(valid_602198, JString, required = false,
                                 default = nil)
  if valid_602198 != nil:
    section.add "EC2SecurityGroupId", valid_602198
  var valid_602199 = formData.getOrDefault("CIDRIP")
  valid_602199 = validateParameter(valid_602199, JString, required = false,
                                 default = nil)
  if valid_602199 != nil:
    section.add "CIDRIP", valid_602199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602200: Call_PostAuthorizeDBSecurityGroupIngress_602183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_602200.validator(path, query, header, formData, body)
  let scheme = call_602200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602200.url(scheme.get, call_602200.host, call_602200.base,
                         call_602200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602200, url, valid)

proc call*(call_602201: Call_PostAuthorizeDBSecurityGroupIngress_602183;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602202 = newJObject()
  var formData_602203 = newJObject()
  add(formData_602203, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_602203, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_602203, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_602203, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_602203, "CIDRIP", newJString(CIDRIP))
  add(query_602202, "Action", newJString(Action))
  add(query_602202, "Version", newJString(Version))
  result = call_602201.call(nil, query_602202, nil, formData_602203, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_602183(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_602184, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_602185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_602163 = ref object of OpenApiRestCall_601389
proc url_GetAuthorizeDBSecurityGroupIngress_602165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_602164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_602166 = query.getOrDefault("EC2SecurityGroupName")
  valid_602166 = validateParameter(valid_602166, JString, required = false,
                                 default = nil)
  if valid_602166 != nil:
    section.add "EC2SecurityGroupName", valid_602166
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_602167 = query.getOrDefault("DBSecurityGroupName")
  valid_602167 = validateParameter(valid_602167, JString, required = true,
                                 default = nil)
  if valid_602167 != nil:
    section.add "DBSecurityGroupName", valid_602167
  var valid_602168 = query.getOrDefault("EC2SecurityGroupId")
  valid_602168 = validateParameter(valid_602168, JString, required = false,
                                 default = nil)
  if valid_602168 != nil:
    section.add "EC2SecurityGroupId", valid_602168
  var valid_602169 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_602169 = validateParameter(valid_602169, JString, required = false,
                                 default = nil)
  if valid_602169 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_602169
  var valid_602170 = query.getOrDefault("Action")
  valid_602170 = validateParameter(valid_602170, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_602170 != nil:
    section.add "Action", valid_602170
  var valid_602171 = query.getOrDefault("Version")
  valid_602171 = validateParameter(valid_602171, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602171 != nil:
    section.add "Version", valid_602171
  var valid_602172 = query.getOrDefault("CIDRIP")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "CIDRIP", valid_602172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602173 = header.getOrDefault("X-Amz-Signature")
  valid_602173 = validateParameter(valid_602173, JString, required = false,
                                 default = nil)
  if valid_602173 != nil:
    section.add "X-Amz-Signature", valid_602173
  var valid_602174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602174 = validateParameter(valid_602174, JString, required = false,
                                 default = nil)
  if valid_602174 != nil:
    section.add "X-Amz-Content-Sha256", valid_602174
  var valid_602175 = header.getOrDefault("X-Amz-Date")
  valid_602175 = validateParameter(valid_602175, JString, required = false,
                                 default = nil)
  if valid_602175 != nil:
    section.add "X-Amz-Date", valid_602175
  var valid_602176 = header.getOrDefault("X-Amz-Credential")
  valid_602176 = validateParameter(valid_602176, JString, required = false,
                                 default = nil)
  if valid_602176 != nil:
    section.add "X-Amz-Credential", valid_602176
  var valid_602177 = header.getOrDefault("X-Amz-Security-Token")
  valid_602177 = validateParameter(valid_602177, JString, required = false,
                                 default = nil)
  if valid_602177 != nil:
    section.add "X-Amz-Security-Token", valid_602177
  var valid_602178 = header.getOrDefault("X-Amz-Algorithm")
  valid_602178 = validateParameter(valid_602178, JString, required = false,
                                 default = nil)
  if valid_602178 != nil:
    section.add "X-Amz-Algorithm", valid_602178
  var valid_602179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602179 = validateParameter(valid_602179, JString, required = false,
                                 default = nil)
  if valid_602179 != nil:
    section.add "X-Amz-SignedHeaders", valid_602179
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602180: Call_GetAuthorizeDBSecurityGroupIngress_602163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_602180.validator(path, query, header, formData, body)
  let scheme = call_602180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602180.url(scheme.get, call_602180.host, call_602180.base,
                         call_602180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602180, url, valid)

proc call*(call_602181: Call_GetAuthorizeDBSecurityGroupIngress_602163;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_602182 = newJObject()
  add(query_602182, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_602182, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_602182, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_602182, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_602182, "Action", newJString(Action))
  add(query_602182, "Version", newJString(Version))
  add(query_602182, "CIDRIP", newJString(CIDRIP))
  result = call_602181.call(nil, query_602182, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_602163(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_602164, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_602165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_602223 = ref object of OpenApiRestCall_601389
proc url_PostBacktrackDBCluster_602225(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_602224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602226 = query.getOrDefault("Action")
  valid_602226 = validateParameter(valid_602226, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_602226 != nil:
    section.add "Action", valid_602226
  var valid_602227 = query.getOrDefault("Version")
  valid_602227 = validateParameter(valid_602227, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602227 != nil:
    section.add "Version", valid_602227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602228 = header.getOrDefault("X-Amz-Signature")
  valid_602228 = validateParameter(valid_602228, JString, required = false,
                                 default = nil)
  if valid_602228 != nil:
    section.add "X-Amz-Signature", valid_602228
  var valid_602229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602229 = validateParameter(valid_602229, JString, required = false,
                                 default = nil)
  if valid_602229 != nil:
    section.add "X-Amz-Content-Sha256", valid_602229
  var valid_602230 = header.getOrDefault("X-Amz-Date")
  valid_602230 = validateParameter(valid_602230, JString, required = false,
                                 default = nil)
  if valid_602230 != nil:
    section.add "X-Amz-Date", valid_602230
  var valid_602231 = header.getOrDefault("X-Amz-Credential")
  valid_602231 = validateParameter(valid_602231, JString, required = false,
                                 default = nil)
  if valid_602231 != nil:
    section.add "X-Amz-Credential", valid_602231
  var valid_602232 = header.getOrDefault("X-Amz-Security-Token")
  valid_602232 = validateParameter(valid_602232, JString, required = false,
                                 default = nil)
  if valid_602232 != nil:
    section.add "X-Amz-Security-Token", valid_602232
  var valid_602233 = header.getOrDefault("X-Amz-Algorithm")
  valid_602233 = validateParameter(valid_602233, JString, required = false,
                                 default = nil)
  if valid_602233 != nil:
    section.add "X-Amz-Algorithm", valid_602233
  var valid_602234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602234 = validateParameter(valid_602234, JString, required = false,
                                 default = nil)
  if valid_602234 != nil:
    section.add "X-Amz-SignedHeaders", valid_602234
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_602235 = formData.getOrDefault("Force")
  valid_602235 = validateParameter(valid_602235, JBool, required = false, default = nil)
  if valid_602235 != nil:
    section.add "Force", valid_602235
  var valid_602236 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_602236 = validateParameter(valid_602236, JBool, required = false, default = nil)
  if valid_602236 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_602236
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_602237 = formData.getOrDefault("DBClusterIdentifier")
  valid_602237 = validateParameter(valid_602237, JString, required = true,
                                 default = nil)
  if valid_602237 != nil:
    section.add "DBClusterIdentifier", valid_602237
  var valid_602238 = formData.getOrDefault("BacktrackTo")
  valid_602238 = validateParameter(valid_602238, JString, required = true,
                                 default = nil)
  if valid_602238 != nil:
    section.add "BacktrackTo", valid_602238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602239: Call_PostBacktrackDBCluster_602223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602239.validator(path, query, header, formData, body)
  let scheme = call_602239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602239.url(scheme.get, call_602239.host, call_602239.base,
                         call_602239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602239, url, valid)

proc call*(call_602240: Call_PostBacktrackDBCluster_602223;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_602241 = newJObject()
  var formData_602242 = newJObject()
  add(formData_602242, "Force", newJBool(Force))
  add(formData_602242, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_602241, "Action", newJString(Action))
  add(query_602241, "Version", newJString(Version))
  add(formData_602242, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_602242, "BacktrackTo", newJString(BacktrackTo))
  result = call_602240.call(nil, query_602241, nil, formData_602242, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_602223(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_602224, base: "/",
    url: url_PostBacktrackDBCluster_602225, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_602204 = ref object of OpenApiRestCall_601389
proc url_GetBacktrackDBCluster_602206(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_602205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_602207 = query.getOrDefault("DBClusterIdentifier")
  valid_602207 = validateParameter(valid_602207, JString, required = true,
                                 default = nil)
  if valid_602207 != nil:
    section.add "DBClusterIdentifier", valid_602207
  var valid_602208 = query.getOrDefault("BacktrackTo")
  valid_602208 = validateParameter(valid_602208, JString, required = true,
                                 default = nil)
  if valid_602208 != nil:
    section.add "BacktrackTo", valid_602208
  var valid_602209 = query.getOrDefault("Force")
  valid_602209 = validateParameter(valid_602209, JBool, required = false, default = nil)
  if valid_602209 != nil:
    section.add "Force", valid_602209
  var valid_602210 = query.getOrDefault("Action")
  valid_602210 = validateParameter(valid_602210, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_602210 != nil:
    section.add "Action", valid_602210
  var valid_602211 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_602211 = validateParameter(valid_602211, JBool, required = false, default = nil)
  if valid_602211 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_602211
  var valid_602212 = query.getOrDefault("Version")
  valid_602212 = validateParameter(valid_602212, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602212 != nil:
    section.add "Version", valid_602212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602213 = header.getOrDefault("X-Amz-Signature")
  valid_602213 = validateParameter(valid_602213, JString, required = false,
                                 default = nil)
  if valid_602213 != nil:
    section.add "X-Amz-Signature", valid_602213
  var valid_602214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602214 = validateParameter(valid_602214, JString, required = false,
                                 default = nil)
  if valid_602214 != nil:
    section.add "X-Amz-Content-Sha256", valid_602214
  var valid_602215 = header.getOrDefault("X-Amz-Date")
  valid_602215 = validateParameter(valid_602215, JString, required = false,
                                 default = nil)
  if valid_602215 != nil:
    section.add "X-Amz-Date", valid_602215
  var valid_602216 = header.getOrDefault("X-Amz-Credential")
  valid_602216 = validateParameter(valid_602216, JString, required = false,
                                 default = nil)
  if valid_602216 != nil:
    section.add "X-Amz-Credential", valid_602216
  var valid_602217 = header.getOrDefault("X-Amz-Security-Token")
  valid_602217 = validateParameter(valid_602217, JString, required = false,
                                 default = nil)
  if valid_602217 != nil:
    section.add "X-Amz-Security-Token", valid_602217
  var valid_602218 = header.getOrDefault("X-Amz-Algorithm")
  valid_602218 = validateParameter(valid_602218, JString, required = false,
                                 default = nil)
  if valid_602218 != nil:
    section.add "X-Amz-Algorithm", valid_602218
  var valid_602219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602219 = validateParameter(valid_602219, JString, required = false,
                                 default = nil)
  if valid_602219 != nil:
    section.add "X-Amz-SignedHeaders", valid_602219
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602220: Call_GetBacktrackDBCluster_602204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602220.validator(path, query, header, formData, body)
  let scheme = call_602220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602220.url(scheme.get, call_602220.host, call_602220.base,
                         call_602220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602220, url, valid)

proc call*(call_602221: Call_GetBacktrackDBCluster_602204;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_602222 = newJObject()
  add(query_602222, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_602222, "BacktrackTo", newJString(BacktrackTo))
  add(query_602222, "Force", newJBool(Force))
  add(query_602222, "Action", newJString(Action))
  add(query_602222, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_602222, "Version", newJString(Version))
  result = call_602221.call(nil, query_602222, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_602204(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_602205, base: "/",
    url: url_GetBacktrackDBCluster_602206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_602262 = ref object of OpenApiRestCall_601389
proc url_PostCopyDBClusterParameterGroup_602264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_602263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602265 = query.getOrDefault("Action")
  valid_602265 = validateParameter(valid_602265, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_602265 != nil:
    section.add "Action", valid_602265
  var valid_602266 = query.getOrDefault("Version")
  valid_602266 = validateParameter(valid_602266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602266 != nil:
    section.add "Version", valid_602266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602267 = header.getOrDefault("X-Amz-Signature")
  valid_602267 = validateParameter(valid_602267, JString, required = false,
                                 default = nil)
  if valid_602267 != nil:
    section.add "X-Amz-Signature", valid_602267
  var valid_602268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602268 = validateParameter(valid_602268, JString, required = false,
                                 default = nil)
  if valid_602268 != nil:
    section.add "X-Amz-Content-Sha256", valid_602268
  var valid_602269 = header.getOrDefault("X-Amz-Date")
  valid_602269 = validateParameter(valid_602269, JString, required = false,
                                 default = nil)
  if valid_602269 != nil:
    section.add "X-Amz-Date", valid_602269
  var valid_602270 = header.getOrDefault("X-Amz-Credential")
  valid_602270 = validateParameter(valid_602270, JString, required = false,
                                 default = nil)
  if valid_602270 != nil:
    section.add "X-Amz-Credential", valid_602270
  var valid_602271 = header.getOrDefault("X-Amz-Security-Token")
  valid_602271 = validateParameter(valid_602271, JString, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "X-Amz-Security-Token", valid_602271
  var valid_602272 = header.getOrDefault("X-Amz-Algorithm")
  valid_602272 = validateParameter(valid_602272, JString, required = false,
                                 default = nil)
  if valid_602272 != nil:
    section.add "X-Amz-Algorithm", valid_602272
  var valid_602273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602273 = validateParameter(valid_602273, JString, required = false,
                                 default = nil)
  if valid_602273 != nil:
    section.add "X-Amz-SignedHeaders", valid_602273
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_602274 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_602274 = validateParameter(valid_602274, JString, required = true,
                                 default = nil)
  if valid_602274 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_602274
  var valid_602275 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_602275 = validateParameter(valid_602275, JString, required = true,
                                 default = nil)
  if valid_602275 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_602275
  var valid_602276 = formData.getOrDefault("Tags")
  valid_602276 = validateParameter(valid_602276, JArray, required = false,
                                 default = nil)
  if valid_602276 != nil:
    section.add "Tags", valid_602276
  var valid_602277 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_602277 = validateParameter(valid_602277, JString, required = true,
                                 default = nil)
  if valid_602277 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_602277
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602278: Call_PostCopyDBClusterParameterGroup_602262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602278.validator(path, query, header, formData, body)
  let scheme = call_602278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602278.url(scheme.get, call_602278.host, call_602278.base,
                         call_602278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602278, url, valid)

proc call*(call_602279: Call_PostCopyDBClusterParameterGroup_602262;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_602280 = newJObject()
  var formData_602281 = newJObject()
  add(formData_602281, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_602281, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_602280, "Action", newJString(Action))
  if Tags != nil:
    formData_602281.add "Tags", Tags
  add(query_602280, "Version", newJString(Version))
  add(formData_602281, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_602279.call(nil, query_602280, nil, formData_602281, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_602262(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_602263, base: "/",
    url: url_PostCopyDBClusterParameterGroup_602264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_602243 = ref object of OpenApiRestCall_601389
proc url_GetCopyDBClusterParameterGroup_602245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_602244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_602246 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_602246 = validateParameter(valid_602246, JString, required = true,
                                 default = nil)
  if valid_602246 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_602246
  var valid_602247 = query.getOrDefault("Tags")
  valid_602247 = validateParameter(valid_602247, JArray, required = false,
                                 default = nil)
  if valid_602247 != nil:
    section.add "Tags", valid_602247
  var valid_602248 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_602248 = validateParameter(valid_602248, JString, required = true,
                                 default = nil)
  if valid_602248 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_602248
  var valid_602249 = query.getOrDefault("Action")
  valid_602249 = validateParameter(valid_602249, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_602249 != nil:
    section.add "Action", valid_602249
  var valid_602250 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_602250 = validateParameter(valid_602250, JString, required = true,
                                 default = nil)
  if valid_602250 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_602250
  var valid_602251 = query.getOrDefault("Version")
  valid_602251 = validateParameter(valid_602251, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602251 != nil:
    section.add "Version", valid_602251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602252 = header.getOrDefault("X-Amz-Signature")
  valid_602252 = validateParameter(valid_602252, JString, required = false,
                                 default = nil)
  if valid_602252 != nil:
    section.add "X-Amz-Signature", valid_602252
  var valid_602253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602253 = validateParameter(valid_602253, JString, required = false,
                                 default = nil)
  if valid_602253 != nil:
    section.add "X-Amz-Content-Sha256", valid_602253
  var valid_602254 = header.getOrDefault("X-Amz-Date")
  valid_602254 = validateParameter(valid_602254, JString, required = false,
                                 default = nil)
  if valid_602254 != nil:
    section.add "X-Amz-Date", valid_602254
  var valid_602255 = header.getOrDefault("X-Amz-Credential")
  valid_602255 = validateParameter(valid_602255, JString, required = false,
                                 default = nil)
  if valid_602255 != nil:
    section.add "X-Amz-Credential", valid_602255
  var valid_602256 = header.getOrDefault("X-Amz-Security-Token")
  valid_602256 = validateParameter(valid_602256, JString, required = false,
                                 default = nil)
  if valid_602256 != nil:
    section.add "X-Amz-Security-Token", valid_602256
  var valid_602257 = header.getOrDefault("X-Amz-Algorithm")
  valid_602257 = validateParameter(valid_602257, JString, required = false,
                                 default = nil)
  if valid_602257 != nil:
    section.add "X-Amz-Algorithm", valid_602257
  var valid_602258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602258 = validateParameter(valid_602258, JString, required = false,
                                 default = nil)
  if valid_602258 != nil:
    section.add "X-Amz-SignedHeaders", valid_602258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602259: Call_GetCopyDBClusterParameterGroup_602243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602259.validator(path, query, header, formData, body)
  let scheme = call_602259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602259.url(scheme.get, call_602259.host, call_602259.base,
                         call_602259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602259, url, valid)

proc call*(call_602260: Call_GetCopyDBClusterParameterGroup_602243;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_602261 = newJObject()
  add(query_602261, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_602261.add "Tags", Tags
  add(query_602261, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_602261, "Action", newJString(Action))
  add(query_602261, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_602261, "Version", newJString(Version))
  result = call_602260.call(nil, query_602261, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_602243(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_602244, base: "/",
    url: url_GetCopyDBClusterParameterGroup_602245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_602304 = ref object of OpenApiRestCall_601389
proc url_PostCopyDBClusterSnapshot_602306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_602305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602307 = query.getOrDefault("Action")
  valid_602307 = validateParameter(valid_602307, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_602307 != nil:
    section.add "Action", valid_602307
  var valid_602308 = query.getOrDefault("Version")
  valid_602308 = validateParameter(valid_602308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602308 != nil:
    section.add "Version", valid_602308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602309 = header.getOrDefault("X-Amz-Signature")
  valid_602309 = validateParameter(valid_602309, JString, required = false,
                                 default = nil)
  if valid_602309 != nil:
    section.add "X-Amz-Signature", valid_602309
  var valid_602310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602310 = validateParameter(valid_602310, JString, required = false,
                                 default = nil)
  if valid_602310 != nil:
    section.add "X-Amz-Content-Sha256", valid_602310
  var valid_602311 = header.getOrDefault("X-Amz-Date")
  valid_602311 = validateParameter(valid_602311, JString, required = false,
                                 default = nil)
  if valid_602311 != nil:
    section.add "X-Amz-Date", valid_602311
  var valid_602312 = header.getOrDefault("X-Amz-Credential")
  valid_602312 = validateParameter(valid_602312, JString, required = false,
                                 default = nil)
  if valid_602312 != nil:
    section.add "X-Amz-Credential", valid_602312
  var valid_602313 = header.getOrDefault("X-Amz-Security-Token")
  valid_602313 = validateParameter(valid_602313, JString, required = false,
                                 default = nil)
  if valid_602313 != nil:
    section.add "X-Amz-Security-Token", valid_602313
  var valid_602314 = header.getOrDefault("X-Amz-Algorithm")
  valid_602314 = validateParameter(valid_602314, JString, required = false,
                                 default = nil)
  if valid_602314 != nil:
    section.add "X-Amz-Algorithm", valid_602314
  var valid_602315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602315 = validateParameter(valid_602315, JString, required = false,
                                 default = nil)
  if valid_602315 != nil:
    section.add "X-Amz-SignedHeaders", valid_602315
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_602316 = formData.getOrDefault("SourceRegion")
  valid_602316 = validateParameter(valid_602316, JString, required = false,
                                 default = nil)
  if valid_602316 != nil:
    section.add "SourceRegion", valid_602316
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_602317 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_602317 = validateParameter(valid_602317, JString, required = true,
                                 default = nil)
  if valid_602317 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_602317
  var valid_602318 = formData.getOrDefault("KmsKeyId")
  valid_602318 = validateParameter(valid_602318, JString, required = false,
                                 default = nil)
  if valid_602318 != nil:
    section.add "KmsKeyId", valid_602318
  var valid_602319 = formData.getOrDefault("PreSignedUrl")
  valid_602319 = validateParameter(valid_602319, JString, required = false,
                                 default = nil)
  if valid_602319 != nil:
    section.add "PreSignedUrl", valid_602319
  var valid_602320 = formData.getOrDefault("CopyTags")
  valid_602320 = validateParameter(valid_602320, JBool, required = false, default = nil)
  if valid_602320 != nil:
    section.add "CopyTags", valid_602320
  var valid_602321 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_602321 = validateParameter(valid_602321, JString, required = true,
                                 default = nil)
  if valid_602321 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_602321
  var valid_602322 = formData.getOrDefault("Tags")
  valid_602322 = validateParameter(valid_602322, JArray, required = false,
                                 default = nil)
  if valid_602322 != nil:
    section.add "Tags", valid_602322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602323: Call_PostCopyDBClusterSnapshot_602304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602323.validator(path, query, header, formData, body)
  let scheme = call_602323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602323.url(scheme.get, call_602323.host, call_602323.base,
                         call_602323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602323, url, valid)

proc call*(call_602324: Call_PostCopyDBClusterSnapshot_602304;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_602325 = newJObject()
  var formData_602326 = newJObject()
  add(formData_602326, "SourceRegion", newJString(SourceRegion))
  add(formData_602326, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_602326, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602326, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_602326, "CopyTags", newJBool(CopyTags))
  add(formData_602326, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_602325, "Action", newJString(Action))
  if Tags != nil:
    formData_602326.add "Tags", Tags
  add(query_602325, "Version", newJString(Version))
  result = call_602324.call(nil, query_602325, nil, formData_602326, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_602304(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_602305, base: "/",
    url: url_PostCopyDBClusterSnapshot_602306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_602282 = ref object of OpenApiRestCall_601389
proc url_GetCopyDBClusterSnapshot_602284(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_602283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_602285 = query.getOrDefault("Tags")
  valid_602285 = validateParameter(valid_602285, JArray, required = false,
                                 default = nil)
  if valid_602285 != nil:
    section.add "Tags", valid_602285
  var valid_602286 = query.getOrDefault("KmsKeyId")
  valid_602286 = validateParameter(valid_602286, JString, required = false,
                                 default = nil)
  if valid_602286 != nil:
    section.add "KmsKeyId", valid_602286
  var valid_602287 = query.getOrDefault("PreSignedUrl")
  valid_602287 = validateParameter(valid_602287, JString, required = false,
                                 default = nil)
  if valid_602287 != nil:
    section.add "PreSignedUrl", valid_602287
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_602288 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_602288 = validateParameter(valid_602288, JString, required = true,
                                 default = nil)
  if valid_602288 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_602288
  var valid_602289 = query.getOrDefault("SourceRegion")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "SourceRegion", valid_602289
  var valid_602290 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_602290 = validateParameter(valid_602290, JString, required = true,
                                 default = nil)
  if valid_602290 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_602290
  var valid_602291 = query.getOrDefault("Action")
  valid_602291 = validateParameter(valid_602291, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_602291 != nil:
    section.add "Action", valid_602291
  var valid_602292 = query.getOrDefault("CopyTags")
  valid_602292 = validateParameter(valid_602292, JBool, required = false, default = nil)
  if valid_602292 != nil:
    section.add "CopyTags", valid_602292
  var valid_602293 = query.getOrDefault("Version")
  valid_602293 = validateParameter(valid_602293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602293 != nil:
    section.add "Version", valid_602293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602294 = header.getOrDefault("X-Amz-Signature")
  valid_602294 = validateParameter(valid_602294, JString, required = false,
                                 default = nil)
  if valid_602294 != nil:
    section.add "X-Amz-Signature", valid_602294
  var valid_602295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602295 = validateParameter(valid_602295, JString, required = false,
                                 default = nil)
  if valid_602295 != nil:
    section.add "X-Amz-Content-Sha256", valid_602295
  var valid_602296 = header.getOrDefault("X-Amz-Date")
  valid_602296 = validateParameter(valid_602296, JString, required = false,
                                 default = nil)
  if valid_602296 != nil:
    section.add "X-Amz-Date", valid_602296
  var valid_602297 = header.getOrDefault("X-Amz-Credential")
  valid_602297 = validateParameter(valid_602297, JString, required = false,
                                 default = nil)
  if valid_602297 != nil:
    section.add "X-Amz-Credential", valid_602297
  var valid_602298 = header.getOrDefault("X-Amz-Security-Token")
  valid_602298 = validateParameter(valid_602298, JString, required = false,
                                 default = nil)
  if valid_602298 != nil:
    section.add "X-Amz-Security-Token", valid_602298
  var valid_602299 = header.getOrDefault("X-Amz-Algorithm")
  valid_602299 = validateParameter(valid_602299, JString, required = false,
                                 default = nil)
  if valid_602299 != nil:
    section.add "X-Amz-Algorithm", valid_602299
  var valid_602300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602300 = validateParameter(valid_602300, JString, required = false,
                                 default = nil)
  if valid_602300 != nil:
    section.add "X-Amz-SignedHeaders", valid_602300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602301: Call_GetCopyDBClusterSnapshot_602282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602301.validator(path, query, header, formData, body)
  let scheme = call_602301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602301.url(scheme.get, call_602301.host, call_602301.base,
                         call_602301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602301, url, valid)

proc call*(call_602302: Call_GetCopyDBClusterSnapshot_602282;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_602303 = newJObject()
  if Tags != nil:
    query_602303.add "Tags", Tags
  add(query_602303, "KmsKeyId", newJString(KmsKeyId))
  add(query_602303, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_602303, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_602303, "SourceRegion", newJString(SourceRegion))
  add(query_602303, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_602303, "Action", newJString(Action))
  add(query_602303, "CopyTags", newJBool(CopyTags))
  add(query_602303, "Version", newJString(Version))
  result = call_602302.call(nil, query_602303, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_602282(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_602283, base: "/",
    url: url_GetCopyDBClusterSnapshot_602284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_602346 = ref object of OpenApiRestCall_601389
proc url_PostCopyDBParameterGroup_602348(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_602347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602349 = query.getOrDefault("Action")
  valid_602349 = validateParameter(valid_602349, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_602349 != nil:
    section.add "Action", valid_602349
  var valid_602350 = query.getOrDefault("Version")
  valid_602350 = validateParameter(valid_602350, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602350 != nil:
    section.add "Version", valid_602350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602351 = header.getOrDefault("X-Amz-Signature")
  valid_602351 = validateParameter(valid_602351, JString, required = false,
                                 default = nil)
  if valid_602351 != nil:
    section.add "X-Amz-Signature", valid_602351
  var valid_602352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602352 = validateParameter(valid_602352, JString, required = false,
                                 default = nil)
  if valid_602352 != nil:
    section.add "X-Amz-Content-Sha256", valid_602352
  var valid_602353 = header.getOrDefault("X-Amz-Date")
  valid_602353 = validateParameter(valid_602353, JString, required = false,
                                 default = nil)
  if valid_602353 != nil:
    section.add "X-Amz-Date", valid_602353
  var valid_602354 = header.getOrDefault("X-Amz-Credential")
  valid_602354 = validateParameter(valid_602354, JString, required = false,
                                 default = nil)
  if valid_602354 != nil:
    section.add "X-Amz-Credential", valid_602354
  var valid_602355 = header.getOrDefault("X-Amz-Security-Token")
  valid_602355 = validateParameter(valid_602355, JString, required = false,
                                 default = nil)
  if valid_602355 != nil:
    section.add "X-Amz-Security-Token", valid_602355
  var valid_602356 = header.getOrDefault("X-Amz-Algorithm")
  valid_602356 = validateParameter(valid_602356, JString, required = false,
                                 default = nil)
  if valid_602356 != nil:
    section.add "X-Amz-Algorithm", valid_602356
  var valid_602357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602357 = validateParameter(valid_602357, JString, required = false,
                                 default = nil)
  if valid_602357 != nil:
    section.add "X-Amz-SignedHeaders", valid_602357
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_602358 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_602358 = validateParameter(valid_602358, JString, required = true,
                                 default = nil)
  if valid_602358 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_602358
  var valid_602359 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_602359 = validateParameter(valid_602359, JString, required = true,
                                 default = nil)
  if valid_602359 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_602359
  var valid_602360 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_602360 = validateParameter(valid_602360, JString, required = true,
                                 default = nil)
  if valid_602360 != nil:
    section.add "TargetDBParameterGroupDescription", valid_602360
  var valid_602361 = formData.getOrDefault("Tags")
  valid_602361 = validateParameter(valid_602361, JArray, required = false,
                                 default = nil)
  if valid_602361 != nil:
    section.add "Tags", valid_602361
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602362: Call_PostCopyDBParameterGroup_602346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_602362.validator(path, query, header, formData, body)
  let scheme = call_602362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602362.url(scheme.get, call_602362.host, call_602362.base,
                         call_602362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602362, url, valid)

proc call*(call_602363: Call_PostCopyDBParameterGroup_602346;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_602364 = newJObject()
  var formData_602365 = newJObject()
  add(formData_602365, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_602365, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_602365, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_602364, "Action", newJString(Action))
  if Tags != nil:
    formData_602365.add "Tags", Tags
  add(query_602364, "Version", newJString(Version))
  result = call_602363.call(nil, query_602364, nil, formData_602365, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_602346(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_602347, base: "/",
    url: url_PostCopyDBParameterGroup_602348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_602327 = ref object of OpenApiRestCall_601389
proc url_GetCopyDBParameterGroup_602329(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_602328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_602330 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_602330 = validateParameter(valid_602330, JString, required = true,
                                 default = nil)
  if valid_602330 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_602330
  var valid_602331 = query.getOrDefault("Tags")
  valid_602331 = validateParameter(valid_602331, JArray, required = false,
                                 default = nil)
  if valid_602331 != nil:
    section.add "Tags", valid_602331
  var valid_602332 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_602332 = validateParameter(valid_602332, JString, required = true,
                                 default = nil)
  if valid_602332 != nil:
    section.add "TargetDBParameterGroupDescription", valid_602332
  var valid_602333 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_602333 = validateParameter(valid_602333, JString, required = true,
                                 default = nil)
  if valid_602333 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_602333
  var valid_602334 = query.getOrDefault("Action")
  valid_602334 = validateParameter(valid_602334, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_602334 != nil:
    section.add "Action", valid_602334
  var valid_602335 = query.getOrDefault("Version")
  valid_602335 = validateParameter(valid_602335, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602335 != nil:
    section.add "Version", valid_602335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602336 = header.getOrDefault("X-Amz-Signature")
  valid_602336 = validateParameter(valid_602336, JString, required = false,
                                 default = nil)
  if valid_602336 != nil:
    section.add "X-Amz-Signature", valid_602336
  var valid_602337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602337 = validateParameter(valid_602337, JString, required = false,
                                 default = nil)
  if valid_602337 != nil:
    section.add "X-Amz-Content-Sha256", valid_602337
  var valid_602338 = header.getOrDefault("X-Amz-Date")
  valid_602338 = validateParameter(valid_602338, JString, required = false,
                                 default = nil)
  if valid_602338 != nil:
    section.add "X-Amz-Date", valid_602338
  var valid_602339 = header.getOrDefault("X-Amz-Credential")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "X-Amz-Credential", valid_602339
  var valid_602340 = header.getOrDefault("X-Amz-Security-Token")
  valid_602340 = validateParameter(valid_602340, JString, required = false,
                                 default = nil)
  if valid_602340 != nil:
    section.add "X-Amz-Security-Token", valid_602340
  var valid_602341 = header.getOrDefault("X-Amz-Algorithm")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "X-Amz-Algorithm", valid_602341
  var valid_602342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602342 = validateParameter(valid_602342, JString, required = false,
                                 default = nil)
  if valid_602342 != nil:
    section.add "X-Amz-SignedHeaders", valid_602342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602343: Call_GetCopyDBParameterGroup_602327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_602343.validator(path, query, header, formData, body)
  let scheme = call_602343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602343.url(scheme.get, call_602343.host, call_602343.base,
                         call_602343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602343, url, valid)

proc call*(call_602344: Call_GetCopyDBParameterGroup_602327;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602345 = newJObject()
  add(query_602345, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_602345.add "Tags", Tags
  add(query_602345, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_602345, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_602345, "Action", newJString(Action))
  add(query_602345, "Version", newJString(Version))
  result = call_602344.call(nil, query_602345, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_602327(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_602328, base: "/",
    url: url_GetCopyDBParameterGroup_602329, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_602389 = ref object of OpenApiRestCall_601389
proc url_PostCopyDBSnapshot_602391(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_602390(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602392 = query.getOrDefault("Action")
  valid_602392 = validateParameter(valid_602392, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_602392 != nil:
    section.add "Action", valid_602392
  var valid_602393 = query.getOrDefault("Version")
  valid_602393 = validateParameter(valid_602393, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602393 != nil:
    section.add "Version", valid_602393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602394 = header.getOrDefault("X-Amz-Signature")
  valid_602394 = validateParameter(valid_602394, JString, required = false,
                                 default = nil)
  if valid_602394 != nil:
    section.add "X-Amz-Signature", valid_602394
  var valid_602395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602395 = validateParameter(valid_602395, JString, required = false,
                                 default = nil)
  if valid_602395 != nil:
    section.add "X-Amz-Content-Sha256", valid_602395
  var valid_602396 = header.getOrDefault("X-Amz-Date")
  valid_602396 = validateParameter(valid_602396, JString, required = false,
                                 default = nil)
  if valid_602396 != nil:
    section.add "X-Amz-Date", valid_602396
  var valid_602397 = header.getOrDefault("X-Amz-Credential")
  valid_602397 = validateParameter(valid_602397, JString, required = false,
                                 default = nil)
  if valid_602397 != nil:
    section.add "X-Amz-Credential", valid_602397
  var valid_602398 = header.getOrDefault("X-Amz-Security-Token")
  valid_602398 = validateParameter(valid_602398, JString, required = false,
                                 default = nil)
  if valid_602398 != nil:
    section.add "X-Amz-Security-Token", valid_602398
  var valid_602399 = header.getOrDefault("X-Amz-Algorithm")
  valid_602399 = validateParameter(valid_602399, JString, required = false,
                                 default = nil)
  if valid_602399 != nil:
    section.add "X-Amz-Algorithm", valid_602399
  var valid_602400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602400 = validateParameter(valid_602400, JString, required = false,
                                 default = nil)
  if valid_602400 != nil:
    section.add "X-Amz-SignedHeaders", valid_602400
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_602401 = formData.getOrDefault("SourceRegion")
  valid_602401 = validateParameter(valid_602401, JString, required = false,
                                 default = nil)
  if valid_602401 != nil:
    section.add "SourceRegion", valid_602401
  var valid_602402 = formData.getOrDefault("KmsKeyId")
  valid_602402 = validateParameter(valid_602402, JString, required = false,
                                 default = nil)
  if valid_602402 != nil:
    section.add "KmsKeyId", valid_602402
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_602403 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_602403 = validateParameter(valid_602403, JString, required = true,
                                 default = nil)
  if valid_602403 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_602403
  var valid_602404 = formData.getOrDefault("CopyTags")
  valid_602404 = validateParameter(valid_602404, JBool, required = false, default = nil)
  if valid_602404 != nil:
    section.add "CopyTags", valid_602404
  var valid_602405 = formData.getOrDefault("PreSignedUrl")
  valid_602405 = validateParameter(valid_602405, JString, required = false,
                                 default = nil)
  if valid_602405 != nil:
    section.add "PreSignedUrl", valid_602405
  var valid_602406 = formData.getOrDefault("Tags")
  valid_602406 = validateParameter(valid_602406, JArray, required = false,
                                 default = nil)
  if valid_602406 != nil:
    section.add "Tags", valid_602406
  var valid_602407 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_602407 = validateParameter(valid_602407, JString, required = true,
                                 default = nil)
  if valid_602407 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_602407
  var valid_602408 = formData.getOrDefault("OptionGroupName")
  valid_602408 = validateParameter(valid_602408, JString, required = false,
                                 default = nil)
  if valid_602408 != nil:
    section.add "OptionGroupName", valid_602408
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602409: Call_PostCopyDBSnapshot_602389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_602409.validator(path, query, header, formData, body)
  let scheme = call_602409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602409.url(scheme.get, call_602409.host, call_602409.base,
                         call_602409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602409, url, valid)

proc call*(call_602410: Call_PostCopyDBSnapshot_602389;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_602411 = newJObject()
  var formData_602412 = newJObject()
  add(formData_602412, "SourceRegion", newJString(SourceRegion))
  add(formData_602412, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602412, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_602412, "CopyTags", newJBool(CopyTags))
  add(formData_602412, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_602411, "Action", newJString(Action))
  if Tags != nil:
    formData_602412.add "Tags", Tags
  add(formData_602412, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_602412, "OptionGroupName", newJString(OptionGroupName))
  add(query_602411, "Version", newJString(Version))
  result = call_602410.call(nil, query_602411, nil, formData_602412, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_602389(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_602390, base: "/",
    url: url_PostCopyDBSnapshot_602391, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_602366 = ref object of OpenApiRestCall_601389
proc url_GetCopyDBSnapshot_602368(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_602367(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_602369 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_602369 = validateParameter(valid_602369, JString, required = true,
                                 default = nil)
  if valid_602369 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_602369
  var valid_602370 = query.getOrDefault("Tags")
  valid_602370 = validateParameter(valid_602370, JArray, required = false,
                                 default = nil)
  if valid_602370 != nil:
    section.add "Tags", valid_602370
  var valid_602371 = query.getOrDefault("KmsKeyId")
  valid_602371 = validateParameter(valid_602371, JString, required = false,
                                 default = nil)
  if valid_602371 != nil:
    section.add "KmsKeyId", valid_602371
  var valid_602372 = query.getOrDefault("PreSignedUrl")
  valid_602372 = validateParameter(valid_602372, JString, required = false,
                                 default = nil)
  if valid_602372 != nil:
    section.add "PreSignedUrl", valid_602372
  var valid_602373 = query.getOrDefault("SourceRegion")
  valid_602373 = validateParameter(valid_602373, JString, required = false,
                                 default = nil)
  if valid_602373 != nil:
    section.add "SourceRegion", valid_602373
  var valid_602374 = query.getOrDefault("Action")
  valid_602374 = validateParameter(valid_602374, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_602374 != nil:
    section.add "Action", valid_602374
  var valid_602375 = query.getOrDefault("OptionGroupName")
  valid_602375 = validateParameter(valid_602375, JString, required = false,
                                 default = nil)
  if valid_602375 != nil:
    section.add "OptionGroupName", valid_602375
  var valid_602376 = query.getOrDefault("CopyTags")
  valid_602376 = validateParameter(valid_602376, JBool, required = false, default = nil)
  if valid_602376 != nil:
    section.add "CopyTags", valid_602376
  var valid_602377 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_602377 = validateParameter(valid_602377, JString, required = true,
                                 default = nil)
  if valid_602377 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_602377
  var valid_602378 = query.getOrDefault("Version")
  valid_602378 = validateParameter(valid_602378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602378 != nil:
    section.add "Version", valid_602378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602379 = header.getOrDefault("X-Amz-Signature")
  valid_602379 = validateParameter(valid_602379, JString, required = false,
                                 default = nil)
  if valid_602379 != nil:
    section.add "X-Amz-Signature", valid_602379
  var valid_602380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602380 = validateParameter(valid_602380, JString, required = false,
                                 default = nil)
  if valid_602380 != nil:
    section.add "X-Amz-Content-Sha256", valid_602380
  var valid_602381 = header.getOrDefault("X-Amz-Date")
  valid_602381 = validateParameter(valid_602381, JString, required = false,
                                 default = nil)
  if valid_602381 != nil:
    section.add "X-Amz-Date", valid_602381
  var valid_602382 = header.getOrDefault("X-Amz-Credential")
  valid_602382 = validateParameter(valid_602382, JString, required = false,
                                 default = nil)
  if valid_602382 != nil:
    section.add "X-Amz-Credential", valid_602382
  var valid_602383 = header.getOrDefault("X-Amz-Security-Token")
  valid_602383 = validateParameter(valid_602383, JString, required = false,
                                 default = nil)
  if valid_602383 != nil:
    section.add "X-Amz-Security-Token", valid_602383
  var valid_602384 = header.getOrDefault("X-Amz-Algorithm")
  valid_602384 = validateParameter(valid_602384, JString, required = false,
                                 default = nil)
  if valid_602384 != nil:
    section.add "X-Amz-Algorithm", valid_602384
  var valid_602385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602385 = validateParameter(valid_602385, JString, required = false,
                                 default = nil)
  if valid_602385 != nil:
    section.add "X-Amz-SignedHeaders", valid_602385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602386: Call_GetCopyDBSnapshot_602366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_602386.validator(path, query, header, formData, body)
  let scheme = call_602386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602386.url(scheme.get, call_602386.host, call_602386.base,
                         call_602386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602386, url, valid)

proc call*(call_602387: Call_GetCopyDBSnapshot_602366;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_602388 = newJObject()
  add(query_602388, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_602388.add "Tags", Tags
  add(query_602388, "KmsKeyId", newJString(KmsKeyId))
  add(query_602388, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_602388, "SourceRegion", newJString(SourceRegion))
  add(query_602388, "Action", newJString(Action))
  add(query_602388, "OptionGroupName", newJString(OptionGroupName))
  add(query_602388, "CopyTags", newJBool(CopyTags))
  add(query_602388, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_602388, "Version", newJString(Version))
  result = call_602387.call(nil, query_602388, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_602366(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_602367,
    base: "/", url: url_GetCopyDBSnapshot_602368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_602432 = ref object of OpenApiRestCall_601389
proc url_PostCopyOptionGroup_602434(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_602433(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602435 = query.getOrDefault("Action")
  valid_602435 = validateParameter(valid_602435, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_602435 != nil:
    section.add "Action", valid_602435
  var valid_602436 = query.getOrDefault("Version")
  valid_602436 = validateParameter(valid_602436, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602436 != nil:
    section.add "Version", valid_602436
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602437 = header.getOrDefault("X-Amz-Signature")
  valid_602437 = validateParameter(valid_602437, JString, required = false,
                                 default = nil)
  if valid_602437 != nil:
    section.add "X-Amz-Signature", valid_602437
  var valid_602438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602438 = validateParameter(valid_602438, JString, required = false,
                                 default = nil)
  if valid_602438 != nil:
    section.add "X-Amz-Content-Sha256", valid_602438
  var valid_602439 = header.getOrDefault("X-Amz-Date")
  valid_602439 = validateParameter(valid_602439, JString, required = false,
                                 default = nil)
  if valid_602439 != nil:
    section.add "X-Amz-Date", valid_602439
  var valid_602440 = header.getOrDefault("X-Amz-Credential")
  valid_602440 = validateParameter(valid_602440, JString, required = false,
                                 default = nil)
  if valid_602440 != nil:
    section.add "X-Amz-Credential", valid_602440
  var valid_602441 = header.getOrDefault("X-Amz-Security-Token")
  valid_602441 = validateParameter(valid_602441, JString, required = false,
                                 default = nil)
  if valid_602441 != nil:
    section.add "X-Amz-Security-Token", valid_602441
  var valid_602442 = header.getOrDefault("X-Amz-Algorithm")
  valid_602442 = validateParameter(valid_602442, JString, required = false,
                                 default = nil)
  if valid_602442 != nil:
    section.add "X-Amz-Algorithm", valid_602442
  var valid_602443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602443 = validateParameter(valid_602443, JString, required = false,
                                 default = nil)
  if valid_602443 != nil:
    section.add "X-Amz-SignedHeaders", valid_602443
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_602444 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_602444 = validateParameter(valid_602444, JString, required = true,
                                 default = nil)
  if valid_602444 != nil:
    section.add "TargetOptionGroupIdentifier", valid_602444
  var valid_602445 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_602445 = validateParameter(valid_602445, JString, required = true,
                                 default = nil)
  if valid_602445 != nil:
    section.add "TargetOptionGroupDescription", valid_602445
  var valid_602446 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_602446 = validateParameter(valid_602446, JString, required = true,
                                 default = nil)
  if valid_602446 != nil:
    section.add "SourceOptionGroupIdentifier", valid_602446
  var valid_602447 = formData.getOrDefault("Tags")
  valid_602447 = validateParameter(valid_602447, JArray, required = false,
                                 default = nil)
  if valid_602447 != nil:
    section.add "Tags", valid_602447
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602448: Call_PostCopyOptionGroup_602432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_602448.validator(path, query, header, formData, body)
  let scheme = call_602448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602448.url(scheme.get, call_602448.host, call_602448.base,
                         call_602448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602448, url, valid)

proc call*(call_602449: Call_PostCopyOptionGroup_602432;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_602450 = newJObject()
  var formData_602451 = newJObject()
  add(formData_602451, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_602451, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_602451, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_602450, "Action", newJString(Action))
  if Tags != nil:
    formData_602451.add "Tags", Tags
  add(query_602450, "Version", newJString(Version))
  result = call_602449.call(nil, query_602450, nil, formData_602451, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_602432(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_602433, base: "/",
    url: url_PostCopyOptionGroup_602434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_602413 = ref object of OpenApiRestCall_601389
proc url_GetCopyOptionGroup_602415(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_602414(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_602416 = query.getOrDefault("Tags")
  valid_602416 = validateParameter(valid_602416, JArray, required = false,
                                 default = nil)
  if valid_602416 != nil:
    section.add "Tags", valid_602416
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_602417 = query.getOrDefault("TargetOptionGroupDescription")
  valid_602417 = validateParameter(valid_602417, JString, required = true,
                                 default = nil)
  if valid_602417 != nil:
    section.add "TargetOptionGroupDescription", valid_602417
  var valid_602418 = query.getOrDefault("Action")
  valid_602418 = validateParameter(valid_602418, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_602418 != nil:
    section.add "Action", valid_602418
  var valid_602419 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_602419 = validateParameter(valid_602419, JString, required = true,
                                 default = nil)
  if valid_602419 != nil:
    section.add "TargetOptionGroupIdentifier", valid_602419
  var valid_602420 = query.getOrDefault("Version")
  valid_602420 = validateParameter(valid_602420, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602420 != nil:
    section.add "Version", valid_602420
  var valid_602421 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_602421 = validateParameter(valid_602421, JString, required = true,
                                 default = nil)
  if valid_602421 != nil:
    section.add "SourceOptionGroupIdentifier", valid_602421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602422 = header.getOrDefault("X-Amz-Signature")
  valid_602422 = validateParameter(valid_602422, JString, required = false,
                                 default = nil)
  if valid_602422 != nil:
    section.add "X-Amz-Signature", valid_602422
  var valid_602423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602423 = validateParameter(valid_602423, JString, required = false,
                                 default = nil)
  if valid_602423 != nil:
    section.add "X-Amz-Content-Sha256", valid_602423
  var valid_602424 = header.getOrDefault("X-Amz-Date")
  valid_602424 = validateParameter(valid_602424, JString, required = false,
                                 default = nil)
  if valid_602424 != nil:
    section.add "X-Amz-Date", valid_602424
  var valid_602425 = header.getOrDefault("X-Amz-Credential")
  valid_602425 = validateParameter(valid_602425, JString, required = false,
                                 default = nil)
  if valid_602425 != nil:
    section.add "X-Amz-Credential", valid_602425
  var valid_602426 = header.getOrDefault("X-Amz-Security-Token")
  valid_602426 = validateParameter(valid_602426, JString, required = false,
                                 default = nil)
  if valid_602426 != nil:
    section.add "X-Amz-Security-Token", valid_602426
  var valid_602427 = header.getOrDefault("X-Amz-Algorithm")
  valid_602427 = validateParameter(valid_602427, JString, required = false,
                                 default = nil)
  if valid_602427 != nil:
    section.add "X-Amz-Algorithm", valid_602427
  var valid_602428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602428 = validateParameter(valid_602428, JString, required = false,
                                 default = nil)
  if valid_602428 != nil:
    section.add "X-Amz-SignedHeaders", valid_602428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602429: Call_GetCopyOptionGroup_602413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_602429.validator(path, query, header, formData, body)
  let scheme = call_602429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602429.url(scheme.get, call_602429.host, call_602429.base,
                         call_602429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602429, url, valid)

proc call*(call_602430: Call_GetCopyOptionGroup_602413;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_602431 = newJObject()
  if Tags != nil:
    query_602431.add "Tags", Tags
  add(query_602431, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_602431, "Action", newJString(Action))
  add(query_602431, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_602431, "Version", newJString(Version))
  add(query_602431, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_602430.call(nil, query_602431, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_602413(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_602414,
    base: "/", url: url_GetCopyOptionGroup_602415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_602471 = ref object of OpenApiRestCall_601389
proc url_PostCreateCustomAvailabilityZone_602473(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_602472(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602474 = query.getOrDefault("Action")
  valid_602474 = validateParameter(valid_602474, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_602474 != nil:
    section.add "Action", valid_602474
  var valid_602475 = query.getOrDefault("Version")
  valid_602475 = validateParameter(valid_602475, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602475 != nil:
    section.add "Version", valid_602475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602476 = header.getOrDefault("X-Amz-Signature")
  valid_602476 = validateParameter(valid_602476, JString, required = false,
                                 default = nil)
  if valid_602476 != nil:
    section.add "X-Amz-Signature", valid_602476
  var valid_602477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602477 = validateParameter(valid_602477, JString, required = false,
                                 default = nil)
  if valid_602477 != nil:
    section.add "X-Amz-Content-Sha256", valid_602477
  var valid_602478 = header.getOrDefault("X-Amz-Date")
  valid_602478 = validateParameter(valid_602478, JString, required = false,
                                 default = nil)
  if valid_602478 != nil:
    section.add "X-Amz-Date", valid_602478
  var valid_602479 = header.getOrDefault("X-Amz-Credential")
  valid_602479 = validateParameter(valid_602479, JString, required = false,
                                 default = nil)
  if valid_602479 != nil:
    section.add "X-Amz-Credential", valid_602479
  var valid_602480 = header.getOrDefault("X-Amz-Security-Token")
  valid_602480 = validateParameter(valid_602480, JString, required = false,
                                 default = nil)
  if valid_602480 != nil:
    section.add "X-Amz-Security-Token", valid_602480
  var valid_602481 = header.getOrDefault("X-Amz-Algorithm")
  valid_602481 = validateParameter(valid_602481, JString, required = false,
                                 default = nil)
  if valid_602481 != nil:
    section.add "X-Amz-Algorithm", valid_602481
  var valid_602482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602482 = validateParameter(valid_602482, JString, required = false,
                                 default = nil)
  if valid_602482 != nil:
    section.add "X-Amz-SignedHeaders", valid_602482
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_602483 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_602483 = validateParameter(valid_602483, JString, required = false,
                                 default = nil)
  if valid_602483 != nil:
    section.add "VpnTunnelOriginatorIP", valid_602483
  var valid_602484 = formData.getOrDefault("ExistingVpnId")
  valid_602484 = validateParameter(valid_602484, JString, required = false,
                                 default = nil)
  if valid_602484 != nil:
    section.add "ExistingVpnId", valid_602484
  var valid_602485 = formData.getOrDefault("NewVpnTunnelName")
  valid_602485 = validateParameter(valid_602485, JString, required = false,
                                 default = nil)
  if valid_602485 != nil:
    section.add "NewVpnTunnelName", valid_602485
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_602486 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_602486 = validateParameter(valid_602486, JString, required = true,
                                 default = nil)
  if valid_602486 != nil:
    section.add "CustomAvailabilityZoneName", valid_602486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602487: Call_PostCreateCustomAvailabilityZone_602471;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_602487.validator(path, query, header, formData, body)
  let scheme = call_602487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602487.url(scheme.get, call_602487.host, call_602487.base,
                         call_602487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602487, url, valid)

proc call*(call_602488: Call_PostCreateCustomAvailabilityZone_602471;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_602489 = newJObject()
  var formData_602490 = newJObject()
  add(formData_602490, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_602490, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_602490, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_602489, "Action", newJString(Action))
  add(formData_602490, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_602489, "Version", newJString(Version))
  result = call_602488.call(nil, query_602489, nil, formData_602490, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_602471(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_602472, base: "/",
    url: url_PostCreateCustomAvailabilityZone_602473,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_602452 = ref object of OpenApiRestCall_601389
proc url_GetCreateCustomAvailabilityZone_602454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_602453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_602455 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_602455 = validateParameter(valid_602455, JString, required = false,
                                 default = nil)
  if valid_602455 != nil:
    section.add "VpnTunnelOriginatorIP", valid_602455
  var valid_602456 = query.getOrDefault("ExistingVpnId")
  valid_602456 = validateParameter(valid_602456, JString, required = false,
                                 default = nil)
  if valid_602456 != nil:
    section.add "ExistingVpnId", valid_602456
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602457 = query.getOrDefault("Action")
  valid_602457 = validateParameter(valid_602457, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_602457 != nil:
    section.add "Action", valid_602457
  var valid_602458 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_602458 = validateParameter(valid_602458, JString, required = true,
                                 default = nil)
  if valid_602458 != nil:
    section.add "CustomAvailabilityZoneName", valid_602458
  var valid_602459 = query.getOrDefault("Version")
  valid_602459 = validateParameter(valid_602459, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602459 != nil:
    section.add "Version", valid_602459
  var valid_602460 = query.getOrDefault("NewVpnTunnelName")
  valid_602460 = validateParameter(valid_602460, JString, required = false,
                                 default = nil)
  if valid_602460 != nil:
    section.add "NewVpnTunnelName", valid_602460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602461 = header.getOrDefault("X-Amz-Signature")
  valid_602461 = validateParameter(valid_602461, JString, required = false,
                                 default = nil)
  if valid_602461 != nil:
    section.add "X-Amz-Signature", valid_602461
  var valid_602462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602462 = validateParameter(valid_602462, JString, required = false,
                                 default = nil)
  if valid_602462 != nil:
    section.add "X-Amz-Content-Sha256", valid_602462
  var valid_602463 = header.getOrDefault("X-Amz-Date")
  valid_602463 = validateParameter(valid_602463, JString, required = false,
                                 default = nil)
  if valid_602463 != nil:
    section.add "X-Amz-Date", valid_602463
  var valid_602464 = header.getOrDefault("X-Amz-Credential")
  valid_602464 = validateParameter(valid_602464, JString, required = false,
                                 default = nil)
  if valid_602464 != nil:
    section.add "X-Amz-Credential", valid_602464
  var valid_602465 = header.getOrDefault("X-Amz-Security-Token")
  valid_602465 = validateParameter(valid_602465, JString, required = false,
                                 default = nil)
  if valid_602465 != nil:
    section.add "X-Amz-Security-Token", valid_602465
  var valid_602466 = header.getOrDefault("X-Amz-Algorithm")
  valid_602466 = validateParameter(valid_602466, JString, required = false,
                                 default = nil)
  if valid_602466 != nil:
    section.add "X-Amz-Algorithm", valid_602466
  var valid_602467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602467 = validateParameter(valid_602467, JString, required = false,
                                 default = nil)
  if valid_602467 != nil:
    section.add "X-Amz-SignedHeaders", valid_602467
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602468: Call_GetCreateCustomAvailabilityZone_602452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_602468.validator(path, query, header, formData, body)
  let scheme = call_602468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602468.url(scheme.get, call_602468.host, call_602468.base,
                         call_602468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602468, url, valid)

proc call*(call_602469: Call_GetCreateCustomAvailabilityZone_602452;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  var query_602470 = newJObject()
  add(query_602470, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_602470, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_602470, "Action", newJString(Action))
  add(query_602470, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_602470, "Version", newJString(Version))
  add(query_602470, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_602469.call(nil, query_602470, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_602452(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_602453, base: "/",
    url: url_GetCreateCustomAvailabilityZone_602454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_602559 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBCluster_602561(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_602560(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602562 = query.getOrDefault("Action")
  valid_602562 = validateParameter(valid_602562, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_602562 != nil:
    section.add "Action", valid_602562
  var valid_602563 = query.getOrDefault("Version")
  valid_602563 = validateParameter(valid_602563, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602563 != nil:
    section.add "Version", valid_602563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_602564 = header.getOrDefault("X-Amz-Security-Token")
  valid_602564 = validateParameter(valid_602564, JString, required = false,
                                 default = nil)
  if valid_602564 != nil:
    section.add "X-Amz-Security-Token", valid_602564
  var valid_602565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602565 = validateParameter(valid_602565, JString, required = false,
                                 default = nil)
  if valid_602565 != nil:
    section.add "X-Amz-SignedHeaders", valid_602565
  var valid_602566 = header.getOrDefault("X-Amz-Signature")
  valid_602566 = validateParameter(valid_602566, JString, required = false,
                                 default = nil)
  if valid_602566 != nil:
    section.add "X-Amz-Signature", valid_602566
  var valid_602567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602567 = validateParameter(valid_602567, JString, required = false,
                                 default = nil)
  if valid_602567 != nil:
    section.add "X-Amz-Content-Sha256", valid_602567
  var valid_602568 = header.getOrDefault("X-Amz-Date")
  valid_602568 = validateParameter(valid_602568, JString, required = false,
                                 default = nil)
  if valid_602568 != nil:
    section.add "X-Amz-Date", valid_602568
  var valid_602569 = header.getOrDefault("X-Amz-Credential")
  valid_602569 = validateParameter(valid_602569, JString, required = false,
                                 default = nil)
  if valid_602569 != nil:
    section.add "X-Amz-Credential", valid_602569
  var valid_602570 = header.getOrDefault("X-Amz-Algorithm")
  valid_602570 = validateParameter(valid_602570, JString, required = false,
                                 default = nil)
  if valid_602570 != nil:
    section.add "X-Amz-Algorithm", valid_602570
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_602571 = formData.getOrDefault("Port")
  valid_602571 = validateParameter(valid_602571, JInt, required = false, default = nil)
  if valid_602571 != nil:
    section.add "Port", valid_602571
  var valid_602572 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_602572 = validateParameter(valid_602572, JString, required = false,
                                 default = nil)
  if valid_602572 != nil:
    section.add "GlobalClusterIdentifier", valid_602572
  var valid_602573 = formData.getOrDefault("MasterUsername")
  valid_602573 = validateParameter(valid_602573, JString, required = false,
                                 default = nil)
  if valid_602573 != nil:
    section.add "MasterUsername", valid_602573
  var valid_602574 = formData.getOrDefault("DatabaseName")
  valid_602574 = validateParameter(valid_602574, JString, required = false,
                                 default = nil)
  if valid_602574 != nil:
    section.add "DatabaseName", valid_602574
  var valid_602575 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_602575 = validateParameter(valid_602575, JArray, required = false,
                                 default = nil)
  if valid_602575 != nil:
    section.add "VpcSecurityGroupIds", valid_602575
  var valid_602576 = formData.getOrDefault("AvailabilityZones")
  valid_602576 = validateParameter(valid_602576, JArray, required = false,
                                 default = nil)
  if valid_602576 != nil:
    section.add "AvailabilityZones", valid_602576
  var valid_602577 = formData.getOrDefault("EngineMode")
  valid_602577 = validateParameter(valid_602577, JString, required = false,
                                 default = nil)
  if valid_602577 != nil:
    section.add "EngineMode", valid_602577
  var valid_602578 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_602578 = validateParameter(valid_602578, JArray, required = false,
                                 default = nil)
  if valid_602578 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602578
  var valid_602579 = formData.getOrDefault("DBSubnetGroupName")
  valid_602579 = validateParameter(valid_602579, JString, required = false,
                                 default = nil)
  if valid_602579 != nil:
    section.add "DBSubnetGroupName", valid_602579
  var valid_602580 = formData.getOrDefault("CharacterSetName")
  valid_602580 = validateParameter(valid_602580, JString, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "CharacterSetName", valid_602580
  var valid_602581 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_602581 = validateParameter(valid_602581, JString, required = false,
                                 default = nil)
  if valid_602581 != nil:
    section.add "DBClusterParameterGroupName", valid_602581
  var valid_602582 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_602582 = validateParameter(valid_602582, JBool, required = false, default = nil)
  if valid_602582 != nil:
    section.add "CopyTagsToSnapshot", valid_602582
  var valid_602583 = formData.getOrDefault("DeletionProtection")
  valid_602583 = validateParameter(valid_602583, JBool, required = false, default = nil)
  if valid_602583 != nil:
    section.add "DeletionProtection", valid_602583
  var valid_602584 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602584 = validateParameter(valid_602584, JString, required = false,
                                 default = nil)
  if valid_602584 != nil:
    section.add "PreferredMaintenanceWindow", valid_602584
  var valid_602585 = formData.getOrDefault("PreferredBackupWindow")
  valid_602585 = validateParameter(valid_602585, JString, required = false,
                                 default = nil)
  if valid_602585 != nil:
    section.add "PreferredBackupWindow", valid_602585
  var valid_602586 = formData.getOrDefault("MasterUserPassword")
  valid_602586 = validateParameter(valid_602586, JString, required = false,
                                 default = nil)
  if valid_602586 != nil:
    section.add "MasterUserPassword", valid_602586
  var valid_602587 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_602587 = validateParameter(valid_602587, JString, required = false,
                                 default = nil)
  if valid_602587 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_602587
  var valid_602588 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_602588 = validateParameter(valid_602588, JString, required = false,
                                 default = nil)
  if valid_602588 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_602588
  var valid_602589 = formData.getOrDefault("SourceRegion")
  valid_602589 = validateParameter(valid_602589, JString, required = false,
                                 default = nil)
  if valid_602589 != nil:
    section.add "SourceRegion", valid_602589
  var valid_602590 = formData.getOrDefault("EngineVersion")
  valid_602590 = validateParameter(valid_602590, JString, required = false,
                                 default = nil)
  if valid_602590 != nil:
    section.add "EngineVersion", valid_602590
  var valid_602591 = formData.getOrDefault("BacktrackWindow")
  valid_602591 = validateParameter(valid_602591, JInt, required = false, default = nil)
  if valid_602591 != nil:
    section.add "BacktrackWindow", valid_602591
  var valid_602592 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602592 = validateParameter(valid_602592, JBool, required = false, default = nil)
  if valid_602592 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602592
  var valid_602593 = formData.getOrDefault("BackupRetentionPeriod")
  valid_602593 = validateParameter(valid_602593, JInt, required = false, default = nil)
  if valid_602593 != nil:
    section.add "BackupRetentionPeriod", valid_602593
  var valid_602594 = formData.getOrDefault("KmsKeyId")
  valid_602594 = validateParameter(valid_602594, JString, required = false,
                                 default = nil)
  if valid_602594 != nil:
    section.add "KmsKeyId", valid_602594
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_602595 = formData.getOrDefault("Engine")
  valid_602595 = validateParameter(valid_602595, JString, required = true,
                                 default = nil)
  if valid_602595 != nil:
    section.add "Engine", valid_602595
  var valid_602596 = formData.getOrDefault("PreSignedUrl")
  valid_602596 = validateParameter(valid_602596, JString, required = false,
                                 default = nil)
  if valid_602596 != nil:
    section.add "PreSignedUrl", valid_602596
  var valid_602597 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_602597 = validateParameter(valid_602597, JString, required = false,
                                 default = nil)
  if valid_602597 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_602597
  var valid_602598 = formData.getOrDefault("Tags")
  valid_602598 = validateParameter(valid_602598, JArray, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "Tags", valid_602598
  var valid_602599 = formData.getOrDefault("EnableHttpEndpoint")
  valid_602599 = validateParameter(valid_602599, JBool, required = false, default = nil)
  if valid_602599 != nil:
    section.add "EnableHttpEndpoint", valid_602599
  var valid_602600 = formData.getOrDefault("OptionGroupName")
  valid_602600 = validateParameter(valid_602600, JString, required = false,
                                 default = nil)
  if valid_602600 != nil:
    section.add "OptionGroupName", valid_602600
  var valid_602601 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_602601 = validateParameter(valid_602601, JString, required = false,
                                 default = nil)
  if valid_602601 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_602601
  var valid_602602 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_602602 = validateParameter(valid_602602, JString, required = false,
                                 default = nil)
  if valid_602602 != nil:
    section.add "ReplicationSourceIdentifier", valid_602602
  var valid_602603 = formData.getOrDefault("StorageEncrypted")
  valid_602603 = validateParameter(valid_602603, JBool, required = false, default = nil)
  if valid_602603 != nil:
    section.add "StorageEncrypted", valid_602603
  var valid_602604 = formData.getOrDefault("DBClusterIdentifier")
  valid_602604 = validateParameter(valid_602604, JString, required = true,
                                 default = nil)
  if valid_602604 != nil:
    section.add "DBClusterIdentifier", valid_602604
  var valid_602605 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_602605 = validateParameter(valid_602605, JString, required = false,
                                 default = nil)
  if valid_602605 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_602605
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602606: Call_PostCreateDBCluster_602559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602606.validator(path, query, header, formData, body)
  let scheme = call_602606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602606.url(scheme.get, call_602606.host, call_602606.base,
                         call_602606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602606, url, valid)

proc call*(call_602607: Call_PostCreateDBCluster_602559; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_602608 = newJObject()
  var formData_602609 = newJObject()
  add(formData_602609, "Port", newJInt(Port))
  add(formData_602609, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_602609, "MasterUsername", newJString(MasterUsername))
  add(formData_602609, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_602609.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_602609.add "AvailabilityZones", AvailabilityZones
  add(formData_602609, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_602609.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_602608, "Action", newJString(Action))
  add(formData_602609, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_602609, "CharacterSetName", newJString(CharacterSetName))
  add(formData_602609, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_602609, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_602609, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_602609, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_602609, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_602609, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_602609, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_602609, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_602609, "SourceRegion", newJString(SourceRegion))
  add(formData_602609, "EngineVersion", newJString(EngineVersion))
  add(formData_602609, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_602609, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_602609, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_602609, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602609, "Engine", newJString(Engine))
  add(formData_602609, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_602609, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_602609.add "Tags", Tags
  add(formData_602609, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_602609, "OptionGroupName", newJString(OptionGroupName))
  add(formData_602609, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_602609, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_602608, "Version", newJString(Version))
  add(formData_602609, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_602609, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_602609, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_602607.call(nil, query_602608, nil, formData_602609, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_602559(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_602560, base: "/",
    url: url_PostCreateDBCluster_602561, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_602491 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBCluster_602493(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_602492(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_602512 = query.getOrDefault("GlobalClusterIdentifier")
  valid_602512 = validateParameter(valid_602512, JString, required = false,
                                 default = nil)
  if valid_602512 != nil:
    section.add "GlobalClusterIdentifier", valid_602512
  var valid_602513 = query.getOrDefault("DatabaseName")
  valid_602513 = validateParameter(valid_602513, JString, required = false,
                                 default = nil)
  if valid_602513 != nil:
    section.add "DatabaseName", valid_602513
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_602514 = query.getOrDefault("Engine")
  valid_602514 = validateParameter(valid_602514, JString, required = true,
                                 default = nil)
  if valid_602514 != nil:
    section.add "Engine", valid_602514
  var valid_602515 = query.getOrDefault("CopyTagsToSnapshot")
  valid_602515 = validateParameter(valid_602515, JBool, required = false, default = nil)
  if valid_602515 != nil:
    section.add "CopyTagsToSnapshot", valid_602515
  var valid_602516 = query.getOrDefault("EnableHttpEndpoint")
  valid_602516 = validateParameter(valid_602516, JBool, required = false, default = nil)
  if valid_602516 != nil:
    section.add "EnableHttpEndpoint", valid_602516
  var valid_602517 = query.getOrDefault("KmsKeyId")
  valid_602517 = validateParameter(valid_602517, JString, required = false,
                                 default = nil)
  if valid_602517 != nil:
    section.add "KmsKeyId", valid_602517
  var valid_602518 = query.getOrDefault("PreSignedUrl")
  valid_602518 = validateParameter(valid_602518, JString, required = false,
                                 default = nil)
  if valid_602518 != nil:
    section.add "PreSignedUrl", valid_602518
  var valid_602519 = query.getOrDefault("EngineMode")
  valid_602519 = validateParameter(valid_602519, JString, required = false,
                                 default = nil)
  if valid_602519 != nil:
    section.add "EngineMode", valid_602519
  var valid_602520 = query.getOrDefault("MasterUsername")
  valid_602520 = validateParameter(valid_602520, JString, required = false,
                                 default = nil)
  if valid_602520 != nil:
    section.add "MasterUsername", valid_602520
  var valid_602521 = query.getOrDefault("BackupRetentionPeriod")
  valid_602521 = validateParameter(valid_602521, JInt, required = false, default = nil)
  if valid_602521 != nil:
    section.add "BackupRetentionPeriod", valid_602521
  var valid_602522 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_602522 = validateParameter(valid_602522, JString, required = false,
                                 default = nil)
  if valid_602522 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_602522
  var valid_602523 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_602523 = validateParameter(valid_602523, JArray, required = false,
                                 default = nil)
  if valid_602523 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602523
  var valid_602524 = query.getOrDefault("EngineVersion")
  valid_602524 = validateParameter(valid_602524, JString, required = false,
                                 default = nil)
  if valid_602524 != nil:
    section.add "EngineVersion", valid_602524
  var valid_602525 = query.getOrDefault("Action")
  valid_602525 = validateParameter(valid_602525, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_602525 != nil:
    section.add "Action", valid_602525
  var valid_602526 = query.getOrDefault("VpcSecurityGroupIds")
  valid_602526 = validateParameter(valid_602526, JArray, required = false,
                                 default = nil)
  if valid_602526 != nil:
    section.add "VpcSecurityGroupIds", valid_602526
  var valid_602527 = query.getOrDefault("StorageEncrypted")
  valid_602527 = validateParameter(valid_602527, JBool, required = false, default = nil)
  if valid_602527 != nil:
    section.add "StorageEncrypted", valid_602527
  var valid_602528 = query.getOrDefault("DeletionProtection")
  valid_602528 = validateParameter(valid_602528, JBool, required = false, default = nil)
  if valid_602528 != nil:
    section.add "DeletionProtection", valid_602528
  var valid_602529 = query.getOrDefault("CharacterSetName")
  valid_602529 = validateParameter(valid_602529, JString, required = false,
                                 default = nil)
  if valid_602529 != nil:
    section.add "CharacterSetName", valid_602529
  var valid_602530 = query.getOrDefault("Tags")
  valid_602530 = validateParameter(valid_602530, JArray, required = false,
                                 default = nil)
  if valid_602530 != nil:
    section.add "Tags", valid_602530
  var valid_602531 = query.getOrDefault("DBClusterIdentifier")
  valid_602531 = validateParameter(valid_602531, JString, required = true,
                                 default = nil)
  if valid_602531 != nil:
    section.add "DBClusterIdentifier", valid_602531
  var valid_602532 = query.getOrDefault("BacktrackWindow")
  valid_602532 = validateParameter(valid_602532, JInt, required = false, default = nil)
  if valid_602532 != nil:
    section.add "BacktrackWindow", valid_602532
  var valid_602533 = query.getOrDefault("DBClusterParameterGroupName")
  valid_602533 = validateParameter(valid_602533, JString, required = false,
                                 default = nil)
  if valid_602533 != nil:
    section.add "DBClusterParameterGroupName", valid_602533
  var valid_602534 = query.getOrDefault("AvailabilityZones")
  valid_602534 = validateParameter(valid_602534, JArray, required = false,
                                 default = nil)
  if valid_602534 != nil:
    section.add "AvailabilityZones", valid_602534
  var valid_602535 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_602535 = validateParameter(valid_602535, JString, required = false,
                                 default = nil)
  if valid_602535 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_602535
  var valid_602536 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_602536 = validateParameter(valid_602536, JString, required = false,
                                 default = nil)
  if valid_602536 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_602536
  var valid_602537 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602537 = validateParameter(valid_602537, JBool, required = false, default = nil)
  if valid_602537 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602537
  var valid_602538 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_602538 = validateParameter(valid_602538, JString, required = false,
                                 default = nil)
  if valid_602538 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_602538
  var valid_602539 = query.getOrDefault("SourceRegion")
  valid_602539 = validateParameter(valid_602539, JString, required = false,
                                 default = nil)
  if valid_602539 != nil:
    section.add "SourceRegion", valid_602539
  var valid_602540 = query.getOrDefault("Port")
  valid_602540 = validateParameter(valid_602540, JInt, required = false, default = nil)
  if valid_602540 != nil:
    section.add "Port", valid_602540
  var valid_602541 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "ReplicationSourceIdentifier", valid_602541
  var valid_602542 = query.getOrDefault("MasterUserPassword")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "MasterUserPassword", valid_602542
  var valid_602543 = query.getOrDefault("OptionGroupName")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "OptionGroupName", valid_602543
  var valid_602544 = query.getOrDefault("DBSubnetGroupName")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "DBSubnetGroupName", valid_602544
  var valid_602545 = query.getOrDefault("PreferredBackupWindow")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "PreferredBackupWindow", valid_602545
  var valid_602546 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "PreferredMaintenanceWindow", valid_602546
  var valid_602547 = query.getOrDefault("Version")
  valid_602547 = validateParameter(valid_602547, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602547 != nil:
    section.add "Version", valid_602547
  var valid_602548 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_602548 = validateParameter(valid_602548, JString, required = false,
                                 default = nil)
  if valid_602548 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_602548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_602549 = header.getOrDefault("X-Amz-Security-Token")
  valid_602549 = validateParameter(valid_602549, JString, required = false,
                                 default = nil)
  if valid_602549 != nil:
    section.add "X-Amz-Security-Token", valid_602549
  var valid_602550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602550 = validateParameter(valid_602550, JString, required = false,
                                 default = nil)
  if valid_602550 != nil:
    section.add "X-Amz-SignedHeaders", valid_602550
  var valid_602551 = header.getOrDefault("X-Amz-Signature")
  valid_602551 = validateParameter(valid_602551, JString, required = false,
                                 default = nil)
  if valid_602551 != nil:
    section.add "X-Amz-Signature", valid_602551
  var valid_602552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602552 = validateParameter(valid_602552, JString, required = false,
                                 default = nil)
  if valid_602552 != nil:
    section.add "X-Amz-Content-Sha256", valid_602552
  var valid_602553 = header.getOrDefault("X-Amz-Date")
  valid_602553 = validateParameter(valid_602553, JString, required = false,
                                 default = nil)
  if valid_602553 != nil:
    section.add "X-Amz-Date", valid_602553
  var valid_602554 = header.getOrDefault("X-Amz-Credential")
  valid_602554 = validateParameter(valid_602554, JString, required = false,
                                 default = nil)
  if valid_602554 != nil:
    section.add "X-Amz-Credential", valid_602554
  var valid_602555 = header.getOrDefault("X-Amz-Algorithm")
  valid_602555 = validateParameter(valid_602555, JString, required = false,
                                 default = nil)
  if valid_602555 != nil:
    section.add "X-Amz-Algorithm", valid_602555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602556: Call_GetCreateDBCluster_602491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602556.validator(path, query, header, formData, body)
  let scheme = call_602556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602556.url(scheme.get, call_602556.host, call_602556.base,
                         call_602556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602556, url, valid)

proc call*(call_602557: Call_GetCreateDBCluster_602491; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_602558 = newJObject()
  add(query_602558, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_602558, "DatabaseName", newJString(DatabaseName))
  add(query_602558, "Engine", newJString(Engine))
  add(query_602558, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_602558, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_602558, "KmsKeyId", newJString(KmsKeyId))
  add(query_602558, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_602558, "EngineMode", newJString(EngineMode))
  add(query_602558, "MasterUsername", newJString(MasterUsername))
  add(query_602558, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_602558, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_602558.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_602558, "EngineVersion", newJString(EngineVersion))
  add(query_602558, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_602558.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_602558, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_602558, "DeletionProtection", newJBool(DeletionProtection))
  add(query_602558, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_602558.add "Tags", Tags
  add(query_602558, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_602558, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_602558, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_602558.add "AvailabilityZones", AvailabilityZones
  add(query_602558, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_602558, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_602558, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_602558, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_602558, "SourceRegion", newJString(SourceRegion))
  add(query_602558, "Port", newJInt(Port))
  add(query_602558, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_602558, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_602558, "OptionGroupName", newJString(OptionGroupName))
  add(query_602558, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_602558, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_602558, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602558, "Version", newJString(Version))
  add(query_602558, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_602557.call(nil, query_602558, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_602491(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_602492,
    base: "/", url: url_GetCreateDBCluster_602493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_602631 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBClusterEndpoint_602633(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_602632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602634 = query.getOrDefault("Action")
  valid_602634 = validateParameter(valid_602634, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_602634 != nil:
    section.add "Action", valid_602634
  var valid_602635 = query.getOrDefault("Version")
  valid_602635 = validateParameter(valid_602635, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602635 != nil:
    section.add "Version", valid_602635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602636 = header.getOrDefault("X-Amz-Signature")
  valid_602636 = validateParameter(valid_602636, JString, required = false,
                                 default = nil)
  if valid_602636 != nil:
    section.add "X-Amz-Signature", valid_602636
  var valid_602637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602637 = validateParameter(valid_602637, JString, required = false,
                                 default = nil)
  if valid_602637 != nil:
    section.add "X-Amz-Content-Sha256", valid_602637
  var valid_602638 = header.getOrDefault("X-Amz-Date")
  valid_602638 = validateParameter(valid_602638, JString, required = false,
                                 default = nil)
  if valid_602638 != nil:
    section.add "X-Amz-Date", valid_602638
  var valid_602639 = header.getOrDefault("X-Amz-Credential")
  valid_602639 = validateParameter(valid_602639, JString, required = false,
                                 default = nil)
  if valid_602639 != nil:
    section.add "X-Amz-Credential", valid_602639
  var valid_602640 = header.getOrDefault("X-Amz-Security-Token")
  valid_602640 = validateParameter(valid_602640, JString, required = false,
                                 default = nil)
  if valid_602640 != nil:
    section.add "X-Amz-Security-Token", valid_602640
  var valid_602641 = header.getOrDefault("X-Amz-Algorithm")
  valid_602641 = validateParameter(valid_602641, JString, required = false,
                                 default = nil)
  if valid_602641 != nil:
    section.add "X-Amz-Algorithm", valid_602641
  var valid_602642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602642 = validateParameter(valid_602642, JString, required = false,
                                 default = nil)
  if valid_602642 != nil:
    section.add "X-Amz-SignedHeaders", valid_602642
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_602643 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_602643 = validateParameter(valid_602643, JString, required = true,
                                 default = nil)
  if valid_602643 != nil:
    section.add "DBClusterEndpointIdentifier", valid_602643
  var valid_602644 = formData.getOrDefault("StaticMembers")
  valid_602644 = validateParameter(valid_602644, JArray, required = false,
                                 default = nil)
  if valid_602644 != nil:
    section.add "StaticMembers", valid_602644
  var valid_602645 = formData.getOrDefault("EndpointType")
  valid_602645 = validateParameter(valid_602645, JString, required = true,
                                 default = nil)
  if valid_602645 != nil:
    section.add "EndpointType", valid_602645
  var valid_602646 = formData.getOrDefault("ExcludedMembers")
  valid_602646 = validateParameter(valid_602646, JArray, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "ExcludedMembers", valid_602646
  var valid_602647 = formData.getOrDefault("Tags")
  valid_602647 = validateParameter(valid_602647, JArray, required = false,
                                 default = nil)
  if valid_602647 != nil:
    section.add "Tags", valid_602647
  var valid_602648 = formData.getOrDefault("DBClusterIdentifier")
  valid_602648 = validateParameter(valid_602648, JString, required = true,
                                 default = nil)
  if valid_602648 != nil:
    section.add "DBClusterIdentifier", valid_602648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602649: Call_PostCreateDBClusterEndpoint_602631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602649.validator(path, query, header, formData, body)
  let scheme = call_602649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602649.url(scheme.get, call_602649.host, call_602649.base,
                         call_602649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602649, url, valid)

proc call*(call_602650: Call_PostCreateDBClusterEndpoint_602631;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_602651 = newJObject()
  var formData_602652 = newJObject()
  add(formData_602652, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_602652.add "StaticMembers", StaticMembers
  add(query_602651, "Action", newJString(Action))
  add(formData_602652, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_602652.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_602652.add "Tags", Tags
  add(query_602651, "Version", newJString(Version))
  add(formData_602652, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_602650.call(nil, query_602651, nil, formData_602652, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_602631(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_602632, base: "/",
    url: url_PostCreateDBClusterEndpoint_602633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_602610 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBClusterEndpoint_602612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_602611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602613 = query.getOrDefault("ExcludedMembers")
  valid_602613 = validateParameter(valid_602613, JArray, required = false,
                                 default = nil)
  if valid_602613 != nil:
    section.add "ExcludedMembers", valid_602613
  var valid_602614 = query.getOrDefault("Tags")
  valid_602614 = validateParameter(valid_602614, JArray, required = false,
                                 default = nil)
  if valid_602614 != nil:
    section.add "Tags", valid_602614
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_602615 = query.getOrDefault("DBClusterIdentifier")
  valid_602615 = validateParameter(valid_602615, JString, required = true,
                                 default = nil)
  if valid_602615 != nil:
    section.add "DBClusterIdentifier", valid_602615
  var valid_602616 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_602616 = validateParameter(valid_602616, JString, required = true,
                                 default = nil)
  if valid_602616 != nil:
    section.add "DBClusterEndpointIdentifier", valid_602616
  var valid_602617 = query.getOrDefault("StaticMembers")
  valid_602617 = validateParameter(valid_602617, JArray, required = false,
                                 default = nil)
  if valid_602617 != nil:
    section.add "StaticMembers", valid_602617
  var valid_602618 = query.getOrDefault("EndpointType")
  valid_602618 = validateParameter(valid_602618, JString, required = true,
                                 default = nil)
  if valid_602618 != nil:
    section.add "EndpointType", valid_602618
  var valid_602619 = query.getOrDefault("Action")
  valid_602619 = validateParameter(valid_602619, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_602619 != nil:
    section.add "Action", valid_602619
  var valid_602620 = query.getOrDefault("Version")
  valid_602620 = validateParameter(valid_602620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602620 != nil:
    section.add "Version", valid_602620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602621 = header.getOrDefault("X-Amz-Signature")
  valid_602621 = validateParameter(valid_602621, JString, required = false,
                                 default = nil)
  if valid_602621 != nil:
    section.add "X-Amz-Signature", valid_602621
  var valid_602622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602622 = validateParameter(valid_602622, JString, required = false,
                                 default = nil)
  if valid_602622 != nil:
    section.add "X-Amz-Content-Sha256", valid_602622
  var valid_602623 = header.getOrDefault("X-Amz-Date")
  valid_602623 = validateParameter(valid_602623, JString, required = false,
                                 default = nil)
  if valid_602623 != nil:
    section.add "X-Amz-Date", valid_602623
  var valid_602624 = header.getOrDefault("X-Amz-Credential")
  valid_602624 = validateParameter(valid_602624, JString, required = false,
                                 default = nil)
  if valid_602624 != nil:
    section.add "X-Amz-Credential", valid_602624
  var valid_602625 = header.getOrDefault("X-Amz-Security-Token")
  valid_602625 = validateParameter(valid_602625, JString, required = false,
                                 default = nil)
  if valid_602625 != nil:
    section.add "X-Amz-Security-Token", valid_602625
  var valid_602626 = header.getOrDefault("X-Amz-Algorithm")
  valid_602626 = validateParameter(valid_602626, JString, required = false,
                                 default = nil)
  if valid_602626 != nil:
    section.add "X-Amz-Algorithm", valid_602626
  var valid_602627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602627 = validateParameter(valid_602627, JString, required = false,
                                 default = nil)
  if valid_602627 != nil:
    section.add "X-Amz-SignedHeaders", valid_602627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602628: Call_GetCreateDBClusterEndpoint_602610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602628.validator(path, query, header, formData, body)
  let scheme = call_602628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602628.url(scheme.get, call_602628.host, call_602628.base,
                         call_602628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602628, url, valid)

proc call*(call_602629: Call_GetCreateDBClusterEndpoint_602610;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602630 = newJObject()
  if ExcludedMembers != nil:
    query_602630.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    query_602630.add "Tags", Tags
  add(query_602630, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_602630, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_602630.add "StaticMembers", StaticMembers
  add(query_602630, "EndpointType", newJString(EndpointType))
  add(query_602630, "Action", newJString(Action))
  add(query_602630, "Version", newJString(Version))
  result = call_602629.call(nil, query_602630, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_602610(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_602611, base: "/",
    url: url_GetCreateDBClusterEndpoint_602612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_602672 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBClusterParameterGroup_602674(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_602673(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602675 = query.getOrDefault("Action")
  valid_602675 = validateParameter(valid_602675, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_602675 != nil:
    section.add "Action", valid_602675
  var valid_602676 = query.getOrDefault("Version")
  valid_602676 = validateParameter(valid_602676, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602676 != nil:
    section.add "Version", valid_602676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602677 = header.getOrDefault("X-Amz-Signature")
  valid_602677 = validateParameter(valid_602677, JString, required = false,
                                 default = nil)
  if valid_602677 != nil:
    section.add "X-Amz-Signature", valid_602677
  var valid_602678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602678 = validateParameter(valid_602678, JString, required = false,
                                 default = nil)
  if valid_602678 != nil:
    section.add "X-Amz-Content-Sha256", valid_602678
  var valid_602679 = header.getOrDefault("X-Amz-Date")
  valid_602679 = validateParameter(valid_602679, JString, required = false,
                                 default = nil)
  if valid_602679 != nil:
    section.add "X-Amz-Date", valid_602679
  var valid_602680 = header.getOrDefault("X-Amz-Credential")
  valid_602680 = validateParameter(valid_602680, JString, required = false,
                                 default = nil)
  if valid_602680 != nil:
    section.add "X-Amz-Credential", valid_602680
  var valid_602681 = header.getOrDefault("X-Amz-Security-Token")
  valid_602681 = validateParameter(valid_602681, JString, required = false,
                                 default = nil)
  if valid_602681 != nil:
    section.add "X-Amz-Security-Token", valid_602681
  var valid_602682 = header.getOrDefault("X-Amz-Algorithm")
  valid_602682 = validateParameter(valid_602682, JString, required = false,
                                 default = nil)
  if valid_602682 != nil:
    section.add "X-Amz-Algorithm", valid_602682
  var valid_602683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602683 = validateParameter(valid_602683, JString, required = false,
                                 default = nil)
  if valid_602683 != nil:
    section.add "X-Amz-SignedHeaders", valid_602683
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_602684 = formData.getOrDefault("Description")
  valid_602684 = validateParameter(valid_602684, JString, required = true,
                                 default = nil)
  if valid_602684 != nil:
    section.add "Description", valid_602684
  var valid_602685 = formData.getOrDefault("Tags")
  valid_602685 = validateParameter(valid_602685, JArray, required = false,
                                 default = nil)
  if valid_602685 != nil:
    section.add "Tags", valid_602685
  var valid_602686 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_602686 = validateParameter(valid_602686, JString, required = true,
                                 default = nil)
  if valid_602686 != nil:
    section.add "DBClusterParameterGroupName", valid_602686
  var valid_602687 = formData.getOrDefault("DBParameterGroupFamily")
  valid_602687 = validateParameter(valid_602687, JString, required = true,
                                 default = nil)
  if valid_602687 != nil:
    section.add "DBParameterGroupFamily", valid_602687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602688: Call_PostCreateDBClusterParameterGroup_602672;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602688.validator(path, query, header, formData, body)
  let scheme = call_602688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602688.url(scheme.get, call_602688.host, call_602688.base,
                         call_602688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602688, url, valid)

proc call*(call_602689: Call_PostCreateDBClusterParameterGroup_602672;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_602690 = newJObject()
  var formData_602691 = newJObject()
  add(formData_602691, "Description", newJString(Description))
  add(query_602690, "Action", newJString(Action))
  if Tags != nil:
    formData_602691.add "Tags", Tags
  add(formData_602691, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_602690, "Version", newJString(Version))
  add(formData_602691, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_602689.call(nil, query_602690, nil, formData_602691, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_602672(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_602673, base: "/",
    url: url_PostCreateDBClusterParameterGroup_602674,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_602653 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBClusterParameterGroup_602655(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_602654(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_602656 = query.getOrDefault("DBParameterGroupFamily")
  valid_602656 = validateParameter(valid_602656, JString, required = true,
                                 default = nil)
  if valid_602656 != nil:
    section.add "DBParameterGroupFamily", valid_602656
  var valid_602657 = query.getOrDefault("Tags")
  valid_602657 = validateParameter(valid_602657, JArray, required = false,
                                 default = nil)
  if valid_602657 != nil:
    section.add "Tags", valid_602657
  var valid_602658 = query.getOrDefault("DBClusterParameterGroupName")
  valid_602658 = validateParameter(valid_602658, JString, required = true,
                                 default = nil)
  if valid_602658 != nil:
    section.add "DBClusterParameterGroupName", valid_602658
  var valid_602659 = query.getOrDefault("Action")
  valid_602659 = validateParameter(valid_602659, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_602659 != nil:
    section.add "Action", valid_602659
  var valid_602660 = query.getOrDefault("Description")
  valid_602660 = validateParameter(valid_602660, JString, required = true,
                                 default = nil)
  if valid_602660 != nil:
    section.add "Description", valid_602660
  var valid_602661 = query.getOrDefault("Version")
  valid_602661 = validateParameter(valid_602661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602661 != nil:
    section.add "Version", valid_602661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602662 = header.getOrDefault("X-Amz-Signature")
  valid_602662 = validateParameter(valid_602662, JString, required = false,
                                 default = nil)
  if valid_602662 != nil:
    section.add "X-Amz-Signature", valid_602662
  var valid_602663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602663 = validateParameter(valid_602663, JString, required = false,
                                 default = nil)
  if valid_602663 != nil:
    section.add "X-Amz-Content-Sha256", valid_602663
  var valid_602664 = header.getOrDefault("X-Amz-Date")
  valid_602664 = validateParameter(valid_602664, JString, required = false,
                                 default = nil)
  if valid_602664 != nil:
    section.add "X-Amz-Date", valid_602664
  var valid_602665 = header.getOrDefault("X-Amz-Credential")
  valid_602665 = validateParameter(valid_602665, JString, required = false,
                                 default = nil)
  if valid_602665 != nil:
    section.add "X-Amz-Credential", valid_602665
  var valid_602666 = header.getOrDefault("X-Amz-Security-Token")
  valid_602666 = validateParameter(valid_602666, JString, required = false,
                                 default = nil)
  if valid_602666 != nil:
    section.add "X-Amz-Security-Token", valid_602666
  var valid_602667 = header.getOrDefault("X-Amz-Algorithm")
  valid_602667 = validateParameter(valid_602667, JString, required = false,
                                 default = nil)
  if valid_602667 != nil:
    section.add "X-Amz-Algorithm", valid_602667
  var valid_602668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602668 = validateParameter(valid_602668, JString, required = false,
                                 default = nil)
  if valid_602668 != nil:
    section.add "X-Amz-SignedHeaders", valid_602668
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602669: Call_GetCreateDBClusterParameterGroup_602653;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602669.validator(path, query, header, formData, body)
  let scheme = call_602669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602669.url(scheme.get, call_602669.host, call_602669.base,
                         call_602669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602669, url, valid)

proc call*(call_602670: Call_GetCreateDBClusterParameterGroup_602653;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_602671 = newJObject()
  add(query_602671, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_602671.add "Tags", Tags
  add(query_602671, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_602671, "Action", newJString(Action))
  add(query_602671, "Description", newJString(Description))
  add(query_602671, "Version", newJString(Version))
  result = call_602670.call(nil, query_602671, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_602653(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_602654, base: "/",
    url: url_GetCreateDBClusterParameterGroup_602655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_602710 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBClusterSnapshot_602712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_602711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602713 = query.getOrDefault("Action")
  valid_602713 = validateParameter(valid_602713, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_602713 != nil:
    section.add "Action", valid_602713
  var valid_602714 = query.getOrDefault("Version")
  valid_602714 = validateParameter(valid_602714, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602714 != nil:
    section.add "Version", valid_602714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602715 = header.getOrDefault("X-Amz-Signature")
  valid_602715 = validateParameter(valid_602715, JString, required = false,
                                 default = nil)
  if valid_602715 != nil:
    section.add "X-Amz-Signature", valid_602715
  var valid_602716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602716 = validateParameter(valid_602716, JString, required = false,
                                 default = nil)
  if valid_602716 != nil:
    section.add "X-Amz-Content-Sha256", valid_602716
  var valid_602717 = header.getOrDefault("X-Amz-Date")
  valid_602717 = validateParameter(valid_602717, JString, required = false,
                                 default = nil)
  if valid_602717 != nil:
    section.add "X-Amz-Date", valid_602717
  var valid_602718 = header.getOrDefault("X-Amz-Credential")
  valid_602718 = validateParameter(valid_602718, JString, required = false,
                                 default = nil)
  if valid_602718 != nil:
    section.add "X-Amz-Credential", valid_602718
  var valid_602719 = header.getOrDefault("X-Amz-Security-Token")
  valid_602719 = validateParameter(valid_602719, JString, required = false,
                                 default = nil)
  if valid_602719 != nil:
    section.add "X-Amz-Security-Token", valid_602719
  var valid_602720 = header.getOrDefault("X-Amz-Algorithm")
  valid_602720 = validateParameter(valid_602720, JString, required = false,
                                 default = nil)
  if valid_602720 != nil:
    section.add "X-Amz-Algorithm", valid_602720
  var valid_602721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602721 = validateParameter(valid_602721, JString, required = false,
                                 default = nil)
  if valid_602721 != nil:
    section.add "X-Amz-SignedHeaders", valid_602721
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_602722 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_602722 = validateParameter(valid_602722, JString, required = true,
                                 default = nil)
  if valid_602722 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_602722
  var valid_602723 = formData.getOrDefault("Tags")
  valid_602723 = validateParameter(valid_602723, JArray, required = false,
                                 default = nil)
  if valid_602723 != nil:
    section.add "Tags", valid_602723
  var valid_602724 = formData.getOrDefault("DBClusterIdentifier")
  valid_602724 = validateParameter(valid_602724, JString, required = true,
                                 default = nil)
  if valid_602724 != nil:
    section.add "DBClusterIdentifier", valid_602724
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602725: Call_PostCreateDBClusterSnapshot_602710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602725.validator(path, query, header, formData, body)
  let scheme = call_602725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602725.url(scheme.get, call_602725.host, call_602725.base,
                         call_602725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602725, url, valid)

proc call*(call_602726: Call_PostCreateDBClusterSnapshot_602710;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_602727 = newJObject()
  var formData_602728 = newJObject()
  add(formData_602728, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_602727, "Action", newJString(Action))
  if Tags != nil:
    formData_602728.add "Tags", Tags
  add(query_602727, "Version", newJString(Version))
  add(formData_602728, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_602726.call(nil, query_602727, nil, formData_602728, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_602710(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_602711, base: "/",
    url: url_PostCreateDBClusterSnapshot_602712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_602692 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBClusterSnapshot_602694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_602693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_602695 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_602695 = validateParameter(valid_602695, JString, required = true,
                                 default = nil)
  if valid_602695 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_602695
  var valid_602696 = query.getOrDefault("Tags")
  valid_602696 = validateParameter(valid_602696, JArray, required = false,
                                 default = nil)
  if valid_602696 != nil:
    section.add "Tags", valid_602696
  var valid_602697 = query.getOrDefault("DBClusterIdentifier")
  valid_602697 = validateParameter(valid_602697, JString, required = true,
                                 default = nil)
  if valid_602697 != nil:
    section.add "DBClusterIdentifier", valid_602697
  var valid_602698 = query.getOrDefault("Action")
  valid_602698 = validateParameter(valid_602698, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_602698 != nil:
    section.add "Action", valid_602698
  var valid_602699 = query.getOrDefault("Version")
  valid_602699 = validateParameter(valid_602699, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602699 != nil:
    section.add "Version", valid_602699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602700 = header.getOrDefault("X-Amz-Signature")
  valid_602700 = validateParameter(valid_602700, JString, required = false,
                                 default = nil)
  if valid_602700 != nil:
    section.add "X-Amz-Signature", valid_602700
  var valid_602701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602701 = validateParameter(valid_602701, JString, required = false,
                                 default = nil)
  if valid_602701 != nil:
    section.add "X-Amz-Content-Sha256", valid_602701
  var valid_602702 = header.getOrDefault("X-Amz-Date")
  valid_602702 = validateParameter(valid_602702, JString, required = false,
                                 default = nil)
  if valid_602702 != nil:
    section.add "X-Amz-Date", valid_602702
  var valid_602703 = header.getOrDefault("X-Amz-Credential")
  valid_602703 = validateParameter(valid_602703, JString, required = false,
                                 default = nil)
  if valid_602703 != nil:
    section.add "X-Amz-Credential", valid_602703
  var valid_602704 = header.getOrDefault("X-Amz-Security-Token")
  valid_602704 = validateParameter(valid_602704, JString, required = false,
                                 default = nil)
  if valid_602704 != nil:
    section.add "X-Amz-Security-Token", valid_602704
  var valid_602705 = header.getOrDefault("X-Amz-Algorithm")
  valid_602705 = validateParameter(valid_602705, JString, required = false,
                                 default = nil)
  if valid_602705 != nil:
    section.add "X-Amz-Algorithm", valid_602705
  var valid_602706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602706 = validateParameter(valid_602706, JString, required = false,
                                 default = nil)
  if valid_602706 != nil:
    section.add "X-Amz-SignedHeaders", valid_602706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602707: Call_GetCreateDBClusterSnapshot_602692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_602707.validator(path, query, header, formData, body)
  let scheme = call_602707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602707.url(scheme.get, call_602707.host, call_602707.base,
                         call_602707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602707, url, valid)

proc call*(call_602708: Call_GetCreateDBClusterSnapshot_602692;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602709 = newJObject()
  add(query_602709, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_602709.add "Tags", Tags
  add(query_602709, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_602709, "Action", newJString(Action))
  add(query_602709, "Version", newJString(Version))
  result = call_602708.call(nil, query_602709, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_602692(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_602693, base: "/",
    url: url_GetCreateDBClusterSnapshot_602694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_602790 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBInstance_602792(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_602791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602793 = query.getOrDefault("Action")
  valid_602793 = validateParameter(valid_602793, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_602793 != nil:
    section.add "Action", valid_602793
  var valid_602794 = query.getOrDefault("Version")
  valid_602794 = validateParameter(valid_602794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602794 != nil:
    section.add "Version", valid_602794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_602795 = header.getOrDefault("X-Amz-Security-Token")
  valid_602795 = validateParameter(valid_602795, JString, required = false,
                                 default = nil)
  if valid_602795 != nil:
    section.add "X-Amz-Security-Token", valid_602795
  var valid_602796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602796 = validateParameter(valid_602796, JString, required = false,
                                 default = nil)
  if valid_602796 != nil:
    section.add "X-Amz-SignedHeaders", valid_602796
  var valid_602797 = header.getOrDefault("X-Amz-Signature")
  valid_602797 = validateParameter(valid_602797, JString, required = false,
                                 default = nil)
  if valid_602797 != nil:
    section.add "X-Amz-Signature", valid_602797
  var valid_602798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602798 = validateParameter(valid_602798, JString, required = false,
                                 default = nil)
  if valid_602798 != nil:
    section.add "X-Amz-Content-Sha256", valid_602798
  var valid_602799 = header.getOrDefault("X-Amz-Date")
  valid_602799 = validateParameter(valid_602799, JString, required = false,
                                 default = nil)
  if valid_602799 != nil:
    section.add "X-Amz-Date", valid_602799
  var valid_602800 = header.getOrDefault("X-Amz-Credential")
  valid_602800 = validateParameter(valid_602800, JString, required = false,
                                 default = nil)
  if valid_602800 != nil:
    section.add "X-Amz-Credential", valid_602800
  var valid_602801 = header.getOrDefault("X-Amz-Algorithm")
  valid_602801 = validateParameter(valid_602801, JString, required = false,
                                 default = nil)
  if valid_602801 != nil:
    section.add "X-Amz-Algorithm", valid_602801
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_602802 = formData.getOrDefault("PromotionTier")
  valid_602802 = validateParameter(valid_602802, JInt, required = false, default = nil)
  if valid_602802 != nil:
    section.add "PromotionTier", valid_602802
  var valid_602803 = formData.getOrDefault("Port")
  valid_602803 = validateParameter(valid_602803, JInt, required = false, default = nil)
  if valid_602803 != nil:
    section.add "Port", valid_602803
  var valid_602804 = formData.getOrDefault("MultiAZ")
  valid_602804 = validateParameter(valid_602804, JBool, required = false, default = nil)
  if valid_602804 != nil:
    section.add "MultiAZ", valid_602804
  var valid_602805 = formData.getOrDefault("MasterUsername")
  valid_602805 = validateParameter(valid_602805, JString, required = false,
                                 default = nil)
  if valid_602805 != nil:
    section.add "MasterUsername", valid_602805
  var valid_602806 = formData.getOrDefault("MonitoringRoleArn")
  valid_602806 = validateParameter(valid_602806, JString, required = false,
                                 default = nil)
  if valid_602806 != nil:
    section.add "MonitoringRoleArn", valid_602806
  var valid_602807 = formData.getOrDefault("MonitoringInterval")
  valid_602807 = validateParameter(valid_602807, JInt, required = false, default = nil)
  if valid_602807 != nil:
    section.add "MonitoringInterval", valid_602807
  var valid_602808 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_602808 = validateParameter(valid_602808, JArray, required = false,
                                 default = nil)
  if valid_602808 != nil:
    section.add "VpcSecurityGroupIds", valid_602808
  var valid_602809 = formData.getOrDefault("AvailabilityZone")
  valid_602809 = validateParameter(valid_602809, JString, required = false,
                                 default = nil)
  if valid_602809 != nil:
    section.add "AvailabilityZone", valid_602809
  var valid_602810 = formData.getOrDefault("EnablePerformanceInsights")
  valid_602810 = validateParameter(valid_602810, JBool, required = false, default = nil)
  if valid_602810 != nil:
    section.add "EnablePerformanceInsights", valid_602810
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_602811 = formData.getOrDefault("DBInstanceIdentifier")
  valid_602811 = validateParameter(valid_602811, JString, required = true,
                                 default = nil)
  if valid_602811 != nil:
    section.add "DBInstanceIdentifier", valid_602811
  var valid_602812 = formData.getOrDefault("TdeCredentialArn")
  valid_602812 = validateParameter(valid_602812, JString, required = false,
                                 default = nil)
  if valid_602812 != nil:
    section.add "TdeCredentialArn", valid_602812
  var valid_602813 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_602813 = validateParameter(valid_602813, JArray, required = false,
                                 default = nil)
  if valid_602813 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602813
  var valid_602814 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_602814 = validateParameter(valid_602814, JInt, required = false, default = nil)
  if valid_602814 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_602814
  var valid_602815 = formData.getOrDefault("DBSubnetGroupName")
  valid_602815 = validateParameter(valid_602815, JString, required = false,
                                 default = nil)
  if valid_602815 != nil:
    section.add "DBSubnetGroupName", valid_602815
  var valid_602816 = formData.getOrDefault("CharacterSetName")
  valid_602816 = validateParameter(valid_602816, JString, required = false,
                                 default = nil)
  if valid_602816 != nil:
    section.add "CharacterSetName", valid_602816
  var valid_602817 = formData.getOrDefault("StorageType")
  valid_602817 = validateParameter(valid_602817, JString, required = false,
                                 default = nil)
  if valid_602817 != nil:
    section.add "StorageType", valid_602817
  var valid_602818 = formData.getOrDefault("MaxAllocatedStorage")
  valid_602818 = validateParameter(valid_602818, JInt, required = false, default = nil)
  if valid_602818 != nil:
    section.add "MaxAllocatedStorage", valid_602818
  var valid_602819 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_602819 = validateParameter(valid_602819, JBool, required = false, default = nil)
  if valid_602819 != nil:
    section.add "CopyTagsToSnapshot", valid_602819
  var valid_602820 = formData.getOrDefault("DeletionProtection")
  valid_602820 = validateParameter(valid_602820, JBool, required = false, default = nil)
  if valid_602820 != nil:
    section.add "DeletionProtection", valid_602820
  var valid_602821 = formData.getOrDefault("ProcessorFeatures")
  valid_602821 = validateParameter(valid_602821, JArray, required = false,
                                 default = nil)
  if valid_602821 != nil:
    section.add "ProcessorFeatures", valid_602821
  var valid_602822 = formData.getOrDefault("AllocatedStorage")
  valid_602822 = validateParameter(valid_602822, JInt, required = false, default = nil)
  if valid_602822 != nil:
    section.add "AllocatedStorage", valid_602822
  var valid_602823 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_602823 = validateParameter(valid_602823, JString, required = false,
                                 default = nil)
  if valid_602823 != nil:
    section.add "PreferredMaintenanceWindow", valid_602823
  var valid_602824 = formData.getOrDefault("DBInstanceClass")
  valid_602824 = validateParameter(valid_602824, JString, required = true,
                                 default = nil)
  if valid_602824 != nil:
    section.add "DBInstanceClass", valid_602824
  var valid_602825 = formData.getOrDefault("PreferredBackupWindow")
  valid_602825 = validateParameter(valid_602825, JString, required = false,
                                 default = nil)
  if valid_602825 != nil:
    section.add "PreferredBackupWindow", valid_602825
  var valid_602826 = formData.getOrDefault("MasterUserPassword")
  valid_602826 = validateParameter(valid_602826, JString, required = false,
                                 default = nil)
  if valid_602826 != nil:
    section.add "MasterUserPassword", valid_602826
  var valid_602827 = formData.getOrDefault("Domain")
  valid_602827 = validateParameter(valid_602827, JString, required = false,
                                 default = nil)
  if valid_602827 != nil:
    section.add "Domain", valid_602827
  var valid_602828 = formData.getOrDefault("Timezone")
  valid_602828 = validateParameter(valid_602828, JString, required = false,
                                 default = nil)
  if valid_602828 != nil:
    section.add "Timezone", valid_602828
  var valid_602829 = formData.getOrDefault("DBParameterGroupName")
  valid_602829 = validateParameter(valid_602829, JString, required = false,
                                 default = nil)
  if valid_602829 != nil:
    section.add "DBParameterGroupName", valid_602829
  var valid_602830 = formData.getOrDefault("EngineVersion")
  valid_602830 = validateParameter(valid_602830, JString, required = false,
                                 default = nil)
  if valid_602830 != nil:
    section.add "EngineVersion", valid_602830
  var valid_602831 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602831 = validateParameter(valid_602831, JBool, required = false, default = nil)
  if valid_602831 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602831
  var valid_602832 = formData.getOrDefault("BackupRetentionPeriod")
  valid_602832 = validateParameter(valid_602832, JInt, required = false, default = nil)
  if valid_602832 != nil:
    section.add "BackupRetentionPeriod", valid_602832
  var valid_602833 = formData.getOrDefault("KmsKeyId")
  valid_602833 = validateParameter(valid_602833, JString, required = false,
                                 default = nil)
  if valid_602833 != nil:
    section.add "KmsKeyId", valid_602833
  var valid_602834 = formData.getOrDefault("Engine")
  valid_602834 = validateParameter(valid_602834, JString, required = true,
                                 default = nil)
  if valid_602834 != nil:
    section.add "Engine", valid_602834
  var valid_602835 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602835 = validateParameter(valid_602835, JBool, required = false, default = nil)
  if valid_602835 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602835
  var valid_602836 = formData.getOrDefault("TdeCredentialPassword")
  valid_602836 = validateParameter(valid_602836, JString, required = false,
                                 default = nil)
  if valid_602836 != nil:
    section.add "TdeCredentialPassword", valid_602836
  var valid_602837 = formData.getOrDefault("DBName")
  valid_602837 = validateParameter(valid_602837, JString, required = false,
                                 default = nil)
  if valid_602837 != nil:
    section.add "DBName", valid_602837
  var valid_602838 = formData.getOrDefault("Iops")
  valid_602838 = validateParameter(valid_602838, JInt, required = false, default = nil)
  if valid_602838 != nil:
    section.add "Iops", valid_602838
  var valid_602839 = formData.getOrDefault("PubliclyAccessible")
  valid_602839 = validateParameter(valid_602839, JBool, required = false, default = nil)
  if valid_602839 != nil:
    section.add "PubliclyAccessible", valid_602839
  var valid_602840 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_602840 = validateParameter(valid_602840, JString, required = false,
                                 default = nil)
  if valid_602840 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_602840
  var valid_602841 = formData.getOrDefault("LicenseModel")
  valid_602841 = validateParameter(valid_602841, JString, required = false,
                                 default = nil)
  if valid_602841 != nil:
    section.add "LicenseModel", valid_602841
  var valid_602842 = formData.getOrDefault("Tags")
  valid_602842 = validateParameter(valid_602842, JArray, required = false,
                                 default = nil)
  if valid_602842 != nil:
    section.add "Tags", valid_602842
  var valid_602843 = formData.getOrDefault("DomainIAMRoleName")
  valid_602843 = validateParameter(valid_602843, JString, required = false,
                                 default = nil)
  if valid_602843 != nil:
    section.add "DomainIAMRoleName", valid_602843
  var valid_602844 = formData.getOrDefault("OptionGroupName")
  valid_602844 = validateParameter(valid_602844, JString, required = false,
                                 default = nil)
  if valid_602844 != nil:
    section.add "OptionGroupName", valid_602844
  var valid_602845 = formData.getOrDefault("DBSecurityGroups")
  valid_602845 = validateParameter(valid_602845, JArray, required = false,
                                 default = nil)
  if valid_602845 != nil:
    section.add "DBSecurityGroups", valid_602845
  var valid_602846 = formData.getOrDefault("StorageEncrypted")
  valid_602846 = validateParameter(valid_602846, JBool, required = false, default = nil)
  if valid_602846 != nil:
    section.add "StorageEncrypted", valid_602846
  var valid_602847 = formData.getOrDefault("DBClusterIdentifier")
  valid_602847 = validateParameter(valid_602847, JString, required = false,
                                 default = nil)
  if valid_602847 != nil:
    section.add "DBClusterIdentifier", valid_602847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602848: Call_PostCreateDBInstance_602790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_602848.validator(path, query, header, formData, body)
  let scheme = call_602848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602848.url(scheme.get, call_602848.host, call_602848.base,
                         call_602848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602848, url, valid)

proc call*(call_602849: Call_PostCreateDBInstance_602790;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_602850 = newJObject()
  var formData_602851 = newJObject()
  add(formData_602851, "PromotionTier", newJInt(PromotionTier))
  add(formData_602851, "Port", newJInt(Port))
  add(formData_602851, "MultiAZ", newJBool(MultiAZ))
  add(formData_602851, "MasterUsername", newJString(MasterUsername))
  add(formData_602851, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_602851, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_602851.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_602851, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_602851, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_602851, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_602851, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_602851.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_602850, "Action", newJString(Action))
  add(formData_602851, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_602851, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_602851, "CharacterSetName", newJString(CharacterSetName))
  add(formData_602851, "StorageType", newJString(StorageType))
  add(formData_602851, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_602851, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_602851, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_602851.add "ProcessorFeatures", ProcessorFeatures
  add(formData_602851, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_602851, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_602851, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_602851, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_602851, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_602851, "Domain", newJString(Domain))
  add(formData_602851, "Timezone", newJString(Timezone))
  add(formData_602851, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_602851, "EngineVersion", newJString(EngineVersion))
  add(formData_602851, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_602851, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_602851, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602851, "Engine", newJString(Engine))
  add(formData_602851, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602851, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_602851, "DBName", newJString(DBName))
  add(formData_602851, "Iops", newJInt(Iops))
  add(formData_602851, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_602851, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_602851, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_602851.add "Tags", Tags
  add(formData_602851, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_602851, "OptionGroupName", newJString(OptionGroupName))
  add(query_602850, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_602851.add "DBSecurityGroups", DBSecurityGroups
  add(formData_602851, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_602851, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_602849.call(nil, query_602850, nil, formData_602851, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_602790(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_602791, base: "/",
    url: url_PostCreateDBInstance_602792, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_602729 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBInstance_602731(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_602730(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_602732 = query.getOrDefault("Engine")
  valid_602732 = validateParameter(valid_602732, JString, required = true,
                                 default = nil)
  if valid_602732 != nil:
    section.add "Engine", valid_602732
  var valid_602733 = query.getOrDefault("CopyTagsToSnapshot")
  valid_602733 = validateParameter(valid_602733, JBool, required = false, default = nil)
  if valid_602733 != nil:
    section.add "CopyTagsToSnapshot", valid_602733
  var valid_602734 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_602734 = validateParameter(valid_602734, JInt, required = false, default = nil)
  if valid_602734 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_602734
  var valid_602735 = query.getOrDefault("MonitoringInterval")
  valid_602735 = validateParameter(valid_602735, JInt, required = false, default = nil)
  if valid_602735 != nil:
    section.add "MonitoringInterval", valid_602735
  var valid_602736 = query.getOrDefault("KmsKeyId")
  valid_602736 = validateParameter(valid_602736, JString, required = false,
                                 default = nil)
  if valid_602736 != nil:
    section.add "KmsKeyId", valid_602736
  var valid_602737 = query.getOrDefault("MonitoringRoleArn")
  valid_602737 = validateParameter(valid_602737, JString, required = false,
                                 default = nil)
  if valid_602737 != nil:
    section.add "MonitoringRoleArn", valid_602737
  var valid_602738 = query.getOrDefault("ProcessorFeatures")
  valid_602738 = validateParameter(valid_602738, JArray, required = false,
                                 default = nil)
  if valid_602738 != nil:
    section.add "ProcessorFeatures", valid_602738
  var valid_602739 = query.getOrDefault("MasterUsername")
  valid_602739 = validateParameter(valid_602739, JString, required = false,
                                 default = nil)
  if valid_602739 != nil:
    section.add "MasterUsername", valid_602739
  var valid_602740 = query.getOrDefault("BackupRetentionPeriod")
  valid_602740 = validateParameter(valid_602740, JInt, required = false, default = nil)
  if valid_602740 != nil:
    section.add "BackupRetentionPeriod", valid_602740
  var valid_602741 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_602741 = validateParameter(valid_602741, JArray, required = false,
                                 default = nil)
  if valid_602741 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602741
  var valid_602742 = query.getOrDefault("EngineVersion")
  valid_602742 = validateParameter(valid_602742, JString, required = false,
                                 default = nil)
  if valid_602742 != nil:
    section.add "EngineVersion", valid_602742
  var valid_602743 = query.getOrDefault("Action")
  valid_602743 = validateParameter(valid_602743, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_602743 != nil:
    section.add "Action", valid_602743
  var valid_602744 = query.getOrDefault("Domain")
  valid_602744 = validateParameter(valid_602744, JString, required = false,
                                 default = nil)
  if valid_602744 != nil:
    section.add "Domain", valid_602744
  var valid_602745 = query.getOrDefault("VpcSecurityGroupIds")
  valid_602745 = validateParameter(valid_602745, JArray, required = false,
                                 default = nil)
  if valid_602745 != nil:
    section.add "VpcSecurityGroupIds", valid_602745
  var valid_602746 = query.getOrDefault("AllocatedStorage")
  valid_602746 = validateParameter(valid_602746, JInt, required = false, default = nil)
  if valid_602746 != nil:
    section.add "AllocatedStorage", valid_602746
  var valid_602747 = query.getOrDefault("EnablePerformanceInsights")
  valid_602747 = validateParameter(valid_602747, JBool, required = false, default = nil)
  if valid_602747 != nil:
    section.add "EnablePerformanceInsights", valid_602747
  var valid_602748 = query.getOrDefault("PubliclyAccessible")
  valid_602748 = validateParameter(valid_602748, JBool, required = false, default = nil)
  if valid_602748 != nil:
    section.add "PubliclyAccessible", valid_602748
  var valid_602749 = query.getOrDefault("DBName")
  valid_602749 = validateParameter(valid_602749, JString, required = false,
                                 default = nil)
  if valid_602749 != nil:
    section.add "DBName", valid_602749
  var valid_602750 = query.getOrDefault("TdeCredentialPassword")
  valid_602750 = validateParameter(valid_602750, JString, required = false,
                                 default = nil)
  if valid_602750 != nil:
    section.add "TdeCredentialPassword", valid_602750
  var valid_602751 = query.getOrDefault("StorageEncrypted")
  valid_602751 = validateParameter(valid_602751, JBool, required = false, default = nil)
  if valid_602751 != nil:
    section.add "StorageEncrypted", valid_602751
  var valid_602752 = query.getOrDefault("DBParameterGroupName")
  valid_602752 = validateParameter(valid_602752, JString, required = false,
                                 default = nil)
  if valid_602752 != nil:
    section.add "DBParameterGroupName", valid_602752
  var valid_602753 = query.getOrDefault("DeletionProtection")
  valid_602753 = validateParameter(valid_602753, JBool, required = false, default = nil)
  if valid_602753 != nil:
    section.add "DeletionProtection", valid_602753
  var valid_602754 = query.getOrDefault("CharacterSetName")
  valid_602754 = validateParameter(valid_602754, JString, required = false,
                                 default = nil)
  if valid_602754 != nil:
    section.add "CharacterSetName", valid_602754
  var valid_602755 = query.getOrDefault("Tags")
  valid_602755 = validateParameter(valid_602755, JArray, required = false,
                                 default = nil)
  if valid_602755 != nil:
    section.add "Tags", valid_602755
  var valid_602756 = query.getOrDefault("MaxAllocatedStorage")
  valid_602756 = validateParameter(valid_602756, JInt, required = false, default = nil)
  if valid_602756 != nil:
    section.add "MaxAllocatedStorage", valid_602756
  var valid_602757 = query.getOrDefault("DBClusterIdentifier")
  valid_602757 = validateParameter(valid_602757, JString, required = false,
                                 default = nil)
  if valid_602757 != nil:
    section.add "DBClusterIdentifier", valid_602757
  var valid_602758 = query.getOrDefault("LicenseModel")
  valid_602758 = validateParameter(valid_602758, JString, required = false,
                                 default = nil)
  if valid_602758 != nil:
    section.add "LicenseModel", valid_602758
  var valid_602759 = query.getOrDefault("DBInstanceIdentifier")
  valid_602759 = validateParameter(valid_602759, JString, required = true,
                                 default = nil)
  if valid_602759 != nil:
    section.add "DBInstanceIdentifier", valid_602759
  var valid_602760 = query.getOrDefault("TdeCredentialArn")
  valid_602760 = validateParameter(valid_602760, JString, required = false,
                                 default = nil)
  if valid_602760 != nil:
    section.add "TdeCredentialArn", valid_602760
  var valid_602761 = query.getOrDefault("PromotionTier")
  valid_602761 = validateParameter(valid_602761, JInt, required = false, default = nil)
  if valid_602761 != nil:
    section.add "PromotionTier", valid_602761
  var valid_602762 = query.getOrDefault("StorageType")
  valid_602762 = validateParameter(valid_602762, JString, required = false,
                                 default = nil)
  if valid_602762 != nil:
    section.add "StorageType", valid_602762
  var valid_602763 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602763 = validateParameter(valid_602763, JBool, required = false, default = nil)
  if valid_602763 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602763
  var valid_602764 = query.getOrDefault("MultiAZ")
  valid_602764 = validateParameter(valid_602764, JBool, required = false, default = nil)
  if valid_602764 != nil:
    section.add "MultiAZ", valid_602764
  var valid_602765 = query.getOrDefault("DBSecurityGroups")
  valid_602765 = validateParameter(valid_602765, JArray, required = false,
                                 default = nil)
  if valid_602765 != nil:
    section.add "DBSecurityGroups", valid_602765
  var valid_602766 = query.getOrDefault("Port")
  valid_602766 = validateParameter(valid_602766, JInt, required = false, default = nil)
  if valid_602766 != nil:
    section.add "Port", valid_602766
  var valid_602767 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_602767 = validateParameter(valid_602767, JString, required = false,
                                 default = nil)
  if valid_602767 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_602767
  var valid_602768 = query.getOrDefault("MasterUserPassword")
  valid_602768 = validateParameter(valid_602768, JString, required = false,
                                 default = nil)
  if valid_602768 != nil:
    section.add "MasterUserPassword", valid_602768
  var valid_602769 = query.getOrDefault("AvailabilityZone")
  valid_602769 = validateParameter(valid_602769, JString, required = false,
                                 default = nil)
  if valid_602769 != nil:
    section.add "AvailabilityZone", valid_602769
  var valid_602770 = query.getOrDefault("OptionGroupName")
  valid_602770 = validateParameter(valid_602770, JString, required = false,
                                 default = nil)
  if valid_602770 != nil:
    section.add "OptionGroupName", valid_602770
  var valid_602771 = query.getOrDefault("DBSubnetGroupName")
  valid_602771 = validateParameter(valid_602771, JString, required = false,
                                 default = nil)
  if valid_602771 != nil:
    section.add "DBSubnetGroupName", valid_602771
  var valid_602772 = query.getOrDefault("PreferredBackupWindow")
  valid_602772 = validateParameter(valid_602772, JString, required = false,
                                 default = nil)
  if valid_602772 != nil:
    section.add "PreferredBackupWindow", valid_602772
  var valid_602773 = query.getOrDefault("DBInstanceClass")
  valid_602773 = validateParameter(valid_602773, JString, required = true,
                                 default = nil)
  if valid_602773 != nil:
    section.add "DBInstanceClass", valid_602773
  var valid_602774 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_602774 = validateParameter(valid_602774, JString, required = false,
                                 default = nil)
  if valid_602774 != nil:
    section.add "PreferredMaintenanceWindow", valid_602774
  var valid_602775 = query.getOrDefault("Timezone")
  valid_602775 = validateParameter(valid_602775, JString, required = false,
                                 default = nil)
  if valid_602775 != nil:
    section.add "Timezone", valid_602775
  var valid_602776 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602776 = validateParameter(valid_602776, JBool, required = false, default = nil)
  if valid_602776 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602776
  var valid_602777 = query.getOrDefault("Iops")
  valid_602777 = validateParameter(valid_602777, JInt, required = false, default = nil)
  if valid_602777 != nil:
    section.add "Iops", valid_602777
  var valid_602778 = query.getOrDefault("Version")
  valid_602778 = validateParameter(valid_602778, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602778 != nil:
    section.add "Version", valid_602778
  var valid_602779 = query.getOrDefault("DomainIAMRoleName")
  valid_602779 = validateParameter(valid_602779, JString, required = false,
                                 default = nil)
  if valid_602779 != nil:
    section.add "DomainIAMRoleName", valid_602779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_602780 = header.getOrDefault("X-Amz-Security-Token")
  valid_602780 = validateParameter(valid_602780, JString, required = false,
                                 default = nil)
  if valid_602780 != nil:
    section.add "X-Amz-Security-Token", valid_602780
  var valid_602781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602781 = validateParameter(valid_602781, JString, required = false,
                                 default = nil)
  if valid_602781 != nil:
    section.add "X-Amz-SignedHeaders", valid_602781
  var valid_602782 = header.getOrDefault("X-Amz-Signature")
  valid_602782 = validateParameter(valid_602782, JString, required = false,
                                 default = nil)
  if valid_602782 != nil:
    section.add "X-Amz-Signature", valid_602782
  var valid_602783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602783 = validateParameter(valid_602783, JString, required = false,
                                 default = nil)
  if valid_602783 != nil:
    section.add "X-Amz-Content-Sha256", valid_602783
  var valid_602784 = header.getOrDefault("X-Amz-Date")
  valid_602784 = validateParameter(valid_602784, JString, required = false,
                                 default = nil)
  if valid_602784 != nil:
    section.add "X-Amz-Date", valid_602784
  var valid_602785 = header.getOrDefault("X-Amz-Credential")
  valid_602785 = validateParameter(valid_602785, JString, required = false,
                                 default = nil)
  if valid_602785 != nil:
    section.add "X-Amz-Credential", valid_602785
  var valid_602786 = header.getOrDefault("X-Amz-Algorithm")
  valid_602786 = validateParameter(valid_602786, JString, required = false,
                                 default = nil)
  if valid_602786 != nil:
    section.add "X-Amz-Algorithm", valid_602786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602787: Call_GetCreateDBInstance_602729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_602787.validator(path, query, header, formData, body)
  let scheme = call_602787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602787.url(scheme.get, call_602787.host, call_602787.base,
                         call_602787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602787, url, valid)

proc call*(call_602788: Call_GetCreateDBInstance_602729; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_602789 = newJObject()
  add(query_602789, "Engine", newJString(Engine))
  add(query_602789, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_602789, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_602789, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_602789, "KmsKeyId", newJString(KmsKeyId))
  add(query_602789, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_602789.add "ProcessorFeatures", ProcessorFeatures
  add(query_602789, "MasterUsername", newJString(MasterUsername))
  add(query_602789, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_602789.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_602789, "EngineVersion", newJString(EngineVersion))
  add(query_602789, "Action", newJString(Action))
  add(query_602789, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_602789.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_602789, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_602789, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_602789, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_602789, "DBName", newJString(DBName))
  add(query_602789, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_602789, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_602789, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_602789, "DeletionProtection", newJBool(DeletionProtection))
  add(query_602789, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_602789.add "Tags", Tags
  add(query_602789, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_602789, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_602789, "LicenseModel", newJString(LicenseModel))
  add(query_602789, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_602789, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_602789, "PromotionTier", newJInt(PromotionTier))
  add(query_602789, "StorageType", newJString(StorageType))
  add(query_602789, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_602789, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_602789.add "DBSecurityGroups", DBSecurityGroups
  add(query_602789, "Port", newJInt(Port))
  add(query_602789, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_602789, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_602789, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_602789, "OptionGroupName", newJString(OptionGroupName))
  add(query_602789, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_602789, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_602789, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_602789, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_602789, "Timezone", newJString(Timezone))
  add(query_602789, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_602789, "Iops", newJInt(Iops))
  add(query_602789, "Version", newJString(Version))
  add(query_602789, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_602788.call(nil, query_602789, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_602729(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_602730, base: "/",
    url: url_GetCreateDBInstance_602731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_602898 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBInstanceReadReplica_602900(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_602899(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602901 = query.getOrDefault("Action")
  valid_602901 = validateParameter(valid_602901, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_602901 != nil:
    section.add "Action", valid_602901
  var valid_602902 = query.getOrDefault("Version")
  valid_602902 = validateParameter(valid_602902, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602902 != nil:
    section.add "Version", valid_602902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602903 = header.getOrDefault("X-Amz-Signature")
  valid_602903 = validateParameter(valid_602903, JString, required = false,
                                 default = nil)
  if valid_602903 != nil:
    section.add "X-Amz-Signature", valid_602903
  var valid_602904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Content-Sha256", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Date")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Date", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-Credential")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-Credential", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Security-Token")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Security-Token", valid_602907
  var valid_602908 = header.getOrDefault("X-Amz-Algorithm")
  valid_602908 = validateParameter(valid_602908, JString, required = false,
                                 default = nil)
  if valid_602908 != nil:
    section.add "X-Amz-Algorithm", valid_602908
  var valid_602909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-SignedHeaders", valid_602909
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_602910 = formData.getOrDefault("Port")
  valid_602910 = validateParameter(valid_602910, JInt, required = false, default = nil)
  if valid_602910 != nil:
    section.add "Port", valid_602910
  var valid_602911 = formData.getOrDefault("DBInstanceClass")
  valid_602911 = validateParameter(valid_602911, JString, required = false,
                                 default = nil)
  if valid_602911 != nil:
    section.add "DBInstanceClass", valid_602911
  var valid_602912 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_602912 = validateParameter(valid_602912, JBool, required = false, default = nil)
  if valid_602912 != nil:
    section.add "UseDefaultProcessorFeatures", valid_602912
  var valid_602913 = formData.getOrDefault("MultiAZ")
  valid_602913 = validateParameter(valid_602913, JBool, required = false, default = nil)
  if valid_602913 != nil:
    section.add "MultiAZ", valid_602913
  var valid_602914 = formData.getOrDefault("Domain")
  valid_602914 = validateParameter(valid_602914, JString, required = false,
                                 default = nil)
  if valid_602914 != nil:
    section.add "Domain", valid_602914
  var valid_602915 = formData.getOrDefault("MonitoringRoleArn")
  valid_602915 = validateParameter(valid_602915, JString, required = false,
                                 default = nil)
  if valid_602915 != nil:
    section.add "MonitoringRoleArn", valid_602915
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_602916 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_602916 = validateParameter(valid_602916, JString, required = true,
                                 default = nil)
  if valid_602916 != nil:
    section.add "SourceDBInstanceIdentifier", valid_602916
  var valid_602917 = formData.getOrDefault("DBParameterGroupName")
  valid_602917 = validateParameter(valid_602917, JString, required = false,
                                 default = nil)
  if valid_602917 != nil:
    section.add "DBParameterGroupName", valid_602917
  var valid_602918 = formData.getOrDefault("SourceRegion")
  valid_602918 = validateParameter(valid_602918, JString, required = false,
                                 default = nil)
  if valid_602918 != nil:
    section.add "SourceRegion", valid_602918
  var valid_602919 = formData.getOrDefault("MonitoringInterval")
  valid_602919 = validateParameter(valid_602919, JInt, required = false, default = nil)
  if valid_602919 != nil:
    section.add "MonitoringInterval", valid_602919
  var valid_602920 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_602920 = validateParameter(valid_602920, JArray, required = false,
                                 default = nil)
  if valid_602920 != nil:
    section.add "VpcSecurityGroupIds", valid_602920
  var valid_602921 = formData.getOrDefault("AvailabilityZone")
  valid_602921 = validateParameter(valid_602921, JString, required = false,
                                 default = nil)
  if valid_602921 != nil:
    section.add "AvailabilityZone", valid_602921
  var valid_602922 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602922 = validateParameter(valid_602922, JBool, required = false, default = nil)
  if valid_602922 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602922
  var valid_602923 = formData.getOrDefault("KmsKeyId")
  valid_602923 = validateParameter(valid_602923, JString, required = false,
                                 default = nil)
  if valid_602923 != nil:
    section.add "KmsKeyId", valid_602923
  var valid_602924 = formData.getOrDefault("EnablePerformanceInsights")
  valid_602924 = validateParameter(valid_602924, JBool, required = false, default = nil)
  if valid_602924 != nil:
    section.add "EnablePerformanceInsights", valid_602924
  var valid_602925 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_602925 = validateParameter(valid_602925, JBool, required = false, default = nil)
  if valid_602925 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602925
  var valid_602926 = formData.getOrDefault("PreSignedUrl")
  valid_602926 = validateParameter(valid_602926, JString, required = false,
                                 default = nil)
  if valid_602926 != nil:
    section.add "PreSignedUrl", valid_602926
  var valid_602927 = formData.getOrDefault("DBInstanceIdentifier")
  valid_602927 = validateParameter(valid_602927, JString, required = true,
                                 default = nil)
  if valid_602927 != nil:
    section.add "DBInstanceIdentifier", valid_602927
  var valid_602928 = formData.getOrDefault("Iops")
  valid_602928 = validateParameter(valid_602928, JInt, required = false, default = nil)
  if valid_602928 != nil:
    section.add "Iops", valid_602928
  var valid_602929 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_602929 = validateParameter(valid_602929, JArray, required = false,
                                 default = nil)
  if valid_602929 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602929
  var valid_602930 = formData.getOrDefault("PubliclyAccessible")
  valid_602930 = validateParameter(valid_602930, JBool, required = false, default = nil)
  if valid_602930 != nil:
    section.add "PubliclyAccessible", valid_602930
  var valid_602931 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_602931 = validateParameter(valid_602931, JString, required = false,
                                 default = nil)
  if valid_602931 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_602931
  var valid_602932 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_602932 = validateParameter(valid_602932, JInt, required = false, default = nil)
  if valid_602932 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_602932
  var valid_602933 = formData.getOrDefault("Tags")
  valid_602933 = validateParameter(valid_602933, JArray, required = false,
                                 default = nil)
  if valid_602933 != nil:
    section.add "Tags", valid_602933
  var valid_602934 = formData.getOrDefault("DBSubnetGroupName")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "DBSubnetGroupName", valid_602934
  var valid_602935 = formData.getOrDefault("DomainIAMRoleName")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "DomainIAMRoleName", valid_602935
  var valid_602936 = formData.getOrDefault("OptionGroupName")
  valid_602936 = validateParameter(valid_602936, JString, required = false,
                                 default = nil)
  if valid_602936 != nil:
    section.add "OptionGroupName", valid_602936
  var valid_602937 = formData.getOrDefault("StorageType")
  valid_602937 = validateParameter(valid_602937, JString, required = false,
                                 default = nil)
  if valid_602937 != nil:
    section.add "StorageType", valid_602937
  var valid_602938 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_602938 = validateParameter(valid_602938, JBool, required = false, default = nil)
  if valid_602938 != nil:
    section.add "CopyTagsToSnapshot", valid_602938
  var valid_602939 = formData.getOrDefault("DeletionProtection")
  valid_602939 = validateParameter(valid_602939, JBool, required = false, default = nil)
  if valid_602939 != nil:
    section.add "DeletionProtection", valid_602939
  var valid_602940 = formData.getOrDefault("ProcessorFeatures")
  valid_602940 = validateParameter(valid_602940, JArray, required = false,
                                 default = nil)
  if valid_602940 != nil:
    section.add "ProcessorFeatures", valid_602940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602941: Call_PostCreateDBInstanceReadReplica_602898;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_602941.validator(path, query, header, formData, body)
  let scheme = call_602941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602941.url(scheme.get, call_602941.host, call_602941.base,
                         call_602941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602941, url, valid)

proc call*(call_602942: Call_PostCreateDBInstanceReadReplica_602898;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_602943 = newJObject()
  var formData_602944 = newJObject()
  add(formData_602944, "Port", newJInt(Port))
  add(formData_602944, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_602944, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_602944, "MultiAZ", newJBool(MultiAZ))
  add(formData_602944, "Domain", newJString(Domain))
  add(formData_602944, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_602944, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_602944, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_602944, "SourceRegion", newJString(SourceRegion))
  add(formData_602944, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_602944.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_602944, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_602944, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_602944, "KmsKeyId", newJString(KmsKeyId))
  add(formData_602944, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_602944, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_602944, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_602944, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_602944, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_602944.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_602944, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_602943, "Action", newJString(Action))
  add(formData_602944, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_602944, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_602944.add "Tags", Tags
  add(formData_602944, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_602944, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_602944, "OptionGroupName", newJString(OptionGroupName))
  add(query_602943, "Version", newJString(Version))
  add(formData_602944, "StorageType", newJString(StorageType))
  add(formData_602944, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_602944, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_602944.add "ProcessorFeatures", ProcessorFeatures
  result = call_602942.call(nil, query_602943, nil, formData_602944, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_602898(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_602899, base: "/",
    url: url_PostCreateDBInstanceReadReplica_602900,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_602852 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBInstanceReadReplica_602854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_602853(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_602855 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_602855 = validateParameter(valid_602855, JBool, required = false, default = nil)
  if valid_602855 != nil:
    section.add "UseDefaultProcessorFeatures", valid_602855
  var valid_602856 = query.getOrDefault("DeletionProtection")
  valid_602856 = validateParameter(valid_602856, JBool, required = false, default = nil)
  if valid_602856 != nil:
    section.add "DeletionProtection", valid_602856
  var valid_602857 = query.getOrDefault("DBParameterGroupName")
  valid_602857 = validateParameter(valid_602857, JString, required = false,
                                 default = nil)
  if valid_602857 != nil:
    section.add "DBParameterGroupName", valid_602857
  var valid_602858 = query.getOrDefault("CopyTagsToSnapshot")
  valid_602858 = validateParameter(valid_602858, JBool, required = false, default = nil)
  if valid_602858 != nil:
    section.add "CopyTagsToSnapshot", valid_602858
  var valid_602859 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_602859 = validateParameter(valid_602859, JInt, required = false, default = nil)
  if valid_602859 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_602859
  var valid_602860 = query.getOrDefault("Tags")
  valid_602860 = validateParameter(valid_602860, JArray, required = false,
                                 default = nil)
  if valid_602860 != nil:
    section.add "Tags", valid_602860
  var valid_602861 = query.getOrDefault("MonitoringInterval")
  valid_602861 = validateParameter(valid_602861, JInt, required = false, default = nil)
  if valid_602861 != nil:
    section.add "MonitoringInterval", valid_602861
  var valid_602862 = query.getOrDefault("MonitoringRoleArn")
  valid_602862 = validateParameter(valid_602862, JString, required = false,
                                 default = nil)
  if valid_602862 != nil:
    section.add "MonitoringRoleArn", valid_602862
  var valid_602863 = query.getOrDefault("KmsKeyId")
  valid_602863 = validateParameter(valid_602863, JString, required = false,
                                 default = nil)
  if valid_602863 != nil:
    section.add "KmsKeyId", valid_602863
  var valid_602864 = query.getOrDefault("PreSignedUrl")
  valid_602864 = validateParameter(valid_602864, JString, required = false,
                                 default = nil)
  if valid_602864 != nil:
    section.add "PreSignedUrl", valid_602864
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_602865 = query.getOrDefault("DBInstanceIdentifier")
  valid_602865 = validateParameter(valid_602865, JString, required = true,
                                 default = nil)
  if valid_602865 != nil:
    section.add "DBInstanceIdentifier", valid_602865
  var valid_602866 = query.getOrDefault("ProcessorFeatures")
  valid_602866 = validateParameter(valid_602866, JArray, required = false,
                                 default = nil)
  if valid_602866 != nil:
    section.add "ProcessorFeatures", valid_602866
  var valid_602867 = query.getOrDefault("StorageType")
  valid_602867 = validateParameter(valid_602867, JString, required = false,
                                 default = nil)
  if valid_602867 != nil:
    section.add "StorageType", valid_602867
  var valid_602868 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_602868 = validateParameter(valid_602868, JBool, required = false, default = nil)
  if valid_602868 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_602868
  var valid_602869 = query.getOrDefault("SourceRegion")
  valid_602869 = validateParameter(valid_602869, JString, required = false,
                                 default = nil)
  if valid_602869 != nil:
    section.add "SourceRegion", valid_602869
  var valid_602870 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_602870 = validateParameter(valid_602870, JArray, required = false,
                                 default = nil)
  if valid_602870 != nil:
    section.add "EnableCloudwatchLogsExports", valid_602870
  var valid_602871 = query.getOrDefault("Action")
  valid_602871 = validateParameter(valid_602871, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_602871 != nil:
    section.add "Action", valid_602871
  var valid_602872 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_602872 = validateParameter(valid_602872, JString, required = true,
                                 default = nil)
  if valid_602872 != nil:
    section.add "SourceDBInstanceIdentifier", valid_602872
  var valid_602873 = query.getOrDefault("MultiAZ")
  valid_602873 = validateParameter(valid_602873, JBool, required = false, default = nil)
  if valid_602873 != nil:
    section.add "MultiAZ", valid_602873
  var valid_602874 = query.getOrDefault("Port")
  valid_602874 = validateParameter(valid_602874, JInt, required = false, default = nil)
  if valid_602874 != nil:
    section.add "Port", valid_602874
  var valid_602875 = query.getOrDefault("Domain")
  valid_602875 = validateParameter(valid_602875, JString, required = false,
                                 default = nil)
  if valid_602875 != nil:
    section.add "Domain", valid_602875
  var valid_602876 = query.getOrDefault("VpcSecurityGroupIds")
  valid_602876 = validateParameter(valid_602876, JArray, required = false,
                                 default = nil)
  if valid_602876 != nil:
    section.add "VpcSecurityGroupIds", valid_602876
  var valid_602877 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_602877 = validateParameter(valid_602877, JString, required = false,
                                 default = nil)
  if valid_602877 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_602877
  var valid_602878 = query.getOrDefault("AvailabilityZone")
  valid_602878 = validateParameter(valid_602878, JString, required = false,
                                 default = nil)
  if valid_602878 != nil:
    section.add "AvailabilityZone", valid_602878
  var valid_602879 = query.getOrDefault("OptionGroupName")
  valid_602879 = validateParameter(valid_602879, JString, required = false,
                                 default = nil)
  if valid_602879 != nil:
    section.add "OptionGroupName", valid_602879
  var valid_602880 = query.getOrDefault("DBSubnetGroupName")
  valid_602880 = validateParameter(valid_602880, JString, required = false,
                                 default = nil)
  if valid_602880 != nil:
    section.add "DBSubnetGroupName", valid_602880
  var valid_602881 = query.getOrDefault("Version")
  valid_602881 = validateParameter(valid_602881, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602881 != nil:
    section.add "Version", valid_602881
  var valid_602882 = query.getOrDefault("DBInstanceClass")
  valid_602882 = validateParameter(valid_602882, JString, required = false,
                                 default = nil)
  if valid_602882 != nil:
    section.add "DBInstanceClass", valid_602882
  var valid_602883 = query.getOrDefault("PubliclyAccessible")
  valid_602883 = validateParameter(valid_602883, JBool, required = false, default = nil)
  if valid_602883 != nil:
    section.add "PubliclyAccessible", valid_602883
  var valid_602884 = query.getOrDefault("EnablePerformanceInsights")
  valid_602884 = validateParameter(valid_602884, JBool, required = false, default = nil)
  if valid_602884 != nil:
    section.add "EnablePerformanceInsights", valid_602884
  var valid_602885 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_602885 = validateParameter(valid_602885, JBool, required = false, default = nil)
  if valid_602885 != nil:
    section.add "AutoMinorVersionUpgrade", valid_602885
  var valid_602886 = query.getOrDefault("Iops")
  valid_602886 = validateParameter(valid_602886, JInt, required = false, default = nil)
  if valid_602886 != nil:
    section.add "Iops", valid_602886
  var valid_602887 = query.getOrDefault("DomainIAMRoleName")
  valid_602887 = validateParameter(valid_602887, JString, required = false,
                                 default = nil)
  if valid_602887 != nil:
    section.add "DomainIAMRoleName", valid_602887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602888 = header.getOrDefault("X-Amz-Signature")
  valid_602888 = validateParameter(valid_602888, JString, required = false,
                                 default = nil)
  if valid_602888 != nil:
    section.add "X-Amz-Signature", valid_602888
  var valid_602889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602889 = validateParameter(valid_602889, JString, required = false,
                                 default = nil)
  if valid_602889 != nil:
    section.add "X-Amz-Content-Sha256", valid_602889
  var valid_602890 = header.getOrDefault("X-Amz-Date")
  valid_602890 = validateParameter(valid_602890, JString, required = false,
                                 default = nil)
  if valid_602890 != nil:
    section.add "X-Amz-Date", valid_602890
  var valid_602891 = header.getOrDefault("X-Amz-Credential")
  valid_602891 = validateParameter(valid_602891, JString, required = false,
                                 default = nil)
  if valid_602891 != nil:
    section.add "X-Amz-Credential", valid_602891
  var valid_602892 = header.getOrDefault("X-Amz-Security-Token")
  valid_602892 = validateParameter(valid_602892, JString, required = false,
                                 default = nil)
  if valid_602892 != nil:
    section.add "X-Amz-Security-Token", valid_602892
  var valid_602893 = header.getOrDefault("X-Amz-Algorithm")
  valid_602893 = validateParameter(valid_602893, JString, required = false,
                                 default = nil)
  if valid_602893 != nil:
    section.add "X-Amz-Algorithm", valid_602893
  var valid_602894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602894 = validateParameter(valid_602894, JString, required = false,
                                 default = nil)
  if valid_602894 != nil:
    section.add "X-Amz-SignedHeaders", valid_602894
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602895: Call_GetCreateDBInstanceReadReplica_602852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_602895.validator(path, query, header, formData, body)
  let scheme = call_602895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602895.url(scheme.get, call_602895.host, call_602895.base,
                         call_602895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602895, url, valid)

proc call*(call_602896: Call_GetCreateDBInstanceReadReplica_602852;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_602897 = newJObject()
  add(query_602897, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_602897, "DeletionProtection", newJBool(DeletionProtection))
  add(query_602897, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_602897, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_602897, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_602897.add "Tags", Tags
  add(query_602897, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_602897, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_602897, "KmsKeyId", newJString(KmsKeyId))
  add(query_602897, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_602897, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_602897.add "ProcessorFeatures", ProcessorFeatures
  add(query_602897, "StorageType", newJString(StorageType))
  add(query_602897, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_602897, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_602897.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_602897, "Action", newJString(Action))
  add(query_602897, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_602897, "MultiAZ", newJBool(MultiAZ))
  add(query_602897, "Port", newJInt(Port))
  add(query_602897, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_602897.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_602897, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_602897, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_602897, "OptionGroupName", newJString(OptionGroupName))
  add(query_602897, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_602897, "Version", newJString(Version))
  add(query_602897, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_602897, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_602897, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_602897, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_602897, "Iops", newJInt(Iops))
  add(query_602897, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_602896.call(nil, query_602897, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_602852(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_602853, base: "/",
    url: url_GetCreateDBInstanceReadReplica_602854,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_602964 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBParameterGroup_602966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_602965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602967 = query.getOrDefault("Action")
  valid_602967 = validateParameter(valid_602967, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_602967 != nil:
    section.add "Action", valid_602967
  var valid_602968 = query.getOrDefault("Version")
  valid_602968 = validateParameter(valid_602968, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602968 != nil:
    section.add "Version", valid_602968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602969 = header.getOrDefault("X-Amz-Signature")
  valid_602969 = validateParameter(valid_602969, JString, required = false,
                                 default = nil)
  if valid_602969 != nil:
    section.add "X-Amz-Signature", valid_602969
  var valid_602970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602970 = validateParameter(valid_602970, JString, required = false,
                                 default = nil)
  if valid_602970 != nil:
    section.add "X-Amz-Content-Sha256", valid_602970
  var valid_602971 = header.getOrDefault("X-Amz-Date")
  valid_602971 = validateParameter(valid_602971, JString, required = false,
                                 default = nil)
  if valid_602971 != nil:
    section.add "X-Amz-Date", valid_602971
  var valid_602972 = header.getOrDefault("X-Amz-Credential")
  valid_602972 = validateParameter(valid_602972, JString, required = false,
                                 default = nil)
  if valid_602972 != nil:
    section.add "X-Amz-Credential", valid_602972
  var valid_602973 = header.getOrDefault("X-Amz-Security-Token")
  valid_602973 = validateParameter(valid_602973, JString, required = false,
                                 default = nil)
  if valid_602973 != nil:
    section.add "X-Amz-Security-Token", valid_602973
  var valid_602974 = header.getOrDefault("X-Amz-Algorithm")
  valid_602974 = validateParameter(valid_602974, JString, required = false,
                                 default = nil)
  if valid_602974 != nil:
    section.add "X-Amz-Algorithm", valid_602974
  var valid_602975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602975 = validateParameter(valid_602975, JString, required = false,
                                 default = nil)
  if valid_602975 != nil:
    section.add "X-Amz-SignedHeaders", valid_602975
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_602976 = formData.getOrDefault("Description")
  valid_602976 = validateParameter(valid_602976, JString, required = true,
                                 default = nil)
  if valid_602976 != nil:
    section.add "Description", valid_602976
  var valid_602977 = formData.getOrDefault("DBParameterGroupName")
  valid_602977 = validateParameter(valid_602977, JString, required = true,
                                 default = nil)
  if valid_602977 != nil:
    section.add "DBParameterGroupName", valid_602977
  var valid_602978 = formData.getOrDefault("Tags")
  valid_602978 = validateParameter(valid_602978, JArray, required = false,
                                 default = nil)
  if valid_602978 != nil:
    section.add "Tags", valid_602978
  var valid_602979 = formData.getOrDefault("DBParameterGroupFamily")
  valid_602979 = validateParameter(valid_602979, JString, required = true,
                                 default = nil)
  if valid_602979 != nil:
    section.add "DBParameterGroupFamily", valid_602979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602980: Call_PostCreateDBParameterGroup_602964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_602980.validator(path, query, header, formData, body)
  let scheme = call_602980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602980.url(scheme.get, call_602980.host, call_602980.base,
                         call_602980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602980, url, valid)

proc call*(call_602981: Call_PostCreateDBParameterGroup_602964;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_602982 = newJObject()
  var formData_602983 = newJObject()
  add(formData_602983, "Description", newJString(Description))
  add(formData_602983, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_602982, "Action", newJString(Action))
  if Tags != nil:
    formData_602983.add "Tags", Tags
  add(query_602982, "Version", newJString(Version))
  add(formData_602983, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_602981.call(nil, query_602982, nil, formData_602983, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_602964(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_602965, base: "/",
    url: url_PostCreateDBParameterGroup_602966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_602945 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBParameterGroup_602947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_602946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_602948 = query.getOrDefault("DBParameterGroupFamily")
  valid_602948 = validateParameter(valid_602948, JString, required = true,
                                 default = nil)
  if valid_602948 != nil:
    section.add "DBParameterGroupFamily", valid_602948
  var valid_602949 = query.getOrDefault("DBParameterGroupName")
  valid_602949 = validateParameter(valid_602949, JString, required = true,
                                 default = nil)
  if valid_602949 != nil:
    section.add "DBParameterGroupName", valid_602949
  var valid_602950 = query.getOrDefault("Tags")
  valid_602950 = validateParameter(valid_602950, JArray, required = false,
                                 default = nil)
  if valid_602950 != nil:
    section.add "Tags", valid_602950
  var valid_602951 = query.getOrDefault("Action")
  valid_602951 = validateParameter(valid_602951, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_602951 != nil:
    section.add "Action", valid_602951
  var valid_602952 = query.getOrDefault("Description")
  valid_602952 = validateParameter(valid_602952, JString, required = true,
                                 default = nil)
  if valid_602952 != nil:
    section.add "Description", valid_602952
  var valid_602953 = query.getOrDefault("Version")
  valid_602953 = validateParameter(valid_602953, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602953 != nil:
    section.add "Version", valid_602953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602954 = header.getOrDefault("X-Amz-Signature")
  valid_602954 = validateParameter(valid_602954, JString, required = false,
                                 default = nil)
  if valid_602954 != nil:
    section.add "X-Amz-Signature", valid_602954
  var valid_602955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602955 = validateParameter(valid_602955, JString, required = false,
                                 default = nil)
  if valid_602955 != nil:
    section.add "X-Amz-Content-Sha256", valid_602955
  var valid_602956 = header.getOrDefault("X-Amz-Date")
  valid_602956 = validateParameter(valid_602956, JString, required = false,
                                 default = nil)
  if valid_602956 != nil:
    section.add "X-Amz-Date", valid_602956
  var valid_602957 = header.getOrDefault("X-Amz-Credential")
  valid_602957 = validateParameter(valid_602957, JString, required = false,
                                 default = nil)
  if valid_602957 != nil:
    section.add "X-Amz-Credential", valid_602957
  var valid_602958 = header.getOrDefault("X-Amz-Security-Token")
  valid_602958 = validateParameter(valid_602958, JString, required = false,
                                 default = nil)
  if valid_602958 != nil:
    section.add "X-Amz-Security-Token", valid_602958
  var valid_602959 = header.getOrDefault("X-Amz-Algorithm")
  valid_602959 = validateParameter(valid_602959, JString, required = false,
                                 default = nil)
  if valid_602959 != nil:
    section.add "X-Amz-Algorithm", valid_602959
  var valid_602960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602960 = validateParameter(valid_602960, JString, required = false,
                                 default = nil)
  if valid_602960 != nil:
    section.add "X-Amz-SignedHeaders", valid_602960
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602961: Call_GetCreateDBParameterGroup_602945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_602961.validator(path, query, header, formData, body)
  let scheme = call_602961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602961.url(scheme.get, call_602961.host, call_602961.base,
                         call_602961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_602961, url, valid)

proc call*(call_602962: Call_GetCreateDBParameterGroup_602945;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_602963 = newJObject()
  add(query_602963, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_602963, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_602963.add "Tags", Tags
  add(query_602963, "Action", newJString(Action))
  add(query_602963, "Description", newJString(Description))
  add(query_602963, "Version", newJString(Version))
  result = call_602962.call(nil, query_602963, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_602945(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_602946, base: "/",
    url: url_GetCreateDBParameterGroup_602947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_603009 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBProxy_603011(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_603010(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603012 = query.getOrDefault("Action")
  valid_603012 = validateParameter(valid_603012, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_603012 != nil:
    section.add "Action", valid_603012
  var valid_603013 = query.getOrDefault("Version")
  valid_603013 = validateParameter(valid_603013, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603013 != nil:
    section.add "Version", valid_603013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603014 = header.getOrDefault("X-Amz-Signature")
  valid_603014 = validateParameter(valid_603014, JString, required = false,
                                 default = nil)
  if valid_603014 != nil:
    section.add "X-Amz-Signature", valid_603014
  var valid_603015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603015 = validateParameter(valid_603015, JString, required = false,
                                 default = nil)
  if valid_603015 != nil:
    section.add "X-Amz-Content-Sha256", valid_603015
  var valid_603016 = header.getOrDefault("X-Amz-Date")
  valid_603016 = validateParameter(valid_603016, JString, required = false,
                                 default = nil)
  if valid_603016 != nil:
    section.add "X-Amz-Date", valid_603016
  var valid_603017 = header.getOrDefault("X-Amz-Credential")
  valid_603017 = validateParameter(valid_603017, JString, required = false,
                                 default = nil)
  if valid_603017 != nil:
    section.add "X-Amz-Credential", valid_603017
  var valid_603018 = header.getOrDefault("X-Amz-Security-Token")
  valid_603018 = validateParameter(valid_603018, JString, required = false,
                                 default = nil)
  if valid_603018 != nil:
    section.add "X-Amz-Security-Token", valid_603018
  var valid_603019 = header.getOrDefault("X-Amz-Algorithm")
  valid_603019 = validateParameter(valid_603019, JString, required = false,
                                 default = nil)
  if valid_603019 != nil:
    section.add "X-Amz-Algorithm", valid_603019
  var valid_603020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603020 = validateParameter(valid_603020, JString, required = false,
                                 default = nil)
  if valid_603020 != nil:
    section.add "X-Amz-SignedHeaders", valid_603020
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_603021 = formData.getOrDefault("IdleClientTimeout")
  valid_603021 = validateParameter(valid_603021, JInt, required = false, default = nil)
  if valid_603021 != nil:
    section.add "IdleClientTimeout", valid_603021
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_603022 = formData.getOrDefault("VpcSubnetIds")
  valid_603022 = validateParameter(valid_603022, JArray, required = true, default = nil)
  if valid_603022 != nil:
    section.add "VpcSubnetIds", valid_603022
  var valid_603023 = formData.getOrDefault("RequireTLS")
  valid_603023 = validateParameter(valid_603023, JBool, required = false, default = nil)
  if valid_603023 != nil:
    section.add "RequireTLS", valid_603023
  var valid_603024 = formData.getOrDefault("DebugLogging")
  valid_603024 = validateParameter(valid_603024, JBool, required = false, default = nil)
  if valid_603024 != nil:
    section.add "DebugLogging", valid_603024
  var valid_603025 = formData.getOrDefault("RoleArn")
  valid_603025 = validateParameter(valid_603025, JString, required = true,
                                 default = nil)
  if valid_603025 != nil:
    section.add "RoleArn", valid_603025
  var valid_603026 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_603026 = validateParameter(valid_603026, JArray, required = false,
                                 default = nil)
  if valid_603026 != nil:
    section.add "VpcSecurityGroupIds", valid_603026
  var valid_603027 = formData.getOrDefault("EngineFamily")
  valid_603027 = validateParameter(valid_603027, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_603027 != nil:
    section.add "EngineFamily", valid_603027
  var valid_603028 = formData.getOrDefault("Auth")
  valid_603028 = validateParameter(valid_603028, JArray, required = true, default = nil)
  if valid_603028 != nil:
    section.add "Auth", valid_603028
  var valid_603029 = formData.getOrDefault("DBProxyName")
  valid_603029 = validateParameter(valid_603029, JString, required = true,
                                 default = nil)
  if valid_603029 != nil:
    section.add "DBProxyName", valid_603029
  var valid_603030 = formData.getOrDefault("Tags")
  valid_603030 = validateParameter(valid_603030, JArray, required = false,
                                 default = nil)
  if valid_603030 != nil:
    section.add "Tags", valid_603030
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603031: Call_PostCreateDBProxy_603009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_603031.validator(path, query, header, formData, body)
  let scheme = call_603031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603031.url(scheme.get, call_603031.host, call_603031.base,
                         call_603031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603031, url, valid)

proc call*(call_603032: Call_PostCreateDBProxy_603009; VpcSubnetIds: JsonNode;
          RoleArn: string; Auth: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_603033 = newJObject()
  var formData_603034 = newJObject()
  add(formData_603034, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if VpcSubnetIds != nil:
    formData_603034.add "VpcSubnetIds", VpcSubnetIds
  add(formData_603034, "RequireTLS", newJBool(RequireTLS))
  add(formData_603034, "DebugLogging", newJBool(DebugLogging))
  add(formData_603034, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    formData_603034.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_603034, "EngineFamily", newJString(EngineFamily))
  if Auth != nil:
    formData_603034.add "Auth", Auth
  add(formData_603034, "DBProxyName", newJString(DBProxyName))
  add(query_603033, "Action", newJString(Action))
  if Tags != nil:
    formData_603034.add "Tags", Tags
  add(query_603033, "Version", newJString(Version))
  result = call_603032.call(nil, query_603033, nil, formData_603034, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_603009(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_603010,
    base: "/", url: url_PostCreateDBProxy_603011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_602984 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBProxy_602986(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_602985(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_602987 = query.getOrDefault("IdleClientTimeout")
  valid_602987 = validateParameter(valid_602987, JInt, required = false, default = nil)
  if valid_602987 != nil:
    section.add "IdleClientTimeout", valid_602987
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_602988 = query.getOrDefault("RoleArn")
  valid_602988 = validateParameter(valid_602988, JString, required = true,
                                 default = nil)
  if valid_602988 != nil:
    section.add "RoleArn", valid_602988
  var valid_602989 = query.getOrDefault("Tags")
  valid_602989 = validateParameter(valid_602989, JArray, required = false,
                                 default = nil)
  if valid_602989 != nil:
    section.add "Tags", valid_602989
  var valid_602990 = query.getOrDefault("Auth")
  valid_602990 = validateParameter(valid_602990, JArray, required = true, default = nil)
  if valid_602990 != nil:
    section.add "Auth", valid_602990
  var valid_602991 = query.getOrDefault("RequireTLS")
  valid_602991 = validateParameter(valid_602991, JBool, required = false, default = nil)
  if valid_602991 != nil:
    section.add "RequireTLS", valid_602991
  var valid_602992 = query.getOrDefault("EngineFamily")
  valid_602992 = validateParameter(valid_602992, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_602992 != nil:
    section.add "EngineFamily", valid_602992
  var valid_602993 = query.getOrDefault("Action")
  valid_602993 = validateParameter(valid_602993, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_602993 != nil:
    section.add "Action", valid_602993
  var valid_602994 = query.getOrDefault("VpcSecurityGroupIds")
  valid_602994 = validateParameter(valid_602994, JArray, required = false,
                                 default = nil)
  if valid_602994 != nil:
    section.add "VpcSecurityGroupIds", valid_602994
  var valid_602995 = query.getOrDefault("VpcSubnetIds")
  valid_602995 = validateParameter(valid_602995, JArray, required = true, default = nil)
  if valid_602995 != nil:
    section.add "VpcSubnetIds", valid_602995
  var valid_602996 = query.getOrDefault("Version")
  valid_602996 = validateParameter(valid_602996, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602996 != nil:
    section.add "Version", valid_602996
  var valid_602997 = query.getOrDefault("DebugLogging")
  valid_602997 = validateParameter(valid_602997, JBool, required = false, default = nil)
  if valid_602997 != nil:
    section.add "DebugLogging", valid_602997
  var valid_602998 = query.getOrDefault("DBProxyName")
  valid_602998 = validateParameter(valid_602998, JString, required = true,
                                 default = nil)
  if valid_602998 != nil:
    section.add "DBProxyName", valid_602998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_602999 = header.getOrDefault("X-Amz-Signature")
  valid_602999 = validateParameter(valid_602999, JString, required = false,
                                 default = nil)
  if valid_602999 != nil:
    section.add "X-Amz-Signature", valid_602999
  var valid_603000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603000 = validateParameter(valid_603000, JString, required = false,
                                 default = nil)
  if valid_603000 != nil:
    section.add "X-Amz-Content-Sha256", valid_603000
  var valid_603001 = header.getOrDefault("X-Amz-Date")
  valid_603001 = validateParameter(valid_603001, JString, required = false,
                                 default = nil)
  if valid_603001 != nil:
    section.add "X-Amz-Date", valid_603001
  var valid_603002 = header.getOrDefault("X-Amz-Credential")
  valid_603002 = validateParameter(valid_603002, JString, required = false,
                                 default = nil)
  if valid_603002 != nil:
    section.add "X-Amz-Credential", valid_603002
  var valid_603003 = header.getOrDefault("X-Amz-Security-Token")
  valid_603003 = validateParameter(valid_603003, JString, required = false,
                                 default = nil)
  if valid_603003 != nil:
    section.add "X-Amz-Security-Token", valid_603003
  var valid_603004 = header.getOrDefault("X-Amz-Algorithm")
  valid_603004 = validateParameter(valid_603004, JString, required = false,
                                 default = nil)
  if valid_603004 != nil:
    section.add "X-Amz-Algorithm", valid_603004
  var valid_603005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603005 = validateParameter(valid_603005, JString, required = false,
                                 default = nil)
  if valid_603005 != nil:
    section.add "X-Amz-SignedHeaders", valid_603005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603006: Call_GetCreateDBProxy_602984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_603006.validator(path, query, header, formData, body)
  let scheme = call_603006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603006.url(scheme.get, call_603006.host, call_603006.base,
                         call_603006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603006, url, valid)

proc call*(call_603007: Call_GetCreateDBProxy_602984; RoleArn: string;
          Auth: JsonNode; VpcSubnetIds: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; Tags: JsonNode = nil; RequireTLS: bool = false;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          VpcSecurityGroupIds: JsonNode = nil; Version: string = "2014-10-31";
          DebugLogging: bool = false): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  var query_603008 = newJObject()
  add(query_603008, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_603008, "RoleArn", newJString(RoleArn))
  if Tags != nil:
    query_603008.add "Tags", Tags
  if Auth != nil:
    query_603008.add "Auth", Auth
  add(query_603008, "RequireTLS", newJBool(RequireTLS))
  add(query_603008, "EngineFamily", newJString(EngineFamily))
  add(query_603008, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_603008.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    query_603008.add "VpcSubnetIds", VpcSubnetIds
  add(query_603008, "Version", newJString(Version))
  add(query_603008, "DebugLogging", newJBool(DebugLogging))
  add(query_603008, "DBProxyName", newJString(DBProxyName))
  result = call_603007.call(nil, query_603008, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_602984(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_602985,
    base: "/", url: url_GetCreateDBProxy_602986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_603053 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBSecurityGroup_603055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_603054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603056 = query.getOrDefault("Action")
  valid_603056 = validateParameter(valid_603056, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_603056 != nil:
    section.add "Action", valid_603056
  var valid_603057 = query.getOrDefault("Version")
  valid_603057 = validateParameter(valid_603057, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603057 != nil:
    section.add "Version", valid_603057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603058 = header.getOrDefault("X-Amz-Signature")
  valid_603058 = validateParameter(valid_603058, JString, required = false,
                                 default = nil)
  if valid_603058 != nil:
    section.add "X-Amz-Signature", valid_603058
  var valid_603059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603059 = validateParameter(valid_603059, JString, required = false,
                                 default = nil)
  if valid_603059 != nil:
    section.add "X-Amz-Content-Sha256", valid_603059
  var valid_603060 = header.getOrDefault("X-Amz-Date")
  valid_603060 = validateParameter(valid_603060, JString, required = false,
                                 default = nil)
  if valid_603060 != nil:
    section.add "X-Amz-Date", valid_603060
  var valid_603061 = header.getOrDefault("X-Amz-Credential")
  valid_603061 = validateParameter(valid_603061, JString, required = false,
                                 default = nil)
  if valid_603061 != nil:
    section.add "X-Amz-Credential", valid_603061
  var valid_603062 = header.getOrDefault("X-Amz-Security-Token")
  valid_603062 = validateParameter(valid_603062, JString, required = false,
                                 default = nil)
  if valid_603062 != nil:
    section.add "X-Amz-Security-Token", valid_603062
  var valid_603063 = header.getOrDefault("X-Amz-Algorithm")
  valid_603063 = validateParameter(valid_603063, JString, required = false,
                                 default = nil)
  if valid_603063 != nil:
    section.add "X-Amz-Algorithm", valid_603063
  var valid_603064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603064 = validateParameter(valid_603064, JString, required = false,
                                 default = nil)
  if valid_603064 != nil:
    section.add "X-Amz-SignedHeaders", valid_603064
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_603065 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_603065 = validateParameter(valid_603065, JString, required = true,
                                 default = nil)
  if valid_603065 != nil:
    section.add "DBSecurityGroupDescription", valid_603065
  var valid_603066 = formData.getOrDefault("DBSecurityGroupName")
  valid_603066 = validateParameter(valid_603066, JString, required = true,
                                 default = nil)
  if valid_603066 != nil:
    section.add "DBSecurityGroupName", valid_603066
  var valid_603067 = formData.getOrDefault("Tags")
  valid_603067 = validateParameter(valid_603067, JArray, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "Tags", valid_603067
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603068: Call_PostCreateDBSecurityGroup_603053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_603068.validator(path, query, header, formData, body)
  let scheme = call_603068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603068.url(scheme.get, call_603068.host, call_603068.base,
                         call_603068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603068, url, valid)

proc call*(call_603069: Call_PostCreateDBSecurityGroup_603053;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_603070 = newJObject()
  var formData_603071 = newJObject()
  add(formData_603071, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_603071, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_603070, "Action", newJString(Action))
  if Tags != nil:
    formData_603071.add "Tags", Tags
  add(query_603070, "Version", newJString(Version))
  result = call_603069.call(nil, query_603070, nil, formData_603071, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_603053(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_603054, base: "/",
    url: url_PostCreateDBSecurityGroup_603055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_603035 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBSecurityGroup_603037(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_603036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_603038 = query.getOrDefault("DBSecurityGroupName")
  valid_603038 = validateParameter(valid_603038, JString, required = true,
                                 default = nil)
  if valid_603038 != nil:
    section.add "DBSecurityGroupName", valid_603038
  var valid_603039 = query.getOrDefault("Tags")
  valid_603039 = validateParameter(valid_603039, JArray, required = false,
                                 default = nil)
  if valid_603039 != nil:
    section.add "Tags", valid_603039
  var valid_603040 = query.getOrDefault("DBSecurityGroupDescription")
  valid_603040 = validateParameter(valid_603040, JString, required = true,
                                 default = nil)
  if valid_603040 != nil:
    section.add "DBSecurityGroupDescription", valid_603040
  var valid_603041 = query.getOrDefault("Action")
  valid_603041 = validateParameter(valid_603041, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_603041 != nil:
    section.add "Action", valid_603041
  var valid_603042 = query.getOrDefault("Version")
  valid_603042 = validateParameter(valid_603042, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603042 != nil:
    section.add "Version", valid_603042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603043 = header.getOrDefault("X-Amz-Signature")
  valid_603043 = validateParameter(valid_603043, JString, required = false,
                                 default = nil)
  if valid_603043 != nil:
    section.add "X-Amz-Signature", valid_603043
  var valid_603044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603044 = validateParameter(valid_603044, JString, required = false,
                                 default = nil)
  if valid_603044 != nil:
    section.add "X-Amz-Content-Sha256", valid_603044
  var valid_603045 = header.getOrDefault("X-Amz-Date")
  valid_603045 = validateParameter(valid_603045, JString, required = false,
                                 default = nil)
  if valid_603045 != nil:
    section.add "X-Amz-Date", valid_603045
  var valid_603046 = header.getOrDefault("X-Amz-Credential")
  valid_603046 = validateParameter(valid_603046, JString, required = false,
                                 default = nil)
  if valid_603046 != nil:
    section.add "X-Amz-Credential", valid_603046
  var valid_603047 = header.getOrDefault("X-Amz-Security-Token")
  valid_603047 = validateParameter(valid_603047, JString, required = false,
                                 default = nil)
  if valid_603047 != nil:
    section.add "X-Amz-Security-Token", valid_603047
  var valid_603048 = header.getOrDefault("X-Amz-Algorithm")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "X-Amz-Algorithm", valid_603048
  var valid_603049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-SignedHeaders", valid_603049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603050: Call_GetCreateDBSecurityGroup_603035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_603050.validator(path, query, header, formData, body)
  let scheme = call_603050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603050.url(scheme.get, call_603050.host, call_603050.base,
                         call_603050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603050, url, valid)

proc call*(call_603051: Call_GetCreateDBSecurityGroup_603035;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603052 = newJObject()
  add(query_603052, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_603052.add "Tags", Tags
  add(query_603052, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_603052, "Action", newJString(Action))
  add(query_603052, "Version", newJString(Version))
  result = call_603051.call(nil, query_603052, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_603035(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_603036, base: "/",
    url: url_GetCreateDBSecurityGroup_603037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_603090 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBSnapshot_603092(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_603091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603093 = query.getOrDefault("Action")
  valid_603093 = validateParameter(valid_603093, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_603093 != nil:
    section.add "Action", valid_603093
  var valid_603094 = query.getOrDefault("Version")
  valid_603094 = validateParameter(valid_603094, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603094 != nil:
    section.add "Version", valid_603094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603095 = header.getOrDefault("X-Amz-Signature")
  valid_603095 = validateParameter(valid_603095, JString, required = false,
                                 default = nil)
  if valid_603095 != nil:
    section.add "X-Amz-Signature", valid_603095
  var valid_603096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603096 = validateParameter(valid_603096, JString, required = false,
                                 default = nil)
  if valid_603096 != nil:
    section.add "X-Amz-Content-Sha256", valid_603096
  var valid_603097 = header.getOrDefault("X-Amz-Date")
  valid_603097 = validateParameter(valid_603097, JString, required = false,
                                 default = nil)
  if valid_603097 != nil:
    section.add "X-Amz-Date", valid_603097
  var valid_603098 = header.getOrDefault("X-Amz-Credential")
  valid_603098 = validateParameter(valid_603098, JString, required = false,
                                 default = nil)
  if valid_603098 != nil:
    section.add "X-Amz-Credential", valid_603098
  var valid_603099 = header.getOrDefault("X-Amz-Security-Token")
  valid_603099 = validateParameter(valid_603099, JString, required = false,
                                 default = nil)
  if valid_603099 != nil:
    section.add "X-Amz-Security-Token", valid_603099
  var valid_603100 = header.getOrDefault("X-Amz-Algorithm")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "X-Amz-Algorithm", valid_603100
  var valid_603101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-SignedHeaders", valid_603101
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_603102 = formData.getOrDefault("DBInstanceIdentifier")
  valid_603102 = validateParameter(valid_603102, JString, required = true,
                                 default = nil)
  if valid_603102 != nil:
    section.add "DBInstanceIdentifier", valid_603102
  var valid_603103 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_603103 = validateParameter(valid_603103, JString, required = true,
                                 default = nil)
  if valid_603103 != nil:
    section.add "DBSnapshotIdentifier", valid_603103
  var valid_603104 = formData.getOrDefault("Tags")
  valid_603104 = validateParameter(valid_603104, JArray, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "Tags", valid_603104
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603105: Call_PostCreateDBSnapshot_603090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_603105.validator(path, query, header, formData, body)
  let scheme = call_603105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603105.url(scheme.get, call_603105.host, call_603105.base,
                         call_603105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603105, url, valid)

proc call*(call_603106: Call_PostCreateDBSnapshot_603090;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_603107 = newJObject()
  var formData_603108 = newJObject()
  add(formData_603108, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_603108, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_603107, "Action", newJString(Action))
  if Tags != nil:
    formData_603108.add "Tags", Tags
  add(query_603107, "Version", newJString(Version))
  result = call_603106.call(nil, query_603107, nil, formData_603108, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_603090(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_603091, base: "/",
    url: url_PostCreateDBSnapshot_603092, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_603072 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBSnapshot_603074(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_603073(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603075 = query.getOrDefault("Tags")
  valid_603075 = validateParameter(valid_603075, JArray, required = false,
                                 default = nil)
  if valid_603075 != nil:
    section.add "Tags", valid_603075
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_603076 = query.getOrDefault("DBInstanceIdentifier")
  valid_603076 = validateParameter(valid_603076, JString, required = true,
                                 default = nil)
  if valid_603076 != nil:
    section.add "DBInstanceIdentifier", valid_603076
  var valid_603077 = query.getOrDefault("DBSnapshotIdentifier")
  valid_603077 = validateParameter(valid_603077, JString, required = true,
                                 default = nil)
  if valid_603077 != nil:
    section.add "DBSnapshotIdentifier", valid_603077
  var valid_603078 = query.getOrDefault("Action")
  valid_603078 = validateParameter(valid_603078, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_603078 != nil:
    section.add "Action", valid_603078
  var valid_603079 = query.getOrDefault("Version")
  valid_603079 = validateParameter(valid_603079, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603079 != nil:
    section.add "Version", valid_603079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603080 = header.getOrDefault("X-Amz-Signature")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "X-Amz-Signature", valid_603080
  var valid_603081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Content-Sha256", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Date")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Date", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Credential")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Credential", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Security-Token")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Security-Token", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-Algorithm")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-Algorithm", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-SignedHeaders", valid_603086
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603087: Call_GetCreateDBSnapshot_603072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_603087.validator(path, query, header, formData, body)
  let scheme = call_603087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603087.url(scheme.get, call_603087.host, call_603087.base,
                         call_603087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603087, url, valid)

proc call*(call_603088: Call_GetCreateDBSnapshot_603072;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603089 = newJObject()
  if Tags != nil:
    query_603089.add "Tags", Tags
  add(query_603089, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_603089, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_603089, "Action", newJString(Action))
  add(query_603089, "Version", newJString(Version))
  result = call_603088.call(nil, query_603089, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_603072(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_603073, base: "/",
    url: url_GetCreateDBSnapshot_603074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_603128 = ref object of OpenApiRestCall_601389
proc url_PostCreateDBSubnetGroup_603130(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_603129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603131 = query.getOrDefault("Action")
  valid_603131 = validateParameter(valid_603131, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_603131 != nil:
    section.add "Action", valid_603131
  var valid_603132 = query.getOrDefault("Version")
  valid_603132 = validateParameter(valid_603132, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603132 != nil:
    section.add "Version", valid_603132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603133 = header.getOrDefault("X-Amz-Signature")
  valid_603133 = validateParameter(valid_603133, JString, required = false,
                                 default = nil)
  if valid_603133 != nil:
    section.add "X-Amz-Signature", valid_603133
  var valid_603134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603134 = validateParameter(valid_603134, JString, required = false,
                                 default = nil)
  if valid_603134 != nil:
    section.add "X-Amz-Content-Sha256", valid_603134
  var valid_603135 = header.getOrDefault("X-Amz-Date")
  valid_603135 = validateParameter(valid_603135, JString, required = false,
                                 default = nil)
  if valid_603135 != nil:
    section.add "X-Amz-Date", valid_603135
  var valid_603136 = header.getOrDefault("X-Amz-Credential")
  valid_603136 = validateParameter(valid_603136, JString, required = false,
                                 default = nil)
  if valid_603136 != nil:
    section.add "X-Amz-Credential", valid_603136
  var valid_603137 = header.getOrDefault("X-Amz-Security-Token")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Security-Token", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Algorithm")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Algorithm", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-SignedHeaders", valid_603139
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_603140 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_603140 = validateParameter(valid_603140, JString, required = true,
                                 default = nil)
  if valid_603140 != nil:
    section.add "DBSubnetGroupDescription", valid_603140
  var valid_603141 = formData.getOrDefault("Tags")
  valid_603141 = validateParameter(valid_603141, JArray, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "Tags", valid_603141
  var valid_603142 = formData.getOrDefault("DBSubnetGroupName")
  valid_603142 = validateParameter(valid_603142, JString, required = true,
                                 default = nil)
  if valid_603142 != nil:
    section.add "DBSubnetGroupName", valid_603142
  var valid_603143 = formData.getOrDefault("SubnetIds")
  valid_603143 = validateParameter(valid_603143, JArray, required = true, default = nil)
  if valid_603143 != nil:
    section.add "SubnetIds", valid_603143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603144: Call_PostCreateDBSubnetGroup_603128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_603144.validator(path, query, header, formData, body)
  let scheme = call_603144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603144.url(scheme.get, call_603144.host, call_603144.base,
                         call_603144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603144, url, valid)

proc call*(call_603145: Call_PostCreateDBSubnetGroup_603128;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_603146 = newJObject()
  var formData_603147 = newJObject()
  add(formData_603147, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_603146, "Action", newJString(Action))
  if Tags != nil:
    formData_603147.add "Tags", Tags
  add(formData_603147, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603146, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_603147.add "SubnetIds", SubnetIds
  result = call_603145.call(nil, query_603146, nil, formData_603147, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_603128(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_603129, base: "/",
    url: url_PostCreateDBSubnetGroup_603130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_603109 = ref object of OpenApiRestCall_601389
proc url_GetCreateDBSubnetGroup_603111(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_603110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603112 = query.getOrDefault("Tags")
  valid_603112 = validateParameter(valid_603112, JArray, required = false,
                                 default = nil)
  if valid_603112 != nil:
    section.add "Tags", valid_603112
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_603113 = query.getOrDefault("SubnetIds")
  valid_603113 = validateParameter(valid_603113, JArray, required = true, default = nil)
  if valid_603113 != nil:
    section.add "SubnetIds", valid_603113
  var valid_603114 = query.getOrDefault("Action")
  valid_603114 = validateParameter(valid_603114, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_603114 != nil:
    section.add "Action", valid_603114
  var valid_603115 = query.getOrDefault("DBSubnetGroupDescription")
  valid_603115 = validateParameter(valid_603115, JString, required = true,
                                 default = nil)
  if valid_603115 != nil:
    section.add "DBSubnetGroupDescription", valid_603115
  var valid_603116 = query.getOrDefault("DBSubnetGroupName")
  valid_603116 = validateParameter(valid_603116, JString, required = true,
                                 default = nil)
  if valid_603116 != nil:
    section.add "DBSubnetGroupName", valid_603116
  var valid_603117 = query.getOrDefault("Version")
  valid_603117 = validateParameter(valid_603117, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603117 != nil:
    section.add "Version", valid_603117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603118 = header.getOrDefault("X-Amz-Signature")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-Signature", valid_603118
  var valid_603119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-Content-Sha256", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-Date")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Date", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-Credential")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-Credential", valid_603121
  var valid_603122 = header.getOrDefault("X-Amz-Security-Token")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-Security-Token", valid_603122
  var valid_603123 = header.getOrDefault("X-Amz-Algorithm")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "X-Amz-Algorithm", valid_603123
  var valid_603124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603124 = validateParameter(valid_603124, JString, required = false,
                                 default = nil)
  if valid_603124 != nil:
    section.add "X-Amz-SignedHeaders", valid_603124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603125: Call_GetCreateDBSubnetGroup_603109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_603125.validator(path, query, header, formData, body)
  let scheme = call_603125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603125.url(scheme.get, call_603125.host, call_603125.base,
                         call_603125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603125, url, valid)

proc call*(call_603126: Call_GetCreateDBSubnetGroup_603109; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_603127 = newJObject()
  if Tags != nil:
    query_603127.add "Tags", Tags
  if SubnetIds != nil:
    query_603127.add "SubnetIds", SubnetIds
  add(query_603127, "Action", newJString(Action))
  add(query_603127, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_603127, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603127, "Version", newJString(Version))
  result = call_603126.call(nil, query_603127, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_603109(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_603110, base: "/",
    url: url_GetCreateDBSubnetGroup_603111, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_603170 = ref object of OpenApiRestCall_601389
proc url_PostCreateEventSubscription_603172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_603171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603173 = query.getOrDefault("Action")
  valid_603173 = validateParameter(valid_603173, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_603173 != nil:
    section.add "Action", valid_603173
  var valid_603174 = query.getOrDefault("Version")
  valid_603174 = validateParameter(valid_603174, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603174 != nil:
    section.add "Version", valid_603174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603175 = header.getOrDefault("X-Amz-Signature")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-Signature", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-Content-Sha256", valid_603176
  var valid_603177 = header.getOrDefault("X-Amz-Date")
  valid_603177 = validateParameter(valid_603177, JString, required = false,
                                 default = nil)
  if valid_603177 != nil:
    section.add "X-Amz-Date", valid_603177
  var valid_603178 = header.getOrDefault("X-Amz-Credential")
  valid_603178 = validateParameter(valid_603178, JString, required = false,
                                 default = nil)
  if valid_603178 != nil:
    section.add "X-Amz-Credential", valid_603178
  var valid_603179 = header.getOrDefault("X-Amz-Security-Token")
  valid_603179 = validateParameter(valid_603179, JString, required = false,
                                 default = nil)
  if valid_603179 != nil:
    section.add "X-Amz-Security-Token", valid_603179
  var valid_603180 = header.getOrDefault("X-Amz-Algorithm")
  valid_603180 = validateParameter(valid_603180, JString, required = false,
                                 default = nil)
  if valid_603180 != nil:
    section.add "X-Amz-Algorithm", valid_603180
  var valid_603181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603181 = validateParameter(valid_603181, JString, required = false,
                                 default = nil)
  if valid_603181 != nil:
    section.add "X-Amz-SignedHeaders", valid_603181
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_603182 = formData.getOrDefault("SourceIds")
  valid_603182 = validateParameter(valid_603182, JArray, required = false,
                                 default = nil)
  if valid_603182 != nil:
    section.add "SourceIds", valid_603182
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_603183 = formData.getOrDefault("SnsTopicArn")
  valid_603183 = validateParameter(valid_603183, JString, required = true,
                                 default = nil)
  if valid_603183 != nil:
    section.add "SnsTopicArn", valid_603183
  var valid_603184 = formData.getOrDefault("Enabled")
  valid_603184 = validateParameter(valid_603184, JBool, required = false, default = nil)
  if valid_603184 != nil:
    section.add "Enabled", valid_603184
  var valid_603185 = formData.getOrDefault("SubscriptionName")
  valid_603185 = validateParameter(valid_603185, JString, required = true,
                                 default = nil)
  if valid_603185 != nil:
    section.add "SubscriptionName", valid_603185
  var valid_603186 = formData.getOrDefault("SourceType")
  valid_603186 = validateParameter(valid_603186, JString, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "SourceType", valid_603186
  var valid_603187 = formData.getOrDefault("EventCategories")
  valid_603187 = validateParameter(valid_603187, JArray, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "EventCategories", valid_603187
  var valid_603188 = formData.getOrDefault("Tags")
  valid_603188 = validateParameter(valid_603188, JArray, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "Tags", valid_603188
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603189: Call_PostCreateEventSubscription_603170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_603189.validator(path, query, header, formData, body)
  let scheme = call_603189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603189.url(scheme.get, call_603189.host, call_603189.base,
                         call_603189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603189, url, valid)

proc call*(call_603190: Call_PostCreateEventSubscription_603170;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_603191 = newJObject()
  var formData_603192 = newJObject()
  if SourceIds != nil:
    formData_603192.add "SourceIds", SourceIds
  add(formData_603192, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_603192, "Enabled", newJBool(Enabled))
  add(formData_603192, "SubscriptionName", newJString(SubscriptionName))
  add(formData_603192, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_603192.add "EventCategories", EventCategories
  add(query_603191, "Action", newJString(Action))
  if Tags != nil:
    formData_603192.add "Tags", Tags
  add(query_603191, "Version", newJString(Version))
  result = call_603190.call(nil, query_603191, nil, formData_603192, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_603170(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_603171, base: "/",
    url: url_PostCreateEventSubscription_603172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_603148 = ref object of OpenApiRestCall_601389
proc url_GetCreateEventSubscription_603150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_603149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603151 = query.getOrDefault("Tags")
  valid_603151 = validateParameter(valid_603151, JArray, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "Tags", valid_603151
  var valid_603152 = query.getOrDefault("SourceType")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "SourceType", valid_603152
  var valid_603153 = query.getOrDefault("Enabled")
  valid_603153 = validateParameter(valid_603153, JBool, required = false, default = nil)
  if valid_603153 != nil:
    section.add "Enabled", valid_603153
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_603154 = query.getOrDefault("SubscriptionName")
  valid_603154 = validateParameter(valid_603154, JString, required = true,
                                 default = nil)
  if valid_603154 != nil:
    section.add "SubscriptionName", valid_603154
  var valid_603155 = query.getOrDefault("EventCategories")
  valid_603155 = validateParameter(valid_603155, JArray, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "EventCategories", valid_603155
  var valid_603156 = query.getOrDefault("SourceIds")
  valid_603156 = validateParameter(valid_603156, JArray, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "SourceIds", valid_603156
  var valid_603157 = query.getOrDefault("Action")
  valid_603157 = validateParameter(valid_603157, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_603157 != nil:
    section.add "Action", valid_603157
  var valid_603158 = query.getOrDefault("SnsTopicArn")
  valid_603158 = validateParameter(valid_603158, JString, required = true,
                                 default = nil)
  if valid_603158 != nil:
    section.add "SnsTopicArn", valid_603158
  var valid_603159 = query.getOrDefault("Version")
  valid_603159 = validateParameter(valid_603159, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603159 != nil:
    section.add "Version", valid_603159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603160 = header.getOrDefault("X-Amz-Signature")
  valid_603160 = validateParameter(valid_603160, JString, required = false,
                                 default = nil)
  if valid_603160 != nil:
    section.add "X-Amz-Signature", valid_603160
  var valid_603161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603161 = validateParameter(valid_603161, JString, required = false,
                                 default = nil)
  if valid_603161 != nil:
    section.add "X-Amz-Content-Sha256", valid_603161
  var valid_603162 = header.getOrDefault("X-Amz-Date")
  valid_603162 = validateParameter(valid_603162, JString, required = false,
                                 default = nil)
  if valid_603162 != nil:
    section.add "X-Amz-Date", valid_603162
  var valid_603163 = header.getOrDefault("X-Amz-Credential")
  valid_603163 = validateParameter(valid_603163, JString, required = false,
                                 default = nil)
  if valid_603163 != nil:
    section.add "X-Amz-Credential", valid_603163
  var valid_603164 = header.getOrDefault("X-Amz-Security-Token")
  valid_603164 = validateParameter(valid_603164, JString, required = false,
                                 default = nil)
  if valid_603164 != nil:
    section.add "X-Amz-Security-Token", valid_603164
  var valid_603165 = header.getOrDefault("X-Amz-Algorithm")
  valid_603165 = validateParameter(valid_603165, JString, required = false,
                                 default = nil)
  if valid_603165 != nil:
    section.add "X-Amz-Algorithm", valid_603165
  var valid_603166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603166 = validateParameter(valid_603166, JString, required = false,
                                 default = nil)
  if valid_603166 != nil:
    section.add "X-Amz-SignedHeaders", valid_603166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603167: Call_GetCreateEventSubscription_603148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_603167.validator(path, query, header, formData, body)
  let scheme = call_603167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603167.url(scheme.get, call_603167.host, call_603167.base,
                         call_603167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603167, url, valid)

proc call*(call_603168: Call_GetCreateEventSubscription_603148;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_603169 = newJObject()
  if Tags != nil:
    query_603169.add "Tags", Tags
  add(query_603169, "SourceType", newJString(SourceType))
  add(query_603169, "Enabled", newJBool(Enabled))
  add(query_603169, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_603169.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_603169.add "SourceIds", SourceIds
  add(query_603169, "Action", newJString(Action))
  add(query_603169, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_603169, "Version", newJString(Version))
  result = call_603168.call(nil, query_603169, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_603148(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_603149, base: "/",
    url: url_GetCreateEventSubscription_603150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_603215 = ref object of OpenApiRestCall_601389
proc url_PostCreateGlobalCluster_603217(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_603216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603218 = query.getOrDefault("Action")
  valid_603218 = validateParameter(valid_603218, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_603218 != nil:
    section.add "Action", valid_603218
  var valid_603219 = query.getOrDefault("Version")
  valid_603219 = validateParameter(valid_603219, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603219 != nil:
    section.add "Version", valid_603219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603220 = header.getOrDefault("X-Amz-Signature")
  valid_603220 = validateParameter(valid_603220, JString, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "X-Amz-Signature", valid_603220
  var valid_603221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "X-Amz-Content-Sha256", valid_603221
  var valid_603222 = header.getOrDefault("X-Amz-Date")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-Date", valid_603222
  var valid_603223 = header.getOrDefault("X-Amz-Credential")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Credential", valid_603223
  var valid_603224 = header.getOrDefault("X-Amz-Security-Token")
  valid_603224 = validateParameter(valid_603224, JString, required = false,
                                 default = nil)
  if valid_603224 != nil:
    section.add "X-Amz-Security-Token", valid_603224
  var valid_603225 = header.getOrDefault("X-Amz-Algorithm")
  valid_603225 = validateParameter(valid_603225, JString, required = false,
                                 default = nil)
  if valid_603225 != nil:
    section.add "X-Amz-Algorithm", valid_603225
  var valid_603226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "X-Amz-SignedHeaders", valid_603226
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_603227 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_603227 = validateParameter(valid_603227, JString, required = false,
                                 default = nil)
  if valid_603227 != nil:
    section.add "GlobalClusterIdentifier", valid_603227
  var valid_603228 = formData.getOrDefault("EngineVersion")
  valid_603228 = validateParameter(valid_603228, JString, required = false,
                                 default = nil)
  if valid_603228 != nil:
    section.add "EngineVersion", valid_603228
  var valid_603229 = formData.getOrDefault("DatabaseName")
  valid_603229 = validateParameter(valid_603229, JString, required = false,
                                 default = nil)
  if valid_603229 != nil:
    section.add "DatabaseName", valid_603229
  var valid_603230 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_603230 = validateParameter(valid_603230, JString, required = false,
                                 default = nil)
  if valid_603230 != nil:
    section.add "SourceDBClusterIdentifier", valid_603230
  var valid_603231 = formData.getOrDefault("Engine")
  valid_603231 = validateParameter(valid_603231, JString, required = false,
                                 default = nil)
  if valid_603231 != nil:
    section.add "Engine", valid_603231
  var valid_603232 = formData.getOrDefault("StorageEncrypted")
  valid_603232 = validateParameter(valid_603232, JBool, required = false, default = nil)
  if valid_603232 != nil:
    section.add "StorageEncrypted", valid_603232
  var valid_603233 = formData.getOrDefault("DeletionProtection")
  valid_603233 = validateParameter(valid_603233, JBool, required = false, default = nil)
  if valid_603233 != nil:
    section.add "DeletionProtection", valid_603233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603234: Call_PostCreateGlobalCluster_603215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603234.validator(path, query, header, formData, body)
  let scheme = call_603234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603234.url(scheme.get, call_603234.host, call_603234.base,
                         call_603234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603234, url, valid)

proc call*(call_603235: Call_PostCreateGlobalCluster_603215;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_603236 = newJObject()
  var formData_603237 = newJObject()
  add(formData_603237, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_603237, "EngineVersion", newJString(EngineVersion))
  add(formData_603237, "DatabaseName", newJString(DatabaseName))
  add(formData_603237, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_603237, "Engine", newJString(Engine))
  add(query_603236, "Action", newJString(Action))
  add(query_603236, "Version", newJString(Version))
  add(formData_603237, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_603237, "DeletionProtection", newJBool(DeletionProtection))
  result = call_603235.call(nil, query_603236, nil, formData_603237, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_603215(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_603216, base: "/",
    url: url_PostCreateGlobalCluster_603217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_603193 = ref object of OpenApiRestCall_601389
proc url_GetCreateGlobalCluster_603195(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_603194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603196 = query.getOrDefault("GlobalClusterIdentifier")
  valid_603196 = validateParameter(valid_603196, JString, required = false,
                                 default = nil)
  if valid_603196 != nil:
    section.add "GlobalClusterIdentifier", valid_603196
  var valid_603197 = query.getOrDefault("DatabaseName")
  valid_603197 = validateParameter(valid_603197, JString, required = false,
                                 default = nil)
  if valid_603197 != nil:
    section.add "DatabaseName", valid_603197
  var valid_603198 = query.getOrDefault("DeletionProtection")
  valid_603198 = validateParameter(valid_603198, JBool, required = false, default = nil)
  if valid_603198 != nil:
    section.add "DeletionProtection", valid_603198
  var valid_603199 = query.getOrDefault("Engine")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "Engine", valid_603199
  var valid_603200 = query.getOrDefault("StorageEncrypted")
  valid_603200 = validateParameter(valid_603200, JBool, required = false, default = nil)
  if valid_603200 != nil:
    section.add "StorageEncrypted", valid_603200
  var valid_603201 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "SourceDBClusterIdentifier", valid_603201
  var valid_603202 = query.getOrDefault("EngineVersion")
  valid_603202 = validateParameter(valid_603202, JString, required = false,
                                 default = nil)
  if valid_603202 != nil:
    section.add "EngineVersion", valid_603202
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603203 = query.getOrDefault("Action")
  valid_603203 = validateParameter(valid_603203, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_603203 != nil:
    section.add "Action", valid_603203
  var valid_603204 = query.getOrDefault("Version")
  valid_603204 = validateParameter(valid_603204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603204 != nil:
    section.add "Version", valid_603204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603205 = header.getOrDefault("X-Amz-Signature")
  valid_603205 = validateParameter(valid_603205, JString, required = false,
                                 default = nil)
  if valid_603205 != nil:
    section.add "X-Amz-Signature", valid_603205
  var valid_603206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603206 = validateParameter(valid_603206, JString, required = false,
                                 default = nil)
  if valid_603206 != nil:
    section.add "X-Amz-Content-Sha256", valid_603206
  var valid_603207 = header.getOrDefault("X-Amz-Date")
  valid_603207 = validateParameter(valid_603207, JString, required = false,
                                 default = nil)
  if valid_603207 != nil:
    section.add "X-Amz-Date", valid_603207
  var valid_603208 = header.getOrDefault("X-Amz-Credential")
  valid_603208 = validateParameter(valid_603208, JString, required = false,
                                 default = nil)
  if valid_603208 != nil:
    section.add "X-Amz-Credential", valid_603208
  var valid_603209 = header.getOrDefault("X-Amz-Security-Token")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "X-Amz-Security-Token", valid_603209
  var valid_603210 = header.getOrDefault("X-Amz-Algorithm")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "X-Amz-Algorithm", valid_603210
  var valid_603211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603211 = validateParameter(valid_603211, JString, required = false,
                                 default = nil)
  if valid_603211 != nil:
    section.add "X-Amz-SignedHeaders", valid_603211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603212: Call_GetCreateGlobalCluster_603193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603212.validator(path, query, header, formData, body)
  let scheme = call_603212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603212.url(scheme.get, call_603212.host, call_603212.base,
                         call_603212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603212, url, valid)

proc call*(call_603213: Call_GetCreateGlobalCluster_603193;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603214 = newJObject()
  add(query_603214, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_603214, "DatabaseName", newJString(DatabaseName))
  add(query_603214, "DeletionProtection", newJBool(DeletionProtection))
  add(query_603214, "Engine", newJString(Engine))
  add(query_603214, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_603214, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_603214, "EngineVersion", newJString(EngineVersion))
  add(query_603214, "Action", newJString(Action))
  add(query_603214, "Version", newJString(Version))
  result = call_603213.call(nil, query_603214, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_603193(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_603194, base: "/",
    url: url_GetCreateGlobalCluster_603195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_603258 = ref object of OpenApiRestCall_601389
proc url_PostCreateOptionGroup_603260(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_603259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603261 = query.getOrDefault("Action")
  valid_603261 = validateParameter(valid_603261, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_603261 != nil:
    section.add "Action", valid_603261
  var valid_603262 = query.getOrDefault("Version")
  valid_603262 = validateParameter(valid_603262, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603262 != nil:
    section.add "Version", valid_603262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603263 = header.getOrDefault("X-Amz-Signature")
  valid_603263 = validateParameter(valid_603263, JString, required = false,
                                 default = nil)
  if valid_603263 != nil:
    section.add "X-Amz-Signature", valid_603263
  var valid_603264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603264 = validateParameter(valid_603264, JString, required = false,
                                 default = nil)
  if valid_603264 != nil:
    section.add "X-Amz-Content-Sha256", valid_603264
  var valid_603265 = header.getOrDefault("X-Amz-Date")
  valid_603265 = validateParameter(valid_603265, JString, required = false,
                                 default = nil)
  if valid_603265 != nil:
    section.add "X-Amz-Date", valid_603265
  var valid_603266 = header.getOrDefault("X-Amz-Credential")
  valid_603266 = validateParameter(valid_603266, JString, required = false,
                                 default = nil)
  if valid_603266 != nil:
    section.add "X-Amz-Credential", valid_603266
  var valid_603267 = header.getOrDefault("X-Amz-Security-Token")
  valid_603267 = validateParameter(valid_603267, JString, required = false,
                                 default = nil)
  if valid_603267 != nil:
    section.add "X-Amz-Security-Token", valid_603267
  var valid_603268 = header.getOrDefault("X-Amz-Algorithm")
  valid_603268 = validateParameter(valid_603268, JString, required = false,
                                 default = nil)
  if valid_603268 != nil:
    section.add "X-Amz-Algorithm", valid_603268
  var valid_603269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603269 = validateParameter(valid_603269, JString, required = false,
                                 default = nil)
  if valid_603269 != nil:
    section.add "X-Amz-SignedHeaders", valid_603269
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_603270 = formData.getOrDefault("OptionGroupDescription")
  valid_603270 = validateParameter(valid_603270, JString, required = true,
                                 default = nil)
  if valid_603270 != nil:
    section.add "OptionGroupDescription", valid_603270
  var valid_603271 = formData.getOrDefault("EngineName")
  valid_603271 = validateParameter(valid_603271, JString, required = true,
                                 default = nil)
  if valid_603271 != nil:
    section.add "EngineName", valid_603271
  var valid_603272 = formData.getOrDefault("MajorEngineVersion")
  valid_603272 = validateParameter(valid_603272, JString, required = true,
                                 default = nil)
  if valid_603272 != nil:
    section.add "MajorEngineVersion", valid_603272
  var valid_603273 = formData.getOrDefault("Tags")
  valid_603273 = validateParameter(valid_603273, JArray, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "Tags", valid_603273
  var valid_603274 = formData.getOrDefault("OptionGroupName")
  valid_603274 = validateParameter(valid_603274, JString, required = true,
                                 default = nil)
  if valid_603274 != nil:
    section.add "OptionGroupName", valid_603274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603275: Call_PostCreateOptionGroup_603258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_603275.validator(path, query, header, formData, body)
  let scheme = call_603275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603275.url(scheme.get, call_603275.host, call_603275.base,
                         call_603275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603275, url, valid)

proc call*(call_603276: Call_PostCreateOptionGroup_603258;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_603277 = newJObject()
  var formData_603278 = newJObject()
  add(formData_603278, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_603278, "EngineName", newJString(EngineName))
  add(formData_603278, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_603277, "Action", newJString(Action))
  if Tags != nil:
    formData_603278.add "Tags", Tags
  add(formData_603278, "OptionGroupName", newJString(OptionGroupName))
  add(query_603277, "Version", newJString(Version))
  result = call_603276.call(nil, query_603277, nil, formData_603278, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_603258(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_603259, base: "/",
    url: url_PostCreateOptionGroup_603260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_603238 = ref object of OpenApiRestCall_601389
proc url_GetCreateOptionGroup_603240(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_603239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_603241 = query.getOrDefault("EngineName")
  valid_603241 = validateParameter(valid_603241, JString, required = true,
                                 default = nil)
  if valid_603241 != nil:
    section.add "EngineName", valid_603241
  var valid_603242 = query.getOrDefault("OptionGroupDescription")
  valid_603242 = validateParameter(valid_603242, JString, required = true,
                                 default = nil)
  if valid_603242 != nil:
    section.add "OptionGroupDescription", valid_603242
  var valid_603243 = query.getOrDefault("Tags")
  valid_603243 = validateParameter(valid_603243, JArray, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "Tags", valid_603243
  var valid_603244 = query.getOrDefault("Action")
  valid_603244 = validateParameter(valid_603244, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_603244 != nil:
    section.add "Action", valid_603244
  var valid_603245 = query.getOrDefault("OptionGroupName")
  valid_603245 = validateParameter(valid_603245, JString, required = true,
                                 default = nil)
  if valid_603245 != nil:
    section.add "OptionGroupName", valid_603245
  var valid_603246 = query.getOrDefault("Version")
  valid_603246 = validateParameter(valid_603246, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603246 != nil:
    section.add "Version", valid_603246
  var valid_603247 = query.getOrDefault("MajorEngineVersion")
  valid_603247 = validateParameter(valid_603247, JString, required = true,
                                 default = nil)
  if valid_603247 != nil:
    section.add "MajorEngineVersion", valid_603247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603248 = header.getOrDefault("X-Amz-Signature")
  valid_603248 = validateParameter(valid_603248, JString, required = false,
                                 default = nil)
  if valid_603248 != nil:
    section.add "X-Amz-Signature", valid_603248
  var valid_603249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603249 = validateParameter(valid_603249, JString, required = false,
                                 default = nil)
  if valid_603249 != nil:
    section.add "X-Amz-Content-Sha256", valid_603249
  var valid_603250 = header.getOrDefault("X-Amz-Date")
  valid_603250 = validateParameter(valid_603250, JString, required = false,
                                 default = nil)
  if valid_603250 != nil:
    section.add "X-Amz-Date", valid_603250
  var valid_603251 = header.getOrDefault("X-Amz-Credential")
  valid_603251 = validateParameter(valid_603251, JString, required = false,
                                 default = nil)
  if valid_603251 != nil:
    section.add "X-Amz-Credential", valid_603251
  var valid_603252 = header.getOrDefault("X-Amz-Security-Token")
  valid_603252 = validateParameter(valid_603252, JString, required = false,
                                 default = nil)
  if valid_603252 != nil:
    section.add "X-Amz-Security-Token", valid_603252
  var valid_603253 = header.getOrDefault("X-Amz-Algorithm")
  valid_603253 = validateParameter(valid_603253, JString, required = false,
                                 default = nil)
  if valid_603253 != nil:
    section.add "X-Amz-Algorithm", valid_603253
  var valid_603254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "X-Amz-SignedHeaders", valid_603254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603255: Call_GetCreateOptionGroup_603238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_603255.validator(path, query, header, formData, body)
  let scheme = call_603255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603255.url(scheme.get, call_603255.host, call_603255.base,
                         call_603255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603255, url, valid)

proc call*(call_603256: Call_GetCreateOptionGroup_603238; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_603257 = newJObject()
  add(query_603257, "EngineName", newJString(EngineName))
  add(query_603257, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_603257.add "Tags", Tags
  add(query_603257, "Action", newJString(Action))
  add(query_603257, "OptionGroupName", newJString(OptionGroupName))
  add(query_603257, "Version", newJString(Version))
  add(query_603257, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_603256.call(nil, query_603257, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_603238(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_603239, base: "/",
    url: url_GetCreateOptionGroup_603240, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_603295 = ref object of OpenApiRestCall_601389
proc url_PostDeleteCustomAvailabilityZone_603297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_603296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603298 = query.getOrDefault("Action")
  valid_603298 = validateParameter(valid_603298, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_603298 != nil:
    section.add "Action", valid_603298
  var valid_603299 = query.getOrDefault("Version")
  valid_603299 = validateParameter(valid_603299, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603299 != nil:
    section.add "Version", valid_603299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603300 = header.getOrDefault("X-Amz-Signature")
  valid_603300 = validateParameter(valid_603300, JString, required = false,
                                 default = nil)
  if valid_603300 != nil:
    section.add "X-Amz-Signature", valid_603300
  var valid_603301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603301 = validateParameter(valid_603301, JString, required = false,
                                 default = nil)
  if valid_603301 != nil:
    section.add "X-Amz-Content-Sha256", valid_603301
  var valid_603302 = header.getOrDefault("X-Amz-Date")
  valid_603302 = validateParameter(valid_603302, JString, required = false,
                                 default = nil)
  if valid_603302 != nil:
    section.add "X-Amz-Date", valid_603302
  var valid_603303 = header.getOrDefault("X-Amz-Credential")
  valid_603303 = validateParameter(valid_603303, JString, required = false,
                                 default = nil)
  if valid_603303 != nil:
    section.add "X-Amz-Credential", valid_603303
  var valid_603304 = header.getOrDefault("X-Amz-Security-Token")
  valid_603304 = validateParameter(valid_603304, JString, required = false,
                                 default = nil)
  if valid_603304 != nil:
    section.add "X-Amz-Security-Token", valid_603304
  var valid_603305 = header.getOrDefault("X-Amz-Algorithm")
  valid_603305 = validateParameter(valid_603305, JString, required = false,
                                 default = nil)
  if valid_603305 != nil:
    section.add "X-Amz-Algorithm", valid_603305
  var valid_603306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603306 = validateParameter(valid_603306, JString, required = false,
                                 default = nil)
  if valid_603306 != nil:
    section.add "X-Amz-SignedHeaders", valid_603306
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_603307 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_603307 = validateParameter(valid_603307, JString, required = true,
                                 default = nil)
  if valid_603307 != nil:
    section.add "CustomAvailabilityZoneId", valid_603307
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603308: Call_PostDeleteCustomAvailabilityZone_603295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_603308.validator(path, query, header, formData, body)
  let scheme = call_603308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603308.url(scheme.get, call_603308.host, call_603308.base,
                         call_603308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603308, url, valid)

proc call*(call_603309: Call_PostDeleteCustomAvailabilityZone_603295;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_603310 = newJObject()
  var formData_603311 = newJObject()
  add(query_603310, "Action", newJString(Action))
  add(formData_603311, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_603310, "Version", newJString(Version))
  result = call_603309.call(nil, query_603310, nil, formData_603311, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_603295(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_603296, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_603297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_603279 = ref object of OpenApiRestCall_601389
proc url_GetDeleteCustomAvailabilityZone_603281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_603280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_603282 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_603282 = validateParameter(valid_603282, JString, required = true,
                                 default = nil)
  if valid_603282 != nil:
    section.add "CustomAvailabilityZoneId", valid_603282
  var valid_603283 = query.getOrDefault("Action")
  valid_603283 = validateParameter(valid_603283, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_603283 != nil:
    section.add "Action", valid_603283
  var valid_603284 = query.getOrDefault("Version")
  valid_603284 = validateParameter(valid_603284, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603284 != nil:
    section.add "Version", valid_603284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603285 = header.getOrDefault("X-Amz-Signature")
  valid_603285 = validateParameter(valid_603285, JString, required = false,
                                 default = nil)
  if valid_603285 != nil:
    section.add "X-Amz-Signature", valid_603285
  var valid_603286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603286 = validateParameter(valid_603286, JString, required = false,
                                 default = nil)
  if valid_603286 != nil:
    section.add "X-Amz-Content-Sha256", valid_603286
  var valid_603287 = header.getOrDefault("X-Amz-Date")
  valid_603287 = validateParameter(valid_603287, JString, required = false,
                                 default = nil)
  if valid_603287 != nil:
    section.add "X-Amz-Date", valid_603287
  var valid_603288 = header.getOrDefault("X-Amz-Credential")
  valid_603288 = validateParameter(valid_603288, JString, required = false,
                                 default = nil)
  if valid_603288 != nil:
    section.add "X-Amz-Credential", valid_603288
  var valid_603289 = header.getOrDefault("X-Amz-Security-Token")
  valid_603289 = validateParameter(valid_603289, JString, required = false,
                                 default = nil)
  if valid_603289 != nil:
    section.add "X-Amz-Security-Token", valid_603289
  var valid_603290 = header.getOrDefault("X-Amz-Algorithm")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "X-Amz-Algorithm", valid_603290
  var valid_603291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-SignedHeaders", valid_603291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603292: Call_GetDeleteCustomAvailabilityZone_603279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_603292.validator(path, query, header, formData, body)
  let scheme = call_603292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603292.url(scheme.get, call_603292.host, call_603292.base,
                         call_603292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603292, url, valid)

proc call*(call_603293: Call_GetDeleteCustomAvailabilityZone_603279;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603294 = newJObject()
  add(query_603294, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_603294, "Action", newJString(Action))
  add(query_603294, "Version", newJString(Version))
  result = call_603293.call(nil, query_603294, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_603279(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_603280, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_603281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_603330 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBCluster_603332(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_603331(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603333 = query.getOrDefault("Action")
  valid_603333 = validateParameter(valid_603333, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_603333 != nil:
    section.add "Action", valid_603333
  var valid_603334 = query.getOrDefault("Version")
  valid_603334 = validateParameter(valid_603334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603334 != nil:
    section.add "Version", valid_603334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603335 = header.getOrDefault("X-Amz-Signature")
  valid_603335 = validateParameter(valid_603335, JString, required = false,
                                 default = nil)
  if valid_603335 != nil:
    section.add "X-Amz-Signature", valid_603335
  var valid_603336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603336 = validateParameter(valid_603336, JString, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "X-Amz-Content-Sha256", valid_603336
  var valid_603337 = header.getOrDefault("X-Amz-Date")
  valid_603337 = validateParameter(valid_603337, JString, required = false,
                                 default = nil)
  if valid_603337 != nil:
    section.add "X-Amz-Date", valid_603337
  var valid_603338 = header.getOrDefault("X-Amz-Credential")
  valid_603338 = validateParameter(valid_603338, JString, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "X-Amz-Credential", valid_603338
  var valid_603339 = header.getOrDefault("X-Amz-Security-Token")
  valid_603339 = validateParameter(valid_603339, JString, required = false,
                                 default = nil)
  if valid_603339 != nil:
    section.add "X-Amz-Security-Token", valid_603339
  var valid_603340 = header.getOrDefault("X-Amz-Algorithm")
  valid_603340 = validateParameter(valid_603340, JString, required = false,
                                 default = nil)
  if valid_603340 != nil:
    section.add "X-Amz-Algorithm", valid_603340
  var valid_603341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "X-Amz-SignedHeaders", valid_603341
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_603342 = formData.getOrDefault("SkipFinalSnapshot")
  valid_603342 = validateParameter(valid_603342, JBool, required = false, default = nil)
  if valid_603342 != nil:
    section.add "SkipFinalSnapshot", valid_603342
  var valid_603343 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603343
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603344 = formData.getOrDefault("DBClusterIdentifier")
  valid_603344 = validateParameter(valid_603344, JString, required = true,
                                 default = nil)
  if valid_603344 != nil:
    section.add "DBClusterIdentifier", valid_603344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603345: Call_PostDeleteDBCluster_603330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603345.validator(path, query, header, formData, body)
  let scheme = call_603345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603345.url(scheme.get, call_603345.host, call_603345.base,
                         call_603345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603345, url, valid)

proc call*(call_603346: Call_PostDeleteDBCluster_603330;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_603347 = newJObject()
  var formData_603348 = newJObject()
  add(query_603347, "Action", newJString(Action))
  add(formData_603348, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_603348, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603347, "Version", newJString(Version))
  add(formData_603348, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_603346.call(nil, query_603347, nil, formData_603348, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_603330(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_603331, base: "/",
    url: url_PostDeleteDBCluster_603332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_603312 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBCluster_603314(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_603313(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603315 = query.getOrDefault("DBClusterIdentifier")
  valid_603315 = validateParameter(valid_603315, JString, required = true,
                                 default = nil)
  if valid_603315 != nil:
    section.add "DBClusterIdentifier", valid_603315
  var valid_603316 = query.getOrDefault("SkipFinalSnapshot")
  valid_603316 = validateParameter(valid_603316, JBool, required = false, default = nil)
  if valid_603316 != nil:
    section.add "SkipFinalSnapshot", valid_603316
  var valid_603317 = query.getOrDefault("Action")
  valid_603317 = validateParameter(valid_603317, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_603317 != nil:
    section.add "Action", valid_603317
  var valid_603318 = query.getOrDefault("Version")
  valid_603318 = validateParameter(valid_603318, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603318 != nil:
    section.add "Version", valid_603318
  var valid_603319 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603319 = validateParameter(valid_603319, JString, required = false,
                                 default = nil)
  if valid_603319 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603320 = header.getOrDefault("X-Amz-Signature")
  valid_603320 = validateParameter(valid_603320, JString, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "X-Amz-Signature", valid_603320
  var valid_603321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603321 = validateParameter(valid_603321, JString, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "X-Amz-Content-Sha256", valid_603321
  var valid_603322 = header.getOrDefault("X-Amz-Date")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Date", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-Credential")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-Credential", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-Security-Token")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Security-Token", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-Algorithm")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-Algorithm", valid_603325
  var valid_603326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-SignedHeaders", valid_603326
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603327: Call_GetDeleteDBCluster_603312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603327.validator(path, query, header, formData, body)
  let scheme = call_603327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603327.url(scheme.get, call_603327.host, call_603327.base,
                         call_603327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603327, url, valid)

proc call*(call_603328: Call_GetDeleteDBCluster_603312;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_603329 = newJObject()
  add(query_603329, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603329, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_603329, "Action", newJString(Action))
  add(query_603329, "Version", newJString(Version))
  add(query_603329, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_603328.call(nil, query_603329, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_603312(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_603313,
    base: "/", url: url_GetDeleteDBCluster_603314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_603365 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBClusterEndpoint_603367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_603366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603368 = query.getOrDefault("Action")
  valid_603368 = validateParameter(valid_603368, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_603368 != nil:
    section.add "Action", valid_603368
  var valid_603369 = query.getOrDefault("Version")
  valid_603369 = validateParameter(valid_603369, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603369 != nil:
    section.add "Version", valid_603369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603370 = header.getOrDefault("X-Amz-Signature")
  valid_603370 = validateParameter(valid_603370, JString, required = false,
                                 default = nil)
  if valid_603370 != nil:
    section.add "X-Amz-Signature", valid_603370
  var valid_603371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603371 = validateParameter(valid_603371, JString, required = false,
                                 default = nil)
  if valid_603371 != nil:
    section.add "X-Amz-Content-Sha256", valid_603371
  var valid_603372 = header.getOrDefault("X-Amz-Date")
  valid_603372 = validateParameter(valid_603372, JString, required = false,
                                 default = nil)
  if valid_603372 != nil:
    section.add "X-Amz-Date", valid_603372
  var valid_603373 = header.getOrDefault("X-Amz-Credential")
  valid_603373 = validateParameter(valid_603373, JString, required = false,
                                 default = nil)
  if valid_603373 != nil:
    section.add "X-Amz-Credential", valid_603373
  var valid_603374 = header.getOrDefault("X-Amz-Security-Token")
  valid_603374 = validateParameter(valid_603374, JString, required = false,
                                 default = nil)
  if valid_603374 != nil:
    section.add "X-Amz-Security-Token", valid_603374
  var valid_603375 = header.getOrDefault("X-Amz-Algorithm")
  valid_603375 = validateParameter(valid_603375, JString, required = false,
                                 default = nil)
  if valid_603375 != nil:
    section.add "X-Amz-Algorithm", valid_603375
  var valid_603376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-SignedHeaders", valid_603376
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_603377 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_603377 = validateParameter(valid_603377, JString, required = true,
                                 default = nil)
  if valid_603377 != nil:
    section.add "DBClusterEndpointIdentifier", valid_603377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603378: Call_PostDeleteDBClusterEndpoint_603365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603378.validator(path, query, header, formData, body)
  let scheme = call_603378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603378.url(scheme.get, call_603378.host, call_603378.base,
                         call_603378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603378, url, valid)

proc call*(call_603379: Call_PostDeleteDBClusterEndpoint_603365;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603380 = newJObject()
  var formData_603381 = newJObject()
  add(formData_603381, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_603380, "Action", newJString(Action))
  add(query_603380, "Version", newJString(Version))
  result = call_603379.call(nil, query_603380, nil, formData_603381, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_603365(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_603366, base: "/",
    url: url_PostDeleteDBClusterEndpoint_603367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_603349 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBClusterEndpoint_603351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_603350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_603352 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_603352 = validateParameter(valid_603352, JString, required = true,
                                 default = nil)
  if valid_603352 != nil:
    section.add "DBClusterEndpointIdentifier", valid_603352
  var valid_603353 = query.getOrDefault("Action")
  valid_603353 = validateParameter(valid_603353, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_603353 != nil:
    section.add "Action", valid_603353
  var valid_603354 = query.getOrDefault("Version")
  valid_603354 = validateParameter(valid_603354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603354 != nil:
    section.add "Version", valid_603354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603355 = header.getOrDefault("X-Amz-Signature")
  valid_603355 = validateParameter(valid_603355, JString, required = false,
                                 default = nil)
  if valid_603355 != nil:
    section.add "X-Amz-Signature", valid_603355
  var valid_603356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "X-Amz-Content-Sha256", valid_603356
  var valid_603357 = header.getOrDefault("X-Amz-Date")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "X-Amz-Date", valid_603357
  var valid_603358 = header.getOrDefault("X-Amz-Credential")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-Credential", valid_603358
  var valid_603359 = header.getOrDefault("X-Amz-Security-Token")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "X-Amz-Security-Token", valid_603359
  var valid_603360 = header.getOrDefault("X-Amz-Algorithm")
  valid_603360 = validateParameter(valid_603360, JString, required = false,
                                 default = nil)
  if valid_603360 != nil:
    section.add "X-Amz-Algorithm", valid_603360
  var valid_603361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-SignedHeaders", valid_603361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603362: Call_GetDeleteDBClusterEndpoint_603349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603362.validator(path, query, header, formData, body)
  let scheme = call_603362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603362.url(scheme.get, call_603362.host, call_603362.base,
                         call_603362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603362, url, valid)

proc call*(call_603363: Call_GetDeleteDBClusterEndpoint_603349;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603364 = newJObject()
  add(query_603364, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_603364, "Action", newJString(Action))
  add(query_603364, "Version", newJString(Version))
  result = call_603363.call(nil, query_603364, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_603349(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_603350, base: "/",
    url: url_GetDeleteDBClusterEndpoint_603351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_603398 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBClusterParameterGroup_603400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_603399(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603401 = query.getOrDefault("Action")
  valid_603401 = validateParameter(valid_603401, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_603401 != nil:
    section.add "Action", valid_603401
  var valid_603402 = query.getOrDefault("Version")
  valid_603402 = validateParameter(valid_603402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603402 != nil:
    section.add "Version", valid_603402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603403 = header.getOrDefault("X-Amz-Signature")
  valid_603403 = validateParameter(valid_603403, JString, required = false,
                                 default = nil)
  if valid_603403 != nil:
    section.add "X-Amz-Signature", valid_603403
  var valid_603404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603404 = validateParameter(valid_603404, JString, required = false,
                                 default = nil)
  if valid_603404 != nil:
    section.add "X-Amz-Content-Sha256", valid_603404
  var valid_603405 = header.getOrDefault("X-Amz-Date")
  valid_603405 = validateParameter(valid_603405, JString, required = false,
                                 default = nil)
  if valid_603405 != nil:
    section.add "X-Amz-Date", valid_603405
  var valid_603406 = header.getOrDefault("X-Amz-Credential")
  valid_603406 = validateParameter(valid_603406, JString, required = false,
                                 default = nil)
  if valid_603406 != nil:
    section.add "X-Amz-Credential", valid_603406
  var valid_603407 = header.getOrDefault("X-Amz-Security-Token")
  valid_603407 = validateParameter(valid_603407, JString, required = false,
                                 default = nil)
  if valid_603407 != nil:
    section.add "X-Amz-Security-Token", valid_603407
  var valid_603408 = header.getOrDefault("X-Amz-Algorithm")
  valid_603408 = validateParameter(valid_603408, JString, required = false,
                                 default = nil)
  if valid_603408 != nil:
    section.add "X-Amz-Algorithm", valid_603408
  var valid_603409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-SignedHeaders", valid_603409
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603410 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_603410 = validateParameter(valid_603410, JString, required = true,
                                 default = nil)
  if valid_603410 != nil:
    section.add "DBClusterParameterGroupName", valid_603410
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603411: Call_PostDeleteDBClusterParameterGroup_603398;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603411.validator(path, query, header, formData, body)
  let scheme = call_603411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603411.url(scheme.get, call_603411.host, call_603411.base,
                         call_603411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603411, url, valid)

proc call*(call_603412: Call_PostDeleteDBClusterParameterGroup_603398;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_603413 = newJObject()
  var formData_603414 = newJObject()
  add(query_603413, "Action", newJString(Action))
  add(formData_603414, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603413, "Version", newJString(Version))
  result = call_603412.call(nil, query_603413, nil, formData_603414, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_603398(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_603399, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_603400,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_603382 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBClusterParameterGroup_603384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_603383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603385 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603385 = validateParameter(valid_603385, JString, required = true,
                                 default = nil)
  if valid_603385 != nil:
    section.add "DBClusterParameterGroupName", valid_603385
  var valid_603386 = query.getOrDefault("Action")
  valid_603386 = validateParameter(valid_603386, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_603386 != nil:
    section.add "Action", valid_603386
  var valid_603387 = query.getOrDefault("Version")
  valid_603387 = validateParameter(valid_603387, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603387 != nil:
    section.add "Version", valid_603387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603388 = header.getOrDefault("X-Amz-Signature")
  valid_603388 = validateParameter(valid_603388, JString, required = false,
                                 default = nil)
  if valid_603388 != nil:
    section.add "X-Amz-Signature", valid_603388
  var valid_603389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603389 = validateParameter(valid_603389, JString, required = false,
                                 default = nil)
  if valid_603389 != nil:
    section.add "X-Amz-Content-Sha256", valid_603389
  var valid_603390 = header.getOrDefault("X-Amz-Date")
  valid_603390 = validateParameter(valid_603390, JString, required = false,
                                 default = nil)
  if valid_603390 != nil:
    section.add "X-Amz-Date", valid_603390
  var valid_603391 = header.getOrDefault("X-Amz-Credential")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Credential", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Security-Token")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Security-Token", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Algorithm")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Algorithm", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-SignedHeaders", valid_603394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603395: Call_GetDeleteDBClusterParameterGroup_603382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603395.validator(path, query, header, formData, body)
  let scheme = call_603395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603395.url(scheme.get, call_603395.host, call_603395.base,
                         call_603395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603395, url, valid)

proc call*(call_603396: Call_GetDeleteDBClusterParameterGroup_603382;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603397 = newJObject()
  add(query_603397, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603397, "Action", newJString(Action))
  add(query_603397, "Version", newJString(Version))
  result = call_603396.call(nil, query_603397, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_603382(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_603383, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_603384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_603431 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBClusterSnapshot_603433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_603432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603434 = query.getOrDefault("Action")
  valid_603434 = validateParameter(valid_603434, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_603434 != nil:
    section.add "Action", valid_603434
  var valid_603435 = query.getOrDefault("Version")
  valid_603435 = validateParameter(valid_603435, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603435 != nil:
    section.add "Version", valid_603435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603436 = header.getOrDefault("X-Amz-Signature")
  valid_603436 = validateParameter(valid_603436, JString, required = false,
                                 default = nil)
  if valid_603436 != nil:
    section.add "X-Amz-Signature", valid_603436
  var valid_603437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603437 = validateParameter(valid_603437, JString, required = false,
                                 default = nil)
  if valid_603437 != nil:
    section.add "X-Amz-Content-Sha256", valid_603437
  var valid_603438 = header.getOrDefault("X-Amz-Date")
  valid_603438 = validateParameter(valid_603438, JString, required = false,
                                 default = nil)
  if valid_603438 != nil:
    section.add "X-Amz-Date", valid_603438
  var valid_603439 = header.getOrDefault("X-Amz-Credential")
  valid_603439 = validateParameter(valid_603439, JString, required = false,
                                 default = nil)
  if valid_603439 != nil:
    section.add "X-Amz-Credential", valid_603439
  var valid_603440 = header.getOrDefault("X-Amz-Security-Token")
  valid_603440 = validateParameter(valid_603440, JString, required = false,
                                 default = nil)
  if valid_603440 != nil:
    section.add "X-Amz-Security-Token", valid_603440
  var valid_603441 = header.getOrDefault("X-Amz-Algorithm")
  valid_603441 = validateParameter(valid_603441, JString, required = false,
                                 default = nil)
  if valid_603441 != nil:
    section.add "X-Amz-Algorithm", valid_603441
  var valid_603442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603442 = validateParameter(valid_603442, JString, required = false,
                                 default = nil)
  if valid_603442 != nil:
    section.add "X-Amz-SignedHeaders", valid_603442
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_603443 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603443 = validateParameter(valid_603443, JString, required = true,
                                 default = nil)
  if valid_603443 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603444: Call_PostDeleteDBClusterSnapshot_603431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603444.validator(path, query, header, formData, body)
  let scheme = call_603444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603444.url(scheme.get, call_603444.host, call_603444.base,
                         call_603444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603444, url, valid)

proc call*(call_603445: Call_PostDeleteDBClusterSnapshot_603431;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603446 = newJObject()
  var formData_603447 = newJObject()
  add(formData_603447, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_603446, "Action", newJString(Action))
  add(query_603446, "Version", newJString(Version))
  result = call_603445.call(nil, query_603446, nil, formData_603447, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_603431(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_603432, base: "/",
    url: url_PostDeleteDBClusterSnapshot_603433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_603415 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBClusterSnapshot_603417(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_603416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_603418 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603418 = validateParameter(valid_603418, JString, required = true,
                                 default = nil)
  if valid_603418 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603418
  var valid_603419 = query.getOrDefault("Action")
  valid_603419 = validateParameter(valid_603419, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_603419 != nil:
    section.add "Action", valid_603419
  var valid_603420 = query.getOrDefault("Version")
  valid_603420 = validateParameter(valid_603420, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603420 != nil:
    section.add "Version", valid_603420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603421 = header.getOrDefault("X-Amz-Signature")
  valid_603421 = validateParameter(valid_603421, JString, required = false,
                                 default = nil)
  if valid_603421 != nil:
    section.add "X-Amz-Signature", valid_603421
  var valid_603422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603422 = validateParameter(valid_603422, JString, required = false,
                                 default = nil)
  if valid_603422 != nil:
    section.add "X-Amz-Content-Sha256", valid_603422
  var valid_603423 = header.getOrDefault("X-Amz-Date")
  valid_603423 = validateParameter(valid_603423, JString, required = false,
                                 default = nil)
  if valid_603423 != nil:
    section.add "X-Amz-Date", valid_603423
  var valid_603424 = header.getOrDefault("X-Amz-Credential")
  valid_603424 = validateParameter(valid_603424, JString, required = false,
                                 default = nil)
  if valid_603424 != nil:
    section.add "X-Amz-Credential", valid_603424
  var valid_603425 = header.getOrDefault("X-Amz-Security-Token")
  valid_603425 = validateParameter(valid_603425, JString, required = false,
                                 default = nil)
  if valid_603425 != nil:
    section.add "X-Amz-Security-Token", valid_603425
  var valid_603426 = header.getOrDefault("X-Amz-Algorithm")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Algorithm", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-SignedHeaders", valid_603427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603428: Call_GetDeleteDBClusterSnapshot_603415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603428.validator(path, query, header, formData, body)
  let scheme = call_603428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603428.url(scheme.get, call_603428.host, call_603428.base,
                         call_603428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603428, url, valid)

proc call*(call_603429: Call_GetDeleteDBClusterSnapshot_603415;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603430 = newJObject()
  add(query_603430, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_603430, "Action", newJString(Action))
  add(query_603430, "Version", newJString(Version))
  result = call_603429.call(nil, query_603430, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_603415(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_603416, base: "/",
    url: url_GetDeleteDBClusterSnapshot_603417,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_603467 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBInstance_603469(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_603468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603470 = query.getOrDefault("Action")
  valid_603470 = validateParameter(valid_603470, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_603470 != nil:
    section.add "Action", valid_603470
  var valid_603471 = query.getOrDefault("Version")
  valid_603471 = validateParameter(valid_603471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603471 != nil:
    section.add "Version", valid_603471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603472 = header.getOrDefault("X-Amz-Signature")
  valid_603472 = validateParameter(valid_603472, JString, required = false,
                                 default = nil)
  if valid_603472 != nil:
    section.add "X-Amz-Signature", valid_603472
  var valid_603473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603473 = validateParameter(valid_603473, JString, required = false,
                                 default = nil)
  if valid_603473 != nil:
    section.add "X-Amz-Content-Sha256", valid_603473
  var valid_603474 = header.getOrDefault("X-Amz-Date")
  valid_603474 = validateParameter(valid_603474, JString, required = false,
                                 default = nil)
  if valid_603474 != nil:
    section.add "X-Amz-Date", valid_603474
  var valid_603475 = header.getOrDefault("X-Amz-Credential")
  valid_603475 = validateParameter(valid_603475, JString, required = false,
                                 default = nil)
  if valid_603475 != nil:
    section.add "X-Amz-Credential", valid_603475
  var valid_603476 = header.getOrDefault("X-Amz-Security-Token")
  valid_603476 = validateParameter(valid_603476, JString, required = false,
                                 default = nil)
  if valid_603476 != nil:
    section.add "X-Amz-Security-Token", valid_603476
  var valid_603477 = header.getOrDefault("X-Amz-Algorithm")
  valid_603477 = validateParameter(valid_603477, JString, required = false,
                                 default = nil)
  if valid_603477 != nil:
    section.add "X-Amz-Algorithm", valid_603477
  var valid_603478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603478 = validateParameter(valid_603478, JString, required = false,
                                 default = nil)
  if valid_603478 != nil:
    section.add "X-Amz-SignedHeaders", valid_603478
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_603479 = formData.getOrDefault("DBInstanceIdentifier")
  valid_603479 = validateParameter(valid_603479, JString, required = true,
                                 default = nil)
  if valid_603479 != nil:
    section.add "DBInstanceIdentifier", valid_603479
  var valid_603480 = formData.getOrDefault("SkipFinalSnapshot")
  valid_603480 = validateParameter(valid_603480, JBool, required = false, default = nil)
  if valid_603480 != nil:
    section.add "SkipFinalSnapshot", valid_603480
  var valid_603481 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603481
  var valid_603482 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_603482 = validateParameter(valid_603482, JBool, required = false, default = nil)
  if valid_603482 != nil:
    section.add "DeleteAutomatedBackups", valid_603482
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603483: Call_PostDeleteDBInstance_603467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_603483.validator(path, query, header, formData, body)
  let scheme = call_603483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603483.url(scheme.get, call_603483.host, call_603483.base,
                         call_603483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603483, url, valid)

proc call*(call_603484: Call_PostDeleteDBInstance_603467;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_603485 = newJObject()
  var formData_603486 = newJObject()
  add(formData_603486, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_603485, "Action", newJString(Action))
  add(formData_603486, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_603486, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603485, "Version", newJString(Version))
  add(formData_603486, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_603484.call(nil, query_603485, nil, formData_603486, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_603467(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_603468, base: "/",
    url: url_PostDeleteDBInstance_603469, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_603448 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBInstance_603450(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_603449(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_603451 = query.getOrDefault("DeleteAutomatedBackups")
  valid_603451 = validateParameter(valid_603451, JBool, required = false, default = nil)
  if valid_603451 != nil:
    section.add "DeleteAutomatedBackups", valid_603451
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_603452 = query.getOrDefault("DBInstanceIdentifier")
  valid_603452 = validateParameter(valid_603452, JString, required = true,
                                 default = nil)
  if valid_603452 != nil:
    section.add "DBInstanceIdentifier", valid_603452
  var valid_603453 = query.getOrDefault("SkipFinalSnapshot")
  valid_603453 = validateParameter(valid_603453, JBool, required = false, default = nil)
  if valid_603453 != nil:
    section.add "SkipFinalSnapshot", valid_603453
  var valid_603454 = query.getOrDefault("Action")
  valid_603454 = validateParameter(valid_603454, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_603454 != nil:
    section.add "Action", valid_603454
  var valid_603455 = query.getOrDefault("Version")
  valid_603455 = validateParameter(valid_603455, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603455 != nil:
    section.add "Version", valid_603455
  var valid_603456 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603456 = validateParameter(valid_603456, JString, required = false,
                                 default = nil)
  if valid_603456 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603457 = header.getOrDefault("X-Amz-Signature")
  valid_603457 = validateParameter(valid_603457, JString, required = false,
                                 default = nil)
  if valid_603457 != nil:
    section.add "X-Amz-Signature", valid_603457
  var valid_603458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603458 = validateParameter(valid_603458, JString, required = false,
                                 default = nil)
  if valid_603458 != nil:
    section.add "X-Amz-Content-Sha256", valid_603458
  var valid_603459 = header.getOrDefault("X-Amz-Date")
  valid_603459 = validateParameter(valid_603459, JString, required = false,
                                 default = nil)
  if valid_603459 != nil:
    section.add "X-Amz-Date", valid_603459
  var valid_603460 = header.getOrDefault("X-Amz-Credential")
  valid_603460 = validateParameter(valid_603460, JString, required = false,
                                 default = nil)
  if valid_603460 != nil:
    section.add "X-Amz-Credential", valid_603460
  var valid_603461 = header.getOrDefault("X-Amz-Security-Token")
  valid_603461 = validateParameter(valid_603461, JString, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "X-Amz-Security-Token", valid_603461
  var valid_603462 = header.getOrDefault("X-Amz-Algorithm")
  valid_603462 = validateParameter(valid_603462, JString, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "X-Amz-Algorithm", valid_603462
  var valid_603463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "X-Amz-SignedHeaders", valid_603463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603464: Call_GetDeleteDBInstance_603448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_603464.validator(path, query, header, formData, body)
  let scheme = call_603464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603464.url(scheme.get, call_603464.host, call_603464.base,
                         call_603464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603464, url, valid)

proc call*(call_603465: Call_GetDeleteDBInstance_603448;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_603466 = newJObject()
  add(query_603466, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_603466, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_603466, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_603466, "Action", newJString(Action))
  add(query_603466, "Version", newJString(Version))
  add(query_603466, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_603465.call(nil, query_603466, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_603448(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_603449, base: "/",
    url: url_GetDeleteDBInstance_603450, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_603503 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBInstanceAutomatedBackup_603505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_603504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603506 = query.getOrDefault("Action")
  valid_603506 = validateParameter(valid_603506, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_603506 != nil:
    section.add "Action", valid_603506
  var valid_603507 = query.getOrDefault("Version")
  valid_603507 = validateParameter(valid_603507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603507 != nil:
    section.add "Version", valid_603507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603508 = header.getOrDefault("X-Amz-Signature")
  valid_603508 = validateParameter(valid_603508, JString, required = false,
                                 default = nil)
  if valid_603508 != nil:
    section.add "X-Amz-Signature", valid_603508
  var valid_603509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603509 = validateParameter(valid_603509, JString, required = false,
                                 default = nil)
  if valid_603509 != nil:
    section.add "X-Amz-Content-Sha256", valid_603509
  var valid_603510 = header.getOrDefault("X-Amz-Date")
  valid_603510 = validateParameter(valid_603510, JString, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "X-Amz-Date", valid_603510
  var valid_603511 = header.getOrDefault("X-Amz-Credential")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "X-Amz-Credential", valid_603511
  var valid_603512 = header.getOrDefault("X-Amz-Security-Token")
  valid_603512 = validateParameter(valid_603512, JString, required = false,
                                 default = nil)
  if valid_603512 != nil:
    section.add "X-Amz-Security-Token", valid_603512
  var valid_603513 = header.getOrDefault("X-Amz-Algorithm")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "X-Amz-Algorithm", valid_603513
  var valid_603514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-SignedHeaders", valid_603514
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_603515 = formData.getOrDefault("DbiResourceId")
  valid_603515 = validateParameter(valid_603515, JString, required = true,
                                 default = nil)
  if valid_603515 != nil:
    section.add "DbiResourceId", valid_603515
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603516: Call_PostDeleteDBInstanceAutomatedBackup_603503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_603516.validator(path, query, header, formData, body)
  let scheme = call_603516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603516.url(scheme.get, call_603516.host, call_603516.base,
                         call_603516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603516, url, valid)

proc call*(call_603517: Call_PostDeleteDBInstanceAutomatedBackup_603503;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603518 = newJObject()
  var formData_603519 = newJObject()
  add(formData_603519, "DbiResourceId", newJString(DbiResourceId))
  add(query_603518, "Action", newJString(Action))
  add(query_603518, "Version", newJString(Version))
  result = call_603517.call(nil, query_603518, nil, formData_603519, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_603503(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_603504, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_603505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_603487 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBInstanceAutomatedBackup_603489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_603488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_603490 = query.getOrDefault("DbiResourceId")
  valid_603490 = validateParameter(valid_603490, JString, required = true,
                                 default = nil)
  if valid_603490 != nil:
    section.add "DbiResourceId", valid_603490
  var valid_603491 = query.getOrDefault("Action")
  valid_603491 = validateParameter(valid_603491, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_603491 != nil:
    section.add "Action", valid_603491
  var valid_603492 = query.getOrDefault("Version")
  valid_603492 = validateParameter(valid_603492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603492 != nil:
    section.add "Version", valid_603492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603493 = header.getOrDefault("X-Amz-Signature")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Signature", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Content-Sha256", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Date")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Date", valid_603495
  var valid_603496 = header.getOrDefault("X-Amz-Credential")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "X-Amz-Credential", valid_603496
  var valid_603497 = header.getOrDefault("X-Amz-Security-Token")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "X-Amz-Security-Token", valid_603497
  var valid_603498 = header.getOrDefault("X-Amz-Algorithm")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "X-Amz-Algorithm", valid_603498
  var valid_603499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603499 = validateParameter(valid_603499, JString, required = false,
                                 default = nil)
  if valid_603499 != nil:
    section.add "X-Amz-SignedHeaders", valid_603499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603500: Call_GetDeleteDBInstanceAutomatedBackup_603487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_603500.validator(path, query, header, formData, body)
  let scheme = call_603500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603500.url(scheme.get, call_603500.host, call_603500.base,
                         call_603500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603500, url, valid)

proc call*(call_603501: Call_GetDeleteDBInstanceAutomatedBackup_603487;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603502 = newJObject()
  add(query_603502, "DbiResourceId", newJString(DbiResourceId))
  add(query_603502, "Action", newJString(Action))
  add(query_603502, "Version", newJString(Version))
  result = call_603501.call(nil, query_603502, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_603487(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_603488, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_603489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_603536 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBParameterGroup_603538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_603537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603539 = query.getOrDefault("Action")
  valid_603539 = validateParameter(valid_603539, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_603539 != nil:
    section.add "Action", valid_603539
  var valid_603540 = query.getOrDefault("Version")
  valid_603540 = validateParameter(valid_603540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603540 != nil:
    section.add "Version", valid_603540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603541 = header.getOrDefault("X-Amz-Signature")
  valid_603541 = validateParameter(valid_603541, JString, required = false,
                                 default = nil)
  if valid_603541 != nil:
    section.add "X-Amz-Signature", valid_603541
  var valid_603542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603542 = validateParameter(valid_603542, JString, required = false,
                                 default = nil)
  if valid_603542 != nil:
    section.add "X-Amz-Content-Sha256", valid_603542
  var valid_603543 = header.getOrDefault("X-Amz-Date")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-Date", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Credential")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Credential", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Security-Token")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Security-Token", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Algorithm")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Algorithm", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-SignedHeaders", valid_603547
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_603548 = formData.getOrDefault("DBParameterGroupName")
  valid_603548 = validateParameter(valid_603548, JString, required = true,
                                 default = nil)
  if valid_603548 != nil:
    section.add "DBParameterGroupName", valid_603548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603549: Call_PostDeleteDBParameterGroup_603536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_603549.validator(path, query, header, formData, body)
  let scheme = call_603549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603549.url(scheme.get, call_603549.host, call_603549.base,
                         call_603549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603549, url, valid)

proc call*(call_603550: Call_PostDeleteDBParameterGroup_603536;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603551 = newJObject()
  var formData_603552 = newJObject()
  add(formData_603552, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603551, "Action", newJString(Action))
  add(query_603551, "Version", newJString(Version))
  result = call_603550.call(nil, query_603551, nil, formData_603552, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_603536(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_603537, base: "/",
    url: url_PostDeleteDBParameterGroup_603538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_603520 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBParameterGroup_603522(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_603521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_603523 = query.getOrDefault("DBParameterGroupName")
  valid_603523 = validateParameter(valid_603523, JString, required = true,
                                 default = nil)
  if valid_603523 != nil:
    section.add "DBParameterGroupName", valid_603523
  var valid_603524 = query.getOrDefault("Action")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_603524 != nil:
    section.add "Action", valid_603524
  var valid_603525 = query.getOrDefault("Version")
  valid_603525 = validateParameter(valid_603525, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603525 != nil:
    section.add "Version", valid_603525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603526 = header.getOrDefault("X-Amz-Signature")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Signature", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Content-Sha256", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Date")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Date", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Credential")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Credential", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Security-Token")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Security-Token", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Algorithm")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Algorithm", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-SignedHeaders", valid_603532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603533: Call_GetDeleteDBParameterGroup_603520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_603533.validator(path, query, header, formData, body)
  let scheme = call_603533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603533.url(scheme.get, call_603533.host, call_603533.base,
                         call_603533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603533, url, valid)

proc call*(call_603534: Call_GetDeleteDBParameterGroup_603520;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603535 = newJObject()
  add(query_603535, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603535, "Action", newJString(Action))
  add(query_603535, "Version", newJString(Version))
  result = call_603534.call(nil, query_603535, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_603520(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_603521, base: "/",
    url: url_GetDeleteDBParameterGroup_603522,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_603569 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBProxy_603571(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_603570(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603572 = query.getOrDefault("Action")
  valid_603572 = validateParameter(valid_603572, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_603572 != nil:
    section.add "Action", valid_603572
  var valid_603573 = query.getOrDefault("Version")
  valid_603573 = validateParameter(valid_603573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603573 != nil:
    section.add "Version", valid_603573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603574 = header.getOrDefault("X-Amz-Signature")
  valid_603574 = validateParameter(valid_603574, JString, required = false,
                                 default = nil)
  if valid_603574 != nil:
    section.add "X-Amz-Signature", valid_603574
  var valid_603575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603575 = validateParameter(valid_603575, JString, required = false,
                                 default = nil)
  if valid_603575 != nil:
    section.add "X-Amz-Content-Sha256", valid_603575
  var valid_603576 = header.getOrDefault("X-Amz-Date")
  valid_603576 = validateParameter(valid_603576, JString, required = false,
                                 default = nil)
  if valid_603576 != nil:
    section.add "X-Amz-Date", valid_603576
  var valid_603577 = header.getOrDefault("X-Amz-Credential")
  valid_603577 = validateParameter(valid_603577, JString, required = false,
                                 default = nil)
  if valid_603577 != nil:
    section.add "X-Amz-Credential", valid_603577
  var valid_603578 = header.getOrDefault("X-Amz-Security-Token")
  valid_603578 = validateParameter(valid_603578, JString, required = false,
                                 default = nil)
  if valid_603578 != nil:
    section.add "X-Amz-Security-Token", valid_603578
  var valid_603579 = header.getOrDefault("X-Amz-Algorithm")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "X-Amz-Algorithm", valid_603579
  var valid_603580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603580 = validateParameter(valid_603580, JString, required = false,
                                 default = nil)
  if valid_603580 != nil:
    section.add "X-Amz-SignedHeaders", valid_603580
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_603581 = formData.getOrDefault("DBProxyName")
  valid_603581 = validateParameter(valid_603581, JString, required = true,
                                 default = nil)
  if valid_603581 != nil:
    section.add "DBProxyName", valid_603581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603582: Call_PostDeleteDBProxy_603569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_603582.validator(path, query, header, formData, body)
  let scheme = call_603582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603582.url(scheme.get, call_603582.host, call_603582.base,
                         call_603582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603582, url, valid)

proc call*(call_603583: Call_PostDeleteDBProxy_603569; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603584 = newJObject()
  var formData_603585 = newJObject()
  add(formData_603585, "DBProxyName", newJString(DBProxyName))
  add(query_603584, "Action", newJString(Action))
  add(query_603584, "Version", newJString(Version))
  result = call_603583.call(nil, query_603584, nil, formData_603585, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_603569(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_603570,
    base: "/", url: url_PostDeleteDBProxy_603571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_603553 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBProxy_603555(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_603554(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603556 = query.getOrDefault("Action")
  valid_603556 = validateParameter(valid_603556, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_603556 != nil:
    section.add "Action", valid_603556
  var valid_603557 = query.getOrDefault("Version")
  valid_603557 = validateParameter(valid_603557, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603557 != nil:
    section.add "Version", valid_603557
  var valid_603558 = query.getOrDefault("DBProxyName")
  valid_603558 = validateParameter(valid_603558, JString, required = true,
                                 default = nil)
  if valid_603558 != nil:
    section.add "DBProxyName", valid_603558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603559 = header.getOrDefault("X-Amz-Signature")
  valid_603559 = validateParameter(valid_603559, JString, required = false,
                                 default = nil)
  if valid_603559 != nil:
    section.add "X-Amz-Signature", valid_603559
  var valid_603560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603560 = validateParameter(valid_603560, JString, required = false,
                                 default = nil)
  if valid_603560 != nil:
    section.add "X-Amz-Content-Sha256", valid_603560
  var valid_603561 = header.getOrDefault("X-Amz-Date")
  valid_603561 = validateParameter(valid_603561, JString, required = false,
                                 default = nil)
  if valid_603561 != nil:
    section.add "X-Amz-Date", valid_603561
  var valid_603562 = header.getOrDefault("X-Amz-Credential")
  valid_603562 = validateParameter(valid_603562, JString, required = false,
                                 default = nil)
  if valid_603562 != nil:
    section.add "X-Amz-Credential", valid_603562
  var valid_603563 = header.getOrDefault("X-Amz-Security-Token")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "X-Amz-Security-Token", valid_603563
  var valid_603564 = header.getOrDefault("X-Amz-Algorithm")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "X-Amz-Algorithm", valid_603564
  var valid_603565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "X-Amz-SignedHeaders", valid_603565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603566: Call_GetDeleteDBProxy_603553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_603566.validator(path, query, header, formData, body)
  let scheme = call_603566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603566.url(scheme.get, call_603566.host, call_603566.base,
                         call_603566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603566, url, valid)

proc call*(call_603567: Call_GetDeleteDBProxy_603553; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  var query_603568 = newJObject()
  add(query_603568, "Action", newJString(Action))
  add(query_603568, "Version", newJString(Version))
  add(query_603568, "DBProxyName", newJString(DBProxyName))
  result = call_603567.call(nil, query_603568, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_603553(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_603554,
    base: "/", url: url_GetDeleteDBProxy_603555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_603602 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBSecurityGroup_603604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_603603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603605 = query.getOrDefault("Action")
  valid_603605 = validateParameter(valid_603605, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_603605 != nil:
    section.add "Action", valid_603605
  var valid_603606 = query.getOrDefault("Version")
  valid_603606 = validateParameter(valid_603606, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603606 != nil:
    section.add "Version", valid_603606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603607 = header.getOrDefault("X-Amz-Signature")
  valid_603607 = validateParameter(valid_603607, JString, required = false,
                                 default = nil)
  if valid_603607 != nil:
    section.add "X-Amz-Signature", valid_603607
  var valid_603608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603608 = validateParameter(valid_603608, JString, required = false,
                                 default = nil)
  if valid_603608 != nil:
    section.add "X-Amz-Content-Sha256", valid_603608
  var valid_603609 = header.getOrDefault("X-Amz-Date")
  valid_603609 = validateParameter(valid_603609, JString, required = false,
                                 default = nil)
  if valid_603609 != nil:
    section.add "X-Amz-Date", valid_603609
  var valid_603610 = header.getOrDefault("X-Amz-Credential")
  valid_603610 = validateParameter(valid_603610, JString, required = false,
                                 default = nil)
  if valid_603610 != nil:
    section.add "X-Amz-Credential", valid_603610
  var valid_603611 = header.getOrDefault("X-Amz-Security-Token")
  valid_603611 = validateParameter(valid_603611, JString, required = false,
                                 default = nil)
  if valid_603611 != nil:
    section.add "X-Amz-Security-Token", valid_603611
  var valid_603612 = header.getOrDefault("X-Amz-Algorithm")
  valid_603612 = validateParameter(valid_603612, JString, required = false,
                                 default = nil)
  if valid_603612 != nil:
    section.add "X-Amz-Algorithm", valid_603612
  var valid_603613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-SignedHeaders", valid_603613
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_603614 = formData.getOrDefault("DBSecurityGroupName")
  valid_603614 = validateParameter(valid_603614, JString, required = true,
                                 default = nil)
  if valid_603614 != nil:
    section.add "DBSecurityGroupName", valid_603614
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603615: Call_PostDeleteDBSecurityGroup_603602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603615.validator(path, query, header, formData, body)
  let scheme = call_603615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603615.url(scheme.get, call_603615.host, call_603615.base,
                         call_603615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603615, url, valid)

proc call*(call_603616: Call_PostDeleteDBSecurityGroup_603602;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603617 = newJObject()
  var formData_603618 = newJObject()
  add(formData_603618, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_603617, "Action", newJString(Action))
  add(query_603617, "Version", newJString(Version))
  result = call_603616.call(nil, query_603617, nil, formData_603618, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_603602(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_603603, base: "/",
    url: url_PostDeleteDBSecurityGroup_603604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_603586 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBSecurityGroup_603588(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_603587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_603589 = query.getOrDefault("DBSecurityGroupName")
  valid_603589 = validateParameter(valid_603589, JString, required = true,
                                 default = nil)
  if valid_603589 != nil:
    section.add "DBSecurityGroupName", valid_603589
  var valid_603590 = query.getOrDefault("Action")
  valid_603590 = validateParameter(valid_603590, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_603590 != nil:
    section.add "Action", valid_603590
  var valid_603591 = query.getOrDefault("Version")
  valid_603591 = validateParameter(valid_603591, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603591 != nil:
    section.add "Version", valid_603591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603592 = header.getOrDefault("X-Amz-Signature")
  valid_603592 = validateParameter(valid_603592, JString, required = false,
                                 default = nil)
  if valid_603592 != nil:
    section.add "X-Amz-Signature", valid_603592
  var valid_603593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603593 = validateParameter(valid_603593, JString, required = false,
                                 default = nil)
  if valid_603593 != nil:
    section.add "X-Amz-Content-Sha256", valid_603593
  var valid_603594 = header.getOrDefault("X-Amz-Date")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "X-Amz-Date", valid_603594
  var valid_603595 = header.getOrDefault("X-Amz-Credential")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "X-Amz-Credential", valid_603595
  var valid_603596 = header.getOrDefault("X-Amz-Security-Token")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "X-Amz-Security-Token", valid_603596
  var valid_603597 = header.getOrDefault("X-Amz-Algorithm")
  valid_603597 = validateParameter(valid_603597, JString, required = false,
                                 default = nil)
  if valid_603597 != nil:
    section.add "X-Amz-Algorithm", valid_603597
  var valid_603598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603598 = validateParameter(valid_603598, JString, required = false,
                                 default = nil)
  if valid_603598 != nil:
    section.add "X-Amz-SignedHeaders", valid_603598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603599: Call_GetDeleteDBSecurityGroup_603586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603599.validator(path, query, header, formData, body)
  let scheme = call_603599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603599.url(scheme.get, call_603599.host, call_603599.base,
                         call_603599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603599, url, valid)

proc call*(call_603600: Call_GetDeleteDBSecurityGroup_603586;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603601 = newJObject()
  add(query_603601, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_603601, "Action", newJString(Action))
  add(query_603601, "Version", newJString(Version))
  result = call_603600.call(nil, query_603601, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_603586(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_603587, base: "/",
    url: url_GetDeleteDBSecurityGroup_603588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_603635 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBSnapshot_603637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_603636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603638 = query.getOrDefault("Action")
  valid_603638 = validateParameter(valid_603638, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_603638 != nil:
    section.add "Action", valid_603638
  var valid_603639 = query.getOrDefault("Version")
  valid_603639 = validateParameter(valid_603639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603639 != nil:
    section.add "Version", valid_603639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603640 = header.getOrDefault("X-Amz-Signature")
  valid_603640 = validateParameter(valid_603640, JString, required = false,
                                 default = nil)
  if valid_603640 != nil:
    section.add "X-Amz-Signature", valid_603640
  var valid_603641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603641 = validateParameter(valid_603641, JString, required = false,
                                 default = nil)
  if valid_603641 != nil:
    section.add "X-Amz-Content-Sha256", valid_603641
  var valid_603642 = header.getOrDefault("X-Amz-Date")
  valid_603642 = validateParameter(valid_603642, JString, required = false,
                                 default = nil)
  if valid_603642 != nil:
    section.add "X-Amz-Date", valid_603642
  var valid_603643 = header.getOrDefault("X-Amz-Credential")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "X-Amz-Credential", valid_603643
  var valid_603644 = header.getOrDefault("X-Amz-Security-Token")
  valid_603644 = validateParameter(valid_603644, JString, required = false,
                                 default = nil)
  if valid_603644 != nil:
    section.add "X-Amz-Security-Token", valid_603644
  var valid_603645 = header.getOrDefault("X-Amz-Algorithm")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "X-Amz-Algorithm", valid_603645
  var valid_603646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "X-Amz-SignedHeaders", valid_603646
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_603647 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_603647 = validateParameter(valid_603647, JString, required = true,
                                 default = nil)
  if valid_603647 != nil:
    section.add "DBSnapshotIdentifier", valid_603647
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603648: Call_PostDeleteDBSnapshot_603635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_603648.validator(path, query, header, formData, body)
  let scheme = call_603648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603648.url(scheme.get, call_603648.host, call_603648.base,
                         call_603648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603648, url, valid)

proc call*(call_603649: Call_PostDeleteDBSnapshot_603635;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603650 = newJObject()
  var formData_603651 = newJObject()
  add(formData_603651, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_603650, "Action", newJString(Action))
  add(query_603650, "Version", newJString(Version))
  result = call_603649.call(nil, query_603650, nil, formData_603651, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_603635(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_603636, base: "/",
    url: url_PostDeleteDBSnapshot_603637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_603619 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBSnapshot_603621(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_603620(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_603622 = query.getOrDefault("DBSnapshotIdentifier")
  valid_603622 = validateParameter(valid_603622, JString, required = true,
                                 default = nil)
  if valid_603622 != nil:
    section.add "DBSnapshotIdentifier", valid_603622
  var valid_603623 = query.getOrDefault("Action")
  valid_603623 = validateParameter(valid_603623, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_603623 != nil:
    section.add "Action", valid_603623
  var valid_603624 = query.getOrDefault("Version")
  valid_603624 = validateParameter(valid_603624, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603624 != nil:
    section.add "Version", valid_603624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603625 = header.getOrDefault("X-Amz-Signature")
  valid_603625 = validateParameter(valid_603625, JString, required = false,
                                 default = nil)
  if valid_603625 != nil:
    section.add "X-Amz-Signature", valid_603625
  var valid_603626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603626 = validateParameter(valid_603626, JString, required = false,
                                 default = nil)
  if valid_603626 != nil:
    section.add "X-Amz-Content-Sha256", valid_603626
  var valid_603627 = header.getOrDefault("X-Amz-Date")
  valid_603627 = validateParameter(valid_603627, JString, required = false,
                                 default = nil)
  if valid_603627 != nil:
    section.add "X-Amz-Date", valid_603627
  var valid_603628 = header.getOrDefault("X-Amz-Credential")
  valid_603628 = validateParameter(valid_603628, JString, required = false,
                                 default = nil)
  if valid_603628 != nil:
    section.add "X-Amz-Credential", valid_603628
  var valid_603629 = header.getOrDefault("X-Amz-Security-Token")
  valid_603629 = validateParameter(valid_603629, JString, required = false,
                                 default = nil)
  if valid_603629 != nil:
    section.add "X-Amz-Security-Token", valid_603629
  var valid_603630 = header.getOrDefault("X-Amz-Algorithm")
  valid_603630 = validateParameter(valid_603630, JString, required = false,
                                 default = nil)
  if valid_603630 != nil:
    section.add "X-Amz-Algorithm", valid_603630
  var valid_603631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603631 = validateParameter(valid_603631, JString, required = false,
                                 default = nil)
  if valid_603631 != nil:
    section.add "X-Amz-SignedHeaders", valid_603631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603632: Call_GetDeleteDBSnapshot_603619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_603632.validator(path, query, header, formData, body)
  let scheme = call_603632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603632.url(scheme.get, call_603632.host, call_603632.base,
                         call_603632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603632, url, valid)

proc call*(call_603633: Call_GetDeleteDBSnapshot_603619;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603634 = newJObject()
  add(query_603634, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_603634, "Action", newJString(Action))
  add(query_603634, "Version", newJString(Version))
  result = call_603633.call(nil, query_603634, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_603619(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_603620, base: "/",
    url: url_GetDeleteDBSnapshot_603621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_603668 = ref object of OpenApiRestCall_601389
proc url_PostDeleteDBSubnetGroup_603670(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_603669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603671 = query.getOrDefault("Action")
  valid_603671 = validateParameter(valid_603671, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_603671 != nil:
    section.add "Action", valid_603671
  var valid_603672 = query.getOrDefault("Version")
  valid_603672 = validateParameter(valid_603672, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603672 != nil:
    section.add "Version", valid_603672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603673 = header.getOrDefault("X-Amz-Signature")
  valid_603673 = validateParameter(valid_603673, JString, required = false,
                                 default = nil)
  if valid_603673 != nil:
    section.add "X-Amz-Signature", valid_603673
  var valid_603674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603674 = validateParameter(valid_603674, JString, required = false,
                                 default = nil)
  if valid_603674 != nil:
    section.add "X-Amz-Content-Sha256", valid_603674
  var valid_603675 = header.getOrDefault("X-Amz-Date")
  valid_603675 = validateParameter(valid_603675, JString, required = false,
                                 default = nil)
  if valid_603675 != nil:
    section.add "X-Amz-Date", valid_603675
  var valid_603676 = header.getOrDefault("X-Amz-Credential")
  valid_603676 = validateParameter(valid_603676, JString, required = false,
                                 default = nil)
  if valid_603676 != nil:
    section.add "X-Amz-Credential", valid_603676
  var valid_603677 = header.getOrDefault("X-Amz-Security-Token")
  valid_603677 = validateParameter(valid_603677, JString, required = false,
                                 default = nil)
  if valid_603677 != nil:
    section.add "X-Amz-Security-Token", valid_603677
  var valid_603678 = header.getOrDefault("X-Amz-Algorithm")
  valid_603678 = validateParameter(valid_603678, JString, required = false,
                                 default = nil)
  if valid_603678 != nil:
    section.add "X-Amz-Algorithm", valid_603678
  var valid_603679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603679 = validateParameter(valid_603679, JString, required = false,
                                 default = nil)
  if valid_603679 != nil:
    section.add "X-Amz-SignedHeaders", valid_603679
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_603680 = formData.getOrDefault("DBSubnetGroupName")
  valid_603680 = validateParameter(valid_603680, JString, required = true,
                                 default = nil)
  if valid_603680 != nil:
    section.add "DBSubnetGroupName", valid_603680
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603681: Call_PostDeleteDBSubnetGroup_603668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603681.validator(path, query, header, formData, body)
  let scheme = call_603681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603681.url(scheme.get, call_603681.host, call_603681.base,
                         call_603681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603681, url, valid)

proc call*(call_603682: Call_PostDeleteDBSubnetGroup_603668;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_603683 = newJObject()
  var formData_603684 = newJObject()
  add(query_603683, "Action", newJString(Action))
  add(formData_603684, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603683, "Version", newJString(Version))
  result = call_603682.call(nil, query_603683, nil, formData_603684, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_603668(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_603669, base: "/",
    url: url_PostDeleteDBSubnetGroup_603670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_603652 = ref object of OpenApiRestCall_601389
proc url_GetDeleteDBSubnetGroup_603654(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_603653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603655 = query.getOrDefault("Action")
  valid_603655 = validateParameter(valid_603655, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_603655 != nil:
    section.add "Action", valid_603655
  var valid_603656 = query.getOrDefault("DBSubnetGroupName")
  valid_603656 = validateParameter(valid_603656, JString, required = true,
                                 default = nil)
  if valid_603656 != nil:
    section.add "DBSubnetGroupName", valid_603656
  var valid_603657 = query.getOrDefault("Version")
  valid_603657 = validateParameter(valid_603657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603657 != nil:
    section.add "Version", valid_603657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603658 = header.getOrDefault("X-Amz-Signature")
  valid_603658 = validateParameter(valid_603658, JString, required = false,
                                 default = nil)
  if valid_603658 != nil:
    section.add "X-Amz-Signature", valid_603658
  var valid_603659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603659 = validateParameter(valid_603659, JString, required = false,
                                 default = nil)
  if valid_603659 != nil:
    section.add "X-Amz-Content-Sha256", valid_603659
  var valid_603660 = header.getOrDefault("X-Amz-Date")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-Date", valid_603660
  var valid_603661 = header.getOrDefault("X-Amz-Credential")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Credential", valid_603661
  var valid_603662 = header.getOrDefault("X-Amz-Security-Token")
  valid_603662 = validateParameter(valid_603662, JString, required = false,
                                 default = nil)
  if valid_603662 != nil:
    section.add "X-Amz-Security-Token", valid_603662
  var valid_603663 = header.getOrDefault("X-Amz-Algorithm")
  valid_603663 = validateParameter(valid_603663, JString, required = false,
                                 default = nil)
  if valid_603663 != nil:
    section.add "X-Amz-Algorithm", valid_603663
  var valid_603664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603664 = validateParameter(valid_603664, JString, required = false,
                                 default = nil)
  if valid_603664 != nil:
    section.add "X-Amz-SignedHeaders", valid_603664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603665: Call_GetDeleteDBSubnetGroup_603652; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603665.validator(path, query, header, formData, body)
  let scheme = call_603665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603665.url(scheme.get, call_603665.host, call_603665.base,
                         call_603665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603665, url, valid)

proc call*(call_603666: Call_GetDeleteDBSubnetGroup_603652;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_603667 = newJObject()
  add(query_603667, "Action", newJString(Action))
  add(query_603667, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603667, "Version", newJString(Version))
  result = call_603666.call(nil, query_603667, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_603652(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_603653, base: "/",
    url: url_GetDeleteDBSubnetGroup_603654, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_603701 = ref object of OpenApiRestCall_601389
proc url_PostDeleteEventSubscription_603703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_603702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603704 = query.getOrDefault("Action")
  valid_603704 = validateParameter(valid_603704, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_603704 != nil:
    section.add "Action", valid_603704
  var valid_603705 = query.getOrDefault("Version")
  valid_603705 = validateParameter(valid_603705, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603705 != nil:
    section.add "Version", valid_603705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603706 = header.getOrDefault("X-Amz-Signature")
  valid_603706 = validateParameter(valid_603706, JString, required = false,
                                 default = nil)
  if valid_603706 != nil:
    section.add "X-Amz-Signature", valid_603706
  var valid_603707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603707 = validateParameter(valid_603707, JString, required = false,
                                 default = nil)
  if valid_603707 != nil:
    section.add "X-Amz-Content-Sha256", valid_603707
  var valid_603708 = header.getOrDefault("X-Amz-Date")
  valid_603708 = validateParameter(valid_603708, JString, required = false,
                                 default = nil)
  if valid_603708 != nil:
    section.add "X-Amz-Date", valid_603708
  var valid_603709 = header.getOrDefault("X-Amz-Credential")
  valid_603709 = validateParameter(valid_603709, JString, required = false,
                                 default = nil)
  if valid_603709 != nil:
    section.add "X-Amz-Credential", valid_603709
  var valid_603710 = header.getOrDefault("X-Amz-Security-Token")
  valid_603710 = validateParameter(valid_603710, JString, required = false,
                                 default = nil)
  if valid_603710 != nil:
    section.add "X-Amz-Security-Token", valid_603710
  var valid_603711 = header.getOrDefault("X-Amz-Algorithm")
  valid_603711 = validateParameter(valid_603711, JString, required = false,
                                 default = nil)
  if valid_603711 != nil:
    section.add "X-Amz-Algorithm", valid_603711
  var valid_603712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603712 = validateParameter(valid_603712, JString, required = false,
                                 default = nil)
  if valid_603712 != nil:
    section.add "X-Amz-SignedHeaders", valid_603712
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_603713 = formData.getOrDefault("SubscriptionName")
  valid_603713 = validateParameter(valid_603713, JString, required = true,
                                 default = nil)
  if valid_603713 != nil:
    section.add "SubscriptionName", valid_603713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603714: Call_PostDeleteEventSubscription_603701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_603714.validator(path, query, header, formData, body)
  let scheme = call_603714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603714.url(scheme.get, call_603714.host, call_603714.base,
                         call_603714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603714, url, valid)

proc call*(call_603715: Call_PostDeleteEventSubscription_603701;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603716 = newJObject()
  var formData_603717 = newJObject()
  add(formData_603717, "SubscriptionName", newJString(SubscriptionName))
  add(query_603716, "Action", newJString(Action))
  add(query_603716, "Version", newJString(Version))
  result = call_603715.call(nil, query_603716, nil, formData_603717, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_603701(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_603702, base: "/",
    url: url_PostDeleteEventSubscription_603703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_603685 = ref object of OpenApiRestCall_601389
proc url_GetDeleteEventSubscription_603687(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_603686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_603688 = query.getOrDefault("SubscriptionName")
  valid_603688 = validateParameter(valid_603688, JString, required = true,
                                 default = nil)
  if valid_603688 != nil:
    section.add "SubscriptionName", valid_603688
  var valid_603689 = query.getOrDefault("Action")
  valid_603689 = validateParameter(valid_603689, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_603689 != nil:
    section.add "Action", valid_603689
  var valid_603690 = query.getOrDefault("Version")
  valid_603690 = validateParameter(valid_603690, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603690 != nil:
    section.add "Version", valid_603690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603691 = header.getOrDefault("X-Amz-Signature")
  valid_603691 = validateParameter(valid_603691, JString, required = false,
                                 default = nil)
  if valid_603691 != nil:
    section.add "X-Amz-Signature", valid_603691
  var valid_603692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603692 = validateParameter(valid_603692, JString, required = false,
                                 default = nil)
  if valid_603692 != nil:
    section.add "X-Amz-Content-Sha256", valid_603692
  var valid_603693 = header.getOrDefault("X-Amz-Date")
  valid_603693 = validateParameter(valid_603693, JString, required = false,
                                 default = nil)
  if valid_603693 != nil:
    section.add "X-Amz-Date", valid_603693
  var valid_603694 = header.getOrDefault("X-Amz-Credential")
  valid_603694 = validateParameter(valid_603694, JString, required = false,
                                 default = nil)
  if valid_603694 != nil:
    section.add "X-Amz-Credential", valid_603694
  var valid_603695 = header.getOrDefault("X-Amz-Security-Token")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "X-Amz-Security-Token", valid_603695
  var valid_603696 = header.getOrDefault("X-Amz-Algorithm")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-Algorithm", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-SignedHeaders", valid_603697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603698: Call_GetDeleteEventSubscription_603685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_603698.validator(path, query, header, formData, body)
  let scheme = call_603698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603698.url(scheme.get, call_603698.host, call_603698.base,
                         call_603698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603698, url, valid)

proc call*(call_603699: Call_GetDeleteEventSubscription_603685;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603700 = newJObject()
  add(query_603700, "SubscriptionName", newJString(SubscriptionName))
  add(query_603700, "Action", newJString(Action))
  add(query_603700, "Version", newJString(Version))
  result = call_603699.call(nil, query_603700, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_603685(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_603686, base: "/",
    url: url_GetDeleteEventSubscription_603687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_603734 = ref object of OpenApiRestCall_601389
proc url_PostDeleteGlobalCluster_603736(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_603735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603737 = query.getOrDefault("Action")
  valid_603737 = validateParameter(valid_603737, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_603737 != nil:
    section.add "Action", valid_603737
  var valid_603738 = query.getOrDefault("Version")
  valid_603738 = validateParameter(valid_603738, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603738 != nil:
    section.add "Version", valid_603738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603739 = header.getOrDefault("X-Amz-Signature")
  valid_603739 = validateParameter(valid_603739, JString, required = false,
                                 default = nil)
  if valid_603739 != nil:
    section.add "X-Amz-Signature", valid_603739
  var valid_603740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603740 = validateParameter(valid_603740, JString, required = false,
                                 default = nil)
  if valid_603740 != nil:
    section.add "X-Amz-Content-Sha256", valid_603740
  var valid_603741 = header.getOrDefault("X-Amz-Date")
  valid_603741 = validateParameter(valid_603741, JString, required = false,
                                 default = nil)
  if valid_603741 != nil:
    section.add "X-Amz-Date", valid_603741
  var valid_603742 = header.getOrDefault("X-Amz-Credential")
  valid_603742 = validateParameter(valid_603742, JString, required = false,
                                 default = nil)
  if valid_603742 != nil:
    section.add "X-Amz-Credential", valid_603742
  var valid_603743 = header.getOrDefault("X-Amz-Security-Token")
  valid_603743 = validateParameter(valid_603743, JString, required = false,
                                 default = nil)
  if valid_603743 != nil:
    section.add "X-Amz-Security-Token", valid_603743
  var valid_603744 = header.getOrDefault("X-Amz-Algorithm")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "X-Amz-Algorithm", valid_603744
  var valid_603745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-SignedHeaders", valid_603745
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_603746 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_603746 = validateParameter(valid_603746, JString, required = true,
                                 default = nil)
  if valid_603746 != nil:
    section.add "GlobalClusterIdentifier", valid_603746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603747: Call_PostDeleteGlobalCluster_603734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603747.validator(path, query, header, formData, body)
  let scheme = call_603747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603747.url(scheme.get, call_603747.host, call_603747.base,
                         call_603747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603747, url, valid)

proc call*(call_603748: Call_PostDeleteGlobalCluster_603734;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603749 = newJObject()
  var formData_603750 = newJObject()
  add(formData_603750, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_603749, "Action", newJString(Action))
  add(query_603749, "Version", newJString(Version))
  result = call_603748.call(nil, query_603749, nil, formData_603750, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_603734(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_603735, base: "/",
    url: url_PostDeleteGlobalCluster_603736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_603718 = ref object of OpenApiRestCall_601389
proc url_GetDeleteGlobalCluster_603720(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_603719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_603721 = query.getOrDefault("GlobalClusterIdentifier")
  valid_603721 = validateParameter(valid_603721, JString, required = true,
                                 default = nil)
  if valid_603721 != nil:
    section.add "GlobalClusterIdentifier", valid_603721
  var valid_603722 = query.getOrDefault("Action")
  valid_603722 = validateParameter(valid_603722, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_603722 != nil:
    section.add "Action", valid_603722
  var valid_603723 = query.getOrDefault("Version")
  valid_603723 = validateParameter(valid_603723, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603723 != nil:
    section.add "Version", valid_603723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603724 = header.getOrDefault("X-Amz-Signature")
  valid_603724 = validateParameter(valid_603724, JString, required = false,
                                 default = nil)
  if valid_603724 != nil:
    section.add "X-Amz-Signature", valid_603724
  var valid_603725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603725 = validateParameter(valid_603725, JString, required = false,
                                 default = nil)
  if valid_603725 != nil:
    section.add "X-Amz-Content-Sha256", valid_603725
  var valid_603726 = header.getOrDefault("X-Amz-Date")
  valid_603726 = validateParameter(valid_603726, JString, required = false,
                                 default = nil)
  if valid_603726 != nil:
    section.add "X-Amz-Date", valid_603726
  var valid_603727 = header.getOrDefault("X-Amz-Credential")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "X-Amz-Credential", valid_603727
  var valid_603728 = header.getOrDefault("X-Amz-Security-Token")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Security-Token", valid_603728
  var valid_603729 = header.getOrDefault("X-Amz-Algorithm")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Algorithm", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-SignedHeaders", valid_603730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603731: Call_GetDeleteGlobalCluster_603718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603731.validator(path, query, header, formData, body)
  let scheme = call_603731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603731.url(scheme.get, call_603731.host, call_603731.base,
                         call_603731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603731, url, valid)

proc call*(call_603732: Call_GetDeleteGlobalCluster_603718;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603733 = newJObject()
  add(query_603733, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_603733, "Action", newJString(Action))
  add(query_603733, "Version", newJString(Version))
  result = call_603732.call(nil, query_603733, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_603718(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_603719, base: "/",
    url: url_GetDeleteGlobalCluster_603720, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_603767 = ref object of OpenApiRestCall_601389
proc url_PostDeleteInstallationMedia_603769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_603768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603770 = query.getOrDefault("Action")
  valid_603770 = validateParameter(valid_603770, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_603770 != nil:
    section.add "Action", valid_603770
  var valid_603771 = query.getOrDefault("Version")
  valid_603771 = validateParameter(valid_603771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603771 != nil:
    section.add "Version", valid_603771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603772 = header.getOrDefault("X-Amz-Signature")
  valid_603772 = validateParameter(valid_603772, JString, required = false,
                                 default = nil)
  if valid_603772 != nil:
    section.add "X-Amz-Signature", valid_603772
  var valid_603773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603773 = validateParameter(valid_603773, JString, required = false,
                                 default = nil)
  if valid_603773 != nil:
    section.add "X-Amz-Content-Sha256", valid_603773
  var valid_603774 = header.getOrDefault("X-Amz-Date")
  valid_603774 = validateParameter(valid_603774, JString, required = false,
                                 default = nil)
  if valid_603774 != nil:
    section.add "X-Amz-Date", valid_603774
  var valid_603775 = header.getOrDefault("X-Amz-Credential")
  valid_603775 = validateParameter(valid_603775, JString, required = false,
                                 default = nil)
  if valid_603775 != nil:
    section.add "X-Amz-Credential", valid_603775
  var valid_603776 = header.getOrDefault("X-Amz-Security-Token")
  valid_603776 = validateParameter(valid_603776, JString, required = false,
                                 default = nil)
  if valid_603776 != nil:
    section.add "X-Amz-Security-Token", valid_603776
  var valid_603777 = header.getOrDefault("X-Amz-Algorithm")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "X-Amz-Algorithm", valid_603777
  var valid_603778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603778 = validateParameter(valid_603778, JString, required = false,
                                 default = nil)
  if valid_603778 != nil:
    section.add "X-Amz-SignedHeaders", valid_603778
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_603779 = formData.getOrDefault("InstallationMediaId")
  valid_603779 = validateParameter(valid_603779, JString, required = true,
                                 default = nil)
  if valid_603779 != nil:
    section.add "InstallationMediaId", valid_603779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603780: Call_PostDeleteInstallationMedia_603767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_603780.validator(path, query, header, formData, body)
  let scheme = call_603780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603780.url(scheme.get, call_603780.host, call_603780.base,
                         call_603780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603780, url, valid)

proc call*(call_603781: Call_PostDeleteInstallationMedia_603767;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603782 = newJObject()
  var formData_603783 = newJObject()
  add(formData_603783, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_603782, "Action", newJString(Action))
  add(query_603782, "Version", newJString(Version))
  result = call_603781.call(nil, query_603782, nil, formData_603783, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_603767(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_603768, base: "/",
    url: url_PostDeleteInstallationMedia_603769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_603751 = ref object of OpenApiRestCall_601389
proc url_GetDeleteInstallationMedia_603753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_603752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_603754 = query.getOrDefault("InstallationMediaId")
  valid_603754 = validateParameter(valid_603754, JString, required = true,
                                 default = nil)
  if valid_603754 != nil:
    section.add "InstallationMediaId", valid_603754
  var valid_603755 = query.getOrDefault("Action")
  valid_603755 = validateParameter(valid_603755, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_603755 != nil:
    section.add "Action", valid_603755
  var valid_603756 = query.getOrDefault("Version")
  valid_603756 = validateParameter(valid_603756, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603756 != nil:
    section.add "Version", valid_603756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603757 = header.getOrDefault("X-Amz-Signature")
  valid_603757 = validateParameter(valid_603757, JString, required = false,
                                 default = nil)
  if valid_603757 != nil:
    section.add "X-Amz-Signature", valid_603757
  var valid_603758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "X-Amz-Content-Sha256", valid_603758
  var valid_603759 = header.getOrDefault("X-Amz-Date")
  valid_603759 = validateParameter(valid_603759, JString, required = false,
                                 default = nil)
  if valid_603759 != nil:
    section.add "X-Amz-Date", valid_603759
  var valid_603760 = header.getOrDefault("X-Amz-Credential")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Credential", valid_603760
  var valid_603761 = header.getOrDefault("X-Amz-Security-Token")
  valid_603761 = validateParameter(valid_603761, JString, required = false,
                                 default = nil)
  if valid_603761 != nil:
    section.add "X-Amz-Security-Token", valid_603761
  var valid_603762 = header.getOrDefault("X-Amz-Algorithm")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-Algorithm", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-SignedHeaders", valid_603763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603764: Call_GetDeleteInstallationMedia_603751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_603764.validator(path, query, header, formData, body)
  let scheme = call_603764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603764.url(scheme.get, call_603764.host, call_603764.base,
                         call_603764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603764, url, valid)

proc call*(call_603765: Call_GetDeleteInstallationMedia_603751;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603766 = newJObject()
  add(query_603766, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_603766, "Action", newJString(Action))
  add(query_603766, "Version", newJString(Version))
  result = call_603765.call(nil, query_603766, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_603751(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_603752, base: "/",
    url: url_GetDeleteInstallationMedia_603753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_603800 = ref object of OpenApiRestCall_601389
proc url_PostDeleteOptionGroup_603802(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_603801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603803 = query.getOrDefault("Action")
  valid_603803 = validateParameter(valid_603803, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_603803 != nil:
    section.add "Action", valid_603803
  var valid_603804 = query.getOrDefault("Version")
  valid_603804 = validateParameter(valid_603804, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603804 != nil:
    section.add "Version", valid_603804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603805 = header.getOrDefault("X-Amz-Signature")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-Signature", valid_603805
  var valid_603806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603806 = validateParameter(valid_603806, JString, required = false,
                                 default = nil)
  if valid_603806 != nil:
    section.add "X-Amz-Content-Sha256", valid_603806
  var valid_603807 = header.getOrDefault("X-Amz-Date")
  valid_603807 = validateParameter(valid_603807, JString, required = false,
                                 default = nil)
  if valid_603807 != nil:
    section.add "X-Amz-Date", valid_603807
  var valid_603808 = header.getOrDefault("X-Amz-Credential")
  valid_603808 = validateParameter(valid_603808, JString, required = false,
                                 default = nil)
  if valid_603808 != nil:
    section.add "X-Amz-Credential", valid_603808
  var valid_603809 = header.getOrDefault("X-Amz-Security-Token")
  valid_603809 = validateParameter(valid_603809, JString, required = false,
                                 default = nil)
  if valid_603809 != nil:
    section.add "X-Amz-Security-Token", valid_603809
  var valid_603810 = header.getOrDefault("X-Amz-Algorithm")
  valid_603810 = validateParameter(valid_603810, JString, required = false,
                                 default = nil)
  if valid_603810 != nil:
    section.add "X-Amz-Algorithm", valid_603810
  var valid_603811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603811 = validateParameter(valid_603811, JString, required = false,
                                 default = nil)
  if valid_603811 != nil:
    section.add "X-Amz-SignedHeaders", valid_603811
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_603812 = formData.getOrDefault("OptionGroupName")
  valid_603812 = validateParameter(valid_603812, JString, required = true,
                                 default = nil)
  if valid_603812 != nil:
    section.add "OptionGroupName", valid_603812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603813: Call_PostDeleteOptionGroup_603800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_603813.validator(path, query, header, formData, body)
  let scheme = call_603813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603813.url(scheme.get, call_603813.host, call_603813.base,
                         call_603813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603813, url, valid)

proc call*(call_603814: Call_PostDeleteOptionGroup_603800; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_603815 = newJObject()
  var formData_603816 = newJObject()
  add(query_603815, "Action", newJString(Action))
  add(formData_603816, "OptionGroupName", newJString(OptionGroupName))
  add(query_603815, "Version", newJString(Version))
  result = call_603814.call(nil, query_603815, nil, formData_603816, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_603800(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_603801, base: "/",
    url: url_PostDeleteOptionGroup_603802, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_603784 = ref object of OpenApiRestCall_601389
proc url_GetDeleteOptionGroup_603786(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_603785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603787 = query.getOrDefault("Action")
  valid_603787 = validateParameter(valid_603787, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_603787 != nil:
    section.add "Action", valid_603787
  var valid_603788 = query.getOrDefault("OptionGroupName")
  valid_603788 = validateParameter(valid_603788, JString, required = true,
                                 default = nil)
  if valid_603788 != nil:
    section.add "OptionGroupName", valid_603788
  var valid_603789 = query.getOrDefault("Version")
  valid_603789 = validateParameter(valid_603789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603789 != nil:
    section.add "Version", valid_603789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603790 = header.getOrDefault("X-Amz-Signature")
  valid_603790 = validateParameter(valid_603790, JString, required = false,
                                 default = nil)
  if valid_603790 != nil:
    section.add "X-Amz-Signature", valid_603790
  var valid_603791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603791 = validateParameter(valid_603791, JString, required = false,
                                 default = nil)
  if valid_603791 != nil:
    section.add "X-Amz-Content-Sha256", valid_603791
  var valid_603792 = header.getOrDefault("X-Amz-Date")
  valid_603792 = validateParameter(valid_603792, JString, required = false,
                                 default = nil)
  if valid_603792 != nil:
    section.add "X-Amz-Date", valid_603792
  var valid_603793 = header.getOrDefault("X-Amz-Credential")
  valid_603793 = validateParameter(valid_603793, JString, required = false,
                                 default = nil)
  if valid_603793 != nil:
    section.add "X-Amz-Credential", valid_603793
  var valid_603794 = header.getOrDefault("X-Amz-Security-Token")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-Security-Token", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-Algorithm")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-Algorithm", valid_603795
  var valid_603796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603796 = validateParameter(valid_603796, JString, required = false,
                                 default = nil)
  if valid_603796 != nil:
    section.add "X-Amz-SignedHeaders", valid_603796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603797: Call_GetDeleteOptionGroup_603784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_603797.validator(path, query, header, formData, body)
  let scheme = call_603797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603797.url(scheme.get, call_603797.host, call_603797.base,
                         call_603797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603797, url, valid)

proc call*(call_603798: Call_GetDeleteOptionGroup_603784; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_603799 = newJObject()
  add(query_603799, "Action", newJString(Action))
  add(query_603799, "OptionGroupName", newJString(OptionGroupName))
  add(query_603799, "Version", newJString(Version))
  result = call_603798.call(nil, query_603799, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_603784(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_603785, base: "/",
    url: url_GetDeleteOptionGroup_603786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_603836 = ref object of OpenApiRestCall_601389
proc url_PostDeregisterDBProxyTargets_603838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_603837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603839 = query.getOrDefault("Action")
  valid_603839 = validateParameter(valid_603839, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_603839 != nil:
    section.add "Action", valid_603839
  var valid_603840 = query.getOrDefault("Version")
  valid_603840 = validateParameter(valid_603840, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603840 != nil:
    section.add "Version", valid_603840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603841 = header.getOrDefault("X-Amz-Signature")
  valid_603841 = validateParameter(valid_603841, JString, required = false,
                                 default = nil)
  if valid_603841 != nil:
    section.add "X-Amz-Signature", valid_603841
  var valid_603842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603842 = validateParameter(valid_603842, JString, required = false,
                                 default = nil)
  if valid_603842 != nil:
    section.add "X-Amz-Content-Sha256", valid_603842
  var valid_603843 = header.getOrDefault("X-Amz-Date")
  valid_603843 = validateParameter(valid_603843, JString, required = false,
                                 default = nil)
  if valid_603843 != nil:
    section.add "X-Amz-Date", valid_603843
  var valid_603844 = header.getOrDefault("X-Amz-Credential")
  valid_603844 = validateParameter(valid_603844, JString, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "X-Amz-Credential", valid_603844
  var valid_603845 = header.getOrDefault("X-Amz-Security-Token")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-Security-Token", valid_603845
  var valid_603846 = header.getOrDefault("X-Amz-Algorithm")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "X-Amz-Algorithm", valid_603846
  var valid_603847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603847 = validateParameter(valid_603847, JString, required = false,
                                 default = nil)
  if valid_603847 != nil:
    section.add "X-Amz-SignedHeaders", valid_603847
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_603848 = formData.getOrDefault("TargetGroupName")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "TargetGroupName", valid_603848
  var valid_603849 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_603849 = validateParameter(valid_603849, JArray, required = false,
                                 default = nil)
  if valid_603849 != nil:
    section.add "DBInstanceIdentifiers", valid_603849
  var valid_603850 = formData.getOrDefault("DBClusterIdentifiers")
  valid_603850 = validateParameter(valid_603850, JArray, required = false,
                                 default = nil)
  if valid_603850 != nil:
    section.add "DBClusterIdentifiers", valid_603850
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_603851 = formData.getOrDefault("DBProxyName")
  valid_603851 = validateParameter(valid_603851, JString, required = true,
                                 default = nil)
  if valid_603851 != nil:
    section.add "DBProxyName", valid_603851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603852: Call_PostDeregisterDBProxyTargets_603836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_603852.validator(path, query, header, formData, body)
  let scheme = call_603852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603852.url(scheme.get, call_603852.host, call_603852.base,
                         call_603852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603852, url, valid)

proc call*(call_603853: Call_PostDeregisterDBProxyTargets_603836;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603854 = newJObject()
  var formData_603855 = newJObject()
  add(formData_603855, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_603855.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_603855.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_603855, "DBProxyName", newJString(DBProxyName))
  add(query_603854, "Action", newJString(Action))
  add(query_603854, "Version", newJString(Version))
  result = call_603853.call(nil, query_603854, nil, formData_603855, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_603836(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_603837, base: "/",
    url: url_PostDeregisterDBProxyTargets_603838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_603817 = ref object of OpenApiRestCall_601389
proc url_GetDeregisterDBProxyTargets_603819(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_603818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_603820 = query.getOrDefault("DBClusterIdentifiers")
  valid_603820 = validateParameter(valid_603820, JArray, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "DBClusterIdentifiers", valid_603820
  var valid_603821 = query.getOrDefault("DBInstanceIdentifiers")
  valid_603821 = validateParameter(valid_603821, JArray, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "DBInstanceIdentifiers", valid_603821
  var valid_603822 = query.getOrDefault("TargetGroupName")
  valid_603822 = validateParameter(valid_603822, JString, required = false,
                                 default = nil)
  if valid_603822 != nil:
    section.add "TargetGroupName", valid_603822
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603823 = query.getOrDefault("Action")
  valid_603823 = validateParameter(valid_603823, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_603823 != nil:
    section.add "Action", valid_603823
  var valid_603824 = query.getOrDefault("Version")
  valid_603824 = validateParameter(valid_603824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603824 != nil:
    section.add "Version", valid_603824
  var valid_603825 = query.getOrDefault("DBProxyName")
  valid_603825 = validateParameter(valid_603825, JString, required = true,
                                 default = nil)
  if valid_603825 != nil:
    section.add "DBProxyName", valid_603825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603826 = header.getOrDefault("X-Amz-Signature")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-Signature", valid_603826
  var valid_603827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "X-Amz-Content-Sha256", valid_603827
  var valid_603828 = header.getOrDefault("X-Amz-Date")
  valid_603828 = validateParameter(valid_603828, JString, required = false,
                                 default = nil)
  if valid_603828 != nil:
    section.add "X-Amz-Date", valid_603828
  var valid_603829 = header.getOrDefault("X-Amz-Credential")
  valid_603829 = validateParameter(valid_603829, JString, required = false,
                                 default = nil)
  if valid_603829 != nil:
    section.add "X-Amz-Credential", valid_603829
  var valid_603830 = header.getOrDefault("X-Amz-Security-Token")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-Security-Token", valid_603830
  var valid_603831 = header.getOrDefault("X-Amz-Algorithm")
  valid_603831 = validateParameter(valid_603831, JString, required = false,
                                 default = nil)
  if valid_603831 != nil:
    section.add "X-Amz-Algorithm", valid_603831
  var valid_603832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603832 = validateParameter(valid_603832, JString, required = false,
                                 default = nil)
  if valid_603832 != nil:
    section.add "X-Amz-SignedHeaders", valid_603832
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603833: Call_GetDeregisterDBProxyTargets_603817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_603833.validator(path, query, header, formData, body)
  let scheme = call_603833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603833.url(scheme.get, call_603833.host, call_603833.base,
                         call_603833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603833, url, valid)

proc call*(call_603834: Call_GetDeregisterDBProxyTargets_603817;
          DBProxyName: string; DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_603835 = newJObject()
  if DBClusterIdentifiers != nil:
    query_603835.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_603835.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_603835, "TargetGroupName", newJString(TargetGroupName))
  add(query_603835, "Action", newJString(Action))
  add(query_603835, "Version", newJString(Version))
  add(query_603835, "DBProxyName", newJString(DBProxyName))
  result = call_603834.call(nil, query_603835, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_603817(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_603818, base: "/",
    url: url_GetDeregisterDBProxyTargets_603819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_603871 = ref object of OpenApiRestCall_601389
proc url_PostDescribeAccountAttributes_603873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_603872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603874 = query.getOrDefault("Action")
  valid_603874 = validateParameter(valid_603874, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_603874 != nil:
    section.add "Action", valid_603874
  var valid_603875 = query.getOrDefault("Version")
  valid_603875 = validateParameter(valid_603875, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603875 != nil:
    section.add "Version", valid_603875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603876 = header.getOrDefault("X-Amz-Signature")
  valid_603876 = validateParameter(valid_603876, JString, required = false,
                                 default = nil)
  if valid_603876 != nil:
    section.add "X-Amz-Signature", valid_603876
  var valid_603877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = nil)
  if valid_603877 != nil:
    section.add "X-Amz-Content-Sha256", valid_603877
  var valid_603878 = header.getOrDefault("X-Amz-Date")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-Date", valid_603878
  var valid_603879 = header.getOrDefault("X-Amz-Credential")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "X-Amz-Credential", valid_603879
  var valid_603880 = header.getOrDefault("X-Amz-Security-Token")
  valid_603880 = validateParameter(valid_603880, JString, required = false,
                                 default = nil)
  if valid_603880 != nil:
    section.add "X-Amz-Security-Token", valid_603880
  var valid_603881 = header.getOrDefault("X-Amz-Algorithm")
  valid_603881 = validateParameter(valid_603881, JString, required = false,
                                 default = nil)
  if valid_603881 != nil:
    section.add "X-Amz-Algorithm", valid_603881
  var valid_603882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603882 = validateParameter(valid_603882, JString, required = false,
                                 default = nil)
  if valid_603882 != nil:
    section.add "X-Amz-SignedHeaders", valid_603882
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603883: Call_PostDescribeAccountAttributes_603871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_603883.validator(path, query, header, formData, body)
  let scheme = call_603883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603883.url(scheme.get, call_603883.host, call_603883.base,
                         call_603883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603883, url, valid)

proc call*(call_603884: Call_PostDescribeAccountAttributes_603871;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603885 = newJObject()
  add(query_603885, "Action", newJString(Action))
  add(query_603885, "Version", newJString(Version))
  result = call_603884.call(nil, query_603885, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_603871(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_603872, base: "/",
    url: url_PostDescribeAccountAttributes_603873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_603856 = ref object of OpenApiRestCall_601389
proc url_GetDescribeAccountAttributes_603858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_603857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603859 = query.getOrDefault("Action")
  valid_603859 = validateParameter(valid_603859, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_603859 != nil:
    section.add "Action", valid_603859
  var valid_603860 = query.getOrDefault("Version")
  valid_603860 = validateParameter(valid_603860, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603860 != nil:
    section.add "Version", valid_603860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603861 = header.getOrDefault("X-Amz-Signature")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Signature", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Content-Sha256", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-Date")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-Date", valid_603863
  var valid_603864 = header.getOrDefault("X-Amz-Credential")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "X-Amz-Credential", valid_603864
  var valid_603865 = header.getOrDefault("X-Amz-Security-Token")
  valid_603865 = validateParameter(valid_603865, JString, required = false,
                                 default = nil)
  if valid_603865 != nil:
    section.add "X-Amz-Security-Token", valid_603865
  var valid_603866 = header.getOrDefault("X-Amz-Algorithm")
  valid_603866 = validateParameter(valid_603866, JString, required = false,
                                 default = nil)
  if valid_603866 != nil:
    section.add "X-Amz-Algorithm", valid_603866
  var valid_603867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603867 = validateParameter(valid_603867, JString, required = false,
                                 default = nil)
  if valid_603867 != nil:
    section.add "X-Amz-SignedHeaders", valid_603867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603868: Call_GetDescribeAccountAttributes_603856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_603868.validator(path, query, header, formData, body)
  let scheme = call_603868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603868.url(scheme.get, call_603868.host, call_603868.base,
                         call_603868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603868, url, valid)

proc call*(call_603869: Call_GetDescribeAccountAttributes_603856;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603870 = newJObject()
  add(query_603870, "Action", newJString(Action))
  add(query_603870, "Version", newJString(Version))
  result = call_603869.call(nil, query_603870, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_603856(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_603857, base: "/",
    url: url_GetDescribeAccountAttributes_603858,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_603905 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCertificates_603907(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_603906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603908 = query.getOrDefault("Action")
  valid_603908 = validateParameter(valid_603908, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_603908 != nil:
    section.add "Action", valid_603908
  var valid_603909 = query.getOrDefault("Version")
  valid_603909 = validateParameter(valid_603909, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603909 != nil:
    section.add "Version", valid_603909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603910 = header.getOrDefault("X-Amz-Signature")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-Signature", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Content-Sha256", valid_603911
  var valid_603912 = header.getOrDefault("X-Amz-Date")
  valid_603912 = validateParameter(valid_603912, JString, required = false,
                                 default = nil)
  if valid_603912 != nil:
    section.add "X-Amz-Date", valid_603912
  var valid_603913 = header.getOrDefault("X-Amz-Credential")
  valid_603913 = validateParameter(valid_603913, JString, required = false,
                                 default = nil)
  if valid_603913 != nil:
    section.add "X-Amz-Credential", valid_603913
  var valid_603914 = header.getOrDefault("X-Amz-Security-Token")
  valid_603914 = validateParameter(valid_603914, JString, required = false,
                                 default = nil)
  if valid_603914 != nil:
    section.add "X-Amz-Security-Token", valid_603914
  var valid_603915 = header.getOrDefault("X-Amz-Algorithm")
  valid_603915 = validateParameter(valid_603915, JString, required = false,
                                 default = nil)
  if valid_603915 != nil:
    section.add "X-Amz-Algorithm", valid_603915
  var valid_603916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603916 = validateParameter(valid_603916, JString, required = false,
                                 default = nil)
  if valid_603916 != nil:
    section.add "X-Amz-SignedHeaders", valid_603916
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_603917 = formData.getOrDefault("MaxRecords")
  valid_603917 = validateParameter(valid_603917, JInt, required = false, default = nil)
  if valid_603917 != nil:
    section.add "MaxRecords", valid_603917
  var valid_603918 = formData.getOrDefault("Marker")
  valid_603918 = validateParameter(valid_603918, JString, required = false,
                                 default = nil)
  if valid_603918 != nil:
    section.add "Marker", valid_603918
  var valid_603919 = formData.getOrDefault("CertificateIdentifier")
  valid_603919 = validateParameter(valid_603919, JString, required = false,
                                 default = nil)
  if valid_603919 != nil:
    section.add "CertificateIdentifier", valid_603919
  var valid_603920 = formData.getOrDefault("Filters")
  valid_603920 = validateParameter(valid_603920, JArray, required = false,
                                 default = nil)
  if valid_603920 != nil:
    section.add "Filters", valid_603920
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603921: Call_PostDescribeCertificates_603905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_603921.validator(path, query, header, formData, body)
  let scheme = call_603921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603921.url(scheme.get, call_603921.host, call_603921.base,
                         call_603921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603921, url, valid)

proc call*(call_603922: Call_PostDescribeCertificates_603905; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_603923 = newJObject()
  var formData_603924 = newJObject()
  add(formData_603924, "MaxRecords", newJInt(MaxRecords))
  add(formData_603924, "Marker", newJString(Marker))
  add(formData_603924, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_603923, "Action", newJString(Action))
  if Filters != nil:
    formData_603924.add "Filters", Filters
  add(query_603923, "Version", newJString(Version))
  result = call_603922.call(nil, query_603923, nil, formData_603924, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_603905(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_603906, base: "/",
    url: url_PostDescribeCertificates_603907, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_603886 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCertificates_603888(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_603887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_603889 = query.getOrDefault("Marker")
  valid_603889 = validateParameter(valid_603889, JString, required = false,
                                 default = nil)
  if valid_603889 != nil:
    section.add "Marker", valid_603889
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603890 = query.getOrDefault("Action")
  valid_603890 = validateParameter(valid_603890, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_603890 != nil:
    section.add "Action", valid_603890
  var valid_603891 = query.getOrDefault("Version")
  valid_603891 = validateParameter(valid_603891, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603891 != nil:
    section.add "Version", valid_603891
  var valid_603892 = query.getOrDefault("CertificateIdentifier")
  valid_603892 = validateParameter(valid_603892, JString, required = false,
                                 default = nil)
  if valid_603892 != nil:
    section.add "CertificateIdentifier", valid_603892
  var valid_603893 = query.getOrDefault("Filters")
  valid_603893 = validateParameter(valid_603893, JArray, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "Filters", valid_603893
  var valid_603894 = query.getOrDefault("MaxRecords")
  valid_603894 = validateParameter(valid_603894, JInt, required = false, default = nil)
  if valid_603894 != nil:
    section.add "MaxRecords", valid_603894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603895 = header.getOrDefault("X-Amz-Signature")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-Signature", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Content-Sha256", valid_603896
  var valid_603897 = header.getOrDefault("X-Amz-Date")
  valid_603897 = validateParameter(valid_603897, JString, required = false,
                                 default = nil)
  if valid_603897 != nil:
    section.add "X-Amz-Date", valid_603897
  var valid_603898 = header.getOrDefault("X-Amz-Credential")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-Credential", valid_603898
  var valid_603899 = header.getOrDefault("X-Amz-Security-Token")
  valid_603899 = validateParameter(valid_603899, JString, required = false,
                                 default = nil)
  if valid_603899 != nil:
    section.add "X-Amz-Security-Token", valid_603899
  var valid_603900 = header.getOrDefault("X-Amz-Algorithm")
  valid_603900 = validateParameter(valid_603900, JString, required = false,
                                 default = nil)
  if valid_603900 != nil:
    section.add "X-Amz-Algorithm", valid_603900
  var valid_603901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603901 = validateParameter(valid_603901, JString, required = false,
                                 default = nil)
  if valid_603901 != nil:
    section.add "X-Amz-SignedHeaders", valid_603901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603902: Call_GetDescribeCertificates_603886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_603902.validator(path, query, header, formData, body)
  let scheme = call_603902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603902.url(scheme.get, call_603902.host, call_603902.base,
                         call_603902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603902, url, valid)

proc call*(call_603903: Call_GetDescribeCertificates_603886; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_603904 = newJObject()
  add(query_603904, "Marker", newJString(Marker))
  add(query_603904, "Action", newJString(Action))
  add(query_603904, "Version", newJString(Version))
  add(query_603904, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_603904.add "Filters", Filters
  add(query_603904, "MaxRecords", newJInt(MaxRecords))
  result = call_603903.call(nil, query_603904, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_603886(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_603887, base: "/",
    url: url_GetDescribeCertificates_603888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_603944 = ref object of OpenApiRestCall_601389
proc url_PostDescribeCustomAvailabilityZones_603946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_603945(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603947 = query.getOrDefault("Action")
  valid_603947 = validateParameter(valid_603947, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_603947 != nil:
    section.add "Action", valid_603947
  var valid_603948 = query.getOrDefault("Version")
  valid_603948 = validateParameter(valid_603948, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603948 != nil:
    section.add "Version", valid_603948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603949 = header.getOrDefault("X-Amz-Signature")
  valid_603949 = validateParameter(valid_603949, JString, required = false,
                                 default = nil)
  if valid_603949 != nil:
    section.add "X-Amz-Signature", valid_603949
  var valid_603950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603950 = validateParameter(valid_603950, JString, required = false,
                                 default = nil)
  if valid_603950 != nil:
    section.add "X-Amz-Content-Sha256", valid_603950
  var valid_603951 = header.getOrDefault("X-Amz-Date")
  valid_603951 = validateParameter(valid_603951, JString, required = false,
                                 default = nil)
  if valid_603951 != nil:
    section.add "X-Amz-Date", valid_603951
  var valid_603952 = header.getOrDefault("X-Amz-Credential")
  valid_603952 = validateParameter(valid_603952, JString, required = false,
                                 default = nil)
  if valid_603952 != nil:
    section.add "X-Amz-Credential", valid_603952
  var valid_603953 = header.getOrDefault("X-Amz-Security-Token")
  valid_603953 = validateParameter(valid_603953, JString, required = false,
                                 default = nil)
  if valid_603953 != nil:
    section.add "X-Amz-Security-Token", valid_603953
  var valid_603954 = header.getOrDefault("X-Amz-Algorithm")
  valid_603954 = validateParameter(valid_603954, JString, required = false,
                                 default = nil)
  if valid_603954 != nil:
    section.add "X-Amz-Algorithm", valid_603954
  var valid_603955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603955 = validateParameter(valid_603955, JString, required = false,
                                 default = nil)
  if valid_603955 != nil:
    section.add "X-Amz-SignedHeaders", valid_603955
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_603956 = formData.getOrDefault("MaxRecords")
  valid_603956 = validateParameter(valid_603956, JInt, required = false, default = nil)
  if valid_603956 != nil:
    section.add "MaxRecords", valid_603956
  var valid_603957 = formData.getOrDefault("Marker")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "Marker", valid_603957
  var valid_603958 = formData.getOrDefault("Filters")
  valid_603958 = validateParameter(valid_603958, JArray, required = false,
                                 default = nil)
  if valid_603958 != nil:
    section.add "Filters", valid_603958
  var valid_603959 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_603959 = validateParameter(valid_603959, JString, required = false,
                                 default = nil)
  if valid_603959 != nil:
    section.add "CustomAvailabilityZoneId", valid_603959
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603960: Call_PostDescribeCustomAvailabilityZones_603944;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_603960.validator(path, query, header, formData, body)
  let scheme = call_603960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603960.url(scheme.get, call_603960.host, call_603960.base,
                         call_603960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603960, url, valid)

proc call*(call_603961: Call_PostDescribeCustomAvailabilityZones_603944;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_603962 = newJObject()
  var formData_603963 = newJObject()
  add(formData_603963, "MaxRecords", newJInt(MaxRecords))
  add(formData_603963, "Marker", newJString(Marker))
  add(query_603962, "Action", newJString(Action))
  if Filters != nil:
    formData_603963.add "Filters", Filters
  add(formData_603963, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_603962, "Version", newJString(Version))
  result = call_603961.call(nil, query_603962, nil, formData_603963, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_603944(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_603945, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_603946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_603925 = ref object of OpenApiRestCall_601389
proc url_GetDescribeCustomAvailabilityZones_603927(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_603926(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_603928 = query.getOrDefault("Marker")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "Marker", valid_603928
  var valid_603929 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "CustomAvailabilityZoneId", valid_603929
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603930 = query.getOrDefault("Action")
  valid_603930 = validateParameter(valid_603930, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_603930 != nil:
    section.add "Action", valid_603930
  var valid_603931 = query.getOrDefault("Version")
  valid_603931 = validateParameter(valid_603931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603931 != nil:
    section.add "Version", valid_603931
  var valid_603932 = query.getOrDefault("Filters")
  valid_603932 = validateParameter(valid_603932, JArray, required = false,
                                 default = nil)
  if valid_603932 != nil:
    section.add "Filters", valid_603932
  var valid_603933 = query.getOrDefault("MaxRecords")
  valid_603933 = validateParameter(valid_603933, JInt, required = false, default = nil)
  if valid_603933 != nil:
    section.add "MaxRecords", valid_603933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603934 = header.getOrDefault("X-Amz-Signature")
  valid_603934 = validateParameter(valid_603934, JString, required = false,
                                 default = nil)
  if valid_603934 != nil:
    section.add "X-Amz-Signature", valid_603934
  var valid_603935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603935 = validateParameter(valid_603935, JString, required = false,
                                 default = nil)
  if valid_603935 != nil:
    section.add "X-Amz-Content-Sha256", valid_603935
  var valid_603936 = header.getOrDefault("X-Amz-Date")
  valid_603936 = validateParameter(valid_603936, JString, required = false,
                                 default = nil)
  if valid_603936 != nil:
    section.add "X-Amz-Date", valid_603936
  var valid_603937 = header.getOrDefault("X-Amz-Credential")
  valid_603937 = validateParameter(valid_603937, JString, required = false,
                                 default = nil)
  if valid_603937 != nil:
    section.add "X-Amz-Credential", valid_603937
  var valid_603938 = header.getOrDefault("X-Amz-Security-Token")
  valid_603938 = validateParameter(valid_603938, JString, required = false,
                                 default = nil)
  if valid_603938 != nil:
    section.add "X-Amz-Security-Token", valid_603938
  var valid_603939 = header.getOrDefault("X-Amz-Algorithm")
  valid_603939 = validateParameter(valid_603939, JString, required = false,
                                 default = nil)
  if valid_603939 != nil:
    section.add "X-Amz-Algorithm", valid_603939
  var valid_603940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603940 = validateParameter(valid_603940, JString, required = false,
                                 default = nil)
  if valid_603940 != nil:
    section.add "X-Amz-SignedHeaders", valid_603940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603941: Call_GetDescribeCustomAvailabilityZones_603925;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_603941.validator(path, query, header, formData, body)
  let scheme = call_603941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603941.url(scheme.get, call_603941.host, call_603941.base,
                         call_603941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603941, url, valid)

proc call*(call_603942: Call_GetDescribeCustomAvailabilityZones_603925;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_603943 = newJObject()
  add(query_603943, "Marker", newJString(Marker))
  add(query_603943, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_603943, "Action", newJString(Action))
  add(query_603943, "Version", newJString(Version))
  if Filters != nil:
    query_603943.add "Filters", Filters
  add(query_603943, "MaxRecords", newJInt(MaxRecords))
  result = call_603942.call(nil, query_603943, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_603925(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_603926, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_603927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_603984 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterBacktracks_603986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_603985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603987 = query.getOrDefault("Action")
  valid_603987 = validateParameter(valid_603987, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_603987 != nil:
    section.add "Action", valid_603987
  var valid_603988 = query.getOrDefault("Version")
  valid_603988 = validateParameter(valid_603988, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603988 != nil:
    section.add "Version", valid_603988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603989 = header.getOrDefault("X-Amz-Signature")
  valid_603989 = validateParameter(valid_603989, JString, required = false,
                                 default = nil)
  if valid_603989 != nil:
    section.add "X-Amz-Signature", valid_603989
  var valid_603990 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603990 = validateParameter(valid_603990, JString, required = false,
                                 default = nil)
  if valid_603990 != nil:
    section.add "X-Amz-Content-Sha256", valid_603990
  var valid_603991 = header.getOrDefault("X-Amz-Date")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "X-Amz-Date", valid_603991
  var valid_603992 = header.getOrDefault("X-Amz-Credential")
  valid_603992 = validateParameter(valid_603992, JString, required = false,
                                 default = nil)
  if valid_603992 != nil:
    section.add "X-Amz-Credential", valid_603992
  var valid_603993 = header.getOrDefault("X-Amz-Security-Token")
  valid_603993 = validateParameter(valid_603993, JString, required = false,
                                 default = nil)
  if valid_603993 != nil:
    section.add "X-Amz-Security-Token", valid_603993
  var valid_603994 = header.getOrDefault("X-Amz-Algorithm")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "X-Amz-Algorithm", valid_603994
  var valid_603995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603995 = validateParameter(valid_603995, JString, required = false,
                                 default = nil)
  if valid_603995 != nil:
    section.add "X-Amz-SignedHeaders", valid_603995
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_603996 = formData.getOrDefault("MaxRecords")
  valid_603996 = validateParameter(valid_603996, JInt, required = false, default = nil)
  if valid_603996 != nil:
    section.add "MaxRecords", valid_603996
  var valid_603997 = formData.getOrDefault("Marker")
  valid_603997 = validateParameter(valid_603997, JString, required = false,
                                 default = nil)
  if valid_603997 != nil:
    section.add "Marker", valid_603997
  var valid_603998 = formData.getOrDefault("BacktrackIdentifier")
  valid_603998 = validateParameter(valid_603998, JString, required = false,
                                 default = nil)
  if valid_603998 != nil:
    section.add "BacktrackIdentifier", valid_603998
  var valid_603999 = formData.getOrDefault("Filters")
  valid_603999 = validateParameter(valid_603999, JArray, required = false,
                                 default = nil)
  if valid_603999 != nil:
    section.add "Filters", valid_603999
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_604000 = formData.getOrDefault("DBClusterIdentifier")
  valid_604000 = validateParameter(valid_604000, JString, required = true,
                                 default = nil)
  if valid_604000 != nil:
    section.add "DBClusterIdentifier", valid_604000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604001: Call_PostDescribeDBClusterBacktracks_603984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604001.validator(path, query, header, formData, body)
  let scheme = call_604001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604001.url(scheme.get, call_604001.host, call_604001.base,
                         call_604001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604001, url, valid)

proc call*(call_604002: Call_PostDescribeDBClusterBacktracks_603984;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_604003 = newJObject()
  var formData_604004 = newJObject()
  add(formData_604004, "MaxRecords", newJInt(MaxRecords))
  add(formData_604004, "Marker", newJString(Marker))
  add(query_604003, "Action", newJString(Action))
  add(formData_604004, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_604004.add "Filters", Filters
  add(query_604003, "Version", newJString(Version))
  add(formData_604004, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_604002.call(nil, query_604003, nil, formData_604004, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_603984(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_603985, base: "/",
    url: url_PostDescribeDBClusterBacktracks_603986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_603964 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterBacktracks_603966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_603965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_603967 = query.getOrDefault("Marker")
  valid_603967 = validateParameter(valid_603967, JString, required = false,
                                 default = nil)
  if valid_603967 != nil:
    section.add "Marker", valid_603967
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603968 = query.getOrDefault("DBClusterIdentifier")
  valid_603968 = validateParameter(valid_603968, JString, required = true,
                                 default = nil)
  if valid_603968 != nil:
    section.add "DBClusterIdentifier", valid_603968
  var valid_603969 = query.getOrDefault("BacktrackIdentifier")
  valid_603969 = validateParameter(valid_603969, JString, required = false,
                                 default = nil)
  if valid_603969 != nil:
    section.add "BacktrackIdentifier", valid_603969
  var valid_603970 = query.getOrDefault("Action")
  valid_603970 = validateParameter(valid_603970, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_603970 != nil:
    section.add "Action", valid_603970
  var valid_603971 = query.getOrDefault("Version")
  valid_603971 = validateParameter(valid_603971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603971 != nil:
    section.add "Version", valid_603971
  var valid_603972 = query.getOrDefault("Filters")
  valid_603972 = validateParameter(valid_603972, JArray, required = false,
                                 default = nil)
  if valid_603972 != nil:
    section.add "Filters", valid_603972
  var valid_603973 = query.getOrDefault("MaxRecords")
  valid_603973 = validateParameter(valid_603973, JInt, required = false, default = nil)
  if valid_603973 != nil:
    section.add "MaxRecords", valid_603973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_603974 = header.getOrDefault("X-Amz-Signature")
  valid_603974 = validateParameter(valid_603974, JString, required = false,
                                 default = nil)
  if valid_603974 != nil:
    section.add "X-Amz-Signature", valid_603974
  var valid_603975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-Content-Sha256", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Date")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Date", valid_603976
  var valid_603977 = header.getOrDefault("X-Amz-Credential")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Credential", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Security-Token")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Security-Token", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-Algorithm")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-Algorithm", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-SignedHeaders", valid_603980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603981: Call_GetDescribeDBClusterBacktracks_603964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_603981.validator(path, query, header, formData, body)
  let scheme = call_603981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603981.url(scheme.get, call_603981.host, call_603981.base,
                         call_603981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_603981, url, valid)

proc call*(call_603982: Call_GetDescribeDBClusterBacktracks_603964;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_603983 = newJObject()
  add(query_603983, "Marker", newJString(Marker))
  add(query_603983, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603983, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_603983, "Action", newJString(Action))
  add(query_603983, "Version", newJString(Version))
  if Filters != nil:
    query_603983.add "Filters", Filters
  add(query_603983, "MaxRecords", newJInt(MaxRecords))
  result = call_603982.call(nil, query_603983, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_603964(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_603965, base: "/",
    url: url_GetDescribeDBClusterBacktracks_603966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_604025 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterEndpoints_604027(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_604026(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604028 = query.getOrDefault("Action")
  valid_604028 = validateParameter(valid_604028, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_604028 != nil:
    section.add "Action", valid_604028
  var valid_604029 = query.getOrDefault("Version")
  valid_604029 = validateParameter(valid_604029, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604029 != nil:
    section.add "Version", valid_604029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604030 = header.getOrDefault("X-Amz-Signature")
  valid_604030 = validateParameter(valid_604030, JString, required = false,
                                 default = nil)
  if valid_604030 != nil:
    section.add "X-Amz-Signature", valid_604030
  var valid_604031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604031 = validateParameter(valid_604031, JString, required = false,
                                 default = nil)
  if valid_604031 != nil:
    section.add "X-Amz-Content-Sha256", valid_604031
  var valid_604032 = header.getOrDefault("X-Amz-Date")
  valid_604032 = validateParameter(valid_604032, JString, required = false,
                                 default = nil)
  if valid_604032 != nil:
    section.add "X-Amz-Date", valid_604032
  var valid_604033 = header.getOrDefault("X-Amz-Credential")
  valid_604033 = validateParameter(valid_604033, JString, required = false,
                                 default = nil)
  if valid_604033 != nil:
    section.add "X-Amz-Credential", valid_604033
  var valid_604034 = header.getOrDefault("X-Amz-Security-Token")
  valid_604034 = validateParameter(valid_604034, JString, required = false,
                                 default = nil)
  if valid_604034 != nil:
    section.add "X-Amz-Security-Token", valid_604034
  var valid_604035 = header.getOrDefault("X-Amz-Algorithm")
  valid_604035 = validateParameter(valid_604035, JString, required = false,
                                 default = nil)
  if valid_604035 != nil:
    section.add "X-Amz-Algorithm", valid_604035
  var valid_604036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604036 = validateParameter(valid_604036, JString, required = false,
                                 default = nil)
  if valid_604036 != nil:
    section.add "X-Amz-SignedHeaders", valid_604036
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_604037 = formData.getOrDefault("MaxRecords")
  valid_604037 = validateParameter(valid_604037, JInt, required = false, default = nil)
  if valid_604037 != nil:
    section.add "MaxRecords", valid_604037
  var valid_604038 = formData.getOrDefault("Marker")
  valid_604038 = validateParameter(valid_604038, JString, required = false,
                                 default = nil)
  if valid_604038 != nil:
    section.add "Marker", valid_604038
  var valid_604039 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_604039 = validateParameter(valid_604039, JString, required = false,
                                 default = nil)
  if valid_604039 != nil:
    section.add "DBClusterEndpointIdentifier", valid_604039
  var valid_604040 = formData.getOrDefault("Filters")
  valid_604040 = validateParameter(valid_604040, JArray, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "Filters", valid_604040
  var valid_604041 = formData.getOrDefault("DBClusterIdentifier")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "DBClusterIdentifier", valid_604041
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604042: Call_PostDescribeDBClusterEndpoints_604025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604042.validator(path, query, header, formData, body)
  let scheme = call_604042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604042.url(scheme.get, call_604042.host, call_604042.base,
                         call_604042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604042, url, valid)

proc call*(call_604043: Call_PostDescribeDBClusterEndpoints_604025;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_604044 = newJObject()
  var formData_604045 = newJObject()
  add(formData_604045, "MaxRecords", newJInt(MaxRecords))
  add(formData_604045, "Marker", newJString(Marker))
  add(formData_604045, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_604044, "Action", newJString(Action))
  if Filters != nil:
    formData_604045.add "Filters", Filters
  add(query_604044, "Version", newJString(Version))
  add(formData_604045, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_604043.call(nil, query_604044, nil, formData_604045, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_604025(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_604026, base: "/",
    url: url_PostDescribeDBClusterEndpoints_604027,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_604005 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterEndpoints_604007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_604006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604008 = query.getOrDefault("Marker")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "Marker", valid_604008
  var valid_604009 = query.getOrDefault("DBClusterIdentifier")
  valid_604009 = validateParameter(valid_604009, JString, required = false,
                                 default = nil)
  if valid_604009 != nil:
    section.add "DBClusterIdentifier", valid_604009
  var valid_604010 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "DBClusterEndpointIdentifier", valid_604010
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604011 = query.getOrDefault("Action")
  valid_604011 = validateParameter(valid_604011, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_604011 != nil:
    section.add "Action", valid_604011
  var valid_604012 = query.getOrDefault("Version")
  valid_604012 = validateParameter(valid_604012, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604012 != nil:
    section.add "Version", valid_604012
  var valid_604013 = query.getOrDefault("Filters")
  valid_604013 = validateParameter(valid_604013, JArray, required = false,
                                 default = nil)
  if valid_604013 != nil:
    section.add "Filters", valid_604013
  var valid_604014 = query.getOrDefault("MaxRecords")
  valid_604014 = validateParameter(valid_604014, JInt, required = false, default = nil)
  if valid_604014 != nil:
    section.add "MaxRecords", valid_604014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604015 = header.getOrDefault("X-Amz-Signature")
  valid_604015 = validateParameter(valid_604015, JString, required = false,
                                 default = nil)
  if valid_604015 != nil:
    section.add "X-Amz-Signature", valid_604015
  var valid_604016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604016 = validateParameter(valid_604016, JString, required = false,
                                 default = nil)
  if valid_604016 != nil:
    section.add "X-Amz-Content-Sha256", valid_604016
  var valid_604017 = header.getOrDefault("X-Amz-Date")
  valid_604017 = validateParameter(valid_604017, JString, required = false,
                                 default = nil)
  if valid_604017 != nil:
    section.add "X-Amz-Date", valid_604017
  var valid_604018 = header.getOrDefault("X-Amz-Credential")
  valid_604018 = validateParameter(valid_604018, JString, required = false,
                                 default = nil)
  if valid_604018 != nil:
    section.add "X-Amz-Credential", valid_604018
  var valid_604019 = header.getOrDefault("X-Amz-Security-Token")
  valid_604019 = validateParameter(valid_604019, JString, required = false,
                                 default = nil)
  if valid_604019 != nil:
    section.add "X-Amz-Security-Token", valid_604019
  var valid_604020 = header.getOrDefault("X-Amz-Algorithm")
  valid_604020 = validateParameter(valid_604020, JString, required = false,
                                 default = nil)
  if valid_604020 != nil:
    section.add "X-Amz-Algorithm", valid_604020
  var valid_604021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604021 = validateParameter(valid_604021, JString, required = false,
                                 default = nil)
  if valid_604021 != nil:
    section.add "X-Amz-SignedHeaders", valid_604021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604022: Call_GetDescribeDBClusterEndpoints_604005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604022.validator(path, query, header, formData, body)
  let scheme = call_604022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604022.url(scheme.get, call_604022.host, call_604022.base,
                         call_604022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604022, url, valid)

proc call*(call_604023: Call_GetDescribeDBClusterEndpoints_604005;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604024 = newJObject()
  add(query_604024, "Marker", newJString(Marker))
  add(query_604024, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604024, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_604024, "Action", newJString(Action))
  add(query_604024, "Version", newJString(Version))
  if Filters != nil:
    query_604024.add "Filters", Filters
  add(query_604024, "MaxRecords", newJInt(MaxRecords))
  result = call_604023.call(nil, query_604024, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_604005(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_604006, base: "/",
    url: url_GetDescribeDBClusterEndpoints_604007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_604065 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterParameterGroups_604067(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_604066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604068 = query.getOrDefault("Action")
  valid_604068 = validateParameter(valid_604068, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_604068 != nil:
    section.add "Action", valid_604068
  var valid_604069 = query.getOrDefault("Version")
  valid_604069 = validateParameter(valid_604069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604069 != nil:
    section.add "Version", valid_604069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604070 = header.getOrDefault("X-Amz-Signature")
  valid_604070 = validateParameter(valid_604070, JString, required = false,
                                 default = nil)
  if valid_604070 != nil:
    section.add "X-Amz-Signature", valid_604070
  var valid_604071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604071 = validateParameter(valid_604071, JString, required = false,
                                 default = nil)
  if valid_604071 != nil:
    section.add "X-Amz-Content-Sha256", valid_604071
  var valid_604072 = header.getOrDefault("X-Amz-Date")
  valid_604072 = validateParameter(valid_604072, JString, required = false,
                                 default = nil)
  if valid_604072 != nil:
    section.add "X-Amz-Date", valid_604072
  var valid_604073 = header.getOrDefault("X-Amz-Credential")
  valid_604073 = validateParameter(valid_604073, JString, required = false,
                                 default = nil)
  if valid_604073 != nil:
    section.add "X-Amz-Credential", valid_604073
  var valid_604074 = header.getOrDefault("X-Amz-Security-Token")
  valid_604074 = validateParameter(valid_604074, JString, required = false,
                                 default = nil)
  if valid_604074 != nil:
    section.add "X-Amz-Security-Token", valid_604074
  var valid_604075 = header.getOrDefault("X-Amz-Algorithm")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-Algorithm", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-SignedHeaders", valid_604076
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_604077 = formData.getOrDefault("MaxRecords")
  valid_604077 = validateParameter(valid_604077, JInt, required = false, default = nil)
  if valid_604077 != nil:
    section.add "MaxRecords", valid_604077
  var valid_604078 = formData.getOrDefault("Marker")
  valid_604078 = validateParameter(valid_604078, JString, required = false,
                                 default = nil)
  if valid_604078 != nil:
    section.add "Marker", valid_604078
  var valid_604079 = formData.getOrDefault("Filters")
  valid_604079 = validateParameter(valid_604079, JArray, required = false,
                                 default = nil)
  if valid_604079 != nil:
    section.add "Filters", valid_604079
  var valid_604080 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_604080 = validateParameter(valid_604080, JString, required = false,
                                 default = nil)
  if valid_604080 != nil:
    section.add "DBClusterParameterGroupName", valid_604080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604081: Call_PostDescribeDBClusterParameterGroups_604065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604081.validator(path, query, header, formData, body)
  let scheme = call_604081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604081.url(scheme.get, call_604081.host, call_604081.base,
                         call_604081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604081, url, valid)

proc call*(call_604082: Call_PostDescribeDBClusterParameterGroups_604065;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_604083 = newJObject()
  var formData_604084 = newJObject()
  add(formData_604084, "MaxRecords", newJInt(MaxRecords))
  add(formData_604084, "Marker", newJString(Marker))
  add(query_604083, "Action", newJString(Action))
  if Filters != nil:
    formData_604084.add "Filters", Filters
  add(formData_604084, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604083, "Version", newJString(Version))
  result = call_604082.call(nil, query_604083, nil, formData_604084, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_604065(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_604066, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_604067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_604046 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterParameterGroups_604048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_604047(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604049 = query.getOrDefault("Marker")
  valid_604049 = validateParameter(valid_604049, JString, required = false,
                                 default = nil)
  if valid_604049 != nil:
    section.add "Marker", valid_604049
  var valid_604050 = query.getOrDefault("DBClusterParameterGroupName")
  valid_604050 = validateParameter(valid_604050, JString, required = false,
                                 default = nil)
  if valid_604050 != nil:
    section.add "DBClusterParameterGroupName", valid_604050
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604051 = query.getOrDefault("Action")
  valid_604051 = validateParameter(valid_604051, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_604051 != nil:
    section.add "Action", valid_604051
  var valid_604052 = query.getOrDefault("Version")
  valid_604052 = validateParameter(valid_604052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604052 != nil:
    section.add "Version", valid_604052
  var valid_604053 = query.getOrDefault("Filters")
  valid_604053 = validateParameter(valid_604053, JArray, required = false,
                                 default = nil)
  if valid_604053 != nil:
    section.add "Filters", valid_604053
  var valid_604054 = query.getOrDefault("MaxRecords")
  valid_604054 = validateParameter(valid_604054, JInt, required = false, default = nil)
  if valid_604054 != nil:
    section.add "MaxRecords", valid_604054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604055 = header.getOrDefault("X-Amz-Signature")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Signature", valid_604055
  var valid_604056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Content-Sha256", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Date")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Date", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Credential")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Credential", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-Security-Token")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-Security-Token", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-Algorithm")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-Algorithm", valid_604060
  var valid_604061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604061 = validateParameter(valid_604061, JString, required = false,
                                 default = nil)
  if valid_604061 != nil:
    section.add "X-Amz-SignedHeaders", valid_604061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604062: Call_GetDescribeDBClusterParameterGroups_604046;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604062.validator(path, query, header, formData, body)
  let scheme = call_604062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604062.url(scheme.get, call_604062.host, call_604062.base,
                         call_604062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604062, url, valid)

proc call*(call_604063: Call_GetDescribeDBClusterParameterGroups_604046;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604064 = newJObject()
  add(query_604064, "Marker", newJString(Marker))
  add(query_604064, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604064, "Action", newJString(Action))
  add(query_604064, "Version", newJString(Version))
  if Filters != nil:
    query_604064.add "Filters", Filters
  add(query_604064, "MaxRecords", newJInt(MaxRecords))
  result = call_604063.call(nil, query_604064, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_604046(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_604047, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_604048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_604105 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterParameters_604107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_604106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604108 = query.getOrDefault("Action")
  valid_604108 = validateParameter(valid_604108, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_604108 != nil:
    section.add "Action", valid_604108
  var valid_604109 = query.getOrDefault("Version")
  valid_604109 = validateParameter(valid_604109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604109 != nil:
    section.add "Version", valid_604109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604110 = header.getOrDefault("X-Amz-Signature")
  valid_604110 = validateParameter(valid_604110, JString, required = false,
                                 default = nil)
  if valid_604110 != nil:
    section.add "X-Amz-Signature", valid_604110
  var valid_604111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604111 = validateParameter(valid_604111, JString, required = false,
                                 default = nil)
  if valid_604111 != nil:
    section.add "X-Amz-Content-Sha256", valid_604111
  var valid_604112 = header.getOrDefault("X-Amz-Date")
  valid_604112 = validateParameter(valid_604112, JString, required = false,
                                 default = nil)
  if valid_604112 != nil:
    section.add "X-Amz-Date", valid_604112
  var valid_604113 = header.getOrDefault("X-Amz-Credential")
  valid_604113 = validateParameter(valid_604113, JString, required = false,
                                 default = nil)
  if valid_604113 != nil:
    section.add "X-Amz-Credential", valid_604113
  var valid_604114 = header.getOrDefault("X-Amz-Security-Token")
  valid_604114 = validateParameter(valid_604114, JString, required = false,
                                 default = nil)
  if valid_604114 != nil:
    section.add "X-Amz-Security-Token", valid_604114
  var valid_604115 = header.getOrDefault("X-Amz-Algorithm")
  valid_604115 = validateParameter(valid_604115, JString, required = false,
                                 default = nil)
  if valid_604115 != nil:
    section.add "X-Amz-Algorithm", valid_604115
  var valid_604116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604116 = validateParameter(valid_604116, JString, required = false,
                                 default = nil)
  if valid_604116 != nil:
    section.add "X-Amz-SignedHeaders", valid_604116
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_604117 = formData.getOrDefault("Source")
  valid_604117 = validateParameter(valid_604117, JString, required = false,
                                 default = nil)
  if valid_604117 != nil:
    section.add "Source", valid_604117
  var valid_604118 = formData.getOrDefault("MaxRecords")
  valid_604118 = validateParameter(valid_604118, JInt, required = false, default = nil)
  if valid_604118 != nil:
    section.add "MaxRecords", valid_604118
  var valid_604119 = formData.getOrDefault("Marker")
  valid_604119 = validateParameter(valid_604119, JString, required = false,
                                 default = nil)
  if valid_604119 != nil:
    section.add "Marker", valid_604119
  var valid_604120 = formData.getOrDefault("Filters")
  valid_604120 = validateParameter(valid_604120, JArray, required = false,
                                 default = nil)
  if valid_604120 != nil:
    section.add "Filters", valid_604120
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_604121 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_604121 = validateParameter(valid_604121, JString, required = true,
                                 default = nil)
  if valid_604121 != nil:
    section.add "DBClusterParameterGroupName", valid_604121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604122: Call_PostDescribeDBClusterParameters_604105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604122.validator(path, query, header, formData, body)
  let scheme = call_604122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604122.url(scheme.get, call_604122.host, call_604122.base,
                         call_604122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604122, url, valid)

proc call*(call_604123: Call_PostDescribeDBClusterParameters_604105;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_604124 = newJObject()
  var formData_604125 = newJObject()
  add(formData_604125, "Source", newJString(Source))
  add(formData_604125, "MaxRecords", newJInt(MaxRecords))
  add(formData_604125, "Marker", newJString(Marker))
  add(query_604124, "Action", newJString(Action))
  if Filters != nil:
    formData_604125.add "Filters", Filters
  add(formData_604125, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604124, "Version", newJString(Version))
  result = call_604123.call(nil, query_604124, nil, formData_604125, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_604105(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_604106, base: "/",
    url: url_PostDescribeDBClusterParameters_604107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_604085 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterParameters_604087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_604086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604088 = query.getOrDefault("Marker")
  valid_604088 = validateParameter(valid_604088, JString, required = false,
                                 default = nil)
  if valid_604088 != nil:
    section.add "Marker", valid_604088
  var valid_604089 = query.getOrDefault("Source")
  valid_604089 = validateParameter(valid_604089, JString, required = false,
                                 default = nil)
  if valid_604089 != nil:
    section.add "Source", valid_604089
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_604090 = query.getOrDefault("DBClusterParameterGroupName")
  valid_604090 = validateParameter(valid_604090, JString, required = true,
                                 default = nil)
  if valid_604090 != nil:
    section.add "DBClusterParameterGroupName", valid_604090
  var valid_604091 = query.getOrDefault("Action")
  valid_604091 = validateParameter(valid_604091, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_604091 != nil:
    section.add "Action", valid_604091
  var valid_604092 = query.getOrDefault("Version")
  valid_604092 = validateParameter(valid_604092, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604092 != nil:
    section.add "Version", valid_604092
  var valid_604093 = query.getOrDefault("Filters")
  valid_604093 = validateParameter(valid_604093, JArray, required = false,
                                 default = nil)
  if valid_604093 != nil:
    section.add "Filters", valid_604093
  var valid_604094 = query.getOrDefault("MaxRecords")
  valid_604094 = validateParameter(valid_604094, JInt, required = false, default = nil)
  if valid_604094 != nil:
    section.add "MaxRecords", valid_604094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604095 = header.getOrDefault("X-Amz-Signature")
  valid_604095 = validateParameter(valid_604095, JString, required = false,
                                 default = nil)
  if valid_604095 != nil:
    section.add "X-Amz-Signature", valid_604095
  var valid_604096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604096 = validateParameter(valid_604096, JString, required = false,
                                 default = nil)
  if valid_604096 != nil:
    section.add "X-Amz-Content-Sha256", valid_604096
  var valid_604097 = header.getOrDefault("X-Amz-Date")
  valid_604097 = validateParameter(valid_604097, JString, required = false,
                                 default = nil)
  if valid_604097 != nil:
    section.add "X-Amz-Date", valid_604097
  var valid_604098 = header.getOrDefault("X-Amz-Credential")
  valid_604098 = validateParameter(valid_604098, JString, required = false,
                                 default = nil)
  if valid_604098 != nil:
    section.add "X-Amz-Credential", valid_604098
  var valid_604099 = header.getOrDefault("X-Amz-Security-Token")
  valid_604099 = validateParameter(valid_604099, JString, required = false,
                                 default = nil)
  if valid_604099 != nil:
    section.add "X-Amz-Security-Token", valid_604099
  var valid_604100 = header.getOrDefault("X-Amz-Algorithm")
  valid_604100 = validateParameter(valid_604100, JString, required = false,
                                 default = nil)
  if valid_604100 != nil:
    section.add "X-Amz-Algorithm", valid_604100
  var valid_604101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604101 = validateParameter(valid_604101, JString, required = false,
                                 default = nil)
  if valid_604101 != nil:
    section.add "X-Amz-SignedHeaders", valid_604101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604102: Call_GetDescribeDBClusterParameters_604085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604102.validator(path, query, header, formData, body)
  let scheme = call_604102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604102.url(scheme.get, call_604102.host, call_604102.base,
                         call_604102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604102, url, valid)

proc call*(call_604103: Call_GetDescribeDBClusterParameters_604085;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604104 = newJObject()
  add(query_604104, "Marker", newJString(Marker))
  add(query_604104, "Source", newJString(Source))
  add(query_604104, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604104, "Action", newJString(Action))
  add(query_604104, "Version", newJString(Version))
  if Filters != nil:
    query_604104.add "Filters", Filters
  add(query_604104, "MaxRecords", newJInt(MaxRecords))
  result = call_604103.call(nil, query_604104, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_604085(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_604086, base: "/",
    url: url_GetDescribeDBClusterParameters_604087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_604142 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterSnapshotAttributes_604144(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_604143(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604145 = query.getOrDefault("Action")
  valid_604145 = validateParameter(valid_604145, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_604145 != nil:
    section.add "Action", valid_604145
  var valid_604146 = query.getOrDefault("Version")
  valid_604146 = validateParameter(valid_604146, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604146 != nil:
    section.add "Version", valid_604146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604147 = header.getOrDefault("X-Amz-Signature")
  valid_604147 = validateParameter(valid_604147, JString, required = false,
                                 default = nil)
  if valid_604147 != nil:
    section.add "X-Amz-Signature", valid_604147
  var valid_604148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604148 = validateParameter(valid_604148, JString, required = false,
                                 default = nil)
  if valid_604148 != nil:
    section.add "X-Amz-Content-Sha256", valid_604148
  var valid_604149 = header.getOrDefault("X-Amz-Date")
  valid_604149 = validateParameter(valid_604149, JString, required = false,
                                 default = nil)
  if valid_604149 != nil:
    section.add "X-Amz-Date", valid_604149
  var valid_604150 = header.getOrDefault("X-Amz-Credential")
  valid_604150 = validateParameter(valid_604150, JString, required = false,
                                 default = nil)
  if valid_604150 != nil:
    section.add "X-Amz-Credential", valid_604150
  var valid_604151 = header.getOrDefault("X-Amz-Security-Token")
  valid_604151 = validateParameter(valid_604151, JString, required = false,
                                 default = nil)
  if valid_604151 != nil:
    section.add "X-Amz-Security-Token", valid_604151
  var valid_604152 = header.getOrDefault("X-Amz-Algorithm")
  valid_604152 = validateParameter(valid_604152, JString, required = false,
                                 default = nil)
  if valid_604152 != nil:
    section.add "X-Amz-Algorithm", valid_604152
  var valid_604153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604153 = validateParameter(valid_604153, JString, required = false,
                                 default = nil)
  if valid_604153 != nil:
    section.add "X-Amz-SignedHeaders", valid_604153
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_604154 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604154 = validateParameter(valid_604154, JString, required = true,
                                 default = nil)
  if valid_604154 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604154
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604155: Call_PostDescribeDBClusterSnapshotAttributes_604142;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604155.validator(path, query, header, formData, body)
  let scheme = call_604155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604155.url(scheme.get, call_604155.host, call_604155.base,
                         call_604155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604155, url, valid)

proc call*(call_604156: Call_PostDescribeDBClusterSnapshotAttributes_604142;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604157 = newJObject()
  var formData_604158 = newJObject()
  add(formData_604158, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604157, "Action", newJString(Action))
  add(query_604157, "Version", newJString(Version))
  result = call_604156.call(nil, query_604157, nil, formData_604158, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_604142(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_604143, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_604144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_604126 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterSnapshotAttributes_604128(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_604127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_604129 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604129 = validateParameter(valid_604129, JString, required = true,
                                 default = nil)
  if valid_604129 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604129
  var valid_604130 = query.getOrDefault("Action")
  valid_604130 = validateParameter(valid_604130, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_604130 != nil:
    section.add "Action", valid_604130
  var valid_604131 = query.getOrDefault("Version")
  valid_604131 = validateParameter(valid_604131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604131 != nil:
    section.add "Version", valid_604131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604132 = header.getOrDefault("X-Amz-Signature")
  valid_604132 = validateParameter(valid_604132, JString, required = false,
                                 default = nil)
  if valid_604132 != nil:
    section.add "X-Amz-Signature", valid_604132
  var valid_604133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604133 = validateParameter(valid_604133, JString, required = false,
                                 default = nil)
  if valid_604133 != nil:
    section.add "X-Amz-Content-Sha256", valid_604133
  var valid_604134 = header.getOrDefault("X-Amz-Date")
  valid_604134 = validateParameter(valid_604134, JString, required = false,
                                 default = nil)
  if valid_604134 != nil:
    section.add "X-Amz-Date", valid_604134
  var valid_604135 = header.getOrDefault("X-Amz-Credential")
  valid_604135 = validateParameter(valid_604135, JString, required = false,
                                 default = nil)
  if valid_604135 != nil:
    section.add "X-Amz-Credential", valid_604135
  var valid_604136 = header.getOrDefault("X-Amz-Security-Token")
  valid_604136 = validateParameter(valid_604136, JString, required = false,
                                 default = nil)
  if valid_604136 != nil:
    section.add "X-Amz-Security-Token", valid_604136
  var valid_604137 = header.getOrDefault("X-Amz-Algorithm")
  valid_604137 = validateParameter(valid_604137, JString, required = false,
                                 default = nil)
  if valid_604137 != nil:
    section.add "X-Amz-Algorithm", valid_604137
  var valid_604138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604138 = validateParameter(valid_604138, JString, required = false,
                                 default = nil)
  if valid_604138 != nil:
    section.add "X-Amz-SignedHeaders", valid_604138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604139: Call_GetDescribeDBClusterSnapshotAttributes_604126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604139.validator(path, query, header, formData, body)
  let scheme = call_604139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604139.url(scheme.get, call_604139.host, call_604139.base,
                         call_604139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604139, url, valid)

proc call*(call_604140: Call_GetDescribeDBClusterSnapshotAttributes_604126;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604141 = newJObject()
  add(query_604141, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604141, "Action", newJString(Action))
  add(query_604141, "Version", newJString(Version))
  result = call_604140.call(nil, query_604141, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_604126(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_604127, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_604128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_604182 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusterSnapshots_604184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_604183(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604185 = query.getOrDefault("Action")
  valid_604185 = validateParameter(valid_604185, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_604185 != nil:
    section.add "Action", valid_604185
  var valid_604186 = query.getOrDefault("Version")
  valid_604186 = validateParameter(valid_604186, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604186 != nil:
    section.add "Version", valid_604186
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604187 = header.getOrDefault("X-Amz-Signature")
  valid_604187 = validateParameter(valid_604187, JString, required = false,
                                 default = nil)
  if valid_604187 != nil:
    section.add "X-Amz-Signature", valid_604187
  var valid_604188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604188 = validateParameter(valid_604188, JString, required = false,
                                 default = nil)
  if valid_604188 != nil:
    section.add "X-Amz-Content-Sha256", valid_604188
  var valid_604189 = header.getOrDefault("X-Amz-Date")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "X-Amz-Date", valid_604189
  var valid_604190 = header.getOrDefault("X-Amz-Credential")
  valid_604190 = validateParameter(valid_604190, JString, required = false,
                                 default = nil)
  if valid_604190 != nil:
    section.add "X-Amz-Credential", valid_604190
  var valid_604191 = header.getOrDefault("X-Amz-Security-Token")
  valid_604191 = validateParameter(valid_604191, JString, required = false,
                                 default = nil)
  if valid_604191 != nil:
    section.add "X-Amz-Security-Token", valid_604191
  var valid_604192 = header.getOrDefault("X-Amz-Algorithm")
  valid_604192 = validateParameter(valid_604192, JString, required = false,
                                 default = nil)
  if valid_604192 != nil:
    section.add "X-Amz-Algorithm", valid_604192
  var valid_604193 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604193 = validateParameter(valid_604193, JString, required = false,
                                 default = nil)
  if valid_604193 != nil:
    section.add "X-Amz-SignedHeaders", valid_604193
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_604194 = formData.getOrDefault("SnapshotType")
  valid_604194 = validateParameter(valid_604194, JString, required = false,
                                 default = nil)
  if valid_604194 != nil:
    section.add "SnapshotType", valid_604194
  var valid_604195 = formData.getOrDefault("MaxRecords")
  valid_604195 = validateParameter(valid_604195, JInt, required = false, default = nil)
  if valid_604195 != nil:
    section.add "MaxRecords", valid_604195
  var valid_604196 = formData.getOrDefault("IncludePublic")
  valid_604196 = validateParameter(valid_604196, JBool, required = false, default = nil)
  if valid_604196 != nil:
    section.add "IncludePublic", valid_604196
  var valid_604197 = formData.getOrDefault("Marker")
  valid_604197 = validateParameter(valid_604197, JString, required = false,
                                 default = nil)
  if valid_604197 != nil:
    section.add "Marker", valid_604197
  var valid_604198 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604198 = validateParameter(valid_604198, JString, required = false,
                                 default = nil)
  if valid_604198 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604198
  var valid_604199 = formData.getOrDefault("IncludeShared")
  valid_604199 = validateParameter(valid_604199, JBool, required = false, default = nil)
  if valid_604199 != nil:
    section.add "IncludeShared", valid_604199
  var valid_604200 = formData.getOrDefault("Filters")
  valid_604200 = validateParameter(valid_604200, JArray, required = false,
                                 default = nil)
  if valid_604200 != nil:
    section.add "Filters", valid_604200
  var valid_604201 = formData.getOrDefault("DBClusterIdentifier")
  valid_604201 = validateParameter(valid_604201, JString, required = false,
                                 default = nil)
  if valid_604201 != nil:
    section.add "DBClusterIdentifier", valid_604201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604202: Call_PostDescribeDBClusterSnapshots_604182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604202.validator(path, query, header, formData, body)
  let scheme = call_604202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604202.url(scheme.get, call_604202.host, call_604202.base,
                         call_604202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604202, url, valid)

proc call*(call_604203: Call_PostDescribeDBClusterSnapshots_604182;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_604204 = newJObject()
  var formData_604205 = newJObject()
  add(formData_604205, "SnapshotType", newJString(SnapshotType))
  add(formData_604205, "MaxRecords", newJInt(MaxRecords))
  add(formData_604205, "IncludePublic", newJBool(IncludePublic))
  add(formData_604205, "Marker", newJString(Marker))
  add(formData_604205, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_604205, "IncludeShared", newJBool(IncludeShared))
  add(query_604204, "Action", newJString(Action))
  if Filters != nil:
    formData_604205.add "Filters", Filters
  add(query_604204, "Version", newJString(Version))
  add(formData_604205, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_604203.call(nil, query_604204, nil, formData_604205, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_604182(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_604183, base: "/",
    url: url_PostDescribeDBClusterSnapshots_604184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_604159 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusterSnapshots_604161(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_604160(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604162 = query.getOrDefault("Marker")
  valid_604162 = validateParameter(valid_604162, JString, required = false,
                                 default = nil)
  if valid_604162 != nil:
    section.add "Marker", valid_604162
  var valid_604163 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604163 = validateParameter(valid_604163, JString, required = false,
                                 default = nil)
  if valid_604163 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604163
  var valid_604164 = query.getOrDefault("DBClusterIdentifier")
  valid_604164 = validateParameter(valid_604164, JString, required = false,
                                 default = nil)
  if valid_604164 != nil:
    section.add "DBClusterIdentifier", valid_604164
  var valid_604165 = query.getOrDefault("SnapshotType")
  valid_604165 = validateParameter(valid_604165, JString, required = false,
                                 default = nil)
  if valid_604165 != nil:
    section.add "SnapshotType", valid_604165
  var valid_604166 = query.getOrDefault("IncludePublic")
  valid_604166 = validateParameter(valid_604166, JBool, required = false, default = nil)
  if valid_604166 != nil:
    section.add "IncludePublic", valid_604166
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604167 = query.getOrDefault("Action")
  valid_604167 = validateParameter(valid_604167, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_604167 != nil:
    section.add "Action", valid_604167
  var valid_604168 = query.getOrDefault("IncludeShared")
  valid_604168 = validateParameter(valid_604168, JBool, required = false, default = nil)
  if valid_604168 != nil:
    section.add "IncludeShared", valid_604168
  var valid_604169 = query.getOrDefault("Version")
  valid_604169 = validateParameter(valid_604169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604169 != nil:
    section.add "Version", valid_604169
  var valid_604170 = query.getOrDefault("Filters")
  valid_604170 = validateParameter(valid_604170, JArray, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "Filters", valid_604170
  var valid_604171 = query.getOrDefault("MaxRecords")
  valid_604171 = validateParameter(valid_604171, JInt, required = false, default = nil)
  if valid_604171 != nil:
    section.add "MaxRecords", valid_604171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604172 = header.getOrDefault("X-Amz-Signature")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Signature", valid_604172
  var valid_604173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "X-Amz-Content-Sha256", valid_604173
  var valid_604174 = header.getOrDefault("X-Amz-Date")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = nil)
  if valid_604174 != nil:
    section.add "X-Amz-Date", valid_604174
  var valid_604175 = header.getOrDefault("X-Amz-Credential")
  valid_604175 = validateParameter(valid_604175, JString, required = false,
                                 default = nil)
  if valid_604175 != nil:
    section.add "X-Amz-Credential", valid_604175
  var valid_604176 = header.getOrDefault("X-Amz-Security-Token")
  valid_604176 = validateParameter(valid_604176, JString, required = false,
                                 default = nil)
  if valid_604176 != nil:
    section.add "X-Amz-Security-Token", valid_604176
  var valid_604177 = header.getOrDefault("X-Amz-Algorithm")
  valid_604177 = validateParameter(valid_604177, JString, required = false,
                                 default = nil)
  if valid_604177 != nil:
    section.add "X-Amz-Algorithm", valid_604177
  var valid_604178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604178 = validateParameter(valid_604178, JString, required = false,
                                 default = nil)
  if valid_604178 != nil:
    section.add "X-Amz-SignedHeaders", valid_604178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604179: Call_GetDescribeDBClusterSnapshots_604159; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604179.validator(path, query, header, formData, body)
  let scheme = call_604179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604179.url(scheme.get, call_604179.host, call_604179.base,
                         call_604179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604179, url, valid)

proc call*(call_604180: Call_GetDescribeDBClusterSnapshots_604159;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604181 = newJObject()
  add(query_604181, "Marker", newJString(Marker))
  add(query_604181, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604181, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604181, "SnapshotType", newJString(SnapshotType))
  add(query_604181, "IncludePublic", newJBool(IncludePublic))
  add(query_604181, "Action", newJString(Action))
  add(query_604181, "IncludeShared", newJBool(IncludeShared))
  add(query_604181, "Version", newJString(Version))
  if Filters != nil:
    query_604181.add "Filters", Filters
  add(query_604181, "MaxRecords", newJInt(MaxRecords))
  result = call_604180.call(nil, query_604181, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_604159(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_604160, base: "/",
    url: url_GetDescribeDBClusterSnapshots_604161,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_604226 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBClusters_604228(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_604227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604229 = query.getOrDefault("Action")
  valid_604229 = validateParameter(valid_604229, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_604229 != nil:
    section.add "Action", valid_604229
  var valid_604230 = query.getOrDefault("Version")
  valid_604230 = validateParameter(valid_604230, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604230 != nil:
    section.add "Version", valid_604230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604231 = header.getOrDefault("X-Amz-Signature")
  valid_604231 = validateParameter(valid_604231, JString, required = false,
                                 default = nil)
  if valid_604231 != nil:
    section.add "X-Amz-Signature", valid_604231
  var valid_604232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604232 = validateParameter(valid_604232, JString, required = false,
                                 default = nil)
  if valid_604232 != nil:
    section.add "X-Amz-Content-Sha256", valid_604232
  var valid_604233 = header.getOrDefault("X-Amz-Date")
  valid_604233 = validateParameter(valid_604233, JString, required = false,
                                 default = nil)
  if valid_604233 != nil:
    section.add "X-Amz-Date", valid_604233
  var valid_604234 = header.getOrDefault("X-Amz-Credential")
  valid_604234 = validateParameter(valid_604234, JString, required = false,
                                 default = nil)
  if valid_604234 != nil:
    section.add "X-Amz-Credential", valid_604234
  var valid_604235 = header.getOrDefault("X-Amz-Security-Token")
  valid_604235 = validateParameter(valid_604235, JString, required = false,
                                 default = nil)
  if valid_604235 != nil:
    section.add "X-Amz-Security-Token", valid_604235
  var valid_604236 = header.getOrDefault("X-Amz-Algorithm")
  valid_604236 = validateParameter(valid_604236, JString, required = false,
                                 default = nil)
  if valid_604236 != nil:
    section.add "X-Amz-Algorithm", valid_604236
  var valid_604237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604237 = validateParameter(valid_604237, JString, required = false,
                                 default = nil)
  if valid_604237 != nil:
    section.add "X-Amz-SignedHeaders", valid_604237
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_604238 = formData.getOrDefault("MaxRecords")
  valid_604238 = validateParameter(valid_604238, JInt, required = false, default = nil)
  if valid_604238 != nil:
    section.add "MaxRecords", valid_604238
  var valid_604239 = formData.getOrDefault("Marker")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "Marker", valid_604239
  var valid_604240 = formData.getOrDefault("IncludeShared")
  valid_604240 = validateParameter(valid_604240, JBool, required = false, default = nil)
  if valid_604240 != nil:
    section.add "IncludeShared", valid_604240
  var valid_604241 = formData.getOrDefault("Filters")
  valid_604241 = validateParameter(valid_604241, JArray, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "Filters", valid_604241
  var valid_604242 = formData.getOrDefault("DBClusterIdentifier")
  valid_604242 = validateParameter(valid_604242, JString, required = false,
                                 default = nil)
  if valid_604242 != nil:
    section.add "DBClusterIdentifier", valid_604242
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604243: Call_PostDescribeDBClusters_604226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604243.validator(path, query, header, formData, body)
  let scheme = call_604243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604243.url(scheme.get, call_604243.host, call_604243.base,
                         call_604243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604243, url, valid)

proc call*(call_604244: Call_PostDescribeDBClusters_604226; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_604245 = newJObject()
  var formData_604246 = newJObject()
  add(formData_604246, "MaxRecords", newJInt(MaxRecords))
  add(formData_604246, "Marker", newJString(Marker))
  add(formData_604246, "IncludeShared", newJBool(IncludeShared))
  add(query_604245, "Action", newJString(Action))
  if Filters != nil:
    formData_604246.add "Filters", Filters
  add(query_604245, "Version", newJString(Version))
  add(formData_604246, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_604244.call(nil, query_604245, nil, formData_604246, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_604226(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_604227, base: "/",
    url: url_PostDescribeDBClusters_604228, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_604206 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBClusters_604208(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_604207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604209 = query.getOrDefault("Marker")
  valid_604209 = validateParameter(valid_604209, JString, required = false,
                                 default = nil)
  if valid_604209 != nil:
    section.add "Marker", valid_604209
  var valid_604210 = query.getOrDefault("DBClusterIdentifier")
  valid_604210 = validateParameter(valid_604210, JString, required = false,
                                 default = nil)
  if valid_604210 != nil:
    section.add "DBClusterIdentifier", valid_604210
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604211 = query.getOrDefault("Action")
  valid_604211 = validateParameter(valid_604211, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_604211 != nil:
    section.add "Action", valid_604211
  var valid_604212 = query.getOrDefault("IncludeShared")
  valid_604212 = validateParameter(valid_604212, JBool, required = false, default = nil)
  if valid_604212 != nil:
    section.add "IncludeShared", valid_604212
  var valid_604213 = query.getOrDefault("Version")
  valid_604213 = validateParameter(valid_604213, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604213 != nil:
    section.add "Version", valid_604213
  var valid_604214 = query.getOrDefault("Filters")
  valid_604214 = validateParameter(valid_604214, JArray, required = false,
                                 default = nil)
  if valid_604214 != nil:
    section.add "Filters", valid_604214
  var valid_604215 = query.getOrDefault("MaxRecords")
  valid_604215 = validateParameter(valid_604215, JInt, required = false, default = nil)
  if valid_604215 != nil:
    section.add "MaxRecords", valid_604215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604216 = header.getOrDefault("X-Amz-Signature")
  valid_604216 = validateParameter(valid_604216, JString, required = false,
                                 default = nil)
  if valid_604216 != nil:
    section.add "X-Amz-Signature", valid_604216
  var valid_604217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604217 = validateParameter(valid_604217, JString, required = false,
                                 default = nil)
  if valid_604217 != nil:
    section.add "X-Amz-Content-Sha256", valid_604217
  var valid_604218 = header.getOrDefault("X-Amz-Date")
  valid_604218 = validateParameter(valid_604218, JString, required = false,
                                 default = nil)
  if valid_604218 != nil:
    section.add "X-Amz-Date", valid_604218
  var valid_604219 = header.getOrDefault("X-Amz-Credential")
  valid_604219 = validateParameter(valid_604219, JString, required = false,
                                 default = nil)
  if valid_604219 != nil:
    section.add "X-Amz-Credential", valid_604219
  var valid_604220 = header.getOrDefault("X-Amz-Security-Token")
  valid_604220 = validateParameter(valid_604220, JString, required = false,
                                 default = nil)
  if valid_604220 != nil:
    section.add "X-Amz-Security-Token", valid_604220
  var valid_604221 = header.getOrDefault("X-Amz-Algorithm")
  valid_604221 = validateParameter(valid_604221, JString, required = false,
                                 default = nil)
  if valid_604221 != nil:
    section.add "X-Amz-Algorithm", valid_604221
  var valid_604222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604222 = validateParameter(valid_604222, JString, required = false,
                                 default = nil)
  if valid_604222 != nil:
    section.add "X-Amz-SignedHeaders", valid_604222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604223: Call_GetDescribeDBClusters_604206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604223.validator(path, query, header, formData, body)
  let scheme = call_604223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604223.url(scheme.get, call_604223.host, call_604223.base,
                         call_604223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604223, url, valid)

proc call*(call_604224: Call_GetDescribeDBClusters_604206; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604225 = newJObject()
  add(query_604225, "Marker", newJString(Marker))
  add(query_604225, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604225, "Action", newJString(Action))
  add(query_604225, "IncludeShared", newJBool(IncludeShared))
  add(query_604225, "Version", newJString(Version))
  if Filters != nil:
    query_604225.add "Filters", Filters
  add(query_604225, "MaxRecords", newJInt(MaxRecords))
  result = call_604224.call(nil, query_604225, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_604206(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_604207, base: "/",
    url: url_GetDescribeDBClusters_604208, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_604272 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBEngineVersions_604274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_604273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604275 = query.getOrDefault("Action")
  valid_604275 = validateParameter(valid_604275, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_604275 != nil:
    section.add "Action", valid_604275
  var valid_604276 = query.getOrDefault("Version")
  valid_604276 = validateParameter(valid_604276, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604276 != nil:
    section.add "Version", valid_604276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604277 = header.getOrDefault("X-Amz-Signature")
  valid_604277 = validateParameter(valid_604277, JString, required = false,
                                 default = nil)
  if valid_604277 != nil:
    section.add "X-Amz-Signature", valid_604277
  var valid_604278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604278 = validateParameter(valid_604278, JString, required = false,
                                 default = nil)
  if valid_604278 != nil:
    section.add "X-Amz-Content-Sha256", valid_604278
  var valid_604279 = header.getOrDefault("X-Amz-Date")
  valid_604279 = validateParameter(valid_604279, JString, required = false,
                                 default = nil)
  if valid_604279 != nil:
    section.add "X-Amz-Date", valid_604279
  var valid_604280 = header.getOrDefault("X-Amz-Credential")
  valid_604280 = validateParameter(valid_604280, JString, required = false,
                                 default = nil)
  if valid_604280 != nil:
    section.add "X-Amz-Credential", valid_604280
  var valid_604281 = header.getOrDefault("X-Amz-Security-Token")
  valid_604281 = validateParameter(valid_604281, JString, required = false,
                                 default = nil)
  if valid_604281 != nil:
    section.add "X-Amz-Security-Token", valid_604281
  var valid_604282 = header.getOrDefault("X-Amz-Algorithm")
  valid_604282 = validateParameter(valid_604282, JString, required = false,
                                 default = nil)
  if valid_604282 != nil:
    section.add "X-Amz-Algorithm", valid_604282
  var valid_604283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604283 = validateParameter(valid_604283, JString, required = false,
                                 default = nil)
  if valid_604283 != nil:
    section.add "X-Amz-SignedHeaders", valid_604283
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_604284 = formData.getOrDefault("DefaultOnly")
  valid_604284 = validateParameter(valid_604284, JBool, required = false, default = nil)
  if valid_604284 != nil:
    section.add "DefaultOnly", valid_604284
  var valid_604285 = formData.getOrDefault("MaxRecords")
  valid_604285 = validateParameter(valid_604285, JInt, required = false, default = nil)
  if valid_604285 != nil:
    section.add "MaxRecords", valid_604285
  var valid_604286 = formData.getOrDefault("EngineVersion")
  valid_604286 = validateParameter(valid_604286, JString, required = false,
                                 default = nil)
  if valid_604286 != nil:
    section.add "EngineVersion", valid_604286
  var valid_604287 = formData.getOrDefault("Marker")
  valid_604287 = validateParameter(valid_604287, JString, required = false,
                                 default = nil)
  if valid_604287 != nil:
    section.add "Marker", valid_604287
  var valid_604288 = formData.getOrDefault("IncludeAll")
  valid_604288 = validateParameter(valid_604288, JBool, required = false, default = nil)
  if valid_604288 != nil:
    section.add "IncludeAll", valid_604288
  var valid_604289 = formData.getOrDefault("Engine")
  valid_604289 = validateParameter(valid_604289, JString, required = false,
                                 default = nil)
  if valid_604289 != nil:
    section.add "Engine", valid_604289
  var valid_604290 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_604290 = validateParameter(valid_604290, JBool, required = false, default = nil)
  if valid_604290 != nil:
    section.add "ListSupportedCharacterSets", valid_604290
  var valid_604291 = formData.getOrDefault("ListSupportedTimezones")
  valid_604291 = validateParameter(valid_604291, JBool, required = false, default = nil)
  if valid_604291 != nil:
    section.add "ListSupportedTimezones", valid_604291
  var valid_604292 = formData.getOrDefault("Filters")
  valid_604292 = validateParameter(valid_604292, JArray, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "Filters", valid_604292
  var valid_604293 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604293 = validateParameter(valid_604293, JString, required = false,
                                 default = nil)
  if valid_604293 != nil:
    section.add "DBParameterGroupFamily", valid_604293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604294: Call_PostDescribeDBEngineVersions_604272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_604294.validator(path, query, header, formData, body)
  let scheme = call_604294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604294.url(scheme.get, call_604294.host, call_604294.base,
                         call_604294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604294, url, valid)

proc call*(call_604295: Call_PostDescribeDBEngineVersions_604272;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_604296 = newJObject()
  var formData_604297 = newJObject()
  add(formData_604297, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_604297, "MaxRecords", newJInt(MaxRecords))
  add(formData_604297, "EngineVersion", newJString(EngineVersion))
  add(formData_604297, "Marker", newJString(Marker))
  add(formData_604297, "IncludeAll", newJBool(IncludeAll))
  add(formData_604297, "Engine", newJString(Engine))
  add(formData_604297, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_604296, "Action", newJString(Action))
  add(formData_604297, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_604297.add "Filters", Filters
  add(query_604296, "Version", newJString(Version))
  add(formData_604297, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_604295.call(nil, query_604296, nil, formData_604297, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_604272(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_604273, base: "/",
    url: url_PostDescribeDBEngineVersions_604274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_604247 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBEngineVersions_604249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_604248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_604250 = query.getOrDefault("Marker")
  valid_604250 = validateParameter(valid_604250, JString, required = false,
                                 default = nil)
  if valid_604250 != nil:
    section.add "Marker", valid_604250
  var valid_604251 = query.getOrDefault("ListSupportedTimezones")
  valid_604251 = validateParameter(valid_604251, JBool, required = false, default = nil)
  if valid_604251 != nil:
    section.add "ListSupportedTimezones", valid_604251
  var valid_604252 = query.getOrDefault("DBParameterGroupFamily")
  valid_604252 = validateParameter(valid_604252, JString, required = false,
                                 default = nil)
  if valid_604252 != nil:
    section.add "DBParameterGroupFamily", valid_604252
  var valid_604253 = query.getOrDefault("Engine")
  valid_604253 = validateParameter(valid_604253, JString, required = false,
                                 default = nil)
  if valid_604253 != nil:
    section.add "Engine", valid_604253
  var valid_604254 = query.getOrDefault("IncludeAll")
  valid_604254 = validateParameter(valid_604254, JBool, required = false, default = nil)
  if valid_604254 != nil:
    section.add "IncludeAll", valid_604254
  var valid_604255 = query.getOrDefault("EngineVersion")
  valid_604255 = validateParameter(valid_604255, JString, required = false,
                                 default = nil)
  if valid_604255 != nil:
    section.add "EngineVersion", valid_604255
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604256 = query.getOrDefault("Action")
  valid_604256 = validateParameter(valid_604256, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_604256 != nil:
    section.add "Action", valid_604256
  var valid_604257 = query.getOrDefault("ListSupportedCharacterSets")
  valid_604257 = validateParameter(valid_604257, JBool, required = false, default = nil)
  if valid_604257 != nil:
    section.add "ListSupportedCharacterSets", valid_604257
  var valid_604258 = query.getOrDefault("Version")
  valid_604258 = validateParameter(valid_604258, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604258 != nil:
    section.add "Version", valid_604258
  var valid_604259 = query.getOrDefault("Filters")
  valid_604259 = validateParameter(valid_604259, JArray, required = false,
                                 default = nil)
  if valid_604259 != nil:
    section.add "Filters", valid_604259
  var valid_604260 = query.getOrDefault("MaxRecords")
  valid_604260 = validateParameter(valid_604260, JInt, required = false, default = nil)
  if valid_604260 != nil:
    section.add "MaxRecords", valid_604260
  var valid_604261 = query.getOrDefault("DefaultOnly")
  valid_604261 = validateParameter(valid_604261, JBool, required = false, default = nil)
  if valid_604261 != nil:
    section.add "DefaultOnly", valid_604261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604262 = header.getOrDefault("X-Amz-Signature")
  valid_604262 = validateParameter(valid_604262, JString, required = false,
                                 default = nil)
  if valid_604262 != nil:
    section.add "X-Amz-Signature", valid_604262
  var valid_604263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604263 = validateParameter(valid_604263, JString, required = false,
                                 default = nil)
  if valid_604263 != nil:
    section.add "X-Amz-Content-Sha256", valid_604263
  var valid_604264 = header.getOrDefault("X-Amz-Date")
  valid_604264 = validateParameter(valid_604264, JString, required = false,
                                 default = nil)
  if valid_604264 != nil:
    section.add "X-Amz-Date", valid_604264
  var valid_604265 = header.getOrDefault("X-Amz-Credential")
  valid_604265 = validateParameter(valid_604265, JString, required = false,
                                 default = nil)
  if valid_604265 != nil:
    section.add "X-Amz-Credential", valid_604265
  var valid_604266 = header.getOrDefault("X-Amz-Security-Token")
  valid_604266 = validateParameter(valid_604266, JString, required = false,
                                 default = nil)
  if valid_604266 != nil:
    section.add "X-Amz-Security-Token", valid_604266
  var valid_604267 = header.getOrDefault("X-Amz-Algorithm")
  valid_604267 = validateParameter(valid_604267, JString, required = false,
                                 default = nil)
  if valid_604267 != nil:
    section.add "X-Amz-Algorithm", valid_604267
  var valid_604268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604268 = validateParameter(valid_604268, JString, required = false,
                                 default = nil)
  if valid_604268 != nil:
    section.add "X-Amz-SignedHeaders", valid_604268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604269: Call_GetDescribeDBEngineVersions_604247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_604269.validator(path, query, header, formData, body)
  let scheme = call_604269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604269.url(scheme.get, call_604269.host, call_604269.base,
                         call_604269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604269, url, valid)

proc call*(call_604270: Call_GetDescribeDBEngineVersions_604247;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_604271 = newJObject()
  add(query_604271, "Marker", newJString(Marker))
  add(query_604271, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_604271, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_604271, "Engine", newJString(Engine))
  add(query_604271, "IncludeAll", newJBool(IncludeAll))
  add(query_604271, "EngineVersion", newJString(EngineVersion))
  add(query_604271, "Action", newJString(Action))
  add(query_604271, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_604271, "Version", newJString(Version))
  if Filters != nil:
    query_604271.add "Filters", Filters
  add(query_604271, "MaxRecords", newJInt(MaxRecords))
  add(query_604271, "DefaultOnly", newJBool(DefaultOnly))
  result = call_604270.call(nil, query_604271, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_604247(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_604248, base: "/",
    url: url_GetDescribeDBEngineVersions_604249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_604318 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBInstanceAutomatedBackups_604320(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_604319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604321 = query.getOrDefault("Action")
  valid_604321 = validateParameter(valid_604321, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_604321 != nil:
    section.add "Action", valid_604321
  var valid_604322 = query.getOrDefault("Version")
  valid_604322 = validateParameter(valid_604322, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604322 != nil:
    section.add "Version", valid_604322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604323 = header.getOrDefault("X-Amz-Signature")
  valid_604323 = validateParameter(valid_604323, JString, required = false,
                                 default = nil)
  if valid_604323 != nil:
    section.add "X-Amz-Signature", valid_604323
  var valid_604324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604324 = validateParameter(valid_604324, JString, required = false,
                                 default = nil)
  if valid_604324 != nil:
    section.add "X-Amz-Content-Sha256", valid_604324
  var valid_604325 = header.getOrDefault("X-Amz-Date")
  valid_604325 = validateParameter(valid_604325, JString, required = false,
                                 default = nil)
  if valid_604325 != nil:
    section.add "X-Amz-Date", valid_604325
  var valid_604326 = header.getOrDefault("X-Amz-Credential")
  valid_604326 = validateParameter(valid_604326, JString, required = false,
                                 default = nil)
  if valid_604326 != nil:
    section.add "X-Amz-Credential", valid_604326
  var valid_604327 = header.getOrDefault("X-Amz-Security-Token")
  valid_604327 = validateParameter(valid_604327, JString, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "X-Amz-Security-Token", valid_604327
  var valid_604328 = header.getOrDefault("X-Amz-Algorithm")
  valid_604328 = validateParameter(valid_604328, JString, required = false,
                                 default = nil)
  if valid_604328 != nil:
    section.add "X-Amz-Algorithm", valid_604328
  var valid_604329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-SignedHeaders", valid_604329
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_604330 = formData.getOrDefault("MaxRecords")
  valid_604330 = validateParameter(valid_604330, JInt, required = false, default = nil)
  if valid_604330 != nil:
    section.add "MaxRecords", valid_604330
  var valid_604331 = formData.getOrDefault("Marker")
  valid_604331 = validateParameter(valid_604331, JString, required = false,
                                 default = nil)
  if valid_604331 != nil:
    section.add "Marker", valid_604331
  var valid_604332 = formData.getOrDefault("DbiResourceId")
  valid_604332 = validateParameter(valid_604332, JString, required = false,
                                 default = nil)
  if valid_604332 != nil:
    section.add "DbiResourceId", valid_604332
  var valid_604333 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604333 = validateParameter(valid_604333, JString, required = false,
                                 default = nil)
  if valid_604333 != nil:
    section.add "DBInstanceIdentifier", valid_604333
  var valid_604334 = formData.getOrDefault("Filters")
  valid_604334 = validateParameter(valid_604334, JArray, required = false,
                                 default = nil)
  if valid_604334 != nil:
    section.add "Filters", valid_604334
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604335: Call_PostDescribeDBInstanceAutomatedBackups_604318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_604335.validator(path, query, header, formData, body)
  let scheme = call_604335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604335.url(scheme.get, call_604335.host, call_604335.base,
                         call_604335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604335, url, valid)

proc call*(call_604336: Call_PostDescribeDBInstanceAutomatedBackups_604318;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_604337 = newJObject()
  var formData_604338 = newJObject()
  add(formData_604338, "MaxRecords", newJInt(MaxRecords))
  add(formData_604338, "Marker", newJString(Marker))
  add(formData_604338, "DbiResourceId", newJString(DbiResourceId))
  add(formData_604338, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604337, "Action", newJString(Action))
  if Filters != nil:
    formData_604338.add "Filters", Filters
  add(query_604337, "Version", newJString(Version))
  result = call_604336.call(nil, query_604337, nil, formData_604338, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_604318(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_604319, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_604320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_604298 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBInstanceAutomatedBackups_604300(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_604299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_604301 = query.getOrDefault("DbiResourceId")
  valid_604301 = validateParameter(valid_604301, JString, required = false,
                                 default = nil)
  if valid_604301 != nil:
    section.add "DbiResourceId", valid_604301
  var valid_604302 = query.getOrDefault("Marker")
  valid_604302 = validateParameter(valid_604302, JString, required = false,
                                 default = nil)
  if valid_604302 != nil:
    section.add "Marker", valid_604302
  var valid_604303 = query.getOrDefault("DBInstanceIdentifier")
  valid_604303 = validateParameter(valid_604303, JString, required = false,
                                 default = nil)
  if valid_604303 != nil:
    section.add "DBInstanceIdentifier", valid_604303
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604304 = query.getOrDefault("Action")
  valid_604304 = validateParameter(valid_604304, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_604304 != nil:
    section.add "Action", valid_604304
  var valid_604305 = query.getOrDefault("Version")
  valid_604305 = validateParameter(valid_604305, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604305 != nil:
    section.add "Version", valid_604305
  var valid_604306 = query.getOrDefault("Filters")
  valid_604306 = validateParameter(valid_604306, JArray, required = false,
                                 default = nil)
  if valid_604306 != nil:
    section.add "Filters", valid_604306
  var valid_604307 = query.getOrDefault("MaxRecords")
  valid_604307 = validateParameter(valid_604307, JInt, required = false, default = nil)
  if valid_604307 != nil:
    section.add "MaxRecords", valid_604307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604308 = header.getOrDefault("X-Amz-Signature")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Signature", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-Content-Sha256", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Date")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Date", valid_604310
  var valid_604311 = header.getOrDefault("X-Amz-Credential")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-Credential", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-Security-Token")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-Security-Token", valid_604312
  var valid_604313 = header.getOrDefault("X-Amz-Algorithm")
  valid_604313 = validateParameter(valid_604313, JString, required = false,
                                 default = nil)
  if valid_604313 != nil:
    section.add "X-Amz-Algorithm", valid_604313
  var valid_604314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604314 = validateParameter(valid_604314, JString, required = false,
                                 default = nil)
  if valid_604314 != nil:
    section.add "X-Amz-SignedHeaders", valid_604314
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604315: Call_GetDescribeDBInstanceAutomatedBackups_604298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_604315.validator(path, query, header, formData, body)
  let scheme = call_604315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604315.url(scheme.get, call_604315.host, call_604315.base,
                         call_604315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604315, url, valid)

proc call*(call_604316: Call_GetDescribeDBInstanceAutomatedBackups_604298;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_604317 = newJObject()
  add(query_604317, "DbiResourceId", newJString(DbiResourceId))
  add(query_604317, "Marker", newJString(Marker))
  add(query_604317, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604317, "Action", newJString(Action))
  add(query_604317, "Version", newJString(Version))
  if Filters != nil:
    query_604317.add "Filters", Filters
  add(query_604317, "MaxRecords", newJInt(MaxRecords))
  result = call_604316.call(nil, query_604317, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_604298(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_604299, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_604300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_604358 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBInstances_604360(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_604359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604361 = query.getOrDefault("Action")
  valid_604361 = validateParameter(valid_604361, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_604361 != nil:
    section.add "Action", valid_604361
  var valid_604362 = query.getOrDefault("Version")
  valid_604362 = validateParameter(valid_604362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604362 != nil:
    section.add "Version", valid_604362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604363 = header.getOrDefault("X-Amz-Signature")
  valid_604363 = validateParameter(valid_604363, JString, required = false,
                                 default = nil)
  if valid_604363 != nil:
    section.add "X-Amz-Signature", valid_604363
  var valid_604364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604364 = validateParameter(valid_604364, JString, required = false,
                                 default = nil)
  if valid_604364 != nil:
    section.add "X-Amz-Content-Sha256", valid_604364
  var valid_604365 = header.getOrDefault("X-Amz-Date")
  valid_604365 = validateParameter(valid_604365, JString, required = false,
                                 default = nil)
  if valid_604365 != nil:
    section.add "X-Amz-Date", valid_604365
  var valid_604366 = header.getOrDefault("X-Amz-Credential")
  valid_604366 = validateParameter(valid_604366, JString, required = false,
                                 default = nil)
  if valid_604366 != nil:
    section.add "X-Amz-Credential", valid_604366
  var valid_604367 = header.getOrDefault("X-Amz-Security-Token")
  valid_604367 = validateParameter(valid_604367, JString, required = false,
                                 default = nil)
  if valid_604367 != nil:
    section.add "X-Amz-Security-Token", valid_604367
  var valid_604368 = header.getOrDefault("X-Amz-Algorithm")
  valid_604368 = validateParameter(valid_604368, JString, required = false,
                                 default = nil)
  if valid_604368 != nil:
    section.add "X-Amz-Algorithm", valid_604368
  var valid_604369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604369 = validateParameter(valid_604369, JString, required = false,
                                 default = nil)
  if valid_604369 != nil:
    section.add "X-Amz-SignedHeaders", valid_604369
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_604370 = formData.getOrDefault("MaxRecords")
  valid_604370 = validateParameter(valid_604370, JInt, required = false, default = nil)
  if valid_604370 != nil:
    section.add "MaxRecords", valid_604370
  var valid_604371 = formData.getOrDefault("Marker")
  valid_604371 = validateParameter(valid_604371, JString, required = false,
                                 default = nil)
  if valid_604371 != nil:
    section.add "Marker", valid_604371
  var valid_604372 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604372 = validateParameter(valid_604372, JString, required = false,
                                 default = nil)
  if valid_604372 != nil:
    section.add "DBInstanceIdentifier", valid_604372
  var valid_604373 = formData.getOrDefault("Filters")
  valid_604373 = validateParameter(valid_604373, JArray, required = false,
                                 default = nil)
  if valid_604373 != nil:
    section.add "Filters", valid_604373
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604374: Call_PostDescribeDBInstances_604358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_604374.validator(path, query, header, formData, body)
  let scheme = call_604374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604374.url(scheme.get, call_604374.host, call_604374.base,
                         call_604374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604374, url, valid)

proc call*(call_604375: Call_PostDescribeDBInstances_604358; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_604376 = newJObject()
  var formData_604377 = newJObject()
  add(formData_604377, "MaxRecords", newJInt(MaxRecords))
  add(formData_604377, "Marker", newJString(Marker))
  add(formData_604377, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604376, "Action", newJString(Action))
  if Filters != nil:
    formData_604377.add "Filters", Filters
  add(query_604376, "Version", newJString(Version))
  result = call_604375.call(nil, query_604376, nil, formData_604377, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_604358(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_604359, base: "/",
    url: url_PostDescribeDBInstances_604360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_604339 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBInstances_604341(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_604340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604342 = query.getOrDefault("Marker")
  valid_604342 = validateParameter(valid_604342, JString, required = false,
                                 default = nil)
  if valid_604342 != nil:
    section.add "Marker", valid_604342
  var valid_604343 = query.getOrDefault("DBInstanceIdentifier")
  valid_604343 = validateParameter(valid_604343, JString, required = false,
                                 default = nil)
  if valid_604343 != nil:
    section.add "DBInstanceIdentifier", valid_604343
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604344 = query.getOrDefault("Action")
  valid_604344 = validateParameter(valid_604344, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_604344 != nil:
    section.add "Action", valid_604344
  var valid_604345 = query.getOrDefault("Version")
  valid_604345 = validateParameter(valid_604345, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604345 != nil:
    section.add "Version", valid_604345
  var valid_604346 = query.getOrDefault("Filters")
  valid_604346 = validateParameter(valid_604346, JArray, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "Filters", valid_604346
  var valid_604347 = query.getOrDefault("MaxRecords")
  valid_604347 = validateParameter(valid_604347, JInt, required = false, default = nil)
  if valid_604347 != nil:
    section.add "MaxRecords", valid_604347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604348 = header.getOrDefault("X-Amz-Signature")
  valid_604348 = validateParameter(valid_604348, JString, required = false,
                                 default = nil)
  if valid_604348 != nil:
    section.add "X-Amz-Signature", valid_604348
  var valid_604349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604349 = validateParameter(valid_604349, JString, required = false,
                                 default = nil)
  if valid_604349 != nil:
    section.add "X-Amz-Content-Sha256", valid_604349
  var valid_604350 = header.getOrDefault("X-Amz-Date")
  valid_604350 = validateParameter(valid_604350, JString, required = false,
                                 default = nil)
  if valid_604350 != nil:
    section.add "X-Amz-Date", valid_604350
  var valid_604351 = header.getOrDefault("X-Amz-Credential")
  valid_604351 = validateParameter(valid_604351, JString, required = false,
                                 default = nil)
  if valid_604351 != nil:
    section.add "X-Amz-Credential", valid_604351
  var valid_604352 = header.getOrDefault("X-Amz-Security-Token")
  valid_604352 = validateParameter(valid_604352, JString, required = false,
                                 default = nil)
  if valid_604352 != nil:
    section.add "X-Amz-Security-Token", valid_604352
  var valid_604353 = header.getOrDefault("X-Amz-Algorithm")
  valid_604353 = validateParameter(valid_604353, JString, required = false,
                                 default = nil)
  if valid_604353 != nil:
    section.add "X-Amz-Algorithm", valid_604353
  var valid_604354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604354 = validateParameter(valid_604354, JString, required = false,
                                 default = nil)
  if valid_604354 != nil:
    section.add "X-Amz-SignedHeaders", valid_604354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604355: Call_GetDescribeDBInstances_604339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ## 
  let valid = call_604355.validator(path, query, header, formData, body)
  let scheme = call_604355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604355.url(scheme.get, call_604355.host, call_604355.base,
                         call_604355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604355, url, valid)

proc call*(call_604356: Call_GetDescribeDBInstances_604339; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned RDS instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604357 = newJObject()
  add(query_604357, "Marker", newJString(Marker))
  add(query_604357, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604357, "Action", newJString(Action))
  add(query_604357, "Version", newJString(Version))
  if Filters != nil:
    query_604357.add "Filters", Filters
  add(query_604357, "MaxRecords", newJInt(MaxRecords))
  result = call_604356.call(nil, query_604357, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_604339(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_604340, base: "/",
    url: url_GetDescribeDBInstances_604341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_604400 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBLogFiles_604402(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_604401(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604403 = query.getOrDefault("Action")
  valid_604403 = validateParameter(valid_604403, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_604403 != nil:
    section.add "Action", valid_604403
  var valid_604404 = query.getOrDefault("Version")
  valid_604404 = validateParameter(valid_604404, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604404 != nil:
    section.add "Version", valid_604404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604405 = header.getOrDefault("X-Amz-Signature")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "X-Amz-Signature", valid_604405
  var valid_604406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604406 = validateParameter(valid_604406, JString, required = false,
                                 default = nil)
  if valid_604406 != nil:
    section.add "X-Amz-Content-Sha256", valid_604406
  var valid_604407 = header.getOrDefault("X-Amz-Date")
  valid_604407 = validateParameter(valid_604407, JString, required = false,
                                 default = nil)
  if valid_604407 != nil:
    section.add "X-Amz-Date", valid_604407
  var valid_604408 = header.getOrDefault("X-Amz-Credential")
  valid_604408 = validateParameter(valid_604408, JString, required = false,
                                 default = nil)
  if valid_604408 != nil:
    section.add "X-Amz-Credential", valid_604408
  var valid_604409 = header.getOrDefault("X-Amz-Security-Token")
  valid_604409 = validateParameter(valid_604409, JString, required = false,
                                 default = nil)
  if valid_604409 != nil:
    section.add "X-Amz-Security-Token", valid_604409
  var valid_604410 = header.getOrDefault("X-Amz-Algorithm")
  valid_604410 = validateParameter(valid_604410, JString, required = false,
                                 default = nil)
  if valid_604410 != nil:
    section.add "X-Amz-Algorithm", valid_604410
  var valid_604411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604411 = validateParameter(valid_604411, JString, required = false,
                                 default = nil)
  if valid_604411 != nil:
    section.add "X-Amz-SignedHeaders", valid_604411
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_604412 = formData.getOrDefault("FileSize")
  valid_604412 = validateParameter(valid_604412, JInt, required = false, default = nil)
  if valid_604412 != nil:
    section.add "FileSize", valid_604412
  var valid_604413 = formData.getOrDefault("MaxRecords")
  valid_604413 = validateParameter(valid_604413, JInt, required = false, default = nil)
  if valid_604413 != nil:
    section.add "MaxRecords", valid_604413
  var valid_604414 = formData.getOrDefault("Marker")
  valid_604414 = validateParameter(valid_604414, JString, required = false,
                                 default = nil)
  if valid_604414 != nil:
    section.add "Marker", valid_604414
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_604415 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604415 = validateParameter(valid_604415, JString, required = true,
                                 default = nil)
  if valid_604415 != nil:
    section.add "DBInstanceIdentifier", valid_604415
  var valid_604416 = formData.getOrDefault("FilenameContains")
  valid_604416 = validateParameter(valid_604416, JString, required = false,
                                 default = nil)
  if valid_604416 != nil:
    section.add "FilenameContains", valid_604416
  var valid_604417 = formData.getOrDefault("Filters")
  valid_604417 = validateParameter(valid_604417, JArray, required = false,
                                 default = nil)
  if valid_604417 != nil:
    section.add "Filters", valid_604417
  var valid_604418 = formData.getOrDefault("FileLastWritten")
  valid_604418 = validateParameter(valid_604418, JInt, required = false, default = nil)
  if valid_604418 != nil:
    section.add "FileLastWritten", valid_604418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604419: Call_PostDescribeDBLogFiles_604400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_604419.validator(path, query, header, formData, body)
  let scheme = call_604419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604419.url(scheme.get, call_604419.host, call_604419.base,
                         call_604419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604419, url, valid)

proc call*(call_604420: Call_PostDescribeDBLogFiles_604400;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_604421 = newJObject()
  var formData_604422 = newJObject()
  add(formData_604422, "FileSize", newJInt(FileSize))
  add(formData_604422, "MaxRecords", newJInt(MaxRecords))
  add(formData_604422, "Marker", newJString(Marker))
  add(formData_604422, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_604422, "FilenameContains", newJString(FilenameContains))
  add(query_604421, "Action", newJString(Action))
  if Filters != nil:
    formData_604422.add "Filters", Filters
  add(query_604421, "Version", newJString(Version))
  add(formData_604422, "FileLastWritten", newJInt(FileLastWritten))
  result = call_604420.call(nil, query_604421, nil, formData_604422, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_604400(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_604401, base: "/",
    url: url_PostDescribeDBLogFiles_604402, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_604378 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBLogFiles_604380(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_604379(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_604381 = query.getOrDefault("Marker")
  valid_604381 = validateParameter(valid_604381, JString, required = false,
                                 default = nil)
  if valid_604381 != nil:
    section.add "Marker", valid_604381
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_604382 = query.getOrDefault("DBInstanceIdentifier")
  valid_604382 = validateParameter(valid_604382, JString, required = true,
                                 default = nil)
  if valid_604382 != nil:
    section.add "DBInstanceIdentifier", valid_604382
  var valid_604383 = query.getOrDefault("FileLastWritten")
  valid_604383 = validateParameter(valid_604383, JInt, required = false, default = nil)
  if valid_604383 != nil:
    section.add "FileLastWritten", valid_604383
  var valid_604384 = query.getOrDefault("Action")
  valid_604384 = validateParameter(valid_604384, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_604384 != nil:
    section.add "Action", valid_604384
  var valid_604385 = query.getOrDefault("FilenameContains")
  valid_604385 = validateParameter(valid_604385, JString, required = false,
                                 default = nil)
  if valid_604385 != nil:
    section.add "FilenameContains", valid_604385
  var valid_604386 = query.getOrDefault("Version")
  valid_604386 = validateParameter(valid_604386, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604386 != nil:
    section.add "Version", valid_604386
  var valid_604387 = query.getOrDefault("Filters")
  valid_604387 = validateParameter(valid_604387, JArray, required = false,
                                 default = nil)
  if valid_604387 != nil:
    section.add "Filters", valid_604387
  var valid_604388 = query.getOrDefault("MaxRecords")
  valid_604388 = validateParameter(valid_604388, JInt, required = false, default = nil)
  if valid_604388 != nil:
    section.add "MaxRecords", valid_604388
  var valid_604389 = query.getOrDefault("FileSize")
  valid_604389 = validateParameter(valid_604389, JInt, required = false, default = nil)
  if valid_604389 != nil:
    section.add "FileSize", valid_604389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604390 = header.getOrDefault("X-Amz-Signature")
  valid_604390 = validateParameter(valid_604390, JString, required = false,
                                 default = nil)
  if valid_604390 != nil:
    section.add "X-Amz-Signature", valid_604390
  var valid_604391 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604391 = validateParameter(valid_604391, JString, required = false,
                                 default = nil)
  if valid_604391 != nil:
    section.add "X-Amz-Content-Sha256", valid_604391
  var valid_604392 = header.getOrDefault("X-Amz-Date")
  valid_604392 = validateParameter(valid_604392, JString, required = false,
                                 default = nil)
  if valid_604392 != nil:
    section.add "X-Amz-Date", valid_604392
  var valid_604393 = header.getOrDefault("X-Amz-Credential")
  valid_604393 = validateParameter(valid_604393, JString, required = false,
                                 default = nil)
  if valid_604393 != nil:
    section.add "X-Amz-Credential", valid_604393
  var valid_604394 = header.getOrDefault("X-Amz-Security-Token")
  valid_604394 = validateParameter(valid_604394, JString, required = false,
                                 default = nil)
  if valid_604394 != nil:
    section.add "X-Amz-Security-Token", valid_604394
  var valid_604395 = header.getOrDefault("X-Amz-Algorithm")
  valid_604395 = validateParameter(valid_604395, JString, required = false,
                                 default = nil)
  if valid_604395 != nil:
    section.add "X-Amz-Algorithm", valid_604395
  var valid_604396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604396 = validateParameter(valid_604396, JString, required = false,
                                 default = nil)
  if valid_604396 != nil:
    section.add "X-Amz-SignedHeaders", valid_604396
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604397: Call_GetDescribeDBLogFiles_604378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_604397.validator(path, query, header, formData, body)
  let scheme = call_604397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604397.url(scheme.get, call_604397.host, call_604397.base,
                         call_604397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604397, url, valid)

proc call*(call_604398: Call_GetDescribeDBLogFiles_604378;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_604399 = newJObject()
  add(query_604399, "Marker", newJString(Marker))
  add(query_604399, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604399, "FileLastWritten", newJInt(FileLastWritten))
  add(query_604399, "Action", newJString(Action))
  add(query_604399, "FilenameContains", newJString(FilenameContains))
  add(query_604399, "Version", newJString(Version))
  if Filters != nil:
    query_604399.add "Filters", Filters
  add(query_604399, "MaxRecords", newJInt(MaxRecords))
  add(query_604399, "FileSize", newJInt(FileSize))
  result = call_604398.call(nil, query_604399, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_604378(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_604379, base: "/",
    url: url_GetDescribeDBLogFiles_604380, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_604442 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBParameterGroups_604444(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_604443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604445 = query.getOrDefault("Action")
  valid_604445 = validateParameter(valid_604445, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_604445 != nil:
    section.add "Action", valid_604445
  var valid_604446 = query.getOrDefault("Version")
  valid_604446 = validateParameter(valid_604446, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604446 != nil:
    section.add "Version", valid_604446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604447 = header.getOrDefault("X-Amz-Signature")
  valid_604447 = validateParameter(valid_604447, JString, required = false,
                                 default = nil)
  if valid_604447 != nil:
    section.add "X-Amz-Signature", valid_604447
  var valid_604448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604448 = validateParameter(valid_604448, JString, required = false,
                                 default = nil)
  if valid_604448 != nil:
    section.add "X-Amz-Content-Sha256", valid_604448
  var valid_604449 = header.getOrDefault("X-Amz-Date")
  valid_604449 = validateParameter(valid_604449, JString, required = false,
                                 default = nil)
  if valid_604449 != nil:
    section.add "X-Amz-Date", valid_604449
  var valid_604450 = header.getOrDefault("X-Amz-Credential")
  valid_604450 = validateParameter(valid_604450, JString, required = false,
                                 default = nil)
  if valid_604450 != nil:
    section.add "X-Amz-Credential", valid_604450
  var valid_604451 = header.getOrDefault("X-Amz-Security-Token")
  valid_604451 = validateParameter(valid_604451, JString, required = false,
                                 default = nil)
  if valid_604451 != nil:
    section.add "X-Amz-Security-Token", valid_604451
  var valid_604452 = header.getOrDefault("X-Amz-Algorithm")
  valid_604452 = validateParameter(valid_604452, JString, required = false,
                                 default = nil)
  if valid_604452 != nil:
    section.add "X-Amz-Algorithm", valid_604452
  var valid_604453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604453 = validateParameter(valid_604453, JString, required = false,
                                 default = nil)
  if valid_604453 != nil:
    section.add "X-Amz-SignedHeaders", valid_604453
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604454 = formData.getOrDefault("MaxRecords")
  valid_604454 = validateParameter(valid_604454, JInt, required = false, default = nil)
  if valid_604454 != nil:
    section.add "MaxRecords", valid_604454
  var valid_604455 = formData.getOrDefault("DBParameterGroupName")
  valid_604455 = validateParameter(valid_604455, JString, required = false,
                                 default = nil)
  if valid_604455 != nil:
    section.add "DBParameterGroupName", valid_604455
  var valid_604456 = formData.getOrDefault("Marker")
  valid_604456 = validateParameter(valid_604456, JString, required = false,
                                 default = nil)
  if valid_604456 != nil:
    section.add "Marker", valid_604456
  var valid_604457 = formData.getOrDefault("Filters")
  valid_604457 = validateParameter(valid_604457, JArray, required = false,
                                 default = nil)
  if valid_604457 != nil:
    section.add "Filters", valid_604457
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604458: Call_PostDescribeDBParameterGroups_604442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_604458.validator(path, query, header, formData, body)
  let scheme = call_604458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604458.url(scheme.get, call_604458.host, call_604458.base,
                         call_604458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604458, url, valid)

proc call*(call_604459: Call_PostDescribeDBParameterGroups_604442;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604460 = newJObject()
  var formData_604461 = newJObject()
  add(formData_604461, "MaxRecords", newJInt(MaxRecords))
  add(formData_604461, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_604461, "Marker", newJString(Marker))
  add(query_604460, "Action", newJString(Action))
  if Filters != nil:
    formData_604461.add "Filters", Filters
  add(query_604460, "Version", newJString(Version))
  result = call_604459.call(nil, query_604460, nil, formData_604461, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_604442(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_604443, base: "/",
    url: url_PostDescribeDBParameterGroups_604444,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_604423 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBParameterGroups_604425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_604424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604426 = query.getOrDefault("Marker")
  valid_604426 = validateParameter(valid_604426, JString, required = false,
                                 default = nil)
  if valid_604426 != nil:
    section.add "Marker", valid_604426
  var valid_604427 = query.getOrDefault("DBParameterGroupName")
  valid_604427 = validateParameter(valid_604427, JString, required = false,
                                 default = nil)
  if valid_604427 != nil:
    section.add "DBParameterGroupName", valid_604427
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604428 = query.getOrDefault("Action")
  valid_604428 = validateParameter(valid_604428, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_604428 != nil:
    section.add "Action", valid_604428
  var valid_604429 = query.getOrDefault("Version")
  valid_604429 = validateParameter(valid_604429, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604429 != nil:
    section.add "Version", valid_604429
  var valid_604430 = query.getOrDefault("Filters")
  valid_604430 = validateParameter(valid_604430, JArray, required = false,
                                 default = nil)
  if valid_604430 != nil:
    section.add "Filters", valid_604430
  var valid_604431 = query.getOrDefault("MaxRecords")
  valid_604431 = validateParameter(valid_604431, JInt, required = false, default = nil)
  if valid_604431 != nil:
    section.add "MaxRecords", valid_604431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604432 = header.getOrDefault("X-Amz-Signature")
  valid_604432 = validateParameter(valid_604432, JString, required = false,
                                 default = nil)
  if valid_604432 != nil:
    section.add "X-Amz-Signature", valid_604432
  var valid_604433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604433 = validateParameter(valid_604433, JString, required = false,
                                 default = nil)
  if valid_604433 != nil:
    section.add "X-Amz-Content-Sha256", valid_604433
  var valid_604434 = header.getOrDefault("X-Amz-Date")
  valid_604434 = validateParameter(valid_604434, JString, required = false,
                                 default = nil)
  if valid_604434 != nil:
    section.add "X-Amz-Date", valid_604434
  var valid_604435 = header.getOrDefault("X-Amz-Credential")
  valid_604435 = validateParameter(valid_604435, JString, required = false,
                                 default = nil)
  if valid_604435 != nil:
    section.add "X-Amz-Credential", valid_604435
  var valid_604436 = header.getOrDefault("X-Amz-Security-Token")
  valid_604436 = validateParameter(valid_604436, JString, required = false,
                                 default = nil)
  if valid_604436 != nil:
    section.add "X-Amz-Security-Token", valid_604436
  var valid_604437 = header.getOrDefault("X-Amz-Algorithm")
  valid_604437 = validateParameter(valid_604437, JString, required = false,
                                 default = nil)
  if valid_604437 != nil:
    section.add "X-Amz-Algorithm", valid_604437
  var valid_604438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604438 = validateParameter(valid_604438, JString, required = false,
                                 default = nil)
  if valid_604438 != nil:
    section.add "X-Amz-SignedHeaders", valid_604438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604439: Call_GetDescribeDBParameterGroups_604423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_604439.validator(path, query, header, formData, body)
  let scheme = call_604439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604439.url(scheme.get, call_604439.host, call_604439.base,
                         call_604439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604439, url, valid)

proc call*(call_604440: Call_GetDescribeDBParameterGroups_604423;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604441 = newJObject()
  add(query_604441, "Marker", newJString(Marker))
  add(query_604441, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_604441, "Action", newJString(Action))
  add(query_604441, "Version", newJString(Version))
  if Filters != nil:
    query_604441.add "Filters", Filters
  add(query_604441, "MaxRecords", newJInt(MaxRecords))
  result = call_604440.call(nil, query_604441, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_604423(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_604424, base: "/",
    url: url_GetDescribeDBParameterGroups_604425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_604482 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBParameters_604484(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_604483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604485 = query.getOrDefault("Action")
  valid_604485 = validateParameter(valid_604485, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_604485 != nil:
    section.add "Action", valid_604485
  var valid_604486 = query.getOrDefault("Version")
  valid_604486 = validateParameter(valid_604486, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604486 != nil:
    section.add "Version", valid_604486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604487 = header.getOrDefault("X-Amz-Signature")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Signature", valid_604487
  var valid_604488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604488 = validateParameter(valid_604488, JString, required = false,
                                 default = nil)
  if valid_604488 != nil:
    section.add "X-Amz-Content-Sha256", valid_604488
  var valid_604489 = header.getOrDefault("X-Amz-Date")
  valid_604489 = validateParameter(valid_604489, JString, required = false,
                                 default = nil)
  if valid_604489 != nil:
    section.add "X-Amz-Date", valid_604489
  var valid_604490 = header.getOrDefault("X-Amz-Credential")
  valid_604490 = validateParameter(valid_604490, JString, required = false,
                                 default = nil)
  if valid_604490 != nil:
    section.add "X-Amz-Credential", valid_604490
  var valid_604491 = header.getOrDefault("X-Amz-Security-Token")
  valid_604491 = validateParameter(valid_604491, JString, required = false,
                                 default = nil)
  if valid_604491 != nil:
    section.add "X-Amz-Security-Token", valid_604491
  var valid_604492 = header.getOrDefault("X-Amz-Algorithm")
  valid_604492 = validateParameter(valid_604492, JString, required = false,
                                 default = nil)
  if valid_604492 != nil:
    section.add "X-Amz-Algorithm", valid_604492
  var valid_604493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604493 = validateParameter(valid_604493, JString, required = false,
                                 default = nil)
  if valid_604493 != nil:
    section.add "X-Amz-SignedHeaders", valid_604493
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604494 = formData.getOrDefault("Source")
  valid_604494 = validateParameter(valid_604494, JString, required = false,
                                 default = nil)
  if valid_604494 != nil:
    section.add "Source", valid_604494
  var valid_604495 = formData.getOrDefault("MaxRecords")
  valid_604495 = validateParameter(valid_604495, JInt, required = false, default = nil)
  if valid_604495 != nil:
    section.add "MaxRecords", valid_604495
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_604496 = formData.getOrDefault("DBParameterGroupName")
  valid_604496 = validateParameter(valid_604496, JString, required = true,
                                 default = nil)
  if valid_604496 != nil:
    section.add "DBParameterGroupName", valid_604496
  var valid_604497 = formData.getOrDefault("Marker")
  valid_604497 = validateParameter(valid_604497, JString, required = false,
                                 default = nil)
  if valid_604497 != nil:
    section.add "Marker", valid_604497
  var valid_604498 = formData.getOrDefault("Filters")
  valid_604498 = validateParameter(valid_604498, JArray, required = false,
                                 default = nil)
  if valid_604498 != nil:
    section.add "Filters", valid_604498
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604499: Call_PostDescribeDBParameters_604482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_604499.validator(path, query, header, formData, body)
  let scheme = call_604499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604499.url(scheme.get, call_604499.host, call_604499.base,
                         call_604499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604499, url, valid)

proc call*(call_604500: Call_PostDescribeDBParameters_604482;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604501 = newJObject()
  var formData_604502 = newJObject()
  add(formData_604502, "Source", newJString(Source))
  add(formData_604502, "MaxRecords", newJInt(MaxRecords))
  add(formData_604502, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_604502, "Marker", newJString(Marker))
  add(query_604501, "Action", newJString(Action))
  if Filters != nil:
    formData_604502.add "Filters", Filters
  add(query_604501, "Version", newJString(Version))
  result = call_604500.call(nil, query_604501, nil, formData_604502, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_604482(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_604483, base: "/",
    url: url_PostDescribeDBParameters_604484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_604462 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBParameters_604464(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_604463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604465 = query.getOrDefault("Marker")
  valid_604465 = validateParameter(valid_604465, JString, required = false,
                                 default = nil)
  if valid_604465 != nil:
    section.add "Marker", valid_604465
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_604466 = query.getOrDefault("DBParameterGroupName")
  valid_604466 = validateParameter(valid_604466, JString, required = true,
                                 default = nil)
  if valid_604466 != nil:
    section.add "DBParameterGroupName", valid_604466
  var valid_604467 = query.getOrDefault("Source")
  valid_604467 = validateParameter(valid_604467, JString, required = false,
                                 default = nil)
  if valid_604467 != nil:
    section.add "Source", valid_604467
  var valid_604468 = query.getOrDefault("Action")
  valid_604468 = validateParameter(valid_604468, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_604468 != nil:
    section.add "Action", valid_604468
  var valid_604469 = query.getOrDefault("Version")
  valid_604469 = validateParameter(valid_604469, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604469 != nil:
    section.add "Version", valid_604469
  var valid_604470 = query.getOrDefault("Filters")
  valid_604470 = validateParameter(valid_604470, JArray, required = false,
                                 default = nil)
  if valid_604470 != nil:
    section.add "Filters", valid_604470
  var valid_604471 = query.getOrDefault("MaxRecords")
  valid_604471 = validateParameter(valid_604471, JInt, required = false, default = nil)
  if valid_604471 != nil:
    section.add "MaxRecords", valid_604471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604472 = header.getOrDefault("X-Amz-Signature")
  valid_604472 = validateParameter(valid_604472, JString, required = false,
                                 default = nil)
  if valid_604472 != nil:
    section.add "X-Amz-Signature", valid_604472
  var valid_604473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604473 = validateParameter(valid_604473, JString, required = false,
                                 default = nil)
  if valid_604473 != nil:
    section.add "X-Amz-Content-Sha256", valid_604473
  var valid_604474 = header.getOrDefault("X-Amz-Date")
  valid_604474 = validateParameter(valid_604474, JString, required = false,
                                 default = nil)
  if valid_604474 != nil:
    section.add "X-Amz-Date", valid_604474
  var valid_604475 = header.getOrDefault("X-Amz-Credential")
  valid_604475 = validateParameter(valid_604475, JString, required = false,
                                 default = nil)
  if valid_604475 != nil:
    section.add "X-Amz-Credential", valid_604475
  var valid_604476 = header.getOrDefault("X-Amz-Security-Token")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-Security-Token", valid_604476
  var valid_604477 = header.getOrDefault("X-Amz-Algorithm")
  valid_604477 = validateParameter(valid_604477, JString, required = false,
                                 default = nil)
  if valid_604477 != nil:
    section.add "X-Amz-Algorithm", valid_604477
  var valid_604478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604478 = validateParameter(valid_604478, JString, required = false,
                                 default = nil)
  if valid_604478 != nil:
    section.add "X-Amz-SignedHeaders", valid_604478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604479: Call_GetDescribeDBParameters_604462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_604479.validator(path, query, header, formData, body)
  let scheme = call_604479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604479.url(scheme.get, call_604479.host, call_604479.base,
                         call_604479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604479, url, valid)

proc call*(call_604480: Call_GetDescribeDBParameters_604462;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604481 = newJObject()
  add(query_604481, "Marker", newJString(Marker))
  add(query_604481, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_604481, "Source", newJString(Source))
  add(query_604481, "Action", newJString(Action))
  add(query_604481, "Version", newJString(Version))
  if Filters != nil:
    query_604481.add "Filters", Filters
  add(query_604481, "MaxRecords", newJInt(MaxRecords))
  result = call_604480.call(nil, query_604481, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_604462(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_604463, base: "/",
    url: url_GetDescribeDBParameters_604464, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_604522 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBProxies_604524(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_604523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604525 = query.getOrDefault("Action")
  valid_604525 = validateParameter(valid_604525, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_604525 != nil:
    section.add "Action", valid_604525
  var valid_604526 = query.getOrDefault("Version")
  valid_604526 = validateParameter(valid_604526, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604526 != nil:
    section.add "Version", valid_604526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604527 = header.getOrDefault("X-Amz-Signature")
  valid_604527 = validateParameter(valid_604527, JString, required = false,
                                 default = nil)
  if valid_604527 != nil:
    section.add "X-Amz-Signature", valid_604527
  var valid_604528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604528 = validateParameter(valid_604528, JString, required = false,
                                 default = nil)
  if valid_604528 != nil:
    section.add "X-Amz-Content-Sha256", valid_604528
  var valid_604529 = header.getOrDefault("X-Amz-Date")
  valid_604529 = validateParameter(valid_604529, JString, required = false,
                                 default = nil)
  if valid_604529 != nil:
    section.add "X-Amz-Date", valid_604529
  var valid_604530 = header.getOrDefault("X-Amz-Credential")
  valid_604530 = validateParameter(valid_604530, JString, required = false,
                                 default = nil)
  if valid_604530 != nil:
    section.add "X-Amz-Credential", valid_604530
  var valid_604531 = header.getOrDefault("X-Amz-Security-Token")
  valid_604531 = validateParameter(valid_604531, JString, required = false,
                                 default = nil)
  if valid_604531 != nil:
    section.add "X-Amz-Security-Token", valid_604531
  var valid_604532 = header.getOrDefault("X-Amz-Algorithm")
  valid_604532 = validateParameter(valid_604532, JString, required = false,
                                 default = nil)
  if valid_604532 != nil:
    section.add "X-Amz-Algorithm", valid_604532
  var valid_604533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604533 = validateParameter(valid_604533, JString, required = false,
                                 default = nil)
  if valid_604533 != nil:
    section.add "X-Amz-SignedHeaders", valid_604533
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_604534 = formData.getOrDefault("MaxRecords")
  valid_604534 = validateParameter(valid_604534, JInt, required = false, default = nil)
  if valid_604534 != nil:
    section.add "MaxRecords", valid_604534
  var valid_604535 = formData.getOrDefault("Marker")
  valid_604535 = validateParameter(valid_604535, JString, required = false,
                                 default = nil)
  if valid_604535 != nil:
    section.add "Marker", valid_604535
  var valid_604536 = formData.getOrDefault("DBProxyName")
  valid_604536 = validateParameter(valid_604536, JString, required = false,
                                 default = nil)
  if valid_604536 != nil:
    section.add "DBProxyName", valid_604536
  var valid_604537 = formData.getOrDefault("Filters")
  valid_604537 = validateParameter(valid_604537, JArray, required = false,
                                 default = nil)
  if valid_604537 != nil:
    section.add "Filters", valid_604537
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604538: Call_PostDescribeDBProxies_604522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_604538.validator(path, query, header, formData, body)
  let scheme = call_604538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604538.url(scheme.get, call_604538.host, call_604538.base,
                         call_604538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604538, url, valid)

proc call*(call_604539: Call_PostDescribeDBProxies_604522; MaxRecords: int = 0;
          Marker: string = ""; DBProxyName: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_604540 = newJObject()
  var formData_604541 = newJObject()
  add(formData_604541, "MaxRecords", newJInt(MaxRecords))
  add(formData_604541, "Marker", newJString(Marker))
  add(formData_604541, "DBProxyName", newJString(DBProxyName))
  add(query_604540, "Action", newJString(Action))
  if Filters != nil:
    formData_604541.add "Filters", Filters
  add(query_604540, "Version", newJString(Version))
  result = call_604539.call(nil, query_604540, nil, formData_604541, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_604522(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_604523, base: "/",
    url: url_PostDescribeDBProxies_604524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_604503 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBProxies_604505(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_604504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604506 = query.getOrDefault("Marker")
  valid_604506 = validateParameter(valid_604506, JString, required = false,
                                 default = nil)
  if valid_604506 != nil:
    section.add "Marker", valid_604506
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604507 = query.getOrDefault("Action")
  valid_604507 = validateParameter(valid_604507, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_604507 != nil:
    section.add "Action", valid_604507
  var valid_604508 = query.getOrDefault("Version")
  valid_604508 = validateParameter(valid_604508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604508 != nil:
    section.add "Version", valid_604508
  var valid_604509 = query.getOrDefault("DBProxyName")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "DBProxyName", valid_604509
  var valid_604510 = query.getOrDefault("Filters")
  valid_604510 = validateParameter(valid_604510, JArray, required = false,
                                 default = nil)
  if valid_604510 != nil:
    section.add "Filters", valid_604510
  var valid_604511 = query.getOrDefault("MaxRecords")
  valid_604511 = validateParameter(valid_604511, JInt, required = false, default = nil)
  if valid_604511 != nil:
    section.add "MaxRecords", valid_604511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604512 = header.getOrDefault("X-Amz-Signature")
  valid_604512 = validateParameter(valid_604512, JString, required = false,
                                 default = nil)
  if valid_604512 != nil:
    section.add "X-Amz-Signature", valid_604512
  var valid_604513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604513 = validateParameter(valid_604513, JString, required = false,
                                 default = nil)
  if valid_604513 != nil:
    section.add "X-Amz-Content-Sha256", valid_604513
  var valid_604514 = header.getOrDefault("X-Amz-Date")
  valid_604514 = validateParameter(valid_604514, JString, required = false,
                                 default = nil)
  if valid_604514 != nil:
    section.add "X-Amz-Date", valid_604514
  var valid_604515 = header.getOrDefault("X-Amz-Credential")
  valid_604515 = validateParameter(valid_604515, JString, required = false,
                                 default = nil)
  if valid_604515 != nil:
    section.add "X-Amz-Credential", valid_604515
  var valid_604516 = header.getOrDefault("X-Amz-Security-Token")
  valid_604516 = validateParameter(valid_604516, JString, required = false,
                                 default = nil)
  if valid_604516 != nil:
    section.add "X-Amz-Security-Token", valid_604516
  var valid_604517 = header.getOrDefault("X-Amz-Algorithm")
  valid_604517 = validateParameter(valid_604517, JString, required = false,
                                 default = nil)
  if valid_604517 != nil:
    section.add "X-Amz-Algorithm", valid_604517
  var valid_604518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604518 = validateParameter(valid_604518, JString, required = false,
                                 default = nil)
  if valid_604518 != nil:
    section.add "X-Amz-SignedHeaders", valid_604518
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604519: Call_GetDescribeDBProxies_604503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_604519.validator(path, query, header, formData, body)
  let scheme = call_604519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604519.url(scheme.get, call_604519.host, call_604519.base,
                         call_604519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604519, url, valid)

proc call*(call_604520: Call_GetDescribeDBProxies_604503; Marker: string = "";
          Action: string = "DescribeDBProxies"; Version: string = "2014-10-31";
          DBProxyName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604521 = newJObject()
  add(query_604521, "Marker", newJString(Marker))
  add(query_604521, "Action", newJString(Action))
  add(query_604521, "Version", newJString(Version))
  add(query_604521, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_604521.add "Filters", Filters
  add(query_604521, "MaxRecords", newJInt(MaxRecords))
  result = call_604520.call(nil, query_604521, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_604503(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_604504, base: "/",
    url: url_GetDescribeDBProxies_604505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_604562 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBProxyTargetGroups_604564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_604563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604565 = query.getOrDefault("Action")
  valid_604565 = validateParameter(valid_604565, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_604565 != nil:
    section.add "Action", valid_604565
  var valid_604566 = query.getOrDefault("Version")
  valid_604566 = validateParameter(valid_604566, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604566 != nil:
    section.add "Version", valid_604566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604567 = header.getOrDefault("X-Amz-Signature")
  valid_604567 = validateParameter(valid_604567, JString, required = false,
                                 default = nil)
  if valid_604567 != nil:
    section.add "X-Amz-Signature", valid_604567
  var valid_604568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604568 = validateParameter(valid_604568, JString, required = false,
                                 default = nil)
  if valid_604568 != nil:
    section.add "X-Amz-Content-Sha256", valid_604568
  var valid_604569 = header.getOrDefault("X-Amz-Date")
  valid_604569 = validateParameter(valid_604569, JString, required = false,
                                 default = nil)
  if valid_604569 != nil:
    section.add "X-Amz-Date", valid_604569
  var valid_604570 = header.getOrDefault("X-Amz-Credential")
  valid_604570 = validateParameter(valid_604570, JString, required = false,
                                 default = nil)
  if valid_604570 != nil:
    section.add "X-Amz-Credential", valid_604570
  var valid_604571 = header.getOrDefault("X-Amz-Security-Token")
  valid_604571 = validateParameter(valid_604571, JString, required = false,
                                 default = nil)
  if valid_604571 != nil:
    section.add "X-Amz-Security-Token", valid_604571
  var valid_604572 = header.getOrDefault("X-Amz-Algorithm")
  valid_604572 = validateParameter(valid_604572, JString, required = false,
                                 default = nil)
  if valid_604572 != nil:
    section.add "X-Amz-Algorithm", valid_604572
  var valid_604573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604573 = validateParameter(valid_604573, JString, required = false,
                                 default = nil)
  if valid_604573 != nil:
    section.add "X-Amz-SignedHeaders", valid_604573
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_604574 = formData.getOrDefault("MaxRecords")
  valid_604574 = validateParameter(valid_604574, JInt, required = false, default = nil)
  if valid_604574 != nil:
    section.add "MaxRecords", valid_604574
  var valid_604575 = formData.getOrDefault("TargetGroupName")
  valid_604575 = validateParameter(valid_604575, JString, required = false,
                                 default = nil)
  if valid_604575 != nil:
    section.add "TargetGroupName", valid_604575
  var valid_604576 = formData.getOrDefault("Marker")
  valid_604576 = validateParameter(valid_604576, JString, required = false,
                                 default = nil)
  if valid_604576 != nil:
    section.add "Marker", valid_604576
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_604577 = formData.getOrDefault("DBProxyName")
  valid_604577 = validateParameter(valid_604577, JString, required = true,
                                 default = nil)
  if valid_604577 != nil:
    section.add "DBProxyName", valid_604577
  var valid_604578 = formData.getOrDefault("Filters")
  valid_604578 = validateParameter(valid_604578, JArray, required = false,
                                 default = nil)
  if valid_604578 != nil:
    section.add "Filters", valid_604578
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604579: Call_PostDescribeDBProxyTargetGroups_604562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_604579.validator(path, query, header, formData, body)
  let scheme = call_604579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604579.url(scheme.get, call_604579.host, call_604579.base,
                         call_604579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604579, url, valid)

proc call*(call_604580: Call_PostDescribeDBProxyTargetGroups_604562;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargetGroups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_604581 = newJObject()
  var formData_604582 = newJObject()
  add(formData_604582, "MaxRecords", newJInt(MaxRecords))
  add(formData_604582, "TargetGroupName", newJString(TargetGroupName))
  add(formData_604582, "Marker", newJString(Marker))
  add(formData_604582, "DBProxyName", newJString(DBProxyName))
  add(query_604581, "Action", newJString(Action))
  if Filters != nil:
    formData_604582.add "Filters", Filters
  add(query_604581, "Version", newJString(Version))
  result = call_604580.call(nil, query_604581, nil, formData_604582, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_604562(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_604563, base: "/",
    url: url_PostDescribeDBProxyTargetGroups_604564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_604542 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBProxyTargetGroups_604544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_604543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604545 = query.getOrDefault("Marker")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "Marker", valid_604545
  var valid_604546 = query.getOrDefault("TargetGroupName")
  valid_604546 = validateParameter(valid_604546, JString, required = false,
                                 default = nil)
  if valid_604546 != nil:
    section.add "TargetGroupName", valid_604546
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604547 = query.getOrDefault("Action")
  valid_604547 = validateParameter(valid_604547, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_604547 != nil:
    section.add "Action", valid_604547
  var valid_604548 = query.getOrDefault("Version")
  valid_604548 = validateParameter(valid_604548, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604548 != nil:
    section.add "Version", valid_604548
  var valid_604549 = query.getOrDefault("DBProxyName")
  valid_604549 = validateParameter(valid_604549, JString, required = true,
                                 default = nil)
  if valid_604549 != nil:
    section.add "DBProxyName", valid_604549
  var valid_604550 = query.getOrDefault("Filters")
  valid_604550 = validateParameter(valid_604550, JArray, required = false,
                                 default = nil)
  if valid_604550 != nil:
    section.add "Filters", valid_604550
  var valid_604551 = query.getOrDefault("MaxRecords")
  valid_604551 = validateParameter(valid_604551, JInt, required = false, default = nil)
  if valid_604551 != nil:
    section.add "MaxRecords", valid_604551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604552 = header.getOrDefault("X-Amz-Signature")
  valid_604552 = validateParameter(valid_604552, JString, required = false,
                                 default = nil)
  if valid_604552 != nil:
    section.add "X-Amz-Signature", valid_604552
  var valid_604553 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604553 = validateParameter(valid_604553, JString, required = false,
                                 default = nil)
  if valid_604553 != nil:
    section.add "X-Amz-Content-Sha256", valid_604553
  var valid_604554 = header.getOrDefault("X-Amz-Date")
  valid_604554 = validateParameter(valid_604554, JString, required = false,
                                 default = nil)
  if valid_604554 != nil:
    section.add "X-Amz-Date", valid_604554
  var valid_604555 = header.getOrDefault("X-Amz-Credential")
  valid_604555 = validateParameter(valid_604555, JString, required = false,
                                 default = nil)
  if valid_604555 != nil:
    section.add "X-Amz-Credential", valid_604555
  var valid_604556 = header.getOrDefault("X-Amz-Security-Token")
  valid_604556 = validateParameter(valid_604556, JString, required = false,
                                 default = nil)
  if valid_604556 != nil:
    section.add "X-Amz-Security-Token", valid_604556
  var valid_604557 = header.getOrDefault("X-Amz-Algorithm")
  valid_604557 = validateParameter(valid_604557, JString, required = false,
                                 default = nil)
  if valid_604557 != nil:
    section.add "X-Amz-Algorithm", valid_604557
  var valid_604558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604558 = validateParameter(valid_604558, JString, required = false,
                                 default = nil)
  if valid_604558 != nil:
    section.add "X-Amz-SignedHeaders", valid_604558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604559: Call_GetDescribeDBProxyTargetGroups_604542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_604559.validator(path, query, header, formData, body)
  let scheme = call_604559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604559.url(scheme.get, call_604559.host, call_604559.base,
                         call_604559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604559, url, valid)

proc call*(call_604560: Call_GetDescribeDBProxyTargetGroups_604542;
          DBProxyName: string; Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604561 = newJObject()
  add(query_604561, "Marker", newJString(Marker))
  add(query_604561, "TargetGroupName", newJString(TargetGroupName))
  add(query_604561, "Action", newJString(Action))
  add(query_604561, "Version", newJString(Version))
  add(query_604561, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_604561.add "Filters", Filters
  add(query_604561, "MaxRecords", newJInt(MaxRecords))
  result = call_604560.call(nil, query_604561, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_604542(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_604543, base: "/",
    url: url_GetDescribeDBProxyTargetGroups_604544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_604603 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBProxyTargets_604605(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_604604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604606 = query.getOrDefault("Action")
  valid_604606 = validateParameter(valid_604606, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_604606 != nil:
    section.add "Action", valid_604606
  var valid_604607 = query.getOrDefault("Version")
  valid_604607 = validateParameter(valid_604607, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604607 != nil:
    section.add "Version", valid_604607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604608 = header.getOrDefault("X-Amz-Signature")
  valid_604608 = validateParameter(valid_604608, JString, required = false,
                                 default = nil)
  if valid_604608 != nil:
    section.add "X-Amz-Signature", valid_604608
  var valid_604609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604609 = validateParameter(valid_604609, JString, required = false,
                                 default = nil)
  if valid_604609 != nil:
    section.add "X-Amz-Content-Sha256", valid_604609
  var valid_604610 = header.getOrDefault("X-Amz-Date")
  valid_604610 = validateParameter(valid_604610, JString, required = false,
                                 default = nil)
  if valid_604610 != nil:
    section.add "X-Amz-Date", valid_604610
  var valid_604611 = header.getOrDefault("X-Amz-Credential")
  valid_604611 = validateParameter(valid_604611, JString, required = false,
                                 default = nil)
  if valid_604611 != nil:
    section.add "X-Amz-Credential", valid_604611
  var valid_604612 = header.getOrDefault("X-Amz-Security-Token")
  valid_604612 = validateParameter(valid_604612, JString, required = false,
                                 default = nil)
  if valid_604612 != nil:
    section.add "X-Amz-Security-Token", valid_604612
  var valid_604613 = header.getOrDefault("X-Amz-Algorithm")
  valid_604613 = validateParameter(valid_604613, JString, required = false,
                                 default = nil)
  if valid_604613 != nil:
    section.add "X-Amz-Algorithm", valid_604613
  var valid_604614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604614 = validateParameter(valid_604614, JString, required = false,
                                 default = nil)
  if valid_604614 != nil:
    section.add "X-Amz-SignedHeaders", valid_604614
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_604615 = formData.getOrDefault("MaxRecords")
  valid_604615 = validateParameter(valid_604615, JInt, required = false, default = nil)
  if valid_604615 != nil:
    section.add "MaxRecords", valid_604615
  var valid_604616 = formData.getOrDefault("TargetGroupName")
  valid_604616 = validateParameter(valid_604616, JString, required = false,
                                 default = nil)
  if valid_604616 != nil:
    section.add "TargetGroupName", valid_604616
  var valid_604617 = formData.getOrDefault("Marker")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "Marker", valid_604617
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_604618 = formData.getOrDefault("DBProxyName")
  valid_604618 = validateParameter(valid_604618, JString, required = true,
                                 default = nil)
  if valid_604618 != nil:
    section.add "DBProxyName", valid_604618
  var valid_604619 = formData.getOrDefault("Filters")
  valid_604619 = validateParameter(valid_604619, JArray, required = false,
                                 default = nil)
  if valid_604619 != nil:
    section.add "Filters", valid_604619
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604620: Call_PostDescribeDBProxyTargets_604603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_604620.validator(path, query, header, formData, body)
  let scheme = call_604620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604620.url(scheme.get, call_604620.host, call_604620.base,
                         call_604620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604620, url, valid)

proc call*(call_604621: Call_PostDescribeDBProxyTargets_604603;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargets";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_604622 = newJObject()
  var formData_604623 = newJObject()
  add(formData_604623, "MaxRecords", newJInt(MaxRecords))
  add(formData_604623, "TargetGroupName", newJString(TargetGroupName))
  add(formData_604623, "Marker", newJString(Marker))
  add(formData_604623, "DBProxyName", newJString(DBProxyName))
  add(query_604622, "Action", newJString(Action))
  if Filters != nil:
    formData_604623.add "Filters", Filters
  add(query_604622, "Version", newJString(Version))
  result = call_604621.call(nil, query_604622, nil, formData_604623, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_604603(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_604604, base: "/",
    url: url_PostDescribeDBProxyTargets_604605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_604583 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBProxyTargets_604585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_604584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604586 = query.getOrDefault("Marker")
  valid_604586 = validateParameter(valid_604586, JString, required = false,
                                 default = nil)
  if valid_604586 != nil:
    section.add "Marker", valid_604586
  var valid_604587 = query.getOrDefault("TargetGroupName")
  valid_604587 = validateParameter(valid_604587, JString, required = false,
                                 default = nil)
  if valid_604587 != nil:
    section.add "TargetGroupName", valid_604587
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604588 = query.getOrDefault("Action")
  valid_604588 = validateParameter(valid_604588, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_604588 != nil:
    section.add "Action", valid_604588
  var valid_604589 = query.getOrDefault("Version")
  valid_604589 = validateParameter(valid_604589, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604589 != nil:
    section.add "Version", valid_604589
  var valid_604590 = query.getOrDefault("DBProxyName")
  valid_604590 = validateParameter(valid_604590, JString, required = true,
                                 default = nil)
  if valid_604590 != nil:
    section.add "DBProxyName", valid_604590
  var valid_604591 = query.getOrDefault("Filters")
  valid_604591 = validateParameter(valid_604591, JArray, required = false,
                                 default = nil)
  if valid_604591 != nil:
    section.add "Filters", valid_604591
  var valid_604592 = query.getOrDefault("MaxRecords")
  valid_604592 = validateParameter(valid_604592, JInt, required = false, default = nil)
  if valid_604592 != nil:
    section.add "MaxRecords", valid_604592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604593 = header.getOrDefault("X-Amz-Signature")
  valid_604593 = validateParameter(valid_604593, JString, required = false,
                                 default = nil)
  if valid_604593 != nil:
    section.add "X-Amz-Signature", valid_604593
  var valid_604594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604594 = validateParameter(valid_604594, JString, required = false,
                                 default = nil)
  if valid_604594 != nil:
    section.add "X-Amz-Content-Sha256", valid_604594
  var valid_604595 = header.getOrDefault("X-Amz-Date")
  valid_604595 = validateParameter(valid_604595, JString, required = false,
                                 default = nil)
  if valid_604595 != nil:
    section.add "X-Amz-Date", valid_604595
  var valid_604596 = header.getOrDefault("X-Amz-Credential")
  valid_604596 = validateParameter(valid_604596, JString, required = false,
                                 default = nil)
  if valid_604596 != nil:
    section.add "X-Amz-Credential", valid_604596
  var valid_604597 = header.getOrDefault("X-Amz-Security-Token")
  valid_604597 = validateParameter(valid_604597, JString, required = false,
                                 default = nil)
  if valid_604597 != nil:
    section.add "X-Amz-Security-Token", valid_604597
  var valid_604598 = header.getOrDefault("X-Amz-Algorithm")
  valid_604598 = validateParameter(valid_604598, JString, required = false,
                                 default = nil)
  if valid_604598 != nil:
    section.add "X-Amz-Algorithm", valid_604598
  var valid_604599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604599 = validateParameter(valid_604599, JString, required = false,
                                 default = nil)
  if valid_604599 != nil:
    section.add "X-Amz-SignedHeaders", valid_604599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604600: Call_GetDescribeDBProxyTargets_604583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_604600.validator(path, query, header, formData, body)
  let scheme = call_604600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604600.url(scheme.get, call_604600.host, call_604600.base,
                         call_604600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604600, url, valid)

proc call*(call_604601: Call_GetDescribeDBProxyTargets_604583; DBProxyName: string;
          Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargets"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604602 = newJObject()
  add(query_604602, "Marker", newJString(Marker))
  add(query_604602, "TargetGroupName", newJString(TargetGroupName))
  add(query_604602, "Action", newJString(Action))
  add(query_604602, "Version", newJString(Version))
  add(query_604602, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_604602.add "Filters", Filters
  add(query_604602, "MaxRecords", newJInt(MaxRecords))
  result = call_604601.call(nil, query_604602, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_604583(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_604584, base: "/",
    url: url_GetDescribeDBProxyTargets_604585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_604643 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBSecurityGroups_604645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_604644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604646 = query.getOrDefault("Action")
  valid_604646 = validateParameter(valid_604646, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_604646 != nil:
    section.add "Action", valid_604646
  var valid_604647 = query.getOrDefault("Version")
  valid_604647 = validateParameter(valid_604647, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604647 != nil:
    section.add "Version", valid_604647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604648 = header.getOrDefault("X-Amz-Signature")
  valid_604648 = validateParameter(valid_604648, JString, required = false,
                                 default = nil)
  if valid_604648 != nil:
    section.add "X-Amz-Signature", valid_604648
  var valid_604649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604649 = validateParameter(valid_604649, JString, required = false,
                                 default = nil)
  if valid_604649 != nil:
    section.add "X-Amz-Content-Sha256", valid_604649
  var valid_604650 = header.getOrDefault("X-Amz-Date")
  valid_604650 = validateParameter(valid_604650, JString, required = false,
                                 default = nil)
  if valid_604650 != nil:
    section.add "X-Amz-Date", valid_604650
  var valid_604651 = header.getOrDefault("X-Amz-Credential")
  valid_604651 = validateParameter(valid_604651, JString, required = false,
                                 default = nil)
  if valid_604651 != nil:
    section.add "X-Amz-Credential", valid_604651
  var valid_604652 = header.getOrDefault("X-Amz-Security-Token")
  valid_604652 = validateParameter(valid_604652, JString, required = false,
                                 default = nil)
  if valid_604652 != nil:
    section.add "X-Amz-Security-Token", valid_604652
  var valid_604653 = header.getOrDefault("X-Amz-Algorithm")
  valid_604653 = validateParameter(valid_604653, JString, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "X-Amz-Algorithm", valid_604653
  var valid_604654 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604654 = validateParameter(valid_604654, JString, required = false,
                                 default = nil)
  if valid_604654 != nil:
    section.add "X-Amz-SignedHeaders", valid_604654
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604655 = formData.getOrDefault("DBSecurityGroupName")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "DBSecurityGroupName", valid_604655
  var valid_604656 = formData.getOrDefault("MaxRecords")
  valid_604656 = validateParameter(valid_604656, JInt, required = false, default = nil)
  if valid_604656 != nil:
    section.add "MaxRecords", valid_604656
  var valid_604657 = formData.getOrDefault("Marker")
  valid_604657 = validateParameter(valid_604657, JString, required = false,
                                 default = nil)
  if valid_604657 != nil:
    section.add "Marker", valid_604657
  var valid_604658 = formData.getOrDefault("Filters")
  valid_604658 = validateParameter(valid_604658, JArray, required = false,
                                 default = nil)
  if valid_604658 != nil:
    section.add "Filters", valid_604658
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604659: Call_PostDescribeDBSecurityGroups_604643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_604659.validator(path, query, header, formData, body)
  let scheme = call_604659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604659.url(scheme.get, call_604659.host, call_604659.base,
                         call_604659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604659, url, valid)

proc call*(call_604660: Call_PostDescribeDBSecurityGroups_604643;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604661 = newJObject()
  var formData_604662 = newJObject()
  add(formData_604662, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_604662, "MaxRecords", newJInt(MaxRecords))
  add(formData_604662, "Marker", newJString(Marker))
  add(query_604661, "Action", newJString(Action))
  if Filters != nil:
    formData_604662.add "Filters", Filters
  add(query_604661, "Version", newJString(Version))
  result = call_604660.call(nil, query_604661, nil, formData_604662, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_604643(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_604644, base: "/",
    url: url_PostDescribeDBSecurityGroups_604645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_604624 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBSecurityGroups_604626(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_604625(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604627 = query.getOrDefault("Marker")
  valid_604627 = validateParameter(valid_604627, JString, required = false,
                                 default = nil)
  if valid_604627 != nil:
    section.add "Marker", valid_604627
  var valid_604628 = query.getOrDefault("DBSecurityGroupName")
  valid_604628 = validateParameter(valid_604628, JString, required = false,
                                 default = nil)
  if valid_604628 != nil:
    section.add "DBSecurityGroupName", valid_604628
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604629 = query.getOrDefault("Action")
  valid_604629 = validateParameter(valid_604629, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_604629 != nil:
    section.add "Action", valid_604629
  var valid_604630 = query.getOrDefault("Version")
  valid_604630 = validateParameter(valid_604630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604630 != nil:
    section.add "Version", valid_604630
  var valid_604631 = query.getOrDefault("Filters")
  valid_604631 = validateParameter(valid_604631, JArray, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "Filters", valid_604631
  var valid_604632 = query.getOrDefault("MaxRecords")
  valid_604632 = validateParameter(valid_604632, JInt, required = false, default = nil)
  if valid_604632 != nil:
    section.add "MaxRecords", valid_604632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604633 = header.getOrDefault("X-Amz-Signature")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Signature", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Content-Sha256", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Date")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Date", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-Credential")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-Credential", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Security-Token")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Security-Token", valid_604637
  var valid_604638 = header.getOrDefault("X-Amz-Algorithm")
  valid_604638 = validateParameter(valid_604638, JString, required = false,
                                 default = nil)
  if valid_604638 != nil:
    section.add "X-Amz-Algorithm", valid_604638
  var valid_604639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604639 = validateParameter(valid_604639, JString, required = false,
                                 default = nil)
  if valid_604639 != nil:
    section.add "X-Amz-SignedHeaders", valid_604639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604640: Call_GetDescribeDBSecurityGroups_604624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_604640.validator(path, query, header, formData, body)
  let scheme = call_604640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604640.url(scheme.get, call_604640.host, call_604640.base,
                         call_604640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604640, url, valid)

proc call*(call_604641: Call_GetDescribeDBSecurityGroups_604624;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604642 = newJObject()
  add(query_604642, "Marker", newJString(Marker))
  add(query_604642, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_604642, "Action", newJString(Action))
  add(query_604642, "Version", newJString(Version))
  if Filters != nil:
    query_604642.add "Filters", Filters
  add(query_604642, "MaxRecords", newJInt(MaxRecords))
  result = call_604641.call(nil, query_604642, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_604624(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_604625, base: "/",
    url: url_GetDescribeDBSecurityGroups_604626,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_604679 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBSnapshotAttributes_604681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_604680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604682 = query.getOrDefault("Action")
  valid_604682 = validateParameter(valid_604682, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_604682 != nil:
    section.add "Action", valid_604682
  var valid_604683 = query.getOrDefault("Version")
  valid_604683 = validateParameter(valid_604683, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604683 != nil:
    section.add "Version", valid_604683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604684 = header.getOrDefault("X-Amz-Signature")
  valid_604684 = validateParameter(valid_604684, JString, required = false,
                                 default = nil)
  if valid_604684 != nil:
    section.add "X-Amz-Signature", valid_604684
  var valid_604685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604685 = validateParameter(valid_604685, JString, required = false,
                                 default = nil)
  if valid_604685 != nil:
    section.add "X-Amz-Content-Sha256", valid_604685
  var valid_604686 = header.getOrDefault("X-Amz-Date")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "X-Amz-Date", valid_604686
  var valid_604687 = header.getOrDefault("X-Amz-Credential")
  valid_604687 = validateParameter(valid_604687, JString, required = false,
                                 default = nil)
  if valid_604687 != nil:
    section.add "X-Amz-Credential", valid_604687
  var valid_604688 = header.getOrDefault("X-Amz-Security-Token")
  valid_604688 = validateParameter(valid_604688, JString, required = false,
                                 default = nil)
  if valid_604688 != nil:
    section.add "X-Amz-Security-Token", valid_604688
  var valid_604689 = header.getOrDefault("X-Amz-Algorithm")
  valid_604689 = validateParameter(valid_604689, JString, required = false,
                                 default = nil)
  if valid_604689 != nil:
    section.add "X-Amz-Algorithm", valid_604689
  var valid_604690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604690 = validateParameter(valid_604690, JString, required = false,
                                 default = nil)
  if valid_604690 != nil:
    section.add "X-Amz-SignedHeaders", valid_604690
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_604691 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_604691 = validateParameter(valid_604691, JString, required = true,
                                 default = nil)
  if valid_604691 != nil:
    section.add "DBSnapshotIdentifier", valid_604691
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604692: Call_PostDescribeDBSnapshotAttributes_604679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_604692.validator(path, query, header, formData, body)
  let scheme = call_604692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604692.url(scheme.get, call_604692.host, call_604692.base,
                         call_604692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604692, url, valid)

proc call*(call_604693: Call_PostDescribeDBSnapshotAttributes_604679;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604694 = newJObject()
  var formData_604695 = newJObject()
  add(formData_604695, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_604694, "Action", newJString(Action))
  add(query_604694, "Version", newJString(Version))
  result = call_604693.call(nil, query_604694, nil, formData_604695, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_604679(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_604680, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_604681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_604663 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBSnapshotAttributes_604665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_604664(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_604666 = query.getOrDefault("DBSnapshotIdentifier")
  valid_604666 = validateParameter(valid_604666, JString, required = true,
                                 default = nil)
  if valid_604666 != nil:
    section.add "DBSnapshotIdentifier", valid_604666
  var valid_604667 = query.getOrDefault("Action")
  valid_604667 = validateParameter(valid_604667, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_604667 != nil:
    section.add "Action", valid_604667
  var valid_604668 = query.getOrDefault("Version")
  valid_604668 = validateParameter(valid_604668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604668 != nil:
    section.add "Version", valid_604668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604669 = header.getOrDefault("X-Amz-Signature")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Signature", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Content-Sha256", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-Date")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-Date", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-Credential")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-Credential", valid_604672
  var valid_604673 = header.getOrDefault("X-Amz-Security-Token")
  valid_604673 = validateParameter(valid_604673, JString, required = false,
                                 default = nil)
  if valid_604673 != nil:
    section.add "X-Amz-Security-Token", valid_604673
  var valid_604674 = header.getOrDefault("X-Amz-Algorithm")
  valid_604674 = validateParameter(valid_604674, JString, required = false,
                                 default = nil)
  if valid_604674 != nil:
    section.add "X-Amz-Algorithm", valid_604674
  var valid_604675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604675 = validateParameter(valid_604675, JString, required = false,
                                 default = nil)
  if valid_604675 != nil:
    section.add "X-Amz-SignedHeaders", valid_604675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604676: Call_GetDescribeDBSnapshotAttributes_604663;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_604676.validator(path, query, header, formData, body)
  let scheme = call_604676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604676.url(scheme.get, call_604676.host, call_604676.base,
                         call_604676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604676, url, valid)

proc call*(call_604677: Call_GetDescribeDBSnapshotAttributes_604663;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604678 = newJObject()
  add(query_604678, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_604678, "Action", newJString(Action))
  add(query_604678, "Version", newJString(Version))
  result = call_604677.call(nil, query_604678, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_604663(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_604664, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_604665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_604720 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBSnapshots_604722(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_604721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604723 = query.getOrDefault("Action")
  valid_604723 = validateParameter(valid_604723, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_604723 != nil:
    section.add "Action", valid_604723
  var valid_604724 = query.getOrDefault("Version")
  valid_604724 = validateParameter(valid_604724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604724 != nil:
    section.add "Version", valid_604724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604725 = header.getOrDefault("X-Amz-Signature")
  valid_604725 = validateParameter(valid_604725, JString, required = false,
                                 default = nil)
  if valid_604725 != nil:
    section.add "X-Amz-Signature", valid_604725
  var valid_604726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604726 = validateParameter(valid_604726, JString, required = false,
                                 default = nil)
  if valid_604726 != nil:
    section.add "X-Amz-Content-Sha256", valid_604726
  var valid_604727 = header.getOrDefault("X-Amz-Date")
  valid_604727 = validateParameter(valid_604727, JString, required = false,
                                 default = nil)
  if valid_604727 != nil:
    section.add "X-Amz-Date", valid_604727
  var valid_604728 = header.getOrDefault("X-Amz-Credential")
  valid_604728 = validateParameter(valid_604728, JString, required = false,
                                 default = nil)
  if valid_604728 != nil:
    section.add "X-Amz-Credential", valid_604728
  var valid_604729 = header.getOrDefault("X-Amz-Security-Token")
  valid_604729 = validateParameter(valid_604729, JString, required = false,
                                 default = nil)
  if valid_604729 != nil:
    section.add "X-Amz-Security-Token", valid_604729
  var valid_604730 = header.getOrDefault("X-Amz-Algorithm")
  valid_604730 = validateParameter(valid_604730, JString, required = false,
                                 default = nil)
  if valid_604730 != nil:
    section.add "X-Amz-Algorithm", valid_604730
  var valid_604731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604731 = validateParameter(valid_604731, JString, required = false,
                                 default = nil)
  if valid_604731 != nil:
    section.add "X-Amz-SignedHeaders", valid_604731
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_604732 = formData.getOrDefault("SnapshotType")
  valid_604732 = validateParameter(valid_604732, JString, required = false,
                                 default = nil)
  if valid_604732 != nil:
    section.add "SnapshotType", valid_604732
  var valid_604733 = formData.getOrDefault("MaxRecords")
  valid_604733 = validateParameter(valid_604733, JInt, required = false, default = nil)
  if valid_604733 != nil:
    section.add "MaxRecords", valid_604733
  var valid_604734 = formData.getOrDefault("IncludePublic")
  valid_604734 = validateParameter(valid_604734, JBool, required = false, default = nil)
  if valid_604734 != nil:
    section.add "IncludePublic", valid_604734
  var valid_604735 = formData.getOrDefault("Marker")
  valid_604735 = validateParameter(valid_604735, JString, required = false,
                                 default = nil)
  if valid_604735 != nil:
    section.add "Marker", valid_604735
  var valid_604736 = formData.getOrDefault("DbiResourceId")
  valid_604736 = validateParameter(valid_604736, JString, required = false,
                                 default = nil)
  if valid_604736 != nil:
    section.add "DbiResourceId", valid_604736
  var valid_604737 = formData.getOrDefault("IncludeShared")
  valid_604737 = validateParameter(valid_604737, JBool, required = false, default = nil)
  if valid_604737 != nil:
    section.add "IncludeShared", valid_604737
  var valid_604738 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604738 = validateParameter(valid_604738, JString, required = false,
                                 default = nil)
  if valid_604738 != nil:
    section.add "DBInstanceIdentifier", valid_604738
  var valid_604739 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_604739 = validateParameter(valid_604739, JString, required = false,
                                 default = nil)
  if valid_604739 != nil:
    section.add "DBSnapshotIdentifier", valid_604739
  var valid_604740 = formData.getOrDefault("Filters")
  valid_604740 = validateParameter(valid_604740, JArray, required = false,
                                 default = nil)
  if valid_604740 != nil:
    section.add "Filters", valid_604740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604741: Call_PostDescribeDBSnapshots_604720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_604741.validator(path, query, header, formData, body)
  let scheme = call_604741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604741.url(scheme.get, call_604741.host, call_604741.base,
                         call_604741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604741, url, valid)

proc call*(call_604742: Call_PostDescribeDBSnapshots_604720;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_604743 = newJObject()
  var formData_604744 = newJObject()
  add(formData_604744, "SnapshotType", newJString(SnapshotType))
  add(formData_604744, "MaxRecords", newJInt(MaxRecords))
  add(formData_604744, "IncludePublic", newJBool(IncludePublic))
  add(formData_604744, "Marker", newJString(Marker))
  add(formData_604744, "DbiResourceId", newJString(DbiResourceId))
  add(formData_604744, "IncludeShared", newJBool(IncludeShared))
  add(formData_604744, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_604744, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_604743, "Action", newJString(Action))
  if Filters != nil:
    formData_604744.add "Filters", Filters
  add(query_604743, "Version", newJString(Version))
  result = call_604742.call(nil, query_604743, nil, formData_604744, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_604720(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_604721, base: "/",
    url: url_PostDescribeDBSnapshots_604722, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_604696 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBSnapshots_604698(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_604697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604699 = query.getOrDefault("DbiResourceId")
  valid_604699 = validateParameter(valid_604699, JString, required = false,
                                 default = nil)
  if valid_604699 != nil:
    section.add "DbiResourceId", valid_604699
  var valid_604700 = query.getOrDefault("Marker")
  valid_604700 = validateParameter(valid_604700, JString, required = false,
                                 default = nil)
  if valid_604700 != nil:
    section.add "Marker", valid_604700
  var valid_604701 = query.getOrDefault("DBInstanceIdentifier")
  valid_604701 = validateParameter(valid_604701, JString, required = false,
                                 default = nil)
  if valid_604701 != nil:
    section.add "DBInstanceIdentifier", valid_604701
  var valid_604702 = query.getOrDefault("DBSnapshotIdentifier")
  valid_604702 = validateParameter(valid_604702, JString, required = false,
                                 default = nil)
  if valid_604702 != nil:
    section.add "DBSnapshotIdentifier", valid_604702
  var valid_604703 = query.getOrDefault("SnapshotType")
  valid_604703 = validateParameter(valid_604703, JString, required = false,
                                 default = nil)
  if valid_604703 != nil:
    section.add "SnapshotType", valid_604703
  var valid_604704 = query.getOrDefault("IncludePublic")
  valid_604704 = validateParameter(valid_604704, JBool, required = false, default = nil)
  if valid_604704 != nil:
    section.add "IncludePublic", valid_604704
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604705 = query.getOrDefault("Action")
  valid_604705 = validateParameter(valid_604705, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_604705 != nil:
    section.add "Action", valid_604705
  var valid_604706 = query.getOrDefault("IncludeShared")
  valid_604706 = validateParameter(valid_604706, JBool, required = false, default = nil)
  if valid_604706 != nil:
    section.add "IncludeShared", valid_604706
  var valid_604707 = query.getOrDefault("Version")
  valid_604707 = validateParameter(valid_604707, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604707 != nil:
    section.add "Version", valid_604707
  var valid_604708 = query.getOrDefault("Filters")
  valid_604708 = validateParameter(valid_604708, JArray, required = false,
                                 default = nil)
  if valid_604708 != nil:
    section.add "Filters", valid_604708
  var valid_604709 = query.getOrDefault("MaxRecords")
  valid_604709 = validateParameter(valid_604709, JInt, required = false, default = nil)
  if valid_604709 != nil:
    section.add "MaxRecords", valid_604709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604710 = header.getOrDefault("X-Amz-Signature")
  valid_604710 = validateParameter(valid_604710, JString, required = false,
                                 default = nil)
  if valid_604710 != nil:
    section.add "X-Amz-Signature", valid_604710
  var valid_604711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604711 = validateParameter(valid_604711, JString, required = false,
                                 default = nil)
  if valid_604711 != nil:
    section.add "X-Amz-Content-Sha256", valid_604711
  var valid_604712 = header.getOrDefault("X-Amz-Date")
  valid_604712 = validateParameter(valid_604712, JString, required = false,
                                 default = nil)
  if valid_604712 != nil:
    section.add "X-Amz-Date", valid_604712
  var valid_604713 = header.getOrDefault("X-Amz-Credential")
  valid_604713 = validateParameter(valid_604713, JString, required = false,
                                 default = nil)
  if valid_604713 != nil:
    section.add "X-Amz-Credential", valid_604713
  var valid_604714 = header.getOrDefault("X-Amz-Security-Token")
  valid_604714 = validateParameter(valid_604714, JString, required = false,
                                 default = nil)
  if valid_604714 != nil:
    section.add "X-Amz-Security-Token", valid_604714
  var valid_604715 = header.getOrDefault("X-Amz-Algorithm")
  valid_604715 = validateParameter(valid_604715, JString, required = false,
                                 default = nil)
  if valid_604715 != nil:
    section.add "X-Amz-Algorithm", valid_604715
  var valid_604716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604716 = validateParameter(valid_604716, JString, required = false,
                                 default = nil)
  if valid_604716 != nil:
    section.add "X-Amz-SignedHeaders", valid_604716
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604717: Call_GetDescribeDBSnapshots_604696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_604717.validator(path, query, header, formData, body)
  let scheme = call_604717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604717.url(scheme.get, call_604717.host, call_604717.base,
                         call_604717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604717, url, valid)

proc call*(call_604718: Call_GetDescribeDBSnapshots_604696;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604719 = newJObject()
  add(query_604719, "DbiResourceId", newJString(DbiResourceId))
  add(query_604719, "Marker", newJString(Marker))
  add(query_604719, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604719, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_604719, "SnapshotType", newJString(SnapshotType))
  add(query_604719, "IncludePublic", newJBool(IncludePublic))
  add(query_604719, "Action", newJString(Action))
  add(query_604719, "IncludeShared", newJBool(IncludeShared))
  add(query_604719, "Version", newJString(Version))
  if Filters != nil:
    query_604719.add "Filters", Filters
  add(query_604719, "MaxRecords", newJInt(MaxRecords))
  result = call_604718.call(nil, query_604719, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_604696(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_604697, base: "/",
    url: url_GetDescribeDBSnapshots_604698, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_604764 = ref object of OpenApiRestCall_601389
proc url_PostDescribeDBSubnetGroups_604766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_604765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604767 = query.getOrDefault("Action")
  valid_604767 = validateParameter(valid_604767, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_604767 != nil:
    section.add "Action", valid_604767
  var valid_604768 = query.getOrDefault("Version")
  valid_604768 = validateParameter(valid_604768, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604768 != nil:
    section.add "Version", valid_604768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604769 = header.getOrDefault("X-Amz-Signature")
  valid_604769 = validateParameter(valid_604769, JString, required = false,
                                 default = nil)
  if valid_604769 != nil:
    section.add "X-Amz-Signature", valid_604769
  var valid_604770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604770 = validateParameter(valid_604770, JString, required = false,
                                 default = nil)
  if valid_604770 != nil:
    section.add "X-Amz-Content-Sha256", valid_604770
  var valid_604771 = header.getOrDefault("X-Amz-Date")
  valid_604771 = validateParameter(valid_604771, JString, required = false,
                                 default = nil)
  if valid_604771 != nil:
    section.add "X-Amz-Date", valid_604771
  var valid_604772 = header.getOrDefault("X-Amz-Credential")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "X-Amz-Credential", valid_604772
  var valid_604773 = header.getOrDefault("X-Amz-Security-Token")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "X-Amz-Security-Token", valid_604773
  var valid_604774 = header.getOrDefault("X-Amz-Algorithm")
  valid_604774 = validateParameter(valid_604774, JString, required = false,
                                 default = nil)
  if valid_604774 != nil:
    section.add "X-Amz-Algorithm", valid_604774
  var valid_604775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-SignedHeaders", valid_604775
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604776 = formData.getOrDefault("MaxRecords")
  valid_604776 = validateParameter(valid_604776, JInt, required = false, default = nil)
  if valid_604776 != nil:
    section.add "MaxRecords", valid_604776
  var valid_604777 = formData.getOrDefault("Marker")
  valid_604777 = validateParameter(valid_604777, JString, required = false,
                                 default = nil)
  if valid_604777 != nil:
    section.add "Marker", valid_604777
  var valid_604778 = formData.getOrDefault("DBSubnetGroupName")
  valid_604778 = validateParameter(valid_604778, JString, required = false,
                                 default = nil)
  if valid_604778 != nil:
    section.add "DBSubnetGroupName", valid_604778
  var valid_604779 = formData.getOrDefault("Filters")
  valid_604779 = validateParameter(valid_604779, JArray, required = false,
                                 default = nil)
  if valid_604779 != nil:
    section.add "Filters", valid_604779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604780: Call_PostDescribeDBSubnetGroups_604764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_604780.validator(path, query, header, formData, body)
  let scheme = call_604780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604780.url(scheme.get, call_604780.host, call_604780.base,
                         call_604780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604780, url, valid)

proc call*(call_604781: Call_PostDescribeDBSubnetGroups_604764;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604782 = newJObject()
  var formData_604783 = newJObject()
  add(formData_604783, "MaxRecords", newJInt(MaxRecords))
  add(formData_604783, "Marker", newJString(Marker))
  add(query_604782, "Action", newJString(Action))
  add(formData_604783, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_604783.add "Filters", Filters
  add(query_604782, "Version", newJString(Version))
  result = call_604781.call(nil, query_604782, nil, formData_604783, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_604764(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_604765, base: "/",
    url: url_PostDescribeDBSubnetGroups_604766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_604745 = ref object of OpenApiRestCall_601389
proc url_GetDescribeDBSubnetGroups_604747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_604746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604748 = query.getOrDefault("Marker")
  valid_604748 = validateParameter(valid_604748, JString, required = false,
                                 default = nil)
  if valid_604748 != nil:
    section.add "Marker", valid_604748
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604749 = query.getOrDefault("Action")
  valid_604749 = validateParameter(valid_604749, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_604749 != nil:
    section.add "Action", valid_604749
  var valid_604750 = query.getOrDefault("DBSubnetGroupName")
  valid_604750 = validateParameter(valid_604750, JString, required = false,
                                 default = nil)
  if valid_604750 != nil:
    section.add "DBSubnetGroupName", valid_604750
  var valid_604751 = query.getOrDefault("Version")
  valid_604751 = validateParameter(valid_604751, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604751 != nil:
    section.add "Version", valid_604751
  var valid_604752 = query.getOrDefault("Filters")
  valid_604752 = validateParameter(valid_604752, JArray, required = false,
                                 default = nil)
  if valid_604752 != nil:
    section.add "Filters", valid_604752
  var valid_604753 = query.getOrDefault("MaxRecords")
  valid_604753 = validateParameter(valid_604753, JInt, required = false, default = nil)
  if valid_604753 != nil:
    section.add "MaxRecords", valid_604753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604754 = header.getOrDefault("X-Amz-Signature")
  valid_604754 = validateParameter(valid_604754, JString, required = false,
                                 default = nil)
  if valid_604754 != nil:
    section.add "X-Amz-Signature", valid_604754
  var valid_604755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604755 = validateParameter(valid_604755, JString, required = false,
                                 default = nil)
  if valid_604755 != nil:
    section.add "X-Amz-Content-Sha256", valid_604755
  var valid_604756 = header.getOrDefault("X-Amz-Date")
  valid_604756 = validateParameter(valid_604756, JString, required = false,
                                 default = nil)
  if valid_604756 != nil:
    section.add "X-Amz-Date", valid_604756
  var valid_604757 = header.getOrDefault("X-Amz-Credential")
  valid_604757 = validateParameter(valid_604757, JString, required = false,
                                 default = nil)
  if valid_604757 != nil:
    section.add "X-Amz-Credential", valid_604757
  var valid_604758 = header.getOrDefault("X-Amz-Security-Token")
  valid_604758 = validateParameter(valid_604758, JString, required = false,
                                 default = nil)
  if valid_604758 != nil:
    section.add "X-Amz-Security-Token", valid_604758
  var valid_604759 = header.getOrDefault("X-Amz-Algorithm")
  valid_604759 = validateParameter(valid_604759, JString, required = false,
                                 default = nil)
  if valid_604759 != nil:
    section.add "X-Amz-Algorithm", valid_604759
  var valid_604760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604760 = validateParameter(valid_604760, JString, required = false,
                                 default = nil)
  if valid_604760 != nil:
    section.add "X-Amz-SignedHeaders", valid_604760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604761: Call_GetDescribeDBSubnetGroups_604745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_604761.validator(path, query, header, formData, body)
  let scheme = call_604761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604761.url(scheme.get, call_604761.host, call_604761.base,
                         call_604761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604761, url, valid)

proc call*(call_604762: Call_GetDescribeDBSubnetGroups_604745; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604763 = newJObject()
  add(query_604763, "Marker", newJString(Marker))
  add(query_604763, "Action", newJString(Action))
  add(query_604763, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_604763, "Version", newJString(Version))
  if Filters != nil:
    query_604763.add "Filters", Filters
  add(query_604763, "MaxRecords", newJInt(MaxRecords))
  result = call_604762.call(nil, query_604763, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_604745(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_604746, base: "/",
    url: url_GetDescribeDBSubnetGroups_604747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_604803 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEngineDefaultClusterParameters_604805(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_604804(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604806 = query.getOrDefault("Action")
  valid_604806 = validateParameter(valid_604806, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_604806 != nil:
    section.add "Action", valid_604806
  var valid_604807 = query.getOrDefault("Version")
  valid_604807 = validateParameter(valid_604807, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604807 != nil:
    section.add "Version", valid_604807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604808 = header.getOrDefault("X-Amz-Signature")
  valid_604808 = validateParameter(valid_604808, JString, required = false,
                                 default = nil)
  if valid_604808 != nil:
    section.add "X-Amz-Signature", valid_604808
  var valid_604809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604809 = validateParameter(valid_604809, JString, required = false,
                                 default = nil)
  if valid_604809 != nil:
    section.add "X-Amz-Content-Sha256", valid_604809
  var valid_604810 = header.getOrDefault("X-Amz-Date")
  valid_604810 = validateParameter(valid_604810, JString, required = false,
                                 default = nil)
  if valid_604810 != nil:
    section.add "X-Amz-Date", valid_604810
  var valid_604811 = header.getOrDefault("X-Amz-Credential")
  valid_604811 = validateParameter(valid_604811, JString, required = false,
                                 default = nil)
  if valid_604811 != nil:
    section.add "X-Amz-Credential", valid_604811
  var valid_604812 = header.getOrDefault("X-Amz-Security-Token")
  valid_604812 = validateParameter(valid_604812, JString, required = false,
                                 default = nil)
  if valid_604812 != nil:
    section.add "X-Amz-Security-Token", valid_604812
  var valid_604813 = header.getOrDefault("X-Amz-Algorithm")
  valid_604813 = validateParameter(valid_604813, JString, required = false,
                                 default = nil)
  if valid_604813 != nil:
    section.add "X-Amz-Algorithm", valid_604813
  var valid_604814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604814 = validateParameter(valid_604814, JString, required = false,
                                 default = nil)
  if valid_604814 != nil:
    section.add "X-Amz-SignedHeaders", valid_604814
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_604815 = formData.getOrDefault("MaxRecords")
  valid_604815 = validateParameter(valid_604815, JInt, required = false, default = nil)
  if valid_604815 != nil:
    section.add "MaxRecords", valid_604815
  var valid_604816 = formData.getOrDefault("Marker")
  valid_604816 = validateParameter(valid_604816, JString, required = false,
                                 default = nil)
  if valid_604816 != nil:
    section.add "Marker", valid_604816
  var valid_604817 = formData.getOrDefault("Filters")
  valid_604817 = validateParameter(valid_604817, JArray, required = false,
                                 default = nil)
  if valid_604817 != nil:
    section.add "Filters", valid_604817
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604818 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604818 = validateParameter(valid_604818, JString, required = true,
                                 default = nil)
  if valid_604818 != nil:
    section.add "DBParameterGroupFamily", valid_604818
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604819: Call_PostDescribeEngineDefaultClusterParameters_604803;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_604819.validator(path, query, header, formData, body)
  let scheme = call_604819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604819.url(scheme.get, call_604819.host, call_604819.base,
                         call_604819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604819, url, valid)

proc call*(call_604820: Call_PostDescribeEngineDefaultClusterParameters_604803;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_604821 = newJObject()
  var formData_604822 = newJObject()
  add(formData_604822, "MaxRecords", newJInt(MaxRecords))
  add(formData_604822, "Marker", newJString(Marker))
  add(query_604821, "Action", newJString(Action))
  if Filters != nil:
    formData_604822.add "Filters", Filters
  add(query_604821, "Version", newJString(Version))
  add(formData_604822, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_604820.call(nil, query_604821, nil, formData_604822, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_604803(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_604804,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_604805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_604784 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEngineDefaultClusterParameters_604786(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_604785(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604787 = query.getOrDefault("Marker")
  valid_604787 = validateParameter(valid_604787, JString, required = false,
                                 default = nil)
  if valid_604787 != nil:
    section.add "Marker", valid_604787
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604788 = query.getOrDefault("DBParameterGroupFamily")
  valid_604788 = validateParameter(valid_604788, JString, required = true,
                                 default = nil)
  if valid_604788 != nil:
    section.add "DBParameterGroupFamily", valid_604788
  var valid_604789 = query.getOrDefault("Action")
  valid_604789 = validateParameter(valid_604789, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_604789 != nil:
    section.add "Action", valid_604789
  var valid_604790 = query.getOrDefault("Version")
  valid_604790 = validateParameter(valid_604790, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604790 != nil:
    section.add "Version", valid_604790
  var valid_604791 = query.getOrDefault("Filters")
  valid_604791 = validateParameter(valid_604791, JArray, required = false,
                                 default = nil)
  if valid_604791 != nil:
    section.add "Filters", valid_604791
  var valid_604792 = query.getOrDefault("MaxRecords")
  valid_604792 = validateParameter(valid_604792, JInt, required = false, default = nil)
  if valid_604792 != nil:
    section.add "MaxRecords", valid_604792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604793 = header.getOrDefault("X-Amz-Signature")
  valid_604793 = validateParameter(valid_604793, JString, required = false,
                                 default = nil)
  if valid_604793 != nil:
    section.add "X-Amz-Signature", valid_604793
  var valid_604794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604794 = validateParameter(valid_604794, JString, required = false,
                                 default = nil)
  if valid_604794 != nil:
    section.add "X-Amz-Content-Sha256", valid_604794
  var valid_604795 = header.getOrDefault("X-Amz-Date")
  valid_604795 = validateParameter(valid_604795, JString, required = false,
                                 default = nil)
  if valid_604795 != nil:
    section.add "X-Amz-Date", valid_604795
  var valid_604796 = header.getOrDefault("X-Amz-Credential")
  valid_604796 = validateParameter(valid_604796, JString, required = false,
                                 default = nil)
  if valid_604796 != nil:
    section.add "X-Amz-Credential", valid_604796
  var valid_604797 = header.getOrDefault("X-Amz-Security-Token")
  valid_604797 = validateParameter(valid_604797, JString, required = false,
                                 default = nil)
  if valid_604797 != nil:
    section.add "X-Amz-Security-Token", valid_604797
  var valid_604798 = header.getOrDefault("X-Amz-Algorithm")
  valid_604798 = validateParameter(valid_604798, JString, required = false,
                                 default = nil)
  if valid_604798 != nil:
    section.add "X-Amz-Algorithm", valid_604798
  var valid_604799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604799 = validateParameter(valid_604799, JString, required = false,
                                 default = nil)
  if valid_604799 != nil:
    section.add "X-Amz-SignedHeaders", valid_604799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604800: Call_GetDescribeEngineDefaultClusterParameters_604784;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_604800.validator(path, query, header, formData, body)
  let scheme = call_604800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604800.url(scheme.get, call_604800.host, call_604800.base,
                         call_604800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604800, url, valid)

proc call*(call_604801: Call_GetDescribeEngineDefaultClusterParameters_604784;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604802 = newJObject()
  add(query_604802, "Marker", newJString(Marker))
  add(query_604802, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_604802, "Action", newJString(Action))
  add(query_604802, "Version", newJString(Version))
  if Filters != nil:
    query_604802.add "Filters", Filters
  add(query_604802, "MaxRecords", newJInt(MaxRecords))
  result = call_604801.call(nil, query_604802, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_604784(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_604785,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_604786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_604842 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEngineDefaultParameters_604844(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_604843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604845 = query.getOrDefault("Action")
  valid_604845 = validateParameter(valid_604845, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_604845 != nil:
    section.add "Action", valid_604845
  var valid_604846 = query.getOrDefault("Version")
  valid_604846 = validateParameter(valid_604846, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604846 != nil:
    section.add "Version", valid_604846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604847 = header.getOrDefault("X-Amz-Signature")
  valid_604847 = validateParameter(valid_604847, JString, required = false,
                                 default = nil)
  if valid_604847 != nil:
    section.add "X-Amz-Signature", valid_604847
  var valid_604848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604848 = validateParameter(valid_604848, JString, required = false,
                                 default = nil)
  if valid_604848 != nil:
    section.add "X-Amz-Content-Sha256", valid_604848
  var valid_604849 = header.getOrDefault("X-Amz-Date")
  valid_604849 = validateParameter(valid_604849, JString, required = false,
                                 default = nil)
  if valid_604849 != nil:
    section.add "X-Amz-Date", valid_604849
  var valid_604850 = header.getOrDefault("X-Amz-Credential")
  valid_604850 = validateParameter(valid_604850, JString, required = false,
                                 default = nil)
  if valid_604850 != nil:
    section.add "X-Amz-Credential", valid_604850
  var valid_604851 = header.getOrDefault("X-Amz-Security-Token")
  valid_604851 = validateParameter(valid_604851, JString, required = false,
                                 default = nil)
  if valid_604851 != nil:
    section.add "X-Amz-Security-Token", valid_604851
  var valid_604852 = header.getOrDefault("X-Amz-Algorithm")
  valid_604852 = validateParameter(valid_604852, JString, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "X-Amz-Algorithm", valid_604852
  var valid_604853 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604853 = validateParameter(valid_604853, JString, required = false,
                                 default = nil)
  if valid_604853 != nil:
    section.add "X-Amz-SignedHeaders", valid_604853
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_604854 = formData.getOrDefault("MaxRecords")
  valid_604854 = validateParameter(valid_604854, JInt, required = false, default = nil)
  if valid_604854 != nil:
    section.add "MaxRecords", valid_604854
  var valid_604855 = formData.getOrDefault("Marker")
  valid_604855 = validateParameter(valid_604855, JString, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "Marker", valid_604855
  var valid_604856 = formData.getOrDefault("Filters")
  valid_604856 = validateParameter(valid_604856, JArray, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "Filters", valid_604856
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604857 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604857 = validateParameter(valid_604857, JString, required = true,
                                 default = nil)
  if valid_604857 != nil:
    section.add "DBParameterGroupFamily", valid_604857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604858: Call_PostDescribeEngineDefaultParameters_604842;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_604858.validator(path, query, header, formData, body)
  let scheme = call_604858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604858.url(scheme.get, call_604858.host, call_604858.base,
                         call_604858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604858, url, valid)

proc call*(call_604859: Call_PostDescribeEngineDefaultParameters_604842;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_604860 = newJObject()
  var formData_604861 = newJObject()
  add(formData_604861, "MaxRecords", newJInt(MaxRecords))
  add(formData_604861, "Marker", newJString(Marker))
  add(query_604860, "Action", newJString(Action))
  if Filters != nil:
    formData_604861.add "Filters", Filters
  add(query_604860, "Version", newJString(Version))
  add(formData_604861, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_604859.call(nil, query_604860, nil, formData_604861, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_604842(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_604843, base: "/",
    url: url_PostDescribeEngineDefaultParameters_604844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_604823 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEngineDefaultParameters_604825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_604824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604826 = query.getOrDefault("Marker")
  valid_604826 = validateParameter(valid_604826, JString, required = false,
                                 default = nil)
  if valid_604826 != nil:
    section.add "Marker", valid_604826
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604827 = query.getOrDefault("DBParameterGroupFamily")
  valid_604827 = validateParameter(valid_604827, JString, required = true,
                                 default = nil)
  if valid_604827 != nil:
    section.add "DBParameterGroupFamily", valid_604827
  var valid_604828 = query.getOrDefault("Action")
  valid_604828 = validateParameter(valid_604828, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_604828 != nil:
    section.add "Action", valid_604828
  var valid_604829 = query.getOrDefault("Version")
  valid_604829 = validateParameter(valid_604829, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604829 != nil:
    section.add "Version", valid_604829
  var valid_604830 = query.getOrDefault("Filters")
  valid_604830 = validateParameter(valid_604830, JArray, required = false,
                                 default = nil)
  if valid_604830 != nil:
    section.add "Filters", valid_604830
  var valid_604831 = query.getOrDefault("MaxRecords")
  valid_604831 = validateParameter(valid_604831, JInt, required = false, default = nil)
  if valid_604831 != nil:
    section.add "MaxRecords", valid_604831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604832 = header.getOrDefault("X-Amz-Signature")
  valid_604832 = validateParameter(valid_604832, JString, required = false,
                                 default = nil)
  if valid_604832 != nil:
    section.add "X-Amz-Signature", valid_604832
  var valid_604833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604833 = validateParameter(valid_604833, JString, required = false,
                                 default = nil)
  if valid_604833 != nil:
    section.add "X-Amz-Content-Sha256", valid_604833
  var valid_604834 = header.getOrDefault("X-Amz-Date")
  valid_604834 = validateParameter(valid_604834, JString, required = false,
                                 default = nil)
  if valid_604834 != nil:
    section.add "X-Amz-Date", valid_604834
  var valid_604835 = header.getOrDefault("X-Amz-Credential")
  valid_604835 = validateParameter(valid_604835, JString, required = false,
                                 default = nil)
  if valid_604835 != nil:
    section.add "X-Amz-Credential", valid_604835
  var valid_604836 = header.getOrDefault("X-Amz-Security-Token")
  valid_604836 = validateParameter(valid_604836, JString, required = false,
                                 default = nil)
  if valid_604836 != nil:
    section.add "X-Amz-Security-Token", valid_604836
  var valid_604837 = header.getOrDefault("X-Amz-Algorithm")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "X-Amz-Algorithm", valid_604837
  var valid_604838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604838 = validateParameter(valid_604838, JString, required = false,
                                 default = nil)
  if valid_604838 != nil:
    section.add "X-Amz-SignedHeaders", valid_604838
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604839: Call_GetDescribeEngineDefaultParameters_604823;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_604839.validator(path, query, header, formData, body)
  let scheme = call_604839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604839.url(scheme.get, call_604839.host, call_604839.base,
                         call_604839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604839, url, valid)

proc call*(call_604840: Call_GetDescribeEngineDefaultParameters_604823;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604841 = newJObject()
  add(query_604841, "Marker", newJString(Marker))
  add(query_604841, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_604841, "Action", newJString(Action))
  add(query_604841, "Version", newJString(Version))
  if Filters != nil:
    query_604841.add "Filters", Filters
  add(query_604841, "MaxRecords", newJInt(MaxRecords))
  result = call_604840.call(nil, query_604841, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_604823(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_604824, base: "/",
    url: url_GetDescribeEngineDefaultParameters_604825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_604879 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEventCategories_604881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_604880(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604882 = query.getOrDefault("Action")
  valid_604882 = validateParameter(valid_604882, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_604882 != nil:
    section.add "Action", valid_604882
  var valid_604883 = query.getOrDefault("Version")
  valid_604883 = validateParameter(valid_604883, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604883 != nil:
    section.add "Version", valid_604883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604884 = header.getOrDefault("X-Amz-Signature")
  valid_604884 = validateParameter(valid_604884, JString, required = false,
                                 default = nil)
  if valid_604884 != nil:
    section.add "X-Amz-Signature", valid_604884
  var valid_604885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604885 = validateParameter(valid_604885, JString, required = false,
                                 default = nil)
  if valid_604885 != nil:
    section.add "X-Amz-Content-Sha256", valid_604885
  var valid_604886 = header.getOrDefault("X-Amz-Date")
  valid_604886 = validateParameter(valid_604886, JString, required = false,
                                 default = nil)
  if valid_604886 != nil:
    section.add "X-Amz-Date", valid_604886
  var valid_604887 = header.getOrDefault("X-Amz-Credential")
  valid_604887 = validateParameter(valid_604887, JString, required = false,
                                 default = nil)
  if valid_604887 != nil:
    section.add "X-Amz-Credential", valid_604887
  var valid_604888 = header.getOrDefault("X-Amz-Security-Token")
  valid_604888 = validateParameter(valid_604888, JString, required = false,
                                 default = nil)
  if valid_604888 != nil:
    section.add "X-Amz-Security-Token", valid_604888
  var valid_604889 = header.getOrDefault("X-Amz-Algorithm")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "X-Amz-Algorithm", valid_604889
  var valid_604890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "X-Amz-SignedHeaders", valid_604890
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604891 = formData.getOrDefault("SourceType")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "SourceType", valid_604891
  var valid_604892 = formData.getOrDefault("Filters")
  valid_604892 = validateParameter(valid_604892, JArray, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "Filters", valid_604892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604893: Call_PostDescribeEventCategories_604879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_604893.validator(path, query, header, formData, body)
  let scheme = call_604893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604893.url(scheme.get, call_604893.host, call_604893.base,
                         call_604893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604893, url, valid)

proc call*(call_604894: Call_PostDescribeEventCategories_604879;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604895 = newJObject()
  var formData_604896 = newJObject()
  add(formData_604896, "SourceType", newJString(SourceType))
  add(query_604895, "Action", newJString(Action))
  if Filters != nil:
    formData_604896.add "Filters", Filters
  add(query_604895, "Version", newJString(Version))
  result = call_604894.call(nil, query_604895, nil, formData_604896, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_604879(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_604880, base: "/",
    url: url_PostDescribeEventCategories_604881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_604862 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEventCategories_604864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_604863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604865 = query.getOrDefault("SourceType")
  valid_604865 = validateParameter(valid_604865, JString, required = false,
                                 default = nil)
  if valid_604865 != nil:
    section.add "SourceType", valid_604865
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604866 = query.getOrDefault("Action")
  valid_604866 = validateParameter(valid_604866, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_604866 != nil:
    section.add "Action", valid_604866
  var valid_604867 = query.getOrDefault("Version")
  valid_604867 = validateParameter(valid_604867, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604867 != nil:
    section.add "Version", valid_604867
  var valid_604868 = query.getOrDefault("Filters")
  valid_604868 = validateParameter(valid_604868, JArray, required = false,
                                 default = nil)
  if valid_604868 != nil:
    section.add "Filters", valid_604868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604869 = header.getOrDefault("X-Amz-Signature")
  valid_604869 = validateParameter(valid_604869, JString, required = false,
                                 default = nil)
  if valid_604869 != nil:
    section.add "X-Amz-Signature", valid_604869
  var valid_604870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604870 = validateParameter(valid_604870, JString, required = false,
                                 default = nil)
  if valid_604870 != nil:
    section.add "X-Amz-Content-Sha256", valid_604870
  var valid_604871 = header.getOrDefault("X-Amz-Date")
  valid_604871 = validateParameter(valid_604871, JString, required = false,
                                 default = nil)
  if valid_604871 != nil:
    section.add "X-Amz-Date", valid_604871
  var valid_604872 = header.getOrDefault("X-Amz-Credential")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Credential", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-Security-Token")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-Security-Token", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-Algorithm")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-Algorithm", valid_604874
  var valid_604875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-SignedHeaders", valid_604875
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604876: Call_GetDescribeEventCategories_604862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_604876.validator(path, query, header, formData, body)
  let scheme = call_604876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604876.url(scheme.get, call_604876.host, call_604876.base,
                         call_604876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604876, url, valid)

proc call*(call_604877: Call_GetDescribeEventCategories_604862;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_604878 = newJObject()
  add(query_604878, "SourceType", newJString(SourceType))
  add(query_604878, "Action", newJString(Action))
  add(query_604878, "Version", newJString(Version))
  if Filters != nil:
    query_604878.add "Filters", Filters
  result = call_604877.call(nil, query_604878, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_604862(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_604863, base: "/",
    url: url_GetDescribeEventCategories_604864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_604916 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEventSubscriptions_604918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_604917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604919 = query.getOrDefault("Action")
  valid_604919 = validateParameter(valid_604919, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_604919 != nil:
    section.add "Action", valid_604919
  var valid_604920 = query.getOrDefault("Version")
  valid_604920 = validateParameter(valid_604920, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604920 != nil:
    section.add "Version", valid_604920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604921 = header.getOrDefault("X-Amz-Signature")
  valid_604921 = validateParameter(valid_604921, JString, required = false,
                                 default = nil)
  if valid_604921 != nil:
    section.add "X-Amz-Signature", valid_604921
  var valid_604922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604922 = validateParameter(valid_604922, JString, required = false,
                                 default = nil)
  if valid_604922 != nil:
    section.add "X-Amz-Content-Sha256", valid_604922
  var valid_604923 = header.getOrDefault("X-Amz-Date")
  valid_604923 = validateParameter(valid_604923, JString, required = false,
                                 default = nil)
  if valid_604923 != nil:
    section.add "X-Amz-Date", valid_604923
  var valid_604924 = header.getOrDefault("X-Amz-Credential")
  valid_604924 = validateParameter(valid_604924, JString, required = false,
                                 default = nil)
  if valid_604924 != nil:
    section.add "X-Amz-Credential", valid_604924
  var valid_604925 = header.getOrDefault("X-Amz-Security-Token")
  valid_604925 = validateParameter(valid_604925, JString, required = false,
                                 default = nil)
  if valid_604925 != nil:
    section.add "X-Amz-Security-Token", valid_604925
  var valid_604926 = header.getOrDefault("X-Amz-Algorithm")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-Algorithm", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-SignedHeaders", valid_604927
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604928 = formData.getOrDefault("MaxRecords")
  valid_604928 = validateParameter(valid_604928, JInt, required = false, default = nil)
  if valid_604928 != nil:
    section.add "MaxRecords", valid_604928
  var valid_604929 = formData.getOrDefault("Marker")
  valid_604929 = validateParameter(valid_604929, JString, required = false,
                                 default = nil)
  if valid_604929 != nil:
    section.add "Marker", valid_604929
  var valid_604930 = formData.getOrDefault("SubscriptionName")
  valid_604930 = validateParameter(valid_604930, JString, required = false,
                                 default = nil)
  if valid_604930 != nil:
    section.add "SubscriptionName", valid_604930
  var valid_604931 = formData.getOrDefault("Filters")
  valid_604931 = validateParameter(valid_604931, JArray, required = false,
                                 default = nil)
  if valid_604931 != nil:
    section.add "Filters", valid_604931
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604932: Call_PostDescribeEventSubscriptions_604916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_604932.validator(path, query, header, formData, body)
  let scheme = call_604932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604932.url(scheme.get, call_604932.host, call_604932.base,
                         call_604932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604932, url, valid)

proc call*(call_604933: Call_PostDescribeEventSubscriptions_604916;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604934 = newJObject()
  var formData_604935 = newJObject()
  add(formData_604935, "MaxRecords", newJInt(MaxRecords))
  add(formData_604935, "Marker", newJString(Marker))
  add(formData_604935, "SubscriptionName", newJString(SubscriptionName))
  add(query_604934, "Action", newJString(Action))
  if Filters != nil:
    formData_604935.add "Filters", Filters
  add(query_604934, "Version", newJString(Version))
  result = call_604933.call(nil, query_604934, nil, formData_604935, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_604916(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_604917, base: "/",
    url: url_PostDescribeEventSubscriptions_604918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_604897 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEventSubscriptions_604899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_604898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604900 = query.getOrDefault("Marker")
  valid_604900 = validateParameter(valid_604900, JString, required = false,
                                 default = nil)
  if valid_604900 != nil:
    section.add "Marker", valid_604900
  var valid_604901 = query.getOrDefault("SubscriptionName")
  valid_604901 = validateParameter(valid_604901, JString, required = false,
                                 default = nil)
  if valid_604901 != nil:
    section.add "SubscriptionName", valid_604901
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604902 = query.getOrDefault("Action")
  valid_604902 = validateParameter(valid_604902, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_604902 != nil:
    section.add "Action", valid_604902
  var valid_604903 = query.getOrDefault("Version")
  valid_604903 = validateParameter(valid_604903, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604903 != nil:
    section.add "Version", valid_604903
  var valid_604904 = query.getOrDefault("Filters")
  valid_604904 = validateParameter(valid_604904, JArray, required = false,
                                 default = nil)
  if valid_604904 != nil:
    section.add "Filters", valid_604904
  var valid_604905 = query.getOrDefault("MaxRecords")
  valid_604905 = validateParameter(valid_604905, JInt, required = false, default = nil)
  if valid_604905 != nil:
    section.add "MaxRecords", valid_604905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604906 = header.getOrDefault("X-Amz-Signature")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "X-Amz-Signature", valid_604906
  var valid_604907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Content-Sha256", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Date")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Date", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-Credential")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-Credential", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-Security-Token")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-Security-Token", valid_604910
  var valid_604911 = header.getOrDefault("X-Amz-Algorithm")
  valid_604911 = validateParameter(valid_604911, JString, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "X-Amz-Algorithm", valid_604911
  var valid_604912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604912 = validateParameter(valid_604912, JString, required = false,
                                 default = nil)
  if valid_604912 != nil:
    section.add "X-Amz-SignedHeaders", valid_604912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604913: Call_GetDescribeEventSubscriptions_604897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_604913.validator(path, query, header, formData, body)
  let scheme = call_604913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604913.url(scheme.get, call_604913.host, call_604913.base,
                         call_604913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604913, url, valid)

proc call*(call_604914: Call_GetDescribeEventSubscriptions_604897;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604915 = newJObject()
  add(query_604915, "Marker", newJString(Marker))
  add(query_604915, "SubscriptionName", newJString(SubscriptionName))
  add(query_604915, "Action", newJString(Action))
  add(query_604915, "Version", newJString(Version))
  if Filters != nil:
    query_604915.add "Filters", Filters
  add(query_604915, "MaxRecords", newJInt(MaxRecords))
  result = call_604914.call(nil, query_604915, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_604897(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_604898, base: "/",
    url: url_GetDescribeEventSubscriptions_604899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_604960 = ref object of OpenApiRestCall_601389
proc url_PostDescribeEvents_604962(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_604961(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604963 = query.getOrDefault("Action")
  valid_604963 = validateParameter(valid_604963, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_604963 != nil:
    section.add "Action", valid_604963
  var valid_604964 = query.getOrDefault("Version")
  valid_604964 = validateParameter(valid_604964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604964 != nil:
    section.add "Version", valid_604964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604965 = header.getOrDefault("X-Amz-Signature")
  valid_604965 = validateParameter(valid_604965, JString, required = false,
                                 default = nil)
  if valid_604965 != nil:
    section.add "X-Amz-Signature", valid_604965
  var valid_604966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604966 = validateParameter(valid_604966, JString, required = false,
                                 default = nil)
  if valid_604966 != nil:
    section.add "X-Amz-Content-Sha256", valid_604966
  var valid_604967 = header.getOrDefault("X-Amz-Date")
  valid_604967 = validateParameter(valid_604967, JString, required = false,
                                 default = nil)
  if valid_604967 != nil:
    section.add "X-Amz-Date", valid_604967
  var valid_604968 = header.getOrDefault("X-Amz-Credential")
  valid_604968 = validateParameter(valid_604968, JString, required = false,
                                 default = nil)
  if valid_604968 != nil:
    section.add "X-Amz-Credential", valid_604968
  var valid_604969 = header.getOrDefault("X-Amz-Security-Token")
  valid_604969 = validateParameter(valid_604969, JString, required = false,
                                 default = nil)
  if valid_604969 != nil:
    section.add "X-Amz-Security-Token", valid_604969
  var valid_604970 = header.getOrDefault("X-Amz-Algorithm")
  valid_604970 = validateParameter(valid_604970, JString, required = false,
                                 default = nil)
  if valid_604970 != nil:
    section.add "X-Amz-Algorithm", valid_604970
  var valid_604971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604971 = validateParameter(valid_604971, JString, required = false,
                                 default = nil)
  if valid_604971 != nil:
    section.add "X-Amz-SignedHeaders", valid_604971
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_604972 = formData.getOrDefault("MaxRecords")
  valid_604972 = validateParameter(valid_604972, JInt, required = false, default = nil)
  if valid_604972 != nil:
    section.add "MaxRecords", valid_604972
  var valid_604973 = formData.getOrDefault("Marker")
  valid_604973 = validateParameter(valid_604973, JString, required = false,
                                 default = nil)
  if valid_604973 != nil:
    section.add "Marker", valid_604973
  var valid_604974 = formData.getOrDefault("SourceIdentifier")
  valid_604974 = validateParameter(valid_604974, JString, required = false,
                                 default = nil)
  if valid_604974 != nil:
    section.add "SourceIdentifier", valid_604974
  var valid_604975 = formData.getOrDefault("SourceType")
  valid_604975 = validateParameter(valid_604975, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_604975 != nil:
    section.add "SourceType", valid_604975
  var valid_604976 = formData.getOrDefault("Duration")
  valid_604976 = validateParameter(valid_604976, JInt, required = false, default = nil)
  if valid_604976 != nil:
    section.add "Duration", valid_604976
  var valid_604977 = formData.getOrDefault("EndTime")
  valid_604977 = validateParameter(valid_604977, JString, required = false,
                                 default = nil)
  if valid_604977 != nil:
    section.add "EndTime", valid_604977
  var valid_604978 = formData.getOrDefault("StartTime")
  valid_604978 = validateParameter(valid_604978, JString, required = false,
                                 default = nil)
  if valid_604978 != nil:
    section.add "StartTime", valid_604978
  var valid_604979 = formData.getOrDefault("EventCategories")
  valid_604979 = validateParameter(valid_604979, JArray, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "EventCategories", valid_604979
  var valid_604980 = formData.getOrDefault("Filters")
  valid_604980 = validateParameter(valid_604980, JArray, required = false,
                                 default = nil)
  if valid_604980 != nil:
    section.add "Filters", valid_604980
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604981: Call_PostDescribeEvents_604960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_604981.validator(path, query, header, formData, body)
  let scheme = call_604981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604981.url(scheme.get, call_604981.host, call_604981.base,
                         call_604981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604981, url, valid)

proc call*(call_604982: Call_PostDescribeEvents_604960; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_604983 = newJObject()
  var formData_604984 = newJObject()
  add(formData_604984, "MaxRecords", newJInt(MaxRecords))
  add(formData_604984, "Marker", newJString(Marker))
  add(formData_604984, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_604984, "SourceType", newJString(SourceType))
  add(formData_604984, "Duration", newJInt(Duration))
  add(formData_604984, "EndTime", newJString(EndTime))
  add(formData_604984, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_604984.add "EventCategories", EventCategories
  add(query_604983, "Action", newJString(Action))
  if Filters != nil:
    formData_604984.add "Filters", Filters
  add(query_604983, "Version", newJString(Version))
  result = call_604982.call(nil, query_604983, nil, formData_604984, nil)

var postDescribeEvents* = Call_PostDescribeEvents_604960(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_604961, base: "/",
    url: url_PostDescribeEvents_604962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_604936 = ref object of OpenApiRestCall_601389
proc url_GetDescribeEvents_604938(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_604937(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604939 = query.getOrDefault("Marker")
  valid_604939 = validateParameter(valid_604939, JString, required = false,
                                 default = nil)
  if valid_604939 != nil:
    section.add "Marker", valid_604939
  var valid_604940 = query.getOrDefault("SourceType")
  valid_604940 = validateParameter(valid_604940, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_604940 != nil:
    section.add "SourceType", valid_604940
  var valid_604941 = query.getOrDefault("SourceIdentifier")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "SourceIdentifier", valid_604941
  var valid_604942 = query.getOrDefault("EventCategories")
  valid_604942 = validateParameter(valid_604942, JArray, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "EventCategories", valid_604942
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604943 = query.getOrDefault("Action")
  valid_604943 = validateParameter(valid_604943, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_604943 != nil:
    section.add "Action", valid_604943
  var valid_604944 = query.getOrDefault("StartTime")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "StartTime", valid_604944
  var valid_604945 = query.getOrDefault("Duration")
  valid_604945 = validateParameter(valid_604945, JInt, required = false, default = nil)
  if valid_604945 != nil:
    section.add "Duration", valid_604945
  var valid_604946 = query.getOrDefault("EndTime")
  valid_604946 = validateParameter(valid_604946, JString, required = false,
                                 default = nil)
  if valid_604946 != nil:
    section.add "EndTime", valid_604946
  var valid_604947 = query.getOrDefault("Version")
  valid_604947 = validateParameter(valid_604947, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604947 != nil:
    section.add "Version", valid_604947
  var valid_604948 = query.getOrDefault("Filters")
  valid_604948 = validateParameter(valid_604948, JArray, required = false,
                                 default = nil)
  if valid_604948 != nil:
    section.add "Filters", valid_604948
  var valid_604949 = query.getOrDefault("MaxRecords")
  valid_604949 = validateParameter(valid_604949, JInt, required = false, default = nil)
  if valid_604949 != nil:
    section.add "MaxRecords", valid_604949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604950 = header.getOrDefault("X-Amz-Signature")
  valid_604950 = validateParameter(valid_604950, JString, required = false,
                                 default = nil)
  if valid_604950 != nil:
    section.add "X-Amz-Signature", valid_604950
  var valid_604951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604951 = validateParameter(valid_604951, JString, required = false,
                                 default = nil)
  if valid_604951 != nil:
    section.add "X-Amz-Content-Sha256", valid_604951
  var valid_604952 = header.getOrDefault("X-Amz-Date")
  valid_604952 = validateParameter(valid_604952, JString, required = false,
                                 default = nil)
  if valid_604952 != nil:
    section.add "X-Amz-Date", valid_604952
  var valid_604953 = header.getOrDefault("X-Amz-Credential")
  valid_604953 = validateParameter(valid_604953, JString, required = false,
                                 default = nil)
  if valid_604953 != nil:
    section.add "X-Amz-Credential", valid_604953
  var valid_604954 = header.getOrDefault("X-Amz-Security-Token")
  valid_604954 = validateParameter(valid_604954, JString, required = false,
                                 default = nil)
  if valid_604954 != nil:
    section.add "X-Amz-Security-Token", valid_604954
  var valid_604955 = header.getOrDefault("X-Amz-Algorithm")
  valid_604955 = validateParameter(valid_604955, JString, required = false,
                                 default = nil)
  if valid_604955 != nil:
    section.add "X-Amz-Algorithm", valid_604955
  var valid_604956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604956 = validateParameter(valid_604956, JString, required = false,
                                 default = nil)
  if valid_604956 != nil:
    section.add "X-Amz-SignedHeaders", valid_604956
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604957: Call_GetDescribeEvents_604936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_604957.validator(path, query, header, formData, body)
  let scheme = call_604957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604957.url(scheme.get, call_604957.host, call_604957.base,
                         call_604957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604957, url, valid)

proc call*(call_604958: Call_GetDescribeEvents_604936; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_604959 = newJObject()
  add(query_604959, "Marker", newJString(Marker))
  add(query_604959, "SourceType", newJString(SourceType))
  add(query_604959, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_604959.add "EventCategories", EventCategories
  add(query_604959, "Action", newJString(Action))
  add(query_604959, "StartTime", newJString(StartTime))
  add(query_604959, "Duration", newJInt(Duration))
  add(query_604959, "EndTime", newJString(EndTime))
  add(query_604959, "Version", newJString(Version))
  if Filters != nil:
    query_604959.add "Filters", Filters
  add(query_604959, "MaxRecords", newJInt(MaxRecords))
  result = call_604958.call(nil, query_604959, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_604936(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_604937,
    base: "/", url: url_GetDescribeEvents_604938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_605004 = ref object of OpenApiRestCall_601389
proc url_PostDescribeGlobalClusters_605006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_605005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605007 = query.getOrDefault("Action")
  valid_605007 = validateParameter(valid_605007, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_605007 != nil:
    section.add "Action", valid_605007
  var valid_605008 = query.getOrDefault("Version")
  valid_605008 = validateParameter(valid_605008, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605008 != nil:
    section.add "Version", valid_605008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605009 = header.getOrDefault("X-Amz-Signature")
  valid_605009 = validateParameter(valid_605009, JString, required = false,
                                 default = nil)
  if valid_605009 != nil:
    section.add "X-Amz-Signature", valid_605009
  var valid_605010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605010 = validateParameter(valid_605010, JString, required = false,
                                 default = nil)
  if valid_605010 != nil:
    section.add "X-Amz-Content-Sha256", valid_605010
  var valid_605011 = header.getOrDefault("X-Amz-Date")
  valid_605011 = validateParameter(valid_605011, JString, required = false,
                                 default = nil)
  if valid_605011 != nil:
    section.add "X-Amz-Date", valid_605011
  var valid_605012 = header.getOrDefault("X-Amz-Credential")
  valid_605012 = validateParameter(valid_605012, JString, required = false,
                                 default = nil)
  if valid_605012 != nil:
    section.add "X-Amz-Credential", valid_605012
  var valid_605013 = header.getOrDefault("X-Amz-Security-Token")
  valid_605013 = validateParameter(valid_605013, JString, required = false,
                                 default = nil)
  if valid_605013 != nil:
    section.add "X-Amz-Security-Token", valid_605013
  var valid_605014 = header.getOrDefault("X-Amz-Algorithm")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Algorithm", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-SignedHeaders", valid_605015
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_605016 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "GlobalClusterIdentifier", valid_605016
  var valid_605017 = formData.getOrDefault("MaxRecords")
  valid_605017 = validateParameter(valid_605017, JInt, required = false, default = nil)
  if valid_605017 != nil:
    section.add "MaxRecords", valid_605017
  var valid_605018 = formData.getOrDefault("Marker")
  valid_605018 = validateParameter(valid_605018, JString, required = false,
                                 default = nil)
  if valid_605018 != nil:
    section.add "Marker", valid_605018
  var valid_605019 = formData.getOrDefault("Filters")
  valid_605019 = validateParameter(valid_605019, JArray, required = false,
                                 default = nil)
  if valid_605019 != nil:
    section.add "Filters", valid_605019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605020: Call_PostDescribeGlobalClusters_605004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605020.validator(path, query, header, formData, body)
  let scheme = call_605020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605020.url(scheme.get, call_605020.host, call_605020.base,
                         call_605020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605020, url, valid)

proc call*(call_605021: Call_PostDescribeGlobalClusters_605004;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_605022 = newJObject()
  var formData_605023 = newJObject()
  add(formData_605023, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_605023, "MaxRecords", newJInt(MaxRecords))
  add(formData_605023, "Marker", newJString(Marker))
  add(query_605022, "Action", newJString(Action))
  if Filters != nil:
    formData_605023.add "Filters", Filters
  add(query_605022, "Version", newJString(Version))
  result = call_605021.call(nil, query_605022, nil, formData_605023, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_605004(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_605005, base: "/",
    url: url_PostDescribeGlobalClusters_605006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_604985 = ref object of OpenApiRestCall_601389
proc url_GetDescribeGlobalClusters_604987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_604986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604988 = query.getOrDefault("Marker")
  valid_604988 = validateParameter(valid_604988, JString, required = false,
                                 default = nil)
  if valid_604988 != nil:
    section.add "Marker", valid_604988
  var valid_604989 = query.getOrDefault("GlobalClusterIdentifier")
  valid_604989 = validateParameter(valid_604989, JString, required = false,
                                 default = nil)
  if valid_604989 != nil:
    section.add "GlobalClusterIdentifier", valid_604989
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604990 = query.getOrDefault("Action")
  valid_604990 = validateParameter(valid_604990, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_604990 != nil:
    section.add "Action", valid_604990
  var valid_604991 = query.getOrDefault("Version")
  valid_604991 = validateParameter(valid_604991, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604991 != nil:
    section.add "Version", valid_604991
  var valid_604992 = query.getOrDefault("Filters")
  valid_604992 = validateParameter(valid_604992, JArray, required = false,
                                 default = nil)
  if valid_604992 != nil:
    section.add "Filters", valid_604992
  var valid_604993 = query.getOrDefault("MaxRecords")
  valid_604993 = validateParameter(valid_604993, JInt, required = false, default = nil)
  if valid_604993 != nil:
    section.add "MaxRecords", valid_604993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604994 = header.getOrDefault("X-Amz-Signature")
  valid_604994 = validateParameter(valid_604994, JString, required = false,
                                 default = nil)
  if valid_604994 != nil:
    section.add "X-Amz-Signature", valid_604994
  var valid_604995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604995 = validateParameter(valid_604995, JString, required = false,
                                 default = nil)
  if valid_604995 != nil:
    section.add "X-Amz-Content-Sha256", valid_604995
  var valid_604996 = header.getOrDefault("X-Amz-Date")
  valid_604996 = validateParameter(valid_604996, JString, required = false,
                                 default = nil)
  if valid_604996 != nil:
    section.add "X-Amz-Date", valid_604996
  var valid_604997 = header.getOrDefault("X-Amz-Credential")
  valid_604997 = validateParameter(valid_604997, JString, required = false,
                                 default = nil)
  if valid_604997 != nil:
    section.add "X-Amz-Credential", valid_604997
  var valid_604998 = header.getOrDefault("X-Amz-Security-Token")
  valid_604998 = validateParameter(valid_604998, JString, required = false,
                                 default = nil)
  if valid_604998 != nil:
    section.add "X-Amz-Security-Token", valid_604998
  var valid_604999 = header.getOrDefault("X-Amz-Algorithm")
  valid_604999 = validateParameter(valid_604999, JString, required = false,
                                 default = nil)
  if valid_604999 != nil:
    section.add "X-Amz-Algorithm", valid_604999
  var valid_605000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605000 = validateParameter(valid_605000, JString, required = false,
                                 default = nil)
  if valid_605000 != nil:
    section.add "X-Amz-SignedHeaders", valid_605000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605001: Call_GetDescribeGlobalClusters_604985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605001.validator(path, query, header, formData, body)
  let scheme = call_605001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605001.url(scheme.get, call_605001.host, call_605001.base,
                         call_605001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605001, url, valid)

proc call*(call_605002: Call_GetDescribeGlobalClusters_604985; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605003 = newJObject()
  add(query_605003, "Marker", newJString(Marker))
  add(query_605003, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_605003, "Action", newJString(Action))
  add(query_605003, "Version", newJString(Version))
  if Filters != nil:
    query_605003.add "Filters", Filters
  add(query_605003, "MaxRecords", newJInt(MaxRecords))
  result = call_605002.call(nil, query_605003, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_604985(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_604986, base: "/",
    url: url_GetDescribeGlobalClusters_604987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_605043 = ref object of OpenApiRestCall_601389
proc url_PostDescribeInstallationMedia_605045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_605044(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605046 = query.getOrDefault("Action")
  valid_605046 = validateParameter(valid_605046, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_605046 != nil:
    section.add "Action", valid_605046
  var valid_605047 = query.getOrDefault("Version")
  valid_605047 = validateParameter(valid_605047, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605047 != nil:
    section.add "Version", valid_605047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605048 = header.getOrDefault("X-Amz-Signature")
  valid_605048 = validateParameter(valid_605048, JString, required = false,
                                 default = nil)
  if valid_605048 != nil:
    section.add "X-Amz-Signature", valid_605048
  var valid_605049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Content-Sha256", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Date")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Date", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Credential")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Credential", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-Security-Token")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-Security-Token", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Algorithm")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Algorithm", valid_605053
  var valid_605054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605054 = validateParameter(valid_605054, JString, required = false,
                                 default = nil)
  if valid_605054 != nil:
    section.add "X-Amz-SignedHeaders", valid_605054
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_605055 = formData.getOrDefault("MaxRecords")
  valid_605055 = validateParameter(valid_605055, JInt, required = false, default = nil)
  if valid_605055 != nil:
    section.add "MaxRecords", valid_605055
  var valid_605056 = formData.getOrDefault("Marker")
  valid_605056 = validateParameter(valid_605056, JString, required = false,
                                 default = nil)
  if valid_605056 != nil:
    section.add "Marker", valid_605056
  var valid_605057 = formData.getOrDefault("InstallationMediaId")
  valid_605057 = validateParameter(valid_605057, JString, required = false,
                                 default = nil)
  if valid_605057 != nil:
    section.add "InstallationMediaId", valid_605057
  var valid_605058 = formData.getOrDefault("Filters")
  valid_605058 = validateParameter(valid_605058, JArray, required = false,
                                 default = nil)
  if valid_605058 != nil:
    section.add "Filters", valid_605058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605059: Call_PostDescribeInstallationMedia_605043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_605059.validator(path, query, header, formData, body)
  let scheme = call_605059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605059.url(scheme.get, call_605059.host, call_605059.base,
                         call_605059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605059, url, valid)

proc call*(call_605060: Call_PostDescribeInstallationMedia_605043;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_605061 = newJObject()
  var formData_605062 = newJObject()
  add(formData_605062, "MaxRecords", newJInt(MaxRecords))
  add(formData_605062, "Marker", newJString(Marker))
  add(formData_605062, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_605061, "Action", newJString(Action))
  if Filters != nil:
    formData_605062.add "Filters", Filters
  add(query_605061, "Version", newJString(Version))
  result = call_605060.call(nil, query_605061, nil, formData_605062, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_605043(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_605044, base: "/",
    url: url_PostDescribeInstallationMedia_605045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_605024 = ref object of OpenApiRestCall_601389
proc url_GetDescribeInstallationMedia_605026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_605025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_605027 = query.getOrDefault("Marker")
  valid_605027 = validateParameter(valid_605027, JString, required = false,
                                 default = nil)
  if valid_605027 != nil:
    section.add "Marker", valid_605027
  var valid_605028 = query.getOrDefault("InstallationMediaId")
  valid_605028 = validateParameter(valid_605028, JString, required = false,
                                 default = nil)
  if valid_605028 != nil:
    section.add "InstallationMediaId", valid_605028
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605029 = query.getOrDefault("Action")
  valid_605029 = validateParameter(valid_605029, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_605029 != nil:
    section.add "Action", valid_605029
  var valid_605030 = query.getOrDefault("Version")
  valid_605030 = validateParameter(valid_605030, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605030 != nil:
    section.add "Version", valid_605030
  var valid_605031 = query.getOrDefault("Filters")
  valid_605031 = validateParameter(valid_605031, JArray, required = false,
                                 default = nil)
  if valid_605031 != nil:
    section.add "Filters", valid_605031
  var valid_605032 = query.getOrDefault("MaxRecords")
  valid_605032 = validateParameter(valid_605032, JInt, required = false, default = nil)
  if valid_605032 != nil:
    section.add "MaxRecords", valid_605032
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605033 = header.getOrDefault("X-Amz-Signature")
  valid_605033 = validateParameter(valid_605033, JString, required = false,
                                 default = nil)
  if valid_605033 != nil:
    section.add "X-Amz-Signature", valid_605033
  var valid_605034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "X-Amz-Content-Sha256", valid_605034
  var valid_605035 = header.getOrDefault("X-Amz-Date")
  valid_605035 = validateParameter(valid_605035, JString, required = false,
                                 default = nil)
  if valid_605035 != nil:
    section.add "X-Amz-Date", valid_605035
  var valid_605036 = header.getOrDefault("X-Amz-Credential")
  valid_605036 = validateParameter(valid_605036, JString, required = false,
                                 default = nil)
  if valid_605036 != nil:
    section.add "X-Amz-Credential", valid_605036
  var valid_605037 = header.getOrDefault("X-Amz-Security-Token")
  valid_605037 = validateParameter(valid_605037, JString, required = false,
                                 default = nil)
  if valid_605037 != nil:
    section.add "X-Amz-Security-Token", valid_605037
  var valid_605038 = header.getOrDefault("X-Amz-Algorithm")
  valid_605038 = validateParameter(valid_605038, JString, required = false,
                                 default = nil)
  if valid_605038 != nil:
    section.add "X-Amz-Algorithm", valid_605038
  var valid_605039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605039 = validateParameter(valid_605039, JString, required = false,
                                 default = nil)
  if valid_605039 != nil:
    section.add "X-Amz-SignedHeaders", valid_605039
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605040: Call_GetDescribeInstallationMedia_605024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_605040.validator(path, query, header, formData, body)
  let scheme = call_605040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605040.url(scheme.get, call_605040.host, call_605040.base,
                         call_605040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605040, url, valid)

proc call*(call_605041: Call_GetDescribeInstallationMedia_605024;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_605042 = newJObject()
  add(query_605042, "Marker", newJString(Marker))
  add(query_605042, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_605042, "Action", newJString(Action))
  add(query_605042, "Version", newJString(Version))
  if Filters != nil:
    query_605042.add "Filters", Filters
  add(query_605042, "MaxRecords", newJInt(MaxRecords))
  result = call_605041.call(nil, query_605042, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_605024(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_605025, base: "/",
    url: url_GetDescribeInstallationMedia_605026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_605083 = ref object of OpenApiRestCall_601389
proc url_PostDescribeOptionGroupOptions_605085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_605084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605086 = query.getOrDefault("Action")
  valid_605086 = validateParameter(valid_605086, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_605086 != nil:
    section.add "Action", valid_605086
  var valid_605087 = query.getOrDefault("Version")
  valid_605087 = validateParameter(valid_605087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605087 != nil:
    section.add "Version", valid_605087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605088 = header.getOrDefault("X-Amz-Signature")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Signature", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-Content-Sha256", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Date")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Date", valid_605090
  var valid_605091 = header.getOrDefault("X-Amz-Credential")
  valid_605091 = validateParameter(valid_605091, JString, required = false,
                                 default = nil)
  if valid_605091 != nil:
    section.add "X-Amz-Credential", valid_605091
  var valid_605092 = header.getOrDefault("X-Amz-Security-Token")
  valid_605092 = validateParameter(valid_605092, JString, required = false,
                                 default = nil)
  if valid_605092 != nil:
    section.add "X-Amz-Security-Token", valid_605092
  var valid_605093 = header.getOrDefault("X-Amz-Algorithm")
  valid_605093 = validateParameter(valid_605093, JString, required = false,
                                 default = nil)
  if valid_605093 != nil:
    section.add "X-Amz-Algorithm", valid_605093
  var valid_605094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605094 = validateParameter(valid_605094, JString, required = false,
                                 default = nil)
  if valid_605094 != nil:
    section.add "X-Amz-SignedHeaders", valid_605094
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_605095 = formData.getOrDefault("MaxRecords")
  valid_605095 = validateParameter(valid_605095, JInt, required = false, default = nil)
  if valid_605095 != nil:
    section.add "MaxRecords", valid_605095
  var valid_605096 = formData.getOrDefault("Marker")
  valid_605096 = validateParameter(valid_605096, JString, required = false,
                                 default = nil)
  if valid_605096 != nil:
    section.add "Marker", valid_605096
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_605097 = formData.getOrDefault("EngineName")
  valid_605097 = validateParameter(valid_605097, JString, required = true,
                                 default = nil)
  if valid_605097 != nil:
    section.add "EngineName", valid_605097
  var valid_605098 = formData.getOrDefault("MajorEngineVersion")
  valid_605098 = validateParameter(valid_605098, JString, required = false,
                                 default = nil)
  if valid_605098 != nil:
    section.add "MajorEngineVersion", valid_605098
  var valid_605099 = formData.getOrDefault("Filters")
  valid_605099 = validateParameter(valid_605099, JArray, required = false,
                                 default = nil)
  if valid_605099 != nil:
    section.add "Filters", valid_605099
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605100: Call_PostDescribeOptionGroupOptions_605083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_605100.validator(path, query, header, formData, body)
  let scheme = call_605100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605100.url(scheme.get, call_605100.host, call_605100.base,
                         call_605100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605100, url, valid)

proc call*(call_605101: Call_PostDescribeOptionGroupOptions_605083;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_605102 = newJObject()
  var formData_605103 = newJObject()
  add(formData_605103, "MaxRecords", newJInt(MaxRecords))
  add(formData_605103, "Marker", newJString(Marker))
  add(formData_605103, "EngineName", newJString(EngineName))
  add(formData_605103, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_605102, "Action", newJString(Action))
  if Filters != nil:
    formData_605103.add "Filters", Filters
  add(query_605102, "Version", newJString(Version))
  result = call_605101.call(nil, query_605102, nil, formData_605103, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_605083(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_605084, base: "/",
    url: url_PostDescribeOptionGroupOptions_605085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_605063 = ref object of OpenApiRestCall_601389
proc url_GetDescribeOptionGroupOptions_605065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_605064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_605066 = query.getOrDefault("EngineName")
  valid_605066 = validateParameter(valid_605066, JString, required = true,
                                 default = nil)
  if valid_605066 != nil:
    section.add "EngineName", valid_605066
  var valid_605067 = query.getOrDefault("Marker")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "Marker", valid_605067
  var valid_605068 = query.getOrDefault("Action")
  valid_605068 = validateParameter(valid_605068, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_605068 != nil:
    section.add "Action", valid_605068
  var valid_605069 = query.getOrDefault("Version")
  valid_605069 = validateParameter(valid_605069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605069 != nil:
    section.add "Version", valid_605069
  var valid_605070 = query.getOrDefault("Filters")
  valid_605070 = validateParameter(valid_605070, JArray, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "Filters", valid_605070
  var valid_605071 = query.getOrDefault("MaxRecords")
  valid_605071 = validateParameter(valid_605071, JInt, required = false, default = nil)
  if valid_605071 != nil:
    section.add "MaxRecords", valid_605071
  var valid_605072 = query.getOrDefault("MajorEngineVersion")
  valid_605072 = validateParameter(valid_605072, JString, required = false,
                                 default = nil)
  if valid_605072 != nil:
    section.add "MajorEngineVersion", valid_605072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605073 = header.getOrDefault("X-Amz-Signature")
  valid_605073 = validateParameter(valid_605073, JString, required = false,
                                 default = nil)
  if valid_605073 != nil:
    section.add "X-Amz-Signature", valid_605073
  var valid_605074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605074 = validateParameter(valid_605074, JString, required = false,
                                 default = nil)
  if valid_605074 != nil:
    section.add "X-Amz-Content-Sha256", valid_605074
  var valid_605075 = header.getOrDefault("X-Amz-Date")
  valid_605075 = validateParameter(valid_605075, JString, required = false,
                                 default = nil)
  if valid_605075 != nil:
    section.add "X-Amz-Date", valid_605075
  var valid_605076 = header.getOrDefault("X-Amz-Credential")
  valid_605076 = validateParameter(valid_605076, JString, required = false,
                                 default = nil)
  if valid_605076 != nil:
    section.add "X-Amz-Credential", valid_605076
  var valid_605077 = header.getOrDefault("X-Amz-Security-Token")
  valid_605077 = validateParameter(valid_605077, JString, required = false,
                                 default = nil)
  if valid_605077 != nil:
    section.add "X-Amz-Security-Token", valid_605077
  var valid_605078 = header.getOrDefault("X-Amz-Algorithm")
  valid_605078 = validateParameter(valid_605078, JString, required = false,
                                 default = nil)
  if valid_605078 != nil:
    section.add "X-Amz-Algorithm", valid_605078
  var valid_605079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605079 = validateParameter(valid_605079, JString, required = false,
                                 default = nil)
  if valid_605079 != nil:
    section.add "X-Amz-SignedHeaders", valid_605079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605080: Call_GetDescribeOptionGroupOptions_605063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_605080.validator(path, query, header, formData, body)
  let scheme = call_605080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605080.url(scheme.get, call_605080.host, call_605080.base,
                         call_605080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605080, url, valid)

proc call*(call_605081: Call_GetDescribeOptionGroupOptions_605063;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_605082 = newJObject()
  add(query_605082, "EngineName", newJString(EngineName))
  add(query_605082, "Marker", newJString(Marker))
  add(query_605082, "Action", newJString(Action))
  add(query_605082, "Version", newJString(Version))
  if Filters != nil:
    query_605082.add "Filters", Filters
  add(query_605082, "MaxRecords", newJInt(MaxRecords))
  add(query_605082, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_605081.call(nil, query_605082, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_605063(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_605064, base: "/",
    url: url_GetDescribeOptionGroupOptions_605065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_605125 = ref object of OpenApiRestCall_601389
proc url_PostDescribeOptionGroups_605127(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_605126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605128 = query.getOrDefault("Action")
  valid_605128 = validateParameter(valid_605128, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_605128 != nil:
    section.add "Action", valid_605128
  var valid_605129 = query.getOrDefault("Version")
  valid_605129 = validateParameter(valid_605129, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605129 != nil:
    section.add "Version", valid_605129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605130 = header.getOrDefault("X-Amz-Signature")
  valid_605130 = validateParameter(valid_605130, JString, required = false,
                                 default = nil)
  if valid_605130 != nil:
    section.add "X-Amz-Signature", valid_605130
  var valid_605131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605131 = validateParameter(valid_605131, JString, required = false,
                                 default = nil)
  if valid_605131 != nil:
    section.add "X-Amz-Content-Sha256", valid_605131
  var valid_605132 = header.getOrDefault("X-Amz-Date")
  valid_605132 = validateParameter(valid_605132, JString, required = false,
                                 default = nil)
  if valid_605132 != nil:
    section.add "X-Amz-Date", valid_605132
  var valid_605133 = header.getOrDefault("X-Amz-Credential")
  valid_605133 = validateParameter(valid_605133, JString, required = false,
                                 default = nil)
  if valid_605133 != nil:
    section.add "X-Amz-Credential", valid_605133
  var valid_605134 = header.getOrDefault("X-Amz-Security-Token")
  valid_605134 = validateParameter(valid_605134, JString, required = false,
                                 default = nil)
  if valid_605134 != nil:
    section.add "X-Amz-Security-Token", valid_605134
  var valid_605135 = header.getOrDefault("X-Amz-Algorithm")
  valid_605135 = validateParameter(valid_605135, JString, required = false,
                                 default = nil)
  if valid_605135 != nil:
    section.add "X-Amz-Algorithm", valid_605135
  var valid_605136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605136 = validateParameter(valid_605136, JString, required = false,
                                 default = nil)
  if valid_605136 != nil:
    section.add "X-Amz-SignedHeaders", valid_605136
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_605137 = formData.getOrDefault("MaxRecords")
  valid_605137 = validateParameter(valid_605137, JInt, required = false, default = nil)
  if valid_605137 != nil:
    section.add "MaxRecords", valid_605137
  var valid_605138 = formData.getOrDefault("Marker")
  valid_605138 = validateParameter(valid_605138, JString, required = false,
                                 default = nil)
  if valid_605138 != nil:
    section.add "Marker", valid_605138
  var valid_605139 = formData.getOrDefault("EngineName")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "EngineName", valid_605139
  var valid_605140 = formData.getOrDefault("MajorEngineVersion")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "MajorEngineVersion", valid_605140
  var valid_605141 = formData.getOrDefault("OptionGroupName")
  valid_605141 = validateParameter(valid_605141, JString, required = false,
                                 default = nil)
  if valid_605141 != nil:
    section.add "OptionGroupName", valid_605141
  var valid_605142 = formData.getOrDefault("Filters")
  valid_605142 = validateParameter(valid_605142, JArray, required = false,
                                 default = nil)
  if valid_605142 != nil:
    section.add "Filters", valid_605142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605143: Call_PostDescribeOptionGroups_605125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_605143.validator(path, query, header, formData, body)
  let scheme = call_605143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605143.url(scheme.get, call_605143.host, call_605143.base,
                         call_605143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605143, url, valid)

proc call*(call_605144: Call_PostDescribeOptionGroups_605125; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_605145 = newJObject()
  var formData_605146 = newJObject()
  add(formData_605146, "MaxRecords", newJInt(MaxRecords))
  add(formData_605146, "Marker", newJString(Marker))
  add(formData_605146, "EngineName", newJString(EngineName))
  add(formData_605146, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_605145, "Action", newJString(Action))
  add(formData_605146, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_605146.add "Filters", Filters
  add(query_605145, "Version", newJString(Version))
  result = call_605144.call(nil, query_605145, nil, formData_605146, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_605125(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_605126, base: "/",
    url: url_PostDescribeOptionGroups_605127, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_605104 = ref object of OpenApiRestCall_601389
proc url_GetDescribeOptionGroups_605106(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_605105(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_605107 = query.getOrDefault("EngineName")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "EngineName", valid_605107
  var valid_605108 = query.getOrDefault("Marker")
  valid_605108 = validateParameter(valid_605108, JString, required = false,
                                 default = nil)
  if valid_605108 != nil:
    section.add "Marker", valid_605108
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605109 = query.getOrDefault("Action")
  valid_605109 = validateParameter(valid_605109, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_605109 != nil:
    section.add "Action", valid_605109
  var valid_605110 = query.getOrDefault("OptionGroupName")
  valid_605110 = validateParameter(valid_605110, JString, required = false,
                                 default = nil)
  if valid_605110 != nil:
    section.add "OptionGroupName", valid_605110
  var valid_605111 = query.getOrDefault("Version")
  valid_605111 = validateParameter(valid_605111, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605111 != nil:
    section.add "Version", valid_605111
  var valid_605112 = query.getOrDefault("Filters")
  valid_605112 = validateParameter(valid_605112, JArray, required = false,
                                 default = nil)
  if valid_605112 != nil:
    section.add "Filters", valid_605112
  var valid_605113 = query.getOrDefault("MaxRecords")
  valid_605113 = validateParameter(valid_605113, JInt, required = false, default = nil)
  if valid_605113 != nil:
    section.add "MaxRecords", valid_605113
  var valid_605114 = query.getOrDefault("MajorEngineVersion")
  valid_605114 = validateParameter(valid_605114, JString, required = false,
                                 default = nil)
  if valid_605114 != nil:
    section.add "MajorEngineVersion", valid_605114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605115 = header.getOrDefault("X-Amz-Signature")
  valid_605115 = validateParameter(valid_605115, JString, required = false,
                                 default = nil)
  if valid_605115 != nil:
    section.add "X-Amz-Signature", valid_605115
  var valid_605116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605116 = validateParameter(valid_605116, JString, required = false,
                                 default = nil)
  if valid_605116 != nil:
    section.add "X-Amz-Content-Sha256", valid_605116
  var valid_605117 = header.getOrDefault("X-Amz-Date")
  valid_605117 = validateParameter(valid_605117, JString, required = false,
                                 default = nil)
  if valid_605117 != nil:
    section.add "X-Amz-Date", valid_605117
  var valid_605118 = header.getOrDefault("X-Amz-Credential")
  valid_605118 = validateParameter(valid_605118, JString, required = false,
                                 default = nil)
  if valid_605118 != nil:
    section.add "X-Amz-Credential", valid_605118
  var valid_605119 = header.getOrDefault("X-Amz-Security-Token")
  valid_605119 = validateParameter(valid_605119, JString, required = false,
                                 default = nil)
  if valid_605119 != nil:
    section.add "X-Amz-Security-Token", valid_605119
  var valid_605120 = header.getOrDefault("X-Amz-Algorithm")
  valid_605120 = validateParameter(valid_605120, JString, required = false,
                                 default = nil)
  if valid_605120 != nil:
    section.add "X-Amz-Algorithm", valid_605120
  var valid_605121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605121 = validateParameter(valid_605121, JString, required = false,
                                 default = nil)
  if valid_605121 != nil:
    section.add "X-Amz-SignedHeaders", valid_605121
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605122: Call_GetDescribeOptionGroups_605104; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_605122.validator(path, query, header, formData, body)
  let scheme = call_605122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605122.url(scheme.get, call_605122.host, call_605122.base,
                         call_605122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605122, url, valid)

proc call*(call_605123: Call_GetDescribeOptionGroups_605104;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_605124 = newJObject()
  add(query_605124, "EngineName", newJString(EngineName))
  add(query_605124, "Marker", newJString(Marker))
  add(query_605124, "Action", newJString(Action))
  add(query_605124, "OptionGroupName", newJString(OptionGroupName))
  add(query_605124, "Version", newJString(Version))
  if Filters != nil:
    query_605124.add "Filters", Filters
  add(query_605124, "MaxRecords", newJInt(MaxRecords))
  add(query_605124, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_605123.call(nil, query_605124, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_605104(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_605105, base: "/",
    url: url_GetDescribeOptionGroups_605106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_605170 = ref object of OpenApiRestCall_601389
proc url_PostDescribeOrderableDBInstanceOptions_605172(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_605171(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605173 = query.getOrDefault("Action")
  valid_605173 = validateParameter(valid_605173, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_605173 != nil:
    section.add "Action", valid_605173
  var valid_605174 = query.getOrDefault("Version")
  valid_605174 = validateParameter(valid_605174, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605174 != nil:
    section.add "Version", valid_605174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605175 = header.getOrDefault("X-Amz-Signature")
  valid_605175 = validateParameter(valid_605175, JString, required = false,
                                 default = nil)
  if valid_605175 != nil:
    section.add "X-Amz-Signature", valid_605175
  var valid_605176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605176 = validateParameter(valid_605176, JString, required = false,
                                 default = nil)
  if valid_605176 != nil:
    section.add "X-Amz-Content-Sha256", valid_605176
  var valid_605177 = header.getOrDefault("X-Amz-Date")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-Date", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-Credential")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-Credential", valid_605178
  var valid_605179 = header.getOrDefault("X-Amz-Security-Token")
  valid_605179 = validateParameter(valid_605179, JString, required = false,
                                 default = nil)
  if valid_605179 != nil:
    section.add "X-Amz-Security-Token", valid_605179
  var valid_605180 = header.getOrDefault("X-Amz-Algorithm")
  valid_605180 = validateParameter(valid_605180, JString, required = false,
                                 default = nil)
  if valid_605180 != nil:
    section.add "X-Amz-Algorithm", valid_605180
  var valid_605181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605181 = validateParameter(valid_605181, JString, required = false,
                                 default = nil)
  if valid_605181 != nil:
    section.add "X-Amz-SignedHeaders", valid_605181
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_605182 = formData.getOrDefault("DBInstanceClass")
  valid_605182 = validateParameter(valid_605182, JString, required = false,
                                 default = nil)
  if valid_605182 != nil:
    section.add "DBInstanceClass", valid_605182
  var valid_605183 = formData.getOrDefault("MaxRecords")
  valid_605183 = validateParameter(valid_605183, JInt, required = false, default = nil)
  if valid_605183 != nil:
    section.add "MaxRecords", valid_605183
  var valid_605184 = formData.getOrDefault("EngineVersion")
  valid_605184 = validateParameter(valid_605184, JString, required = false,
                                 default = nil)
  if valid_605184 != nil:
    section.add "EngineVersion", valid_605184
  var valid_605185 = formData.getOrDefault("Marker")
  valid_605185 = validateParameter(valid_605185, JString, required = false,
                                 default = nil)
  if valid_605185 != nil:
    section.add "Marker", valid_605185
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_605186 = formData.getOrDefault("Engine")
  valid_605186 = validateParameter(valid_605186, JString, required = true,
                                 default = nil)
  if valid_605186 != nil:
    section.add "Engine", valid_605186
  var valid_605187 = formData.getOrDefault("Vpc")
  valid_605187 = validateParameter(valid_605187, JBool, required = false, default = nil)
  if valid_605187 != nil:
    section.add "Vpc", valid_605187
  var valid_605188 = formData.getOrDefault("LicenseModel")
  valid_605188 = validateParameter(valid_605188, JString, required = false,
                                 default = nil)
  if valid_605188 != nil:
    section.add "LicenseModel", valid_605188
  var valid_605189 = formData.getOrDefault("Filters")
  valid_605189 = validateParameter(valid_605189, JArray, required = false,
                                 default = nil)
  if valid_605189 != nil:
    section.add "Filters", valid_605189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605190: Call_PostDescribeOrderableDBInstanceOptions_605170;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_605190.validator(path, query, header, formData, body)
  let scheme = call_605190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605190.url(scheme.get, call_605190.host, call_605190.base,
                         call_605190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605190, url, valid)

proc call*(call_605191: Call_PostDescribeOrderableDBInstanceOptions_605170;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_605192 = newJObject()
  var formData_605193 = newJObject()
  add(formData_605193, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605193, "MaxRecords", newJInt(MaxRecords))
  add(formData_605193, "EngineVersion", newJString(EngineVersion))
  add(formData_605193, "Marker", newJString(Marker))
  add(formData_605193, "Engine", newJString(Engine))
  add(formData_605193, "Vpc", newJBool(Vpc))
  add(query_605192, "Action", newJString(Action))
  add(formData_605193, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_605193.add "Filters", Filters
  add(query_605192, "Version", newJString(Version))
  result = call_605191.call(nil, query_605192, nil, formData_605193, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_605170(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_605171, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_605172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_605147 = ref object of OpenApiRestCall_601389
proc url_GetDescribeOrderableDBInstanceOptions_605149(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_605148(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_605150 = query.getOrDefault("Marker")
  valid_605150 = validateParameter(valid_605150, JString, required = false,
                                 default = nil)
  if valid_605150 != nil:
    section.add "Marker", valid_605150
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_605151 = query.getOrDefault("Engine")
  valid_605151 = validateParameter(valid_605151, JString, required = true,
                                 default = nil)
  if valid_605151 != nil:
    section.add "Engine", valid_605151
  var valid_605152 = query.getOrDefault("LicenseModel")
  valid_605152 = validateParameter(valid_605152, JString, required = false,
                                 default = nil)
  if valid_605152 != nil:
    section.add "LicenseModel", valid_605152
  var valid_605153 = query.getOrDefault("Vpc")
  valid_605153 = validateParameter(valid_605153, JBool, required = false, default = nil)
  if valid_605153 != nil:
    section.add "Vpc", valid_605153
  var valid_605154 = query.getOrDefault("EngineVersion")
  valid_605154 = validateParameter(valid_605154, JString, required = false,
                                 default = nil)
  if valid_605154 != nil:
    section.add "EngineVersion", valid_605154
  var valid_605155 = query.getOrDefault("Action")
  valid_605155 = validateParameter(valid_605155, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_605155 != nil:
    section.add "Action", valid_605155
  var valid_605156 = query.getOrDefault("Version")
  valid_605156 = validateParameter(valid_605156, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605156 != nil:
    section.add "Version", valid_605156
  var valid_605157 = query.getOrDefault("DBInstanceClass")
  valid_605157 = validateParameter(valid_605157, JString, required = false,
                                 default = nil)
  if valid_605157 != nil:
    section.add "DBInstanceClass", valid_605157
  var valid_605158 = query.getOrDefault("Filters")
  valid_605158 = validateParameter(valid_605158, JArray, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "Filters", valid_605158
  var valid_605159 = query.getOrDefault("MaxRecords")
  valid_605159 = validateParameter(valid_605159, JInt, required = false, default = nil)
  if valid_605159 != nil:
    section.add "MaxRecords", valid_605159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605160 = header.getOrDefault("X-Amz-Signature")
  valid_605160 = validateParameter(valid_605160, JString, required = false,
                                 default = nil)
  if valid_605160 != nil:
    section.add "X-Amz-Signature", valid_605160
  var valid_605161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605161 = validateParameter(valid_605161, JString, required = false,
                                 default = nil)
  if valid_605161 != nil:
    section.add "X-Amz-Content-Sha256", valid_605161
  var valid_605162 = header.getOrDefault("X-Amz-Date")
  valid_605162 = validateParameter(valid_605162, JString, required = false,
                                 default = nil)
  if valid_605162 != nil:
    section.add "X-Amz-Date", valid_605162
  var valid_605163 = header.getOrDefault("X-Amz-Credential")
  valid_605163 = validateParameter(valid_605163, JString, required = false,
                                 default = nil)
  if valid_605163 != nil:
    section.add "X-Amz-Credential", valid_605163
  var valid_605164 = header.getOrDefault("X-Amz-Security-Token")
  valid_605164 = validateParameter(valid_605164, JString, required = false,
                                 default = nil)
  if valid_605164 != nil:
    section.add "X-Amz-Security-Token", valid_605164
  var valid_605165 = header.getOrDefault("X-Amz-Algorithm")
  valid_605165 = validateParameter(valid_605165, JString, required = false,
                                 default = nil)
  if valid_605165 != nil:
    section.add "X-Amz-Algorithm", valid_605165
  var valid_605166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605166 = validateParameter(valid_605166, JString, required = false,
                                 default = nil)
  if valid_605166 != nil:
    section.add "X-Amz-SignedHeaders", valid_605166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605167: Call_GetDescribeOrderableDBInstanceOptions_605147;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_605167.validator(path, query, header, formData, body)
  let scheme = call_605167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605167.url(scheme.get, call_605167.host, call_605167.base,
                         call_605167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605167, url, valid)

proc call*(call_605168: Call_GetDescribeOrderableDBInstanceOptions_605147;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605169 = newJObject()
  add(query_605169, "Marker", newJString(Marker))
  add(query_605169, "Engine", newJString(Engine))
  add(query_605169, "LicenseModel", newJString(LicenseModel))
  add(query_605169, "Vpc", newJBool(Vpc))
  add(query_605169, "EngineVersion", newJString(EngineVersion))
  add(query_605169, "Action", newJString(Action))
  add(query_605169, "Version", newJString(Version))
  add(query_605169, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_605169.add "Filters", Filters
  add(query_605169, "MaxRecords", newJInt(MaxRecords))
  result = call_605168.call(nil, query_605169, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_605147(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_605148, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_605149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_605213 = ref object of OpenApiRestCall_601389
proc url_PostDescribePendingMaintenanceActions_605215(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_605214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605216 = query.getOrDefault("Action")
  valid_605216 = validateParameter(valid_605216, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_605216 != nil:
    section.add "Action", valid_605216
  var valid_605217 = query.getOrDefault("Version")
  valid_605217 = validateParameter(valid_605217, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605217 != nil:
    section.add "Version", valid_605217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605218 = header.getOrDefault("X-Amz-Signature")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Signature", valid_605218
  var valid_605219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605219 = validateParameter(valid_605219, JString, required = false,
                                 default = nil)
  if valid_605219 != nil:
    section.add "X-Amz-Content-Sha256", valid_605219
  var valid_605220 = header.getOrDefault("X-Amz-Date")
  valid_605220 = validateParameter(valid_605220, JString, required = false,
                                 default = nil)
  if valid_605220 != nil:
    section.add "X-Amz-Date", valid_605220
  var valid_605221 = header.getOrDefault("X-Amz-Credential")
  valid_605221 = validateParameter(valid_605221, JString, required = false,
                                 default = nil)
  if valid_605221 != nil:
    section.add "X-Amz-Credential", valid_605221
  var valid_605222 = header.getOrDefault("X-Amz-Security-Token")
  valid_605222 = validateParameter(valid_605222, JString, required = false,
                                 default = nil)
  if valid_605222 != nil:
    section.add "X-Amz-Security-Token", valid_605222
  var valid_605223 = header.getOrDefault("X-Amz-Algorithm")
  valid_605223 = validateParameter(valid_605223, JString, required = false,
                                 default = nil)
  if valid_605223 != nil:
    section.add "X-Amz-Algorithm", valid_605223
  var valid_605224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605224 = validateParameter(valid_605224, JString, required = false,
                                 default = nil)
  if valid_605224 != nil:
    section.add "X-Amz-SignedHeaders", valid_605224
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_605225 = formData.getOrDefault("MaxRecords")
  valid_605225 = validateParameter(valid_605225, JInt, required = false, default = nil)
  if valid_605225 != nil:
    section.add "MaxRecords", valid_605225
  var valid_605226 = formData.getOrDefault("Marker")
  valid_605226 = validateParameter(valid_605226, JString, required = false,
                                 default = nil)
  if valid_605226 != nil:
    section.add "Marker", valid_605226
  var valid_605227 = formData.getOrDefault("ResourceIdentifier")
  valid_605227 = validateParameter(valid_605227, JString, required = false,
                                 default = nil)
  if valid_605227 != nil:
    section.add "ResourceIdentifier", valid_605227
  var valid_605228 = formData.getOrDefault("Filters")
  valid_605228 = validateParameter(valid_605228, JArray, required = false,
                                 default = nil)
  if valid_605228 != nil:
    section.add "Filters", valid_605228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605229: Call_PostDescribePendingMaintenanceActions_605213;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_605229.validator(path, query, header, formData, body)
  let scheme = call_605229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605229.url(scheme.get, call_605229.host, call_605229.base,
                         call_605229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605229, url, valid)

proc call*(call_605230: Call_PostDescribePendingMaintenanceActions_605213;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_605231 = newJObject()
  var formData_605232 = newJObject()
  add(formData_605232, "MaxRecords", newJInt(MaxRecords))
  add(formData_605232, "Marker", newJString(Marker))
  add(formData_605232, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_605231, "Action", newJString(Action))
  if Filters != nil:
    formData_605232.add "Filters", Filters
  add(query_605231, "Version", newJString(Version))
  result = call_605230.call(nil, query_605231, nil, formData_605232, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_605213(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_605214, base: "/",
    url: url_PostDescribePendingMaintenanceActions_605215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_605194 = ref object of OpenApiRestCall_601389
proc url_GetDescribePendingMaintenanceActions_605196(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_605195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_605197 = query.getOrDefault("ResourceIdentifier")
  valid_605197 = validateParameter(valid_605197, JString, required = false,
                                 default = nil)
  if valid_605197 != nil:
    section.add "ResourceIdentifier", valid_605197
  var valid_605198 = query.getOrDefault("Marker")
  valid_605198 = validateParameter(valid_605198, JString, required = false,
                                 default = nil)
  if valid_605198 != nil:
    section.add "Marker", valid_605198
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605199 = query.getOrDefault("Action")
  valid_605199 = validateParameter(valid_605199, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_605199 != nil:
    section.add "Action", valid_605199
  var valid_605200 = query.getOrDefault("Version")
  valid_605200 = validateParameter(valid_605200, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605200 != nil:
    section.add "Version", valid_605200
  var valid_605201 = query.getOrDefault("Filters")
  valid_605201 = validateParameter(valid_605201, JArray, required = false,
                                 default = nil)
  if valid_605201 != nil:
    section.add "Filters", valid_605201
  var valid_605202 = query.getOrDefault("MaxRecords")
  valid_605202 = validateParameter(valid_605202, JInt, required = false, default = nil)
  if valid_605202 != nil:
    section.add "MaxRecords", valid_605202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605203 = header.getOrDefault("X-Amz-Signature")
  valid_605203 = validateParameter(valid_605203, JString, required = false,
                                 default = nil)
  if valid_605203 != nil:
    section.add "X-Amz-Signature", valid_605203
  var valid_605204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605204 = validateParameter(valid_605204, JString, required = false,
                                 default = nil)
  if valid_605204 != nil:
    section.add "X-Amz-Content-Sha256", valid_605204
  var valid_605205 = header.getOrDefault("X-Amz-Date")
  valid_605205 = validateParameter(valid_605205, JString, required = false,
                                 default = nil)
  if valid_605205 != nil:
    section.add "X-Amz-Date", valid_605205
  var valid_605206 = header.getOrDefault("X-Amz-Credential")
  valid_605206 = validateParameter(valid_605206, JString, required = false,
                                 default = nil)
  if valid_605206 != nil:
    section.add "X-Amz-Credential", valid_605206
  var valid_605207 = header.getOrDefault("X-Amz-Security-Token")
  valid_605207 = validateParameter(valid_605207, JString, required = false,
                                 default = nil)
  if valid_605207 != nil:
    section.add "X-Amz-Security-Token", valid_605207
  var valid_605208 = header.getOrDefault("X-Amz-Algorithm")
  valid_605208 = validateParameter(valid_605208, JString, required = false,
                                 default = nil)
  if valid_605208 != nil:
    section.add "X-Amz-Algorithm", valid_605208
  var valid_605209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605209 = validateParameter(valid_605209, JString, required = false,
                                 default = nil)
  if valid_605209 != nil:
    section.add "X-Amz-SignedHeaders", valid_605209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605210: Call_GetDescribePendingMaintenanceActions_605194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_605210.validator(path, query, header, formData, body)
  let scheme = call_605210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605210.url(scheme.get, call_605210.host, call_605210.base,
                         call_605210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605210, url, valid)

proc call*(call_605211: Call_GetDescribePendingMaintenanceActions_605194;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605212 = newJObject()
  add(query_605212, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_605212, "Marker", newJString(Marker))
  add(query_605212, "Action", newJString(Action))
  add(query_605212, "Version", newJString(Version))
  if Filters != nil:
    query_605212.add "Filters", Filters
  add(query_605212, "MaxRecords", newJInt(MaxRecords))
  result = call_605211.call(nil, query_605212, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_605194(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_605195, base: "/",
    url: url_GetDescribePendingMaintenanceActions_605196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_605259 = ref object of OpenApiRestCall_601389
proc url_PostDescribeReservedDBInstances_605261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_605260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605262 = query.getOrDefault("Action")
  valid_605262 = validateParameter(valid_605262, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_605262 != nil:
    section.add "Action", valid_605262
  var valid_605263 = query.getOrDefault("Version")
  valid_605263 = validateParameter(valid_605263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605263 != nil:
    section.add "Version", valid_605263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605264 = header.getOrDefault("X-Amz-Signature")
  valid_605264 = validateParameter(valid_605264, JString, required = false,
                                 default = nil)
  if valid_605264 != nil:
    section.add "X-Amz-Signature", valid_605264
  var valid_605265 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605265 = validateParameter(valid_605265, JString, required = false,
                                 default = nil)
  if valid_605265 != nil:
    section.add "X-Amz-Content-Sha256", valid_605265
  var valid_605266 = header.getOrDefault("X-Amz-Date")
  valid_605266 = validateParameter(valid_605266, JString, required = false,
                                 default = nil)
  if valid_605266 != nil:
    section.add "X-Amz-Date", valid_605266
  var valid_605267 = header.getOrDefault("X-Amz-Credential")
  valid_605267 = validateParameter(valid_605267, JString, required = false,
                                 default = nil)
  if valid_605267 != nil:
    section.add "X-Amz-Credential", valid_605267
  var valid_605268 = header.getOrDefault("X-Amz-Security-Token")
  valid_605268 = validateParameter(valid_605268, JString, required = false,
                                 default = nil)
  if valid_605268 != nil:
    section.add "X-Amz-Security-Token", valid_605268
  var valid_605269 = header.getOrDefault("X-Amz-Algorithm")
  valid_605269 = validateParameter(valid_605269, JString, required = false,
                                 default = nil)
  if valid_605269 != nil:
    section.add "X-Amz-Algorithm", valid_605269
  var valid_605270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605270 = validateParameter(valid_605270, JString, required = false,
                                 default = nil)
  if valid_605270 != nil:
    section.add "X-Amz-SignedHeaders", valid_605270
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_605271 = formData.getOrDefault("DBInstanceClass")
  valid_605271 = validateParameter(valid_605271, JString, required = false,
                                 default = nil)
  if valid_605271 != nil:
    section.add "DBInstanceClass", valid_605271
  var valid_605272 = formData.getOrDefault("MultiAZ")
  valid_605272 = validateParameter(valid_605272, JBool, required = false, default = nil)
  if valid_605272 != nil:
    section.add "MultiAZ", valid_605272
  var valid_605273 = formData.getOrDefault("MaxRecords")
  valid_605273 = validateParameter(valid_605273, JInt, required = false, default = nil)
  if valid_605273 != nil:
    section.add "MaxRecords", valid_605273
  var valid_605274 = formData.getOrDefault("LeaseId")
  valid_605274 = validateParameter(valid_605274, JString, required = false,
                                 default = nil)
  if valid_605274 != nil:
    section.add "LeaseId", valid_605274
  var valid_605275 = formData.getOrDefault("ReservedDBInstanceId")
  valid_605275 = validateParameter(valid_605275, JString, required = false,
                                 default = nil)
  if valid_605275 != nil:
    section.add "ReservedDBInstanceId", valid_605275
  var valid_605276 = formData.getOrDefault("Marker")
  valid_605276 = validateParameter(valid_605276, JString, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "Marker", valid_605276
  var valid_605277 = formData.getOrDefault("Duration")
  valid_605277 = validateParameter(valid_605277, JString, required = false,
                                 default = nil)
  if valid_605277 != nil:
    section.add "Duration", valid_605277
  var valid_605278 = formData.getOrDefault("OfferingType")
  valid_605278 = validateParameter(valid_605278, JString, required = false,
                                 default = nil)
  if valid_605278 != nil:
    section.add "OfferingType", valid_605278
  var valid_605279 = formData.getOrDefault("ProductDescription")
  valid_605279 = validateParameter(valid_605279, JString, required = false,
                                 default = nil)
  if valid_605279 != nil:
    section.add "ProductDescription", valid_605279
  var valid_605280 = formData.getOrDefault("Filters")
  valid_605280 = validateParameter(valid_605280, JArray, required = false,
                                 default = nil)
  if valid_605280 != nil:
    section.add "Filters", valid_605280
  var valid_605281 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_605281 = validateParameter(valid_605281, JString, required = false,
                                 default = nil)
  if valid_605281 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_605281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605282: Call_PostDescribeReservedDBInstances_605259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_605282.validator(path, query, header, formData, body)
  let scheme = call_605282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605282.url(scheme.get, call_605282.host, call_605282.base,
                         call_605282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605282, url, valid)

proc call*(call_605283: Call_PostDescribeReservedDBInstances_605259;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_605284 = newJObject()
  var formData_605285 = newJObject()
  add(formData_605285, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605285, "MultiAZ", newJBool(MultiAZ))
  add(formData_605285, "MaxRecords", newJInt(MaxRecords))
  add(formData_605285, "LeaseId", newJString(LeaseId))
  add(formData_605285, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_605285, "Marker", newJString(Marker))
  add(formData_605285, "Duration", newJString(Duration))
  add(formData_605285, "OfferingType", newJString(OfferingType))
  add(formData_605285, "ProductDescription", newJString(ProductDescription))
  add(query_605284, "Action", newJString(Action))
  if Filters != nil:
    formData_605285.add "Filters", Filters
  add(formData_605285, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_605284, "Version", newJString(Version))
  result = call_605283.call(nil, query_605284, nil, formData_605285, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_605259(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_605260, base: "/",
    url: url_PostDescribeReservedDBInstances_605261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_605233 = ref object of OpenApiRestCall_601389
proc url_GetDescribeReservedDBInstances_605235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_605234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_605236 = query.getOrDefault("Marker")
  valid_605236 = validateParameter(valid_605236, JString, required = false,
                                 default = nil)
  if valid_605236 != nil:
    section.add "Marker", valid_605236
  var valid_605237 = query.getOrDefault("ProductDescription")
  valid_605237 = validateParameter(valid_605237, JString, required = false,
                                 default = nil)
  if valid_605237 != nil:
    section.add "ProductDescription", valid_605237
  var valid_605238 = query.getOrDefault("OfferingType")
  valid_605238 = validateParameter(valid_605238, JString, required = false,
                                 default = nil)
  if valid_605238 != nil:
    section.add "OfferingType", valid_605238
  var valid_605239 = query.getOrDefault("ReservedDBInstanceId")
  valid_605239 = validateParameter(valid_605239, JString, required = false,
                                 default = nil)
  if valid_605239 != nil:
    section.add "ReservedDBInstanceId", valid_605239
  var valid_605240 = query.getOrDefault("LeaseId")
  valid_605240 = validateParameter(valid_605240, JString, required = false,
                                 default = nil)
  if valid_605240 != nil:
    section.add "LeaseId", valid_605240
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605241 = query.getOrDefault("Action")
  valid_605241 = validateParameter(valid_605241, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_605241 != nil:
    section.add "Action", valid_605241
  var valid_605242 = query.getOrDefault("MultiAZ")
  valid_605242 = validateParameter(valid_605242, JBool, required = false, default = nil)
  if valid_605242 != nil:
    section.add "MultiAZ", valid_605242
  var valid_605243 = query.getOrDefault("Duration")
  valid_605243 = validateParameter(valid_605243, JString, required = false,
                                 default = nil)
  if valid_605243 != nil:
    section.add "Duration", valid_605243
  var valid_605244 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_605244 = validateParameter(valid_605244, JString, required = false,
                                 default = nil)
  if valid_605244 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_605244
  var valid_605245 = query.getOrDefault("Version")
  valid_605245 = validateParameter(valid_605245, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605245 != nil:
    section.add "Version", valid_605245
  var valid_605246 = query.getOrDefault("DBInstanceClass")
  valid_605246 = validateParameter(valid_605246, JString, required = false,
                                 default = nil)
  if valid_605246 != nil:
    section.add "DBInstanceClass", valid_605246
  var valid_605247 = query.getOrDefault("Filters")
  valid_605247 = validateParameter(valid_605247, JArray, required = false,
                                 default = nil)
  if valid_605247 != nil:
    section.add "Filters", valid_605247
  var valid_605248 = query.getOrDefault("MaxRecords")
  valid_605248 = validateParameter(valid_605248, JInt, required = false, default = nil)
  if valid_605248 != nil:
    section.add "MaxRecords", valid_605248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605249 = header.getOrDefault("X-Amz-Signature")
  valid_605249 = validateParameter(valid_605249, JString, required = false,
                                 default = nil)
  if valid_605249 != nil:
    section.add "X-Amz-Signature", valid_605249
  var valid_605250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605250 = validateParameter(valid_605250, JString, required = false,
                                 default = nil)
  if valid_605250 != nil:
    section.add "X-Amz-Content-Sha256", valid_605250
  var valid_605251 = header.getOrDefault("X-Amz-Date")
  valid_605251 = validateParameter(valid_605251, JString, required = false,
                                 default = nil)
  if valid_605251 != nil:
    section.add "X-Amz-Date", valid_605251
  var valid_605252 = header.getOrDefault("X-Amz-Credential")
  valid_605252 = validateParameter(valid_605252, JString, required = false,
                                 default = nil)
  if valid_605252 != nil:
    section.add "X-Amz-Credential", valid_605252
  var valid_605253 = header.getOrDefault("X-Amz-Security-Token")
  valid_605253 = validateParameter(valid_605253, JString, required = false,
                                 default = nil)
  if valid_605253 != nil:
    section.add "X-Amz-Security-Token", valid_605253
  var valid_605254 = header.getOrDefault("X-Amz-Algorithm")
  valid_605254 = validateParameter(valid_605254, JString, required = false,
                                 default = nil)
  if valid_605254 != nil:
    section.add "X-Amz-Algorithm", valid_605254
  var valid_605255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605255 = validateParameter(valid_605255, JString, required = false,
                                 default = nil)
  if valid_605255 != nil:
    section.add "X-Amz-SignedHeaders", valid_605255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605256: Call_GetDescribeReservedDBInstances_605233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_605256.validator(path, query, header, formData, body)
  let scheme = call_605256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605256.url(scheme.get, call_605256.host, call_605256.base,
                         call_605256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605256, url, valid)

proc call*(call_605257: Call_GetDescribeReservedDBInstances_605233;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605258 = newJObject()
  add(query_605258, "Marker", newJString(Marker))
  add(query_605258, "ProductDescription", newJString(ProductDescription))
  add(query_605258, "OfferingType", newJString(OfferingType))
  add(query_605258, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_605258, "LeaseId", newJString(LeaseId))
  add(query_605258, "Action", newJString(Action))
  add(query_605258, "MultiAZ", newJBool(MultiAZ))
  add(query_605258, "Duration", newJString(Duration))
  add(query_605258, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_605258, "Version", newJString(Version))
  add(query_605258, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_605258.add "Filters", Filters
  add(query_605258, "MaxRecords", newJInt(MaxRecords))
  result = call_605257.call(nil, query_605258, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_605233(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_605234, base: "/",
    url: url_GetDescribeReservedDBInstances_605235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_605310 = ref object of OpenApiRestCall_601389
proc url_PostDescribeReservedDBInstancesOfferings_605312(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_605311(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605313 = query.getOrDefault("Action")
  valid_605313 = validateParameter(valid_605313, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_605313 != nil:
    section.add "Action", valid_605313
  var valid_605314 = query.getOrDefault("Version")
  valid_605314 = validateParameter(valid_605314, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605314 != nil:
    section.add "Version", valid_605314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605315 = header.getOrDefault("X-Amz-Signature")
  valid_605315 = validateParameter(valid_605315, JString, required = false,
                                 default = nil)
  if valid_605315 != nil:
    section.add "X-Amz-Signature", valid_605315
  var valid_605316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605316 = validateParameter(valid_605316, JString, required = false,
                                 default = nil)
  if valid_605316 != nil:
    section.add "X-Amz-Content-Sha256", valid_605316
  var valid_605317 = header.getOrDefault("X-Amz-Date")
  valid_605317 = validateParameter(valid_605317, JString, required = false,
                                 default = nil)
  if valid_605317 != nil:
    section.add "X-Amz-Date", valid_605317
  var valid_605318 = header.getOrDefault("X-Amz-Credential")
  valid_605318 = validateParameter(valid_605318, JString, required = false,
                                 default = nil)
  if valid_605318 != nil:
    section.add "X-Amz-Credential", valid_605318
  var valid_605319 = header.getOrDefault("X-Amz-Security-Token")
  valid_605319 = validateParameter(valid_605319, JString, required = false,
                                 default = nil)
  if valid_605319 != nil:
    section.add "X-Amz-Security-Token", valid_605319
  var valid_605320 = header.getOrDefault("X-Amz-Algorithm")
  valid_605320 = validateParameter(valid_605320, JString, required = false,
                                 default = nil)
  if valid_605320 != nil:
    section.add "X-Amz-Algorithm", valid_605320
  var valid_605321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605321 = validateParameter(valid_605321, JString, required = false,
                                 default = nil)
  if valid_605321 != nil:
    section.add "X-Amz-SignedHeaders", valid_605321
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_605322 = formData.getOrDefault("DBInstanceClass")
  valid_605322 = validateParameter(valid_605322, JString, required = false,
                                 default = nil)
  if valid_605322 != nil:
    section.add "DBInstanceClass", valid_605322
  var valid_605323 = formData.getOrDefault("MultiAZ")
  valid_605323 = validateParameter(valid_605323, JBool, required = false, default = nil)
  if valid_605323 != nil:
    section.add "MultiAZ", valid_605323
  var valid_605324 = formData.getOrDefault("MaxRecords")
  valid_605324 = validateParameter(valid_605324, JInt, required = false, default = nil)
  if valid_605324 != nil:
    section.add "MaxRecords", valid_605324
  var valid_605325 = formData.getOrDefault("Marker")
  valid_605325 = validateParameter(valid_605325, JString, required = false,
                                 default = nil)
  if valid_605325 != nil:
    section.add "Marker", valid_605325
  var valid_605326 = formData.getOrDefault("Duration")
  valid_605326 = validateParameter(valid_605326, JString, required = false,
                                 default = nil)
  if valid_605326 != nil:
    section.add "Duration", valid_605326
  var valid_605327 = formData.getOrDefault("OfferingType")
  valid_605327 = validateParameter(valid_605327, JString, required = false,
                                 default = nil)
  if valid_605327 != nil:
    section.add "OfferingType", valid_605327
  var valid_605328 = formData.getOrDefault("ProductDescription")
  valid_605328 = validateParameter(valid_605328, JString, required = false,
                                 default = nil)
  if valid_605328 != nil:
    section.add "ProductDescription", valid_605328
  var valid_605329 = formData.getOrDefault("Filters")
  valid_605329 = validateParameter(valid_605329, JArray, required = false,
                                 default = nil)
  if valid_605329 != nil:
    section.add "Filters", valid_605329
  var valid_605330 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_605330 = validateParameter(valid_605330, JString, required = false,
                                 default = nil)
  if valid_605330 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_605330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605331: Call_PostDescribeReservedDBInstancesOfferings_605310;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_605331.validator(path, query, header, formData, body)
  let scheme = call_605331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605331.url(scheme.get, call_605331.host, call_605331.base,
                         call_605331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605331, url, valid)

proc call*(call_605332: Call_PostDescribeReservedDBInstancesOfferings_605310;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_605333 = newJObject()
  var formData_605334 = newJObject()
  add(formData_605334, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605334, "MultiAZ", newJBool(MultiAZ))
  add(formData_605334, "MaxRecords", newJInt(MaxRecords))
  add(formData_605334, "Marker", newJString(Marker))
  add(formData_605334, "Duration", newJString(Duration))
  add(formData_605334, "OfferingType", newJString(OfferingType))
  add(formData_605334, "ProductDescription", newJString(ProductDescription))
  add(query_605333, "Action", newJString(Action))
  if Filters != nil:
    formData_605334.add "Filters", Filters
  add(formData_605334, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_605333, "Version", newJString(Version))
  result = call_605332.call(nil, query_605333, nil, formData_605334, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_605310(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_605311,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_605312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_605286 = ref object of OpenApiRestCall_601389
proc url_GetDescribeReservedDBInstancesOfferings_605288(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_605287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_605289 = query.getOrDefault("Marker")
  valid_605289 = validateParameter(valid_605289, JString, required = false,
                                 default = nil)
  if valid_605289 != nil:
    section.add "Marker", valid_605289
  var valid_605290 = query.getOrDefault("ProductDescription")
  valid_605290 = validateParameter(valid_605290, JString, required = false,
                                 default = nil)
  if valid_605290 != nil:
    section.add "ProductDescription", valid_605290
  var valid_605291 = query.getOrDefault("OfferingType")
  valid_605291 = validateParameter(valid_605291, JString, required = false,
                                 default = nil)
  if valid_605291 != nil:
    section.add "OfferingType", valid_605291
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605292 = query.getOrDefault("Action")
  valid_605292 = validateParameter(valid_605292, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_605292 != nil:
    section.add "Action", valid_605292
  var valid_605293 = query.getOrDefault("MultiAZ")
  valid_605293 = validateParameter(valid_605293, JBool, required = false, default = nil)
  if valid_605293 != nil:
    section.add "MultiAZ", valid_605293
  var valid_605294 = query.getOrDefault("Duration")
  valid_605294 = validateParameter(valid_605294, JString, required = false,
                                 default = nil)
  if valid_605294 != nil:
    section.add "Duration", valid_605294
  var valid_605295 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_605295 = validateParameter(valid_605295, JString, required = false,
                                 default = nil)
  if valid_605295 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_605295
  var valid_605296 = query.getOrDefault("Version")
  valid_605296 = validateParameter(valid_605296, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605296 != nil:
    section.add "Version", valid_605296
  var valid_605297 = query.getOrDefault("DBInstanceClass")
  valid_605297 = validateParameter(valid_605297, JString, required = false,
                                 default = nil)
  if valid_605297 != nil:
    section.add "DBInstanceClass", valid_605297
  var valid_605298 = query.getOrDefault("Filters")
  valid_605298 = validateParameter(valid_605298, JArray, required = false,
                                 default = nil)
  if valid_605298 != nil:
    section.add "Filters", valid_605298
  var valid_605299 = query.getOrDefault("MaxRecords")
  valid_605299 = validateParameter(valid_605299, JInt, required = false, default = nil)
  if valid_605299 != nil:
    section.add "MaxRecords", valid_605299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605300 = header.getOrDefault("X-Amz-Signature")
  valid_605300 = validateParameter(valid_605300, JString, required = false,
                                 default = nil)
  if valid_605300 != nil:
    section.add "X-Amz-Signature", valid_605300
  var valid_605301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605301 = validateParameter(valid_605301, JString, required = false,
                                 default = nil)
  if valid_605301 != nil:
    section.add "X-Amz-Content-Sha256", valid_605301
  var valid_605302 = header.getOrDefault("X-Amz-Date")
  valid_605302 = validateParameter(valid_605302, JString, required = false,
                                 default = nil)
  if valid_605302 != nil:
    section.add "X-Amz-Date", valid_605302
  var valid_605303 = header.getOrDefault("X-Amz-Credential")
  valid_605303 = validateParameter(valid_605303, JString, required = false,
                                 default = nil)
  if valid_605303 != nil:
    section.add "X-Amz-Credential", valid_605303
  var valid_605304 = header.getOrDefault("X-Amz-Security-Token")
  valid_605304 = validateParameter(valid_605304, JString, required = false,
                                 default = nil)
  if valid_605304 != nil:
    section.add "X-Amz-Security-Token", valid_605304
  var valid_605305 = header.getOrDefault("X-Amz-Algorithm")
  valid_605305 = validateParameter(valid_605305, JString, required = false,
                                 default = nil)
  if valid_605305 != nil:
    section.add "X-Amz-Algorithm", valid_605305
  var valid_605306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605306 = validateParameter(valid_605306, JString, required = false,
                                 default = nil)
  if valid_605306 != nil:
    section.add "X-Amz-SignedHeaders", valid_605306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605307: Call_GetDescribeReservedDBInstancesOfferings_605286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_605307.validator(path, query, header, formData, body)
  let scheme = call_605307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605307.url(scheme.get, call_605307.host, call_605307.base,
                         call_605307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605307, url, valid)

proc call*(call_605308: Call_GetDescribeReservedDBInstancesOfferings_605286;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605309 = newJObject()
  add(query_605309, "Marker", newJString(Marker))
  add(query_605309, "ProductDescription", newJString(ProductDescription))
  add(query_605309, "OfferingType", newJString(OfferingType))
  add(query_605309, "Action", newJString(Action))
  add(query_605309, "MultiAZ", newJBool(MultiAZ))
  add(query_605309, "Duration", newJString(Duration))
  add(query_605309, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_605309, "Version", newJString(Version))
  add(query_605309, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_605309.add "Filters", Filters
  add(query_605309, "MaxRecords", newJInt(MaxRecords))
  result = call_605308.call(nil, query_605309, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_605286(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_605287, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_605288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_605354 = ref object of OpenApiRestCall_601389
proc url_PostDescribeSourceRegions_605356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_605355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605357 = query.getOrDefault("Action")
  valid_605357 = validateParameter(valid_605357, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_605357 != nil:
    section.add "Action", valid_605357
  var valid_605358 = query.getOrDefault("Version")
  valid_605358 = validateParameter(valid_605358, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605358 != nil:
    section.add "Version", valid_605358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605359 = header.getOrDefault("X-Amz-Signature")
  valid_605359 = validateParameter(valid_605359, JString, required = false,
                                 default = nil)
  if valid_605359 != nil:
    section.add "X-Amz-Signature", valid_605359
  var valid_605360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605360 = validateParameter(valid_605360, JString, required = false,
                                 default = nil)
  if valid_605360 != nil:
    section.add "X-Amz-Content-Sha256", valid_605360
  var valid_605361 = header.getOrDefault("X-Amz-Date")
  valid_605361 = validateParameter(valid_605361, JString, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "X-Amz-Date", valid_605361
  var valid_605362 = header.getOrDefault("X-Amz-Credential")
  valid_605362 = validateParameter(valid_605362, JString, required = false,
                                 default = nil)
  if valid_605362 != nil:
    section.add "X-Amz-Credential", valid_605362
  var valid_605363 = header.getOrDefault("X-Amz-Security-Token")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "X-Amz-Security-Token", valid_605363
  var valid_605364 = header.getOrDefault("X-Amz-Algorithm")
  valid_605364 = validateParameter(valid_605364, JString, required = false,
                                 default = nil)
  if valid_605364 != nil:
    section.add "X-Amz-Algorithm", valid_605364
  var valid_605365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605365 = validateParameter(valid_605365, JString, required = false,
                                 default = nil)
  if valid_605365 != nil:
    section.add "X-Amz-SignedHeaders", valid_605365
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_605366 = formData.getOrDefault("MaxRecords")
  valid_605366 = validateParameter(valid_605366, JInt, required = false, default = nil)
  if valid_605366 != nil:
    section.add "MaxRecords", valid_605366
  var valid_605367 = formData.getOrDefault("Marker")
  valid_605367 = validateParameter(valid_605367, JString, required = false,
                                 default = nil)
  if valid_605367 != nil:
    section.add "Marker", valid_605367
  var valid_605368 = formData.getOrDefault("Filters")
  valid_605368 = validateParameter(valid_605368, JArray, required = false,
                                 default = nil)
  if valid_605368 != nil:
    section.add "Filters", valid_605368
  var valid_605369 = formData.getOrDefault("RegionName")
  valid_605369 = validateParameter(valid_605369, JString, required = false,
                                 default = nil)
  if valid_605369 != nil:
    section.add "RegionName", valid_605369
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605370: Call_PostDescribeSourceRegions_605354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_605370.validator(path, query, header, formData, body)
  let scheme = call_605370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605370.url(scheme.get, call_605370.host, call_605370.base,
                         call_605370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605370, url, valid)

proc call*(call_605371: Call_PostDescribeSourceRegions_605354; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_605372 = newJObject()
  var formData_605373 = newJObject()
  add(formData_605373, "MaxRecords", newJInt(MaxRecords))
  add(formData_605373, "Marker", newJString(Marker))
  add(query_605372, "Action", newJString(Action))
  if Filters != nil:
    formData_605373.add "Filters", Filters
  add(query_605372, "Version", newJString(Version))
  add(formData_605373, "RegionName", newJString(RegionName))
  result = call_605371.call(nil, query_605372, nil, formData_605373, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_605354(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_605355, base: "/",
    url: url_PostDescribeSourceRegions_605356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_605335 = ref object of OpenApiRestCall_601389
proc url_GetDescribeSourceRegions_605337(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_605336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_605338 = query.getOrDefault("Marker")
  valid_605338 = validateParameter(valid_605338, JString, required = false,
                                 default = nil)
  if valid_605338 != nil:
    section.add "Marker", valid_605338
  var valid_605339 = query.getOrDefault("RegionName")
  valid_605339 = validateParameter(valid_605339, JString, required = false,
                                 default = nil)
  if valid_605339 != nil:
    section.add "RegionName", valid_605339
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605340 = query.getOrDefault("Action")
  valid_605340 = validateParameter(valid_605340, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_605340 != nil:
    section.add "Action", valid_605340
  var valid_605341 = query.getOrDefault("Version")
  valid_605341 = validateParameter(valid_605341, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605341 != nil:
    section.add "Version", valid_605341
  var valid_605342 = query.getOrDefault("Filters")
  valid_605342 = validateParameter(valid_605342, JArray, required = false,
                                 default = nil)
  if valid_605342 != nil:
    section.add "Filters", valid_605342
  var valid_605343 = query.getOrDefault("MaxRecords")
  valid_605343 = validateParameter(valid_605343, JInt, required = false, default = nil)
  if valid_605343 != nil:
    section.add "MaxRecords", valid_605343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605344 = header.getOrDefault("X-Amz-Signature")
  valid_605344 = validateParameter(valid_605344, JString, required = false,
                                 default = nil)
  if valid_605344 != nil:
    section.add "X-Amz-Signature", valid_605344
  var valid_605345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605345 = validateParameter(valid_605345, JString, required = false,
                                 default = nil)
  if valid_605345 != nil:
    section.add "X-Amz-Content-Sha256", valid_605345
  var valid_605346 = header.getOrDefault("X-Amz-Date")
  valid_605346 = validateParameter(valid_605346, JString, required = false,
                                 default = nil)
  if valid_605346 != nil:
    section.add "X-Amz-Date", valid_605346
  var valid_605347 = header.getOrDefault("X-Amz-Credential")
  valid_605347 = validateParameter(valid_605347, JString, required = false,
                                 default = nil)
  if valid_605347 != nil:
    section.add "X-Amz-Credential", valid_605347
  var valid_605348 = header.getOrDefault("X-Amz-Security-Token")
  valid_605348 = validateParameter(valid_605348, JString, required = false,
                                 default = nil)
  if valid_605348 != nil:
    section.add "X-Amz-Security-Token", valid_605348
  var valid_605349 = header.getOrDefault("X-Amz-Algorithm")
  valid_605349 = validateParameter(valid_605349, JString, required = false,
                                 default = nil)
  if valid_605349 != nil:
    section.add "X-Amz-Algorithm", valid_605349
  var valid_605350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605350 = validateParameter(valid_605350, JString, required = false,
                                 default = nil)
  if valid_605350 != nil:
    section.add "X-Amz-SignedHeaders", valid_605350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605351: Call_GetDescribeSourceRegions_605335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_605351.validator(path, query, header, formData, body)
  let scheme = call_605351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605351.url(scheme.get, call_605351.host, call_605351.base,
                         call_605351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605351, url, valid)

proc call*(call_605352: Call_GetDescribeSourceRegions_605335; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_605353 = newJObject()
  add(query_605353, "Marker", newJString(Marker))
  add(query_605353, "RegionName", newJString(RegionName))
  add(query_605353, "Action", newJString(Action))
  add(query_605353, "Version", newJString(Version))
  if Filters != nil:
    query_605353.add "Filters", Filters
  add(query_605353, "MaxRecords", newJInt(MaxRecords))
  result = call_605352.call(nil, query_605353, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_605335(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_605336, base: "/",
    url: url_GetDescribeSourceRegions_605337, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_605390 = ref object of OpenApiRestCall_601389
proc url_PostDescribeValidDBInstanceModifications_605392(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_605391(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605393 = query.getOrDefault("Action")
  valid_605393 = validateParameter(valid_605393, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_605393 != nil:
    section.add "Action", valid_605393
  var valid_605394 = query.getOrDefault("Version")
  valid_605394 = validateParameter(valid_605394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605394 != nil:
    section.add "Version", valid_605394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605395 = header.getOrDefault("X-Amz-Signature")
  valid_605395 = validateParameter(valid_605395, JString, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "X-Amz-Signature", valid_605395
  var valid_605396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "X-Amz-Content-Sha256", valid_605396
  var valid_605397 = header.getOrDefault("X-Amz-Date")
  valid_605397 = validateParameter(valid_605397, JString, required = false,
                                 default = nil)
  if valid_605397 != nil:
    section.add "X-Amz-Date", valid_605397
  var valid_605398 = header.getOrDefault("X-Amz-Credential")
  valid_605398 = validateParameter(valid_605398, JString, required = false,
                                 default = nil)
  if valid_605398 != nil:
    section.add "X-Amz-Credential", valid_605398
  var valid_605399 = header.getOrDefault("X-Amz-Security-Token")
  valid_605399 = validateParameter(valid_605399, JString, required = false,
                                 default = nil)
  if valid_605399 != nil:
    section.add "X-Amz-Security-Token", valid_605399
  var valid_605400 = header.getOrDefault("X-Amz-Algorithm")
  valid_605400 = validateParameter(valid_605400, JString, required = false,
                                 default = nil)
  if valid_605400 != nil:
    section.add "X-Amz-Algorithm", valid_605400
  var valid_605401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605401 = validateParameter(valid_605401, JString, required = false,
                                 default = nil)
  if valid_605401 != nil:
    section.add "X-Amz-SignedHeaders", valid_605401
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605402 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605402 = validateParameter(valid_605402, JString, required = true,
                                 default = nil)
  if valid_605402 != nil:
    section.add "DBInstanceIdentifier", valid_605402
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605403: Call_PostDescribeValidDBInstanceModifications_605390;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_605403.validator(path, query, header, formData, body)
  let scheme = call_605403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605403.url(scheme.get, call_605403.host, call_605403.base,
                         call_605403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605403, url, valid)

proc call*(call_605404: Call_PostDescribeValidDBInstanceModifications_605390;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605405 = newJObject()
  var formData_605406 = newJObject()
  add(formData_605406, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605405, "Action", newJString(Action))
  add(query_605405, "Version", newJString(Version))
  result = call_605404.call(nil, query_605405, nil, formData_605406, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_605390(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_605391,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_605392,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_605374 = ref object of OpenApiRestCall_601389
proc url_GetDescribeValidDBInstanceModifications_605376(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_605375(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605377 = query.getOrDefault("DBInstanceIdentifier")
  valid_605377 = validateParameter(valid_605377, JString, required = true,
                                 default = nil)
  if valid_605377 != nil:
    section.add "DBInstanceIdentifier", valid_605377
  var valid_605378 = query.getOrDefault("Action")
  valid_605378 = validateParameter(valid_605378, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_605378 != nil:
    section.add "Action", valid_605378
  var valid_605379 = query.getOrDefault("Version")
  valid_605379 = validateParameter(valid_605379, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605379 != nil:
    section.add "Version", valid_605379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605380 = header.getOrDefault("X-Amz-Signature")
  valid_605380 = validateParameter(valid_605380, JString, required = false,
                                 default = nil)
  if valid_605380 != nil:
    section.add "X-Amz-Signature", valid_605380
  var valid_605381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "X-Amz-Content-Sha256", valid_605381
  var valid_605382 = header.getOrDefault("X-Amz-Date")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "X-Amz-Date", valid_605382
  var valid_605383 = header.getOrDefault("X-Amz-Credential")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "X-Amz-Credential", valid_605383
  var valid_605384 = header.getOrDefault("X-Amz-Security-Token")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "X-Amz-Security-Token", valid_605384
  var valid_605385 = header.getOrDefault("X-Amz-Algorithm")
  valid_605385 = validateParameter(valid_605385, JString, required = false,
                                 default = nil)
  if valid_605385 != nil:
    section.add "X-Amz-Algorithm", valid_605385
  var valid_605386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605386 = validateParameter(valid_605386, JString, required = false,
                                 default = nil)
  if valid_605386 != nil:
    section.add "X-Amz-SignedHeaders", valid_605386
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605387: Call_GetDescribeValidDBInstanceModifications_605374;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_605387.validator(path, query, header, formData, body)
  let scheme = call_605387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605387.url(scheme.get, call_605387.host, call_605387.base,
                         call_605387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605387, url, valid)

proc call*(call_605388: Call_GetDescribeValidDBInstanceModifications_605374;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605389 = newJObject()
  add(query_605389, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605389, "Action", newJString(Action))
  add(query_605389, "Version", newJString(Version))
  result = call_605388.call(nil, query_605389, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_605374(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_605375, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_605376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_605426 = ref object of OpenApiRestCall_601389
proc url_PostDownloadDBLogFilePortion_605428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_605427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605429 = query.getOrDefault("Action")
  valid_605429 = validateParameter(valid_605429, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_605429 != nil:
    section.add "Action", valid_605429
  var valid_605430 = query.getOrDefault("Version")
  valid_605430 = validateParameter(valid_605430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605430 != nil:
    section.add "Version", valid_605430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605431 = header.getOrDefault("X-Amz-Signature")
  valid_605431 = validateParameter(valid_605431, JString, required = false,
                                 default = nil)
  if valid_605431 != nil:
    section.add "X-Amz-Signature", valid_605431
  var valid_605432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605432 = validateParameter(valid_605432, JString, required = false,
                                 default = nil)
  if valid_605432 != nil:
    section.add "X-Amz-Content-Sha256", valid_605432
  var valid_605433 = header.getOrDefault("X-Amz-Date")
  valid_605433 = validateParameter(valid_605433, JString, required = false,
                                 default = nil)
  if valid_605433 != nil:
    section.add "X-Amz-Date", valid_605433
  var valid_605434 = header.getOrDefault("X-Amz-Credential")
  valid_605434 = validateParameter(valid_605434, JString, required = false,
                                 default = nil)
  if valid_605434 != nil:
    section.add "X-Amz-Credential", valid_605434
  var valid_605435 = header.getOrDefault("X-Amz-Security-Token")
  valid_605435 = validateParameter(valid_605435, JString, required = false,
                                 default = nil)
  if valid_605435 != nil:
    section.add "X-Amz-Security-Token", valid_605435
  var valid_605436 = header.getOrDefault("X-Amz-Algorithm")
  valid_605436 = validateParameter(valid_605436, JString, required = false,
                                 default = nil)
  if valid_605436 != nil:
    section.add "X-Amz-Algorithm", valid_605436
  var valid_605437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605437 = validateParameter(valid_605437, JString, required = false,
                                 default = nil)
  if valid_605437 != nil:
    section.add "X-Amz-SignedHeaders", valid_605437
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_605438 = formData.getOrDefault("NumberOfLines")
  valid_605438 = validateParameter(valid_605438, JInt, required = false, default = nil)
  if valid_605438 != nil:
    section.add "NumberOfLines", valid_605438
  var valid_605439 = formData.getOrDefault("Marker")
  valid_605439 = validateParameter(valid_605439, JString, required = false,
                                 default = nil)
  if valid_605439 != nil:
    section.add "Marker", valid_605439
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_605440 = formData.getOrDefault("LogFileName")
  valid_605440 = validateParameter(valid_605440, JString, required = true,
                                 default = nil)
  if valid_605440 != nil:
    section.add "LogFileName", valid_605440
  var valid_605441 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605441 = validateParameter(valid_605441, JString, required = true,
                                 default = nil)
  if valid_605441 != nil:
    section.add "DBInstanceIdentifier", valid_605441
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605442: Call_PostDownloadDBLogFilePortion_605426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_605442.validator(path, query, header, formData, body)
  let scheme = call_605442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605442.url(scheme.get, call_605442.host, call_605442.base,
                         call_605442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605442, url, valid)

proc call*(call_605443: Call_PostDownloadDBLogFilePortion_605426;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605444 = newJObject()
  var formData_605445 = newJObject()
  add(formData_605445, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_605445, "Marker", newJString(Marker))
  add(formData_605445, "LogFileName", newJString(LogFileName))
  add(formData_605445, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605444, "Action", newJString(Action))
  add(query_605444, "Version", newJString(Version))
  result = call_605443.call(nil, query_605444, nil, formData_605445, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_605426(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_605427, base: "/",
    url: url_PostDownloadDBLogFilePortion_605428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_605407 = ref object of OpenApiRestCall_601389
proc url_GetDownloadDBLogFilePortion_605409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_605408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605410 = query.getOrDefault("Marker")
  valid_605410 = validateParameter(valid_605410, JString, required = false,
                                 default = nil)
  if valid_605410 != nil:
    section.add "Marker", valid_605410
  var valid_605411 = query.getOrDefault("NumberOfLines")
  valid_605411 = validateParameter(valid_605411, JInt, required = false, default = nil)
  if valid_605411 != nil:
    section.add "NumberOfLines", valid_605411
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605412 = query.getOrDefault("DBInstanceIdentifier")
  valid_605412 = validateParameter(valid_605412, JString, required = true,
                                 default = nil)
  if valid_605412 != nil:
    section.add "DBInstanceIdentifier", valid_605412
  var valid_605413 = query.getOrDefault("Action")
  valid_605413 = validateParameter(valid_605413, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_605413 != nil:
    section.add "Action", valid_605413
  var valid_605414 = query.getOrDefault("LogFileName")
  valid_605414 = validateParameter(valid_605414, JString, required = true,
                                 default = nil)
  if valid_605414 != nil:
    section.add "LogFileName", valid_605414
  var valid_605415 = query.getOrDefault("Version")
  valid_605415 = validateParameter(valid_605415, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605415 != nil:
    section.add "Version", valid_605415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605416 = header.getOrDefault("X-Amz-Signature")
  valid_605416 = validateParameter(valid_605416, JString, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "X-Amz-Signature", valid_605416
  var valid_605417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "X-Amz-Content-Sha256", valid_605417
  var valid_605418 = header.getOrDefault("X-Amz-Date")
  valid_605418 = validateParameter(valid_605418, JString, required = false,
                                 default = nil)
  if valid_605418 != nil:
    section.add "X-Amz-Date", valid_605418
  var valid_605419 = header.getOrDefault("X-Amz-Credential")
  valid_605419 = validateParameter(valid_605419, JString, required = false,
                                 default = nil)
  if valid_605419 != nil:
    section.add "X-Amz-Credential", valid_605419
  var valid_605420 = header.getOrDefault("X-Amz-Security-Token")
  valid_605420 = validateParameter(valid_605420, JString, required = false,
                                 default = nil)
  if valid_605420 != nil:
    section.add "X-Amz-Security-Token", valid_605420
  var valid_605421 = header.getOrDefault("X-Amz-Algorithm")
  valid_605421 = validateParameter(valid_605421, JString, required = false,
                                 default = nil)
  if valid_605421 != nil:
    section.add "X-Amz-Algorithm", valid_605421
  var valid_605422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605422 = validateParameter(valid_605422, JString, required = false,
                                 default = nil)
  if valid_605422 != nil:
    section.add "X-Amz-SignedHeaders", valid_605422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605423: Call_GetDownloadDBLogFilePortion_605407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_605423.validator(path, query, header, formData, body)
  let scheme = call_605423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605423.url(scheme.get, call_605423.host, call_605423.base,
                         call_605423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605423, url, valid)

proc call*(call_605424: Call_GetDownloadDBLogFilePortion_605407;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_605425 = newJObject()
  add(query_605425, "Marker", newJString(Marker))
  add(query_605425, "NumberOfLines", newJInt(NumberOfLines))
  add(query_605425, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605425, "Action", newJString(Action))
  add(query_605425, "LogFileName", newJString(LogFileName))
  add(query_605425, "Version", newJString(Version))
  result = call_605424.call(nil, query_605425, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_605407(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_605408, base: "/",
    url: url_GetDownloadDBLogFilePortion_605409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_605463 = ref object of OpenApiRestCall_601389
proc url_PostFailoverDBCluster_605465(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_605464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605466 = query.getOrDefault("Action")
  valid_605466 = validateParameter(valid_605466, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_605466 != nil:
    section.add "Action", valid_605466
  var valid_605467 = query.getOrDefault("Version")
  valid_605467 = validateParameter(valid_605467, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605467 != nil:
    section.add "Version", valid_605467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605468 = header.getOrDefault("X-Amz-Signature")
  valid_605468 = validateParameter(valid_605468, JString, required = false,
                                 default = nil)
  if valid_605468 != nil:
    section.add "X-Amz-Signature", valid_605468
  var valid_605469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605469 = validateParameter(valid_605469, JString, required = false,
                                 default = nil)
  if valid_605469 != nil:
    section.add "X-Amz-Content-Sha256", valid_605469
  var valid_605470 = header.getOrDefault("X-Amz-Date")
  valid_605470 = validateParameter(valid_605470, JString, required = false,
                                 default = nil)
  if valid_605470 != nil:
    section.add "X-Amz-Date", valid_605470
  var valid_605471 = header.getOrDefault("X-Amz-Credential")
  valid_605471 = validateParameter(valid_605471, JString, required = false,
                                 default = nil)
  if valid_605471 != nil:
    section.add "X-Amz-Credential", valid_605471
  var valid_605472 = header.getOrDefault("X-Amz-Security-Token")
  valid_605472 = validateParameter(valid_605472, JString, required = false,
                                 default = nil)
  if valid_605472 != nil:
    section.add "X-Amz-Security-Token", valid_605472
  var valid_605473 = header.getOrDefault("X-Amz-Algorithm")
  valid_605473 = validateParameter(valid_605473, JString, required = false,
                                 default = nil)
  if valid_605473 != nil:
    section.add "X-Amz-Algorithm", valid_605473
  var valid_605474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605474 = validateParameter(valid_605474, JString, required = false,
                                 default = nil)
  if valid_605474 != nil:
    section.add "X-Amz-SignedHeaders", valid_605474
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_605475 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_605475 = validateParameter(valid_605475, JString, required = false,
                                 default = nil)
  if valid_605475 != nil:
    section.add "TargetDBInstanceIdentifier", valid_605475
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605476 = formData.getOrDefault("DBClusterIdentifier")
  valid_605476 = validateParameter(valid_605476, JString, required = true,
                                 default = nil)
  if valid_605476 != nil:
    section.add "DBClusterIdentifier", valid_605476
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605477: Call_PostFailoverDBCluster_605463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605477.validator(path, query, header, formData, body)
  let scheme = call_605477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605477.url(scheme.get, call_605477.host, call_605477.base,
                         call_605477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605477, url, valid)

proc call*(call_605478: Call_PostFailoverDBCluster_605463;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_605479 = newJObject()
  var formData_605480 = newJObject()
  add(query_605479, "Action", newJString(Action))
  add(formData_605480, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_605479, "Version", newJString(Version))
  add(formData_605480, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605478.call(nil, query_605479, nil, formData_605480, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_605463(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_605464, base: "/",
    url: url_PostFailoverDBCluster_605465, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_605446 = ref object of OpenApiRestCall_601389
proc url_GetFailoverDBCluster_605448(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_605447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605449 = query.getOrDefault("DBClusterIdentifier")
  valid_605449 = validateParameter(valid_605449, JString, required = true,
                                 default = nil)
  if valid_605449 != nil:
    section.add "DBClusterIdentifier", valid_605449
  var valid_605450 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_605450 = validateParameter(valid_605450, JString, required = false,
                                 default = nil)
  if valid_605450 != nil:
    section.add "TargetDBInstanceIdentifier", valid_605450
  var valid_605451 = query.getOrDefault("Action")
  valid_605451 = validateParameter(valid_605451, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_605451 != nil:
    section.add "Action", valid_605451
  var valid_605452 = query.getOrDefault("Version")
  valid_605452 = validateParameter(valid_605452, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605452 != nil:
    section.add "Version", valid_605452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605453 = header.getOrDefault("X-Amz-Signature")
  valid_605453 = validateParameter(valid_605453, JString, required = false,
                                 default = nil)
  if valid_605453 != nil:
    section.add "X-Amz-Signature", valid_605453
  var valid_605454 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605454 = validateParameter(valid_605454, JString, required = false,
                                 default = nil)
  if valid_605454 != nil:
    section.add "X-Amz-Content-Sha256", valid_605454
  var valid_605455 = header.getOrDefault("X-Amz-Date")
  valid_605455 = validateParameter(valid_605455, JString, required = false,
                                 default = nil)
  if valid_605455 != nil:
    section.add "X-Amz-Date", valid_605455
  var valid_605456 = header.getOrDefault("X-Amz-Credential")
  valid_605456 = validateParameter(valid_605456, JString, required = false,
                                 default = nil)
  if valid_605456 != nil:
    section.add "X-Amz-Credential", valid_605456
  var valid_605457 = header.getOrDefault("X-Amz-Security-Token")
  valid_605457 = validateParameter(valid_605457, JString, required = false,
                                 default = nil)
  if valid_605457 != nil:
    section.add "X-Amz-Security-Token", valid_605457
  var valid_605458 = header.getOrDefault("X-Amz-Algorithm")
  valid_605458 = validateParameter(valid_605458, JString, required = false,
                                 default = nil)
  if valid_605458 != nil:
    section.add "X-Amz-Algorithm", valid_605458
  var valid_605459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605459 = validateParameter(valid_605459, JString, required = false,
                                 default = nil)
  if valid_605459 != nil:
    section.add "X-Amz-SignedHeaders", valid_605459
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605460: Call_GetFailoverDBCluster_605446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605460.validator(path, query, header, formData, body)
  let scheme = call_605460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605460.url(scheme.get, call_605460.host, call_605460.base,
                         call_605460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605460, url, valid)

proc call*(call_605461: Call_GetFailoverDBCluster_605446;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605462 = newJObject()
  add(query_605462, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605462, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_605462, "Action", newJString(Action))
  add(query_605462, "Version", newJString(Version))
  result = call_605461.call(nil, query_605462, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_605446(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_605447, base: "/",
    url: url_GetFailoverDBCluster_605448, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_605501 = ref object of OpenApiRestCall_601389
proc url_PostImportInstallationMedia_605503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_605502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605504 = query.getOrDefault("Action")
  valid_605504 = validateParameter(valid_605504, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_605504 != nil:
    section.add "Action", valid_605504
  var valid_605505 = query.getOrDefault("Version")
  valid_605505 = validateParameter(valid_605505, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605505 != nil:
    section.add "Version", valid_605505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605506 = header.getOrDefault("X-Amz-Signature")
  valid_605506 = validateParameter(valid_605506, JString, required = false,
                                 default = nil)
  if valid_605506 != nil:
    section.add "X-Amz-Signature", valid_605506
  var valid_605507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605507 = validateParameter(valid_605507, JString, required = false,
                                 default = nil)
  if valid_605507 != nil:
    section.add "X-Amz-Content-Sha256", valid_605507
  var valid_605508 = header.getOrDefault("X-Amz-Date")
  valid_605508 = validateParameter(valid_605508, JString, required = false,
                                 default = nil)
  if valid_605508 != nil:
    section.add "X-Amz-Date", valid_605508
  var valid_605509 = header.getOrDefault("X-Amz-Credential")
  valid_605509 = validateParameter(valid_605509, JString, required = false,
                                 default = nil)
  if valid_605509 != nil:
    section.add "X-Amz-Credential", valid_605509
  var valid_605510 = header.getOrDefault("X-Amz-Security-Token")
  valid_605510 = validateParameter(valid_605510, JString, required = false,
                                 default = nil)
  if valid_605510 != nil:
    section.add "X-Amz-Security-Token", valid_605510
  var valid_605511 = header.getOrDefault("X-Amz-Algorithm")
  valid_605511 = validateParameter(valid_605511, JString, required = false,
                                 default = nil)
  if valid_605511 != nil:
    section.add "X-Amz-Algorithm", valid_605511
  var valid_605512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605512 = validateParameter(valid_605512, JString, required = false,
                                 default = nil)
  if valid_605512 != nil:
    section.add "X-Amz-SignedHeaders", valid_605512
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_605513 = formData.getOrDefault("OSInstallationMediaPath")
  valid_605513 = validateParameter(valid_605513, JString, required = true,
                                 default = nil)
  if valid_605513 != nil:
    section.add "OSInstallationMediaPath", valid_605513
  var valid_605514 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_605514 = validateParameter(valid_605514, JString, required = true,
                                 default = nil)
  if valid_605514 != nil:
    section.add "EngineInstallationMediaPath", valid_605514
  var valid_605515 = formData.getOrDefault("EngineVersion")
  valid_605515 = validateParameter(valid_605515, JString, required = true,
                                 default = nil)
  if valid_605515 != nil:
    section.add "EngineVersion", valid_605515
  var valid_605516 = formData.getOrDefault("Engine")
  valid_605516 = validateParameter(valid_605516, JString, required = true,
                                 default = nil)
  if valid_605516 != nil:
    section.add "Engine", valid_605516
  var valid_605517 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_605517 = validateParameter(valid_605517, JString, required = true,
                                 default = nil)
  if valid_605517 != nil:
    section.add "CustomAvailabilityZoneId", valid_605517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605518: Call_PostImportInstallationMedia_605501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_605518.validator(path, query, header, formData, body)
  let scheme = call_605518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605518.url(scheme.get, call_605518.host, call_605518.base,
                         call_605518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605518, url, valid)

proc call*(call_605519: Call_PostImportInstallationMedia_605501;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_605520 = newJObject()
  var formData_605521 = newJObject()
  add(formData_605521, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_605521, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_605521, "EngineVersion", newJString(EngineVersion))
  add(formData_605521, "Engine", newJString(Engine))
  add(query_605520, "Action", newJString(Action))
  add(formData_605521, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_605520, "Version", newJString(Version))
  result = call_605519.call(nil, query_605520, nil, formData_605521, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_605501(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_605502, base: "/",
    url: url_PostImportInstallationMedia_605503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_605481 = ref object of OpenApiRestCall_601389
proc url_GetImportInstallationMedia_605483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_605482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_605484 = query.getOrDefault("Engine")
  valid_605484 = validateParameter(valid_605484, JString, required = true,
                                 default = nil)
  if valid_605484 != nil:
    section.add "Engine", valid_605484
  var valid_605485 = query.getOrDefault("EngineInstallationMediaPath")
  valid_605485 = validateParameter(valid_605485, JString, required = true,
                                 default = nil)
  if valid_605485 != nil:
    section.add "EngineInstallationMediaPath", valid_605485
  var valid_605486 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_605486 = validateParameter(valid_605486, JString, required = true,
                                 default = nil)
  if valid_605486 != nil:
    section.add "CustomAvailabilityZoneId", valid_605486
  var valid_605487 = query.getOrDefault("EngineVersion")
  valid_605487 = validateParameter(valid_605487, JString, required = true,
                                 default = nil)
  if valid_605487 != nil:
    section.add "EngineVersion", valid_605487
  var valid_605488 = query.getOrDefault("Action")
  valid_605488 = validateParameter(valid_605488, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_605488 != nil:
    section.add "Action", valid_605488
  var valid_605489 = query.getOrDefault("OSInstallationMediaPath")
  valid_605489 = validateParameter(valid_605489, JString, required = true,
                                 default = nil)
  if valid_605489 != nil:
    section.add "OSInstallationMediaPath", valid_605489
  var valid_605490 = query.getOrDefault("Version")
  valid_605490 = validateParameter(valid_605490, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605490 != nil:
    section.add "Version", valid_605490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605491 = header.getOrDefault("X-Amz-Signature")
  valid_605491 = validateParameter(valid_605491, JString, required = false,
                                 default = nil)
  if valid_605491 != nil:
    section.add "X-Amz-Signature", valid_605491
  var valid_605492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605492 = validateParameter(valid_605492, JString, required = false,
                                 default = nil)
  if valid_605492 != nil:
    section.add "X-Amz-Content-Sha256", valid_605492
  var valid_605493 = header.getOrDefault("X-Amz-Date")
  valid_605493 = validateParameter(valid_605493, JString, required = false,
                                 default = nil)
  if valid_605493 != nil:
    section.add "X-Amz-Date", valid_605493
  var valid_605494 = header.getOrDefault("X-Amz-Credential")
  valid_605494 = validateParameter(valid_605494, JString, required = false,
                                 default = nil)
  if valid_605494 != nil:
    section.add "X-Amz-Credential", valid_605494
  var valid_605495 = header.getOrDefault("X-Amz-Security-Token")
  valid_605495 = validateParameter(valid_605495, JString, required = false,
                                 default = nil)
  if valid_605495 != nil:
    section.add "X-Amz-Security-Token", valid_605495
  var valid_605496 = header.getOrDefault("X-Amz-Algorithm")
  valid_605496 = validateParameter(valid_605496, JString, required = false,
                                 default = nil)
  if valid_605496 != nil:
    section.add "X-Amz-Algorithm", valid_605496
  var valid_605497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605497 = validateParameter(valid_605497, JString, required = false,
                                 default = nil)
  if valid_605497 != nil:
    section.add "X-Amz-SignedHeaders", valid_605497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605498: Call_GetImportInstallationMedia_605481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_605498.validator(path, query, header, formData, body)
  let scheme = call_605498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605498.url(scheme.get, call_605498.host, call_605498.base,
                         call_605498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605498, url, valid)

proc call*(call_605499: Call_GetImportInstallationMedia_605481; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_605500 = newJObject()
  add(query_605500, "Engine", newJString(Engine))
  add(query_605500, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_605500, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_605500, "EngineVersion", newJString(EngineVersion))
  add(query_605500, "Action", newJString(Action))
  add(query_605500, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_605500, "Version", newJString(Version))
  result = call_605499.call(nil, query_605500, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_605481(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_605482, base: "/",
    url: url_GetImportInstallationMedia_605483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_605539 = ref object of OpenApiRestCall_601389
proc url_PostListTagsForResource_605541(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_605540(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605542 = query.getOrDefault("Action")
  valid_605542 = validateParameter(valid_605542, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_605542 != nil:
    section.add "Action", valid_605542
  var valid_605543 = query.getOrDefault("Version")
  valid_605543 = validateParameter(valid_605543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605543 != nil:
    section.add "Version", valid_605543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605544 = header.getOrDefault("X-Amz-Signature")
  valid_605544 = validateParameter(valid_605544, JString, required = false,
                                 default = nil)
  if valid_605544 != nil:
    section.add "X-Amz-Signature", valid_605544
  var valid_605545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605545 = validateParameter(valid_605545, JString, required = false,
                                 default = nil)
  if valid_605545 != nil:
    section.add "X-Amz-Content-Sha256", valid_605545
  var valid_605546 = header.getOrDefault("X-Amz-Date")
  valid_605546 = validateParameter(valid_605546, JString, required = false,
                                 default = nil)
  if valid_605546 != nil:
    section.add "X-Amz-Date", valid_605546
  var valid_605547 = header.getOrDefault("X-Amz-Credential")
  valid_605547 = validateParameter(valid_605547, JString, required = false,
                                 default = nil)
  if valid_605547 != nil:
    section.add "X-Amz-Credential", valid_605547
  var valid_605548 = header.getOrDefault("X-Amz-Security-Token")
  valid_605548 = validateParameter(valid_605548, JString, required = false,
                                 default = nil)
  if valid_605548 != nil:
    section.add "X-Amz-Security-Token", valid_605548
  var valid_605549 = header.getOrDefault("X-Amz-Algorithm")
  valid_605549 = validateParameter(valid_605549, JString, required = false,
                                 default = nil)
  if valid_605549 != nil:
    section.add "X-Amz-Algorithm", valid_605549
  var valid_605550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605550 = validateParameter(valid_605550, JString, required = false,
                                 default = nil)
  if valid_605550 != nil:
    section.add "X-Amz-SignedHeaders", valid_605550
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_605551 = formData.getOrDefault("Filters")
  valid_605551 = validateParameter(valid_605551, JArray, required = false,
                                 default = nil)
  if valid_605551 != nil:
    section.add "Filters", valid_605551
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_605552 = formData.getOrDefault("ResourceName")
  valid_605552 = validateParameter(valid_605552, JString, required = true,
                                 default = nil)
  if valid_605552 != nil:
    section.add "ResourceName", valid_605552
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605553: Call_PostListTagsForResource_605539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_605553.validator(path, query, header, formData, body)
  let scheme = call_605553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605553.url(scheme.get, call_605553.host, call_605553.base,
                         call_605553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605553, url, valid)

proc call*(call_605554: Call_PostListTagsForResource_605539; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_605555 = newJObject()
  var formData_605556 = newJObject()
  add(query_605555, "Action", newJString(Action))
  if Filters != nil:
    formData_605556.add "Filters", Filters
  add(query_605555, "Version", newJString(Version))
  add(formData_605556, "ResourceName", newJString(ResourceName))
  result = call_605554.call(nil, query_605555, nil, formData_605556, nil)

var postListTagsForResource* = Call_PostListTagsForResource_605539(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_605540, base: "/",
    url: url_PostListTagsForResource_605541, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_605522 = ref object of OpenApiRestCall_601389
proc url_GetListTagsForResource_605524(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_605523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_605525 = query.getOrDefault("ResourceName")
  valid_605525 = validateParameter(valid_605525, JString, required = true,
                                 default = nil)
  if valid_605525 != nil:
    section.add "ResourceName", valid_605525
  var valid_605526 = query.getOrDefault("Action")
  valid_605526 = validateParameter(valid_605526, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_605526 != nil:
    section.add "Action", valid_605526
  var valid_605527 = query.getOrDefault("Version")
  valid_605527 = validateParameter(valid_605527, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605527 != nil:
    section.add "Version", valid_605527
  var valid_605528 = query.getOrDefault("Filters")
  valid_605528 = validateParameter(valid_605528, JArray, required = false,
                                 default = nil)
  if valid_605528 != nil:
    section.add "Filters", valid_605528
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605529 = header.getOrDefault("X-Amz-Signature")
  valid_605529 = validateParameter(valid_605529, JString, required = false,
                                 default = nil)
  if valid_605529 != nil:
    section.add "X-Amz-Signature", valid_605529
  var valid_605530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605530 = validateParameter(valid_605530, JString, required = false,
                                 default = nil)
  if valid_605530 != nil:
    section.add "X-Amz-Content-Sha256", valid_605530
  var valid_605531 = header.getOrDefault("X-Amz-Date")
  valid_605531 = validateParameter(valid_605531, JString, required = false,
                                 default = nil)
  if valid_605531 != nil:
    section.add "X-Amz-Date", valid_605531
  var valid_605532 = header.getOrDefault("X-Amz-Credential")
  valid_605532 = validateParameter(valid_605532, JString, required = false,
                                 default = nil)
  if valid_605532 != nil:
    section.add "X-Amz-Credential", valid_605532
  var valid_605533 = header.getOrDefault("X-Amz-Security-Token")
  valid_605533 = validateParameter(valid_605533, JString, required = false,
                                 default = nil)
  if valid_605533 != nil:
    section.add "X-Amz-Security-Token", valid_605533
  var valid_605534 = header.getOrDefault("X-Amz-Algorithm")
  valid_605534 = validateParameter(valid_605534, JString, required = false,
                                 default = nil)
  if valid_605534 != nil:
    section.add "X-Amz-Algorithm", valid_605534
  var valid_605535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "X-Amz-SignedHeaders", valid_605535
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605536: Call_GetListTagsForResource_605522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_605536.validator(path, query, header, formData, body)
  let scheme = call_605536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605536.url(scheme.get, call_605536.host, call_605536.base,
                         call_605536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605536, url, valid)

proc call*(call_605537: Call_GetListTagsForResource_605522; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_605538 = newJObject()
  add(query_605538, "ResourceName", newJString(ResourceName))
  add(query_605538, "Action", newJString(Action))
  add(query_605538, "Version", newJString(Version))
  if Filters != nil:
    query_605538.add "Filters", Filters
  result = call_605537.call(nil, query_605538, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_605522(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_605523, base: "/",
    url: url_GetListTagsForResource_605524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_605576 = ref object of OpenApiRestCall_601389
proc url_PostModifyCurrentDBClusterCapacity_605578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_605577(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605579 = query.getOrDefault("Action")
  valid_605579 = validateParameter(valid_605579, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_605579 != nil:
    section.add "Action", valid_605579
  var valid_605580 = query.getOrDefault("Version")
  valid_605580 = validateParameter(valid_605580, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605580 != nil:
    section.add "Version", valid_605580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605581 = header.getOrDefault("X-Amz-Signature")
  valid_605581 = validateParameter(valid_605581, JString, required = false,
                                 default = nil)
  if valid_605581 != nil:
    section.add "X-Amz-Signature", valid_605581
  var valid_605582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605582 = validateParameter(valid_605582, JString, required = false,
                                 default = nil)
  if valid_605582 != nil:
    section.add "X-Amz-Content-Sha256", valid_605582
  var valid_605583 = header.getOrDefault("X-Amz-Date")
  valid_605583 = validateParameter(valid_605583, JString, required = false,
                                 default = nil)
  if valid_605583 != nil:
    section.add "X-Amz-Date", valid_605583
  var valid_605584 = header.getOrDefault("X-Amz-Credential")
  valid_605584 = validateParameter(valid_605584, JString, required = false,
                                 default = nil)
  if valid_605584 != nil:
    section.add "X-Amz-Credential", valid_605584
  var valid_605585 = header.getOrDefault("X-Amz-Security-Token")
  valid_605585 = validateParameter(valid_605585, JString, required = false,
                                 default = nil)
  if valid_605585 != nil:
    section.add "X-Amz-Security-Token", valid_605585
  var valid_605586 = header.getOrDefault("X-Amz-Algorithm")
  valid_605586 = validateParameter(valid_605586, JString, required = false,
                                 default = nil)
  if valid_605586 != nil:
    section.add "X-Amz-Algorithm", valid_605586
  var valid_605587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605587 = validateParameter(valid_605587, JString, required = false,
                                 default = nil)
  if valid_605587 != nil:
    section.add "X-Amz-SignedHeaders", valid_605587
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_605588 = formData.getOrDefault("TimeoutAction")
  valid_605588 = validateParameter(valid_605588, JString, required = false,
                                 default = nil)
  if valid_605588 != nil:
    section.add "TimeoutAction", valid_605588
  var valid_605589 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_605589 = validateParameter(valid_605589, JInt, required = false, default = nil)
  if valid_605589 != nil:
    section.add "SecondsBeforeTimeout", valid_605589
  var valid_605590 = formData.getOrDefault("Capacity")
  valid_605590 = validateParameter(valid_605590, JInt, required = false, default = nil)
  if valid_605590 != nil:
    section.add "Capacity", valid_605590
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605591 = formData.getOrDefault("DBClusterIdentifier")
  valid_605591 = validateParameter(valid_605591, JString, required = true,
                                 default = nil)
  if valid_605591 != nil:
    section.add "DBClusterIdentifier", valid_605591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605592: Call_PostModifyCurrentDBClusterCapacity_605576;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605592.validator(path, query, header, formData, body)
  let scheme = call_605592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605592.url(scheme.get, call_605592.host, call_605592.base,
                         call_605592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605592, url, valid)

proc call*(call_605593: Call_PostModifyCurrentDBClusterCapacity_605576;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_605594 = newJObject()
  var formData_605595 = newJObject()
  add(formData_605595, "TimeoutAction", newJString(TimeoutAction))
  add(query_605594, "Action", newJString(Action))
  add(formData_605595, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_605594, "Version", newJString(Version))
  add(formData_605595, "Capacity", newJInt(Capacity))
  add(formData_605595, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605593.call(nil, query_605594, nil, formData_605595, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_605576(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_605577, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_605578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_605557 = ref object of OpenApiRestCall_601389
proc url_GetModifyCurrentDBClusterCapacity_605559(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_605558(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605560 = query.getOrDefault("Capacity")
  valid_605560 = validateParameter(valid_605560, JInt, required = false, default = nil)
  if valid_605560 != nil:
    section.add "Capacity", valid_605560
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605561 = query.getOrDefault("DBClusterIdentifier")
  valid_605561 = validateParameter(valid_605561, JString, required = true,
                                 default = nil)
  if valid_605561 != nil:
    section.add "DBClusterIdentifier", valid_605561
  var valid_605562 = query.getOrDefault("TimeoutAction")
  valid_605562 = validateParameter(valid_605562, JString, required = false,
                                 default = nil)
  if valid_605562 != nil:
    section.add "TimeoutAction", valid_605562
  var valid_605563 = query.getOrDefault("SecondsBeforeTimeout")
  valid_605563 = validateParameter(valid_605563, JInt, required = false, default = nil)
  if valid_605563 != nil:
    section.add "SecondsBeforeTimeout", valid_605563
  var valid_605564 = query.getOrDefault("Action")
  valid_605564 = validateParameter(valid_605564, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_605564 != nil:
    section.add "Action", valid_605564
  var valid_605565 = query.getOrDefault("Version")
  valid_605565 = validateParameter(valid_605565, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605565 != nil:
    section.add "Version", valid_605565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605566 = header.getOrDefault("X-Amz-Signature")
  valid_605566 = validateParameter(valid_605566, JString, required = false,
                                 default = nil)
  if valid_605566 != nil:
    section.add "X-Amz-Signature", valid_605566
  var valid_605567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605567 = validateParameter(valid_605567, JString, required = false,
                                 default = nil)
  if valid_605567 != nil:
    section.add "X-Amz-Content-Sha256", valid_605567
  var valid_605568 = header.getOrDefault("X-Amz-Date")
  valid_605568 = validateParameter(valid_605568, JString, required = false,
                                 default = nil)
  if valid_605568 != nil:
    section.add "X-Amz-Date", valid_605568
  var valid_605569 = header.getOrDefault("X-Amz-Credential")
  valid_605569 = validateParameter(valid_605569, JString, required = false,
                                 default = nil)
  if valid_605569 != nil:
    section.add "X-Amz-Credential", valid_605569
  var valid_605570 = header.getOrDefault("X-Amz-Security-Token")
  valid_605570 = validateParameter(valid_605570, JString, required = false,
                                 default = nil)
  if valid_605570 != nil:
    section.add "X-Amz-Security-Token", valid_605570
  var valid_605571 = header.getOrDefault("X-Amz-Algorithm")
  valid_605571 = validateParameter(valid_605571, JString, required = false,
                                 default = nil)
  if valid_605571 != nil:
    section.add "X-Amz-Algorithm", valid_605571
  var valid_605572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "X-Amz-SignedHeaders", valid_605572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605573: Call_GetModifyCurrentDBClusterCapacity_605557;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605573.validator(path, query, header, formData, body)
  let scheme = call_605573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605573.url(scheme.get, call_605573.host, call_605573.base,
                         call_605573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605573, url, valid)

proc call*(call_605574: Call_GetModifyCurrentDBClusterCapacity_605557;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605575 = newJObject()
  add(query_605575, "Capacity", newJInt(Capacity))
  add(query_605575, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605575, "TimeoutAction", newJString(TimeoutAction))
  add(query_605575, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_605575, "Action", newJString(Action))
  add(query_605575, "Version", newJString(Version))
  result = call_605574.call(nil, query_605575, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_605557(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_605558, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_605559,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_605637 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBCluster_605639(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_605638(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605640 = query.getOrDefault("Action")
  valid_605640 = validateParameter(valid_605640, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_605640 != nil:
    section.add "Action", valid_605640
  var valid_605641 = query.getOrDefault("Version")
  valid_605641 = validateParameter(valid_605641, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605641 != nil:
    section.add "Version", valid_605641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605642 = header.getOrDefault("X-Amz-Signature")
  valid_605642 = validateParameter(valid_605642, JString, required = false,
                                 default = nil)
  if valid_605642 != nil:
    section.add "X-Amz-Signature", valid_605642
  var valid_605643 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605643 = validateParameter(valid_605643, JString, required = false,
                                 default = nil)
  if valid_605643 != nil:
    section.add "X-Amz-Content-Sha256", valid_605643
  var valid_605644 = header.getOrDefault("X-Amz-Date")
  valid_605644 = validateParameter(valid_605644, JString, required = false,
                                 default = nil)
  if valid_605644 != nil:
    section.add "X-Amz-Date", valid_605644
  var valid_605645 = header.getOrDefault("X-Amz-Credential")
  valid_605645 = validateParameter(valid_605645, JString, required = false,
                                 default = nil)
  if valid_605645 != nil:
    section.add "X-Amz-Credential", valid_605645
  var valid_605646 = header.getOrDefault("X-Amz-Security-Token")
  valid_605646 = validateParameter(valid_605646, JString, required = false,
                                 default = nil)
  if valid_605646 != nil:
    section.add "X-Amz-Security-Token", valid_605646
  var valid_605647 = header.getOrDefault("X-Amz-Algorithm")
  valid_605647 = validateParameter(valid_605647, JString, required = false,
                                 default = nil)
  if valid_605647 != nil:
    section.add "X-Amz-Algorithm", valid_605647
  var valid_605648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605648 = validateParameter(valid_605648, JString, required = false,
                                 default = nil)
  if valid_605648 != nil:
    section.add "X-Amz-SignedHeaders", valid_605648
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_605649 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_605649 = validateParameter(valid_605649, JString, required = false,
                                 default = nil)
  if valid_605649 != nil:
    section.add "NewDBClusterIdentifier", valid_605649
  var valid_605650 = formData.getOrDefault("Port")
  valid_605650 = validateParameter(valid_605650, JInt, required = false, default = nil)
  if valid_605650 != nil:
    section.add "Port", valid_605650
  var valid_605651 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_605651 = validateParameter(valid_605651, JString, required = false,
                                 default = nil)
  if valid_605651 != nil:
    section.add "PreferredMaintenanceWindow", valid_605651
  var valid_605652 = formData.getOrDefault("PreferredBackupWindow")
  valid_605652 = validateParameter(valid_605652, JString, required = false,
                                 default = nil)
  if valid_605652 != nil:
    section.add "PreferredBackupWindow", valid_605652
  var valid_605653 = formData.getOrDefault("MasterUserPassword")
  valid_605653 = validateParameter(valid_605653, JString, required = false,
                                 default = nil)
  if valid_605653 != nil:
    section.add "MasterUserPassword", valid_605653
  var valid_605654 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_605654 = validateParameter(valid_605654, JArray, required = false,
                                 default = nil)
  if valid_605654 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_605654
  var valid_605655 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_605655 = validateParameter(valid_605655, JString, required = false,
                                 default = nil)
  if valid_605655 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_605655
  var valid_605656 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_605656 = validateParameter(valid_605656, JArray, required = false,
                                 default = nil)
  if valid_605656 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_605656
  var valid_605657 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_605657 = validateParameter(valid_605657, JString, required = false,
                                 default = nil)
  if valid_605657 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_605657
  var valid_605658 = formData.getOrDefault("EngineVersion")
  valid_605658 = validateParameter(valid_605658, JString, required = false,
                                 default = nil)
  if valid_605658 != nil:
    section.add "EngineVersion", valid_605658
  var valid_605659 = formData.getOrDefault("BacktrackWindow")
  valid_605659 = validateParameter(valid_605659, JInt, required = false, default = nil)
  if valid_605659 != nil:
    section.add "BacktrackWindow", valid_605659
  var valid_605660 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605660 = validateParameter(valid_605660, JArray, required = false,
                                 default = nil)
  if valid_605660 != nil:
    section.add "VpcSecurityGroupIds", valid_605660
  var valid_605661 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605661 = validateParameter(valid_605661, JBool, required = false, default = nil)
  if valid_605661 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605661
  var valid_605662 = formData.getOrDefault("BackupRetentionPeriod")
  valid_605662 = validateParameter(valid_605662, JInt, required = false, default = nil)
  if valid_605662 != nil:
    section.add "BackupRetentionPeriod", valid_605662
  var valid_605663 = formData.getOrDefault("ApplyImmediately")
  valid_605663 = validateParameter(valid_605663, JBool, required = false, default = nil)
  if valid_605663 != nil:
    section.add "ApplyImmediately", valid_605663
  var valid_605664 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_605664 = validateParameter(valid_605664, JString, required = false,
                                 default = nil)
  if valid_605664 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_605664
  var valid_605665 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_605665 = validateParameter(valid_605665, JBool, required = false, default = nil)
  if valid_605665 != nil:
    section.add "AllowMajorVersionUpgrade", valid_605665
  var valid_605666 = formData.getOrDefault("EnableHttpEndpoint")
  valid_605666 = validateParameter(valid_605666, JBool, required = false, default = nil)
  if valid_605666 != nil:
    section.add "EnableHttpEndpoint", valid_605666
  var valid_605667 = formData.getOrDefault("OptionGroupName")
  valid_605667 = validateParameter(valid_605667, JString, required = false,
                                 default = nil)
  if valid_605667 != nil:
    section.add "OptionGroupName", valid_605667
  var valid_605668 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_605668 = validateParameter(valid_605668, JString, required = false,
                                 default = nil)
  if valid_605668 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_605668
  var valid_605669 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605669 = validateParameter(valid_605669, JString, required = false,
                                 default = nil)
  if valid_605669 != nil:
    section.add "DBClusterParameterGroupName", valid_605669
  var valid_605670 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_605670 = validateParameter(valid_605670, JString, required = false,
                                 default = nil)
  if valid_605670 != nil:
    section.add "DBInstanceParameterGroupName", valid_605670
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605671 = formData.getOrDefault("DBClusterIdentifier")
  valid_605671 = validateParameter(valid_605671, JString, required = true,
                                 default = nil)
  if valid_605671 != nil:
    section.add "DBClusterIdentifier", valid_605671
  var valid_605672 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_605672 = validateParameter(valid_605672, JString, required = false,
                                 default = nil)
  if valid_605672 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_605672
  var valid_605673 = formData.getOrDefault("DeletionProtection")
  valid_605673 = validateParameter(valid_605673, JBool, required = false, default = nil)
  if valid_605673 != nil:
    section.add "DeletionProtection", valid_605673
  var valid_605674 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_605674 = validateParameter(valid_605674, JBool, required = false, default = nil)
  if valid_605674 != nil:
    section.add "CopyTagsToSnapshot", valid_605674
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605675: Call_PostModifyDBCluster_605637; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605675.validator(path, query, header, formData, body)
  let scheme = call_605675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605675.url(scheme.get, call_605675.host, call_605675.base,
                         call_605675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605675, url, valid)

proc call*(call_605676: Call_PostModifyDBCluster_605637;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_605677 = newJObject()
  var formData_605678 = newJObject()
  add(formData_605678, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_605678, "Port", newJInt(Port))
  add(formData_605678, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_605678, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_605678, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_605678.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_605678, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_605678.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_605678, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_605678, "EngineVersion", newJString(EngineVersion))
  add(formData_605678, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_605678.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605678, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605678, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_605678, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_605678, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_605677, "Action", newJString(Action))
  add(formData_605678, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_605678, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_605678, "OptionGroupName", newJString(OptionGroupName))
  add(formData_605678, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_605678, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_605678, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_605677, "Version", newJString(Version))
  add(formData_605678, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_605678, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_605678, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_605678, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_605676.call(nil, query_605677, nil, formData_605678, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_605637(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_605638, base: "/",
    url: url_PostModifyDBCluster_605639, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_605596 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBCluster_605598(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_605597(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_605599 = query.getOrDefault("DeletionProtection")
  valid_605599 = validateParameter(valid_605599, JBool, required = false, default = nil)
  if valid_605599 != nil:
    section.add "DeletionProtection", valid_605599
  var valid_605600 = query.getOrDefault("CopyTagsToSnapshot")
  valid_605600 = validateParameter(valid_605600, JBool, required = false, default = nil)
  if valid_605600 != nil:
    section.add "CopyTagsToSnapshot", valid_605600
  var valid_605601 = query.getOrDefault("EnableHttpEndpoint")
  valid_605601 = validateParameter(valid_605601, JBool, required = false, default = nil)
  if valid_605601 != nil:
    section.add "EnableHttpEndpoint", valid_605601
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605602 = query.getOrDefault("DBClusterIdentifier")
  valid_605602 = validateParameter(valid_605602, JString, required = true,
                                 default = nil)
  if valid_605602 != nil:
    section.add "DBClusterIdentifier", valid_605602
  var valid_605603 = query.getOrDefault("BacktrackWindow")
  valid_605603 = validateParameter(valid_605603, JInt, required = false, default = nil)
  if valid_605603 != nil:
    section.add "BacktrackWindow", valid_605603
  var valid_605604 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605604 = validateParameter(valid_605604, JString, required = false,
                                 default = nil)
  if valid_605604 != nil:
    section.add "DBClusterParameterGroupName", valid_605604
  var valid_605605 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_605605 = validateParameter(valid_605605, JArray, required = false,
                                 default = nil)
  if valid_605605 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_605605
  var valid_605606 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_605606 = validateParameter(valid_605606, JArray, required = false,
                                 default = nil)
  if valid_605606 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_605606
  var valid_605607 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_605607 = validateParameter(valid_605607, JString, required = false,
                                 default = nil)
  if valid_605607 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_605607
  var valid_605608 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_605608 = validateParameter(valid_605608, JString, required = false,
                                 default = nil)
  if valid_605608 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_605608
  var valid_605609 = query.getOrDefault("BackupRetentionPeriod")
  valid_605609 = validateParameter(valid_605609, JInt, required = false, default = nil)
  if valid_605609 != nil:
    section.add "BackupRetentionPeriod", valid_605609
  var valid_605610 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_605610 = validateParameter(valid_605610, JString, required = false,
                                 default = nil)
  if valid_605610 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_605610
  var valid_605611 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605611 = validateParameter(valid_605611, JBool, required = false, default = nil)
  if valid_605611 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605611
  var valid_605612 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_605612 = validateParameter(valid_605612, JString, required = false,
                                 default = nil)
  if valid_605612 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_605612
  var valid_605613 = query.getOrDefault("EngineVersion")
  valid_605613 = validateParameter(valid_605613, JString, required = false,
                                 default = nil)
  if valid_605613 != nil:
    section.add "EngineVersion", valid_605613
  var valid_605614 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_605614 = validateParameter(valid_605614, JString, required = false,
                                 default = nil)
  if valid_605614 != nil:
    section.add "DBInstanceParameterGroupName", valid_605614
  var valid_605615 = query.getOrDefault("Action")
  valid_605615 = validateParameter(valid_605615, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_605615 != nil:
    section.add "Action", valid_605615
  var valid_605616 = query.getOrDefault("ApplyImmediately")
  valid_605616 = validateParameter(valid_605616, JBool, required = false, default = nil)
  if valid_605616 != nil:
    section.add "ApplyImmediately", valid_605616
  var valid_605617 = query.getOrDefault("NewDBClusterIdentifier")
  valid_605617 = validateParameter(valid_605617, JString, required = false,
                                 default = nil)
  if valid_605617 != nil:
    section.add "NewDBClusterIdentifier", valid_605617
  var valid_605618 = query.getOrDefault("Port")
  valid_605618 = validateParameter(valid_605618, JInt, required = false, default = nil)
  if valid_605618 != nil:
    section.add "Port", valid_605618
  var valid_605619 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605619 = validateParameter(valid_605619, JArray, required = false,
                                 default = nil)
  if valid_605619 != nil:
    section.add "VpcSecurityGroupIds", valid_605619
  var valid_605620 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_605620 = validateParameter(valid_605620, JBool, required = false, default = nil)
  if valid_605620 != nil:
    section.add "AllowMajorVersionUpgrade", valid_605620
  var valid_605621 = query.getOrDefault("MasterUserPassword")
  valid_605621 = validateParameter(valid_605621, JString, required = false,
                                 default = nil)
  if valid_605621 != nil:
    section.add "MasterUserPassword", valid_605621
  var valid_605622 = query.getOrDefault("OptionGroupName")
  valid_605622 = validateParameter(valid_605622, JString, required = false,
                                 default = nil)
  if valid_605622 != nil:
    section.add "OptionGroupName", valid_605622
  var valid_605623 = query.getOrDefault("Version")
  valid_605623 = validateParameter(valid_605623, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605623 != nil:
    section.add "Version", valid_605623
  var valid_605624 = query.getOrDefault("PreferredBackupWindow")
  valid_605624 = validateParameter(valid_605624, JString, required = false,
                                 default = nil)
  if valid_605624 != nil:
    section.add "PreferredBackupWindow", valid_605624
  var valid_605625 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_605625 = validateParameter(valid_605625, JString, required = false,
                                 default = nil)
  if valid_605625 != nil:
    section.add "PreferredMaintenanceWindow", valid_605625
  var valid_605626 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_605626 = validateParameter(valid_605626, JString, required = false,
                                 default = nil)
  if valid_605626 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_605626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605627 = header.getOrDefault("X-Amz-Signature")
  valid_605627 = validateParameter(valid_605627, JString, required = false,
                                 default = nil)
  if valid_605627 != nil:
    section.add "X-Amz-Signature", valid_605627
  var valid_605628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605628 = validateParameter(valid_605628, JString, required = false,
                                 default = nil)
  if valid_605628 != nil:
    section.add "X-Amz-Content-Sha256", valid_605628
  var valid_605629 = header.getOrDefault("X-Amz-Date")
  valid_605629 = validateParameter(valid_605629, JString, required = false,
                                 default = nil)
  if valid_605629 != nil:
    section.add "X-Amz-Date", valid_605629
  var valid_605630 = header.getOrDefault("X-Amz-Credential")
  valid_605630 = validateParameter(valid_605630, JString, required = false,
                                 default = nil)
  if valid_605630 != nil:
    section.add "X-Amz-Credential", valid_605630
  var valid_605631 = header.getOrDefault("X-Amz-Security-Token")
  valid_605631 = validateParameter(valid_605631, JString, required = false,
                                 default = nil)
  if valid_605631 != nil:
    section.add "X-Amz-Security-Token", valid_605631
  var valid_605632 = header.getOrDefault("X-Amz-Algorithm")
  valid_605632 = validateParameter(valid_605632, JString, required = false,
                                 default = nil)
  if valid_605632 != nil:
    section.add "X-Amz-Algorithm", valid_605632
  var valid_605633 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605633 = validateParameter(valid_605633, JString, required = false,
                                 default = nil)
  if valid_605633 != nil:
    section.add "X-Amz-SignedHeaders", valid_605633
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605634: Call_GetModifyDBCluster_605596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605634.validator(path, query, header, formData, body)
  let scheme = call_605634.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605634.url(scheme.get, call_605634.host, call_605634.base,
                         call_605634.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605634, url, valid)

proc call*(call_605635: Call_GetModifyDBCluster_605596;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_605636 = newJObject()
  add(query_605636, "DeletionProtection", newJBool(DeletionProtection))
  add(query_605636, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_605636, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_605636, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605636, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_605636, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_605636.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_605636.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_605636, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_605636, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_605636, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_605636, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_605636, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605636, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_605636, "EngineVersion", newJString(EngineVersion))
  add(query_605636, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_605636, "Action", newJString(Action))
  add(query_605636, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_605636, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_605636, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_605636.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_605636, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_605636, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_605636, "OptionGroupName", newJString(OptionGroupName))
  add(query_605636, "Version", newJString(Version))
  add(query_605636, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_605636, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_605636, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_605635.call(nil, query_605636, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_605596(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_605597,
    base: "/", url: url_GetModifyDBCluster_605598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_605698 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBClusterEndpoint_605700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_605699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605701 = query.getOrDefault("Action")
  valid_605701 = validateParameter(valid_605701, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_605701 != nil:
    section.add "Action", valid_605701
  var valid_605702 = query.getOrDefault("Version")
  valid_605702 = validateParameter(valid_605702, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605702 != nil:
    section.add "Version", valid_605702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605703 = header.getOrDefault("X-Amz-Signature")
  valid_605703 = validateParameter(valid_605703, JString, required = false,
                                 default = nil)
  if valid_605703 != nil:
    section.add "X-Amz-Signature", valid_605703
  var valid_605704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605704 = validateParameter(valid_605704, JString, required = false,
                                 default = nil)
  if valid_605704 != nil:
    section.add "X-Amz-Content-Sha256", valid_605704
  var valid_605705 = header.getOrDefault("X-Amz-Date")
  valid_605705 = validateParameter(valid_605705, JString, required = false,
                                 default = nil)
  if valid_605705 != nil:
    section.add "X-Amz-Date", valid_605705
  var valid_605706 = header.getOrDefault("X-Amz-Credential")
  valid_605706 = validateParameter(valid_605706, JString, required = false,
                                 default = nil)
  if valid_605706 != nil:
    section.add "X-Amz-Credential", valid_605706
  var valid_605707 = header.getOrDefault("X-Amz-Security-Token")
  valid_605707 = validateParameter(valid_605707, JString, required = false,
                                 default = nil)
  if valid_605707 != nil:
    section.add "X-Amz-Security-Token", valid_605707
  var valid_605708 = header.getOrDefault("X-Amz-Algorithm")
  valid_605708 = validateParameter(valid_605708, JString, required = false,
                                 default = nil)
  if valid_605708 != nil:
    section.add "X-Amz-Algorithm", valid_605708
  var valid_605709 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605709 = validateParameter(valid_605709, JString, required = false,
                                 default = nil)
  if valid_605709 != nil:
    section.add "X-Amz-SignedHeaders", valid_605709
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_605710 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_605710 = validateParameter(valid_605710, JString, required = true,
                                 default = nil)
  if valid_605710 != nil:
    section.add "DBClusterEndpointIdentifier", valid_605710
  var valid_605711 = formData.getOrDefault("StaticMembers")
  valid_605711 = validateParameter(valid_605711, JArray, required = false,
                                 default = nil)
  if valid_605711 != nil:
    section.add "StaticMembers", valid_605711
  var valid_605712 = formData.getOrDefault("EndpointType")
  valid_605712 = validateParameter(valid_605712, JString, required = false,
                                 default = nil)
  if valid_605712 != nil:
    section.add "EndpointType", valid_605712
  var valid_605713 = formData.getOrDefault("ExcludedMembers")
  valid_605713 = validateParameter(valid_605713, JArray, required = false,
                                 default = nil)
  if valid_605713 != nil:
    section.add "ExcludedMembers", valid_605713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605714: Call_PostModifyDBClusterEndpoint_605698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605714.validator(path, query, header, formData, body)
  let scheme = call_605714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605714.url(scheme.get, call_605714.host, call_605714.base,
                         call_605714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605714, url, valid)

proc call*(call_605715: Call_PostModifyDBClusterEndpoint_605698;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_605716 = newJObject()
  var formData_605717 = newJObject()
  add(formData_605717, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_605717.add "StaticMembers", StaticMembers
  add(query_605716, "Action", newJString(Action))
  add(formData_605717, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_605717.add "ExcludedMembers", ExcludedMembers
  add(query_605716, "Version", newJString(Version))
  result = call_605715.call(nil, query_605716, nil, formData_605717, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_605698(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_605699, base: "/",
    url: url_PostModifyDBClusterEndpoint_605700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_605679 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBClusterEndpoint_605681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_605680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605682 = query.getOrDefault("ExcludedMembers")
  valid_605682 = validateParameter(valid_605682, JArray, required = false,
                                 default = nil)
  if valid_605682 != nil:
    section.add "ExcludedMembers", valid_605682
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_605683 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_605683 = validateParameter(valid_605683, JString, required = true,
                                 default = nil)
  if valid_605683 != nil:
    section.add "DBClusterEndpointIdentifier", valid_605683
  var valid_605684 = query.getOrDefault("StaticMembers")
  valid_605684 = validateParameter(valid_605684, JArray, required = false,
                                 default = nil)
  if valid_605684 != nil:
    section.add "StaticMembers", valid_605684
  var valid_605685 = query.getOrDefault("EndpointType")
  valid_605685 = validateParameter(valid_605685, JString, required = false,
                                 default = nil)
  if valid_605685 != nil:
    section.add "EndpointType", valid_605685
  var valid_605686 = query.getOrDefault("Action")
  valid_605686 = validateParameter(valid_605686, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_605686 != nil:
    section.add "Action", valid_605686
  var valid_605687 = query.getOrDefault("Version")
  valid_605687 = validateParameter(valid_605687, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605687 != nil:
    section.add "Version", valid_605687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605688 = header.getOrDefault("X-Amz-Signature")
  valid_605688 = validateParameter(valid_605688, JString, required = false,
                                 default = nil)
  if valid_605688 != nil:
    section.add "X-Amz-Signature", valid_605688
  var valid_605689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605689 = validateParameter(valid_605689, JString, required = false,
                                 default = nil)
  if valid_605689 != nil:
    section.add "X-Amz-Content-Sha256", valid_605689
  var valid_605690 = header.getOrDefault("X-Amz-Date")
  valid_605690 = validateParameter(valid_605690, JString, required = false,
                                 default = nil)
  if valid_605690 != nil:
    section.add "X-Amz-Date", valid_605690
  var valid_605691 = header.getOrDefault("X-Amz-Credential")
  valid_605691 = validateParameter(valid_605691, JString, required = false,
                                 default = nil)
  if valid_605691 != nil:
    section.add "X-Amz-Credential", valid_605691
  var valid_605692 = header.getOrDefault("X-Amz-Security-Token")
  valid_605692 = validateParameter(valid_605692, JString, required = false,
                                 default = nil)
  if valid_605692 != nil:
    section.add "X-Amz-Security-Token", valid_605692
  var valid_605693 = header.getOrDefault("X-Amz-Algorithm")
  valid_605693 = validateParameter(valid_605693, JString, required = false,
                                 default = nil)
  if valid_605693 != nil:
    section.add "X-Amz-Algorithm", valid_605693
  var valid_605694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605694 = validateParameter(valid_605694, JString, required = false,
                                 default = nil)
  if valid_605694 != nil:
    section.add "X-Amz-SignedHeaders", valid_605694
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605695: Call_GetModifyDBClusterEndpoint_605679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605695.validator(path, query, header, formData, body)
  let scheme = call_605695.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605695.url(scheme.get, call_605695.host, call_605695.base,
                         call_605695.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605695, url, valid)

proc call*(call_605696: Call_GetModifyDBClusterEndpoint_605679;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605697 = newJObject()
  if ExcludedMembers != nil:
    query_605697.add "ExcludedMembers", ExcludedMembers
  add(query_605697, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_605697.add "StaticMembers", StaticMembers
  add(query_605697, "EndpointType", newJString(EndpointType))
  add(query_605697, "Action", newJString(Action))
  add(query_605697, "Version", newJString(Version))
  result = call_605696.call(nil, query_605697, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_605679(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_605680, base: "/",
    url: url_GetModifyDBClusterEndpoint_605681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_605735 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBClusterParameterGroup_605737(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_605736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605738 = query.getOrDefault("Action")
  valid_605738 = validateParameter(valid_605738, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_605738 != nil:
    section.add "Action", valid_605738
  var valid_605739 = query.getOrDefault("Version")
  valid_605739 = validateParameter(valid_605739, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605739 != nil:
    section.add "Version", valid_605739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605740 = header.getOrDefault("X-Amz-Signature")
  valid_605740 = validateParameter(valid_605740, JString, required = false,
                                 default = nil)
  if valid_605740 != nil:
    section.add "X-Amz-Signature", valid_605740
  var valid_605741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605741 = validateParameter(valid_605741, JString, required = false,
                                 default = nil)
  if valid_605741 != nil:
    section.add "X-Amz-Content-Sha256", valid_605741
  var valid_605742 = header.getOrDefault("X-Amz-Date")
  valid_605742 = validateParameter(valid_605742, JString, required = false,
                                 default = nil)
  if valid_605742 != nil:
    section.add "X-Amz-Date", valid_605742
  var valid_605743 = header.getOrDefault("X-Amz-Credential")
  valid_605743 = validateParameter(valid_605743, JString, required = false,
                                 default = nil)
  if valid_605743 != nil:
    section.add "X-Amz-Credential", valid_605743
  var valid_605744 = header.getOrDefault("X-Amz-Security-Token")
  valid_605744 = validateParameter(valid_605744, JString, required = false,
                                 default = nil)
  if valid_605744 != nil:
    section.add "X-Amz-Security-Token", valid_605744
  var valid_605745 = header.getOrDefault("X-Amz-Algorithm")
  valid_605745 = validateParameter(valid_605745, JString, required = false,
                                 default = nil)
  if valid_605745 != nil:
    section.add "X-Amz-Algorithm", valid_605745
  var valid_605746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605746 = validateParameter(valid_605746, JString, required = false,
                                 default = nil)
  if valid_605746 != nil:
    section.add "X-Amz-SignedHeaders", valid_605746
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_605747 = formData.getOrDefault("Parameters")
  valid_605747 = validateParameter(valid_605747, JArray, required = true, default = nil)
  if valid_605747 != nil:
    section.add "Parameters", valid_605747
  var valid_605748 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605748 = validateParameter(valid_605748, JString, required = true,
                                 default = nil)
  if valid_605748 != nil:
    section.add "DBClusterParameterGroupName", valid_605748
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605749: Call_PostModifyDBClusterParameterGroup_605735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605749.validator(path, query, header, formData, body)
  let scheme = call_605749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605749.url(scheme.get, call_605749.host, call_605749.base,
                         call_605749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605749, url, valid)

proc call*(call_605750: Call_PostModifyDBClusterParameterGroup_605735;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_605751 = newJObject()
  var formData_605752 = newJObject()
  add(query_605751, "Action", newJString(Action))
  if Parameters != nil:
    formData_605752.add "Parameters", Parameters
  add(formData_605752, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_605751, "Version", newJString(Version))
  result = call_605750.call(nil, query_605751, nil, formData_605752, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_605735(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_605736, base: "/",
    url: url_PostModifyDBClusterParameterGroup_605737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_605718 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBClusterParameterGroup_605720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_605719(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_605721 = query.getOrDefault("Parameters")
  valid_605721 = validateParameter(valid_605721, JArray, required = true, default = nil)
  if valid_605721 != nil:
    section.add "Parameters", valid_605721
  var valid_605722 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605722 = validateParameter(valid_605722, JString, required = true,
                                 default = nil)
  if valid_605722 != nil:
    section.add "DBClusterParameterGroupName", valid_605722
  var valid_605723 = query.getOrDefault("Action")
  valid_605723 = validateParameter(valid_605723, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_605723 != nil:
    section.add "Action", valid_605723
  var valid_605724 = query.getOrDefault("Version")
  valid_605724 = validateParameter(valid_605724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605724 != nil:
    section.add "Version", valid_605724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605725 = header.getOrDefault("X-Amz-Signature")
  valid_605725 = validateParameter(valid_605725, JString, required = false,
                                 default = nil)
  if valid_605725 != nil:
    section.add "X-Amz-Signature", valid_605725
  var valid_605726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605726 = validateParameter(valid_605726, JString, required = false,
                                 default = nil)
  if valid_605726 != nil:
    section.add "X-Amz-Content-Sha256", valid_605726
  var valid_605727 = header.getOrDefault("X-Amz-Date")
  valid_605727 = validateParameter(valid_605727, JString, required = false,
                                 default = nil)
  if valid_605727 != nil:
    section.add "X-Amz-Date", valid_605727
  var valid_605728 = header.getOrDefault("X-Amz-Credential")
  valid_605728 = validateParameter(valid_605728, JString, required = false,
                                 default = nil)
  if valid_605728 != nil:
    section.add "X-Amz-Credential", valid_605728
  var valid_605729 = header.getOrDefault("X-Amz-Security-Token")
  valid_605729 = validateParameter(valid_605729, JString, required = false,
                                 default = nil)
  if valid_605729 != nil:
    section.add "X-Amz-Security-Token", valid_605729
  var valid_605730 = header.getOrDefault("X-Amz-Algorithm")
  valid_605730 = validateParameter(valid_605730, JString, required = false,
                                 default = nil)
  if valid_605730 != nil:
    section.add "X-Amz-Algorithm", valid_605730
  var valid_605731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605731 = validateParameter(valid_605731, JString, required = false,
                                 default = nil)
  if valid_605731 != nil:
    section.add "X-Amz-SignedHeaders", valid_605731
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605732: Call_GetModifyDBClusterParameterGroup_605718;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605732.validator(path, query, header, formData, body)
  let scheme = call_605732.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605732.url(scheme.get, call_605732.host, call_605732.base,
                         call_605732.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605732, url, valid)

proc call*(call_605733: Call_GetModifyDBClusterParameterGroup_605718;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605734 = newJObject()
  if Parameters != nil:
    query_605734.add "Parameters", Parameters
  add(query_605734, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_605734, "Action", newJString(Action))
  add(query_605734, "Version", newJString(Version))
  result = call_605733.call(nil, query_605734, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_605718(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_605719, base: "/",
    url: url_GetModifyDBClusterParameterGroup_605720,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_605772 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBClusterSnapshotAttribute_605774(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_605773(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605775 = query.getOrDefault("Action")
  valid_605775 = validateParameter(valid_605775, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_605775 != nil:
    section.add "Action", valid_605775
  var valid_605776 = query.getOrDefault("Version")
  valid_605776 = validateParameter(valid_605776, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605776 != nil:
    section.add "Version", valid_605776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605777 = header.getOrDefault("X-Amz-Signature")
  valid_605777 = validateParameter(valid_605777, JString, required = false,
                                 default = nil)
  if valid_605777 != nil:
    section.add "X-Amz-Signature", valid_605777
  var valid_605778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605778 = validateParameter(valid_605778, JString, required = false,
                                 default = nil)
  if valid_605778 != nil:
    section.add "X-Amz-Content-Sha256", valid_605778
  var valid_605779 = header.getOrDefault("X-Amz-Date")
  valid_605779 = validateParameter(valid_605779, JString, required = false,
                                 default = nil)
  if valid_605779 != nil:
    section.add "X-Amz-Date", valid_605779
  var valid_605780 = header.getOrDefault("X-Amz-Credential")
  valid_605780 = validateParameter(valid_605780, JString, required = false,
                                 default = nil)
  if valid_605780 != nil:
    section.add "X-Amz-Credential", valid_605780
  var valid_605781 = header.getOrDefault("X-Amz-Security-Token")
  valid_605781 = validateParameter(valid_605781, JString, required = false,
                                 default = nil)
  if valid_605781 != nil:
    section.add "X-Amz-Security-Token", valid_605781
  var valid_605782 = header.getOrDefault("X-Amz-Algorithm")
  valid_605782 = validateParameter(valid_605782, JString, required = false,
                                 default = nil)
  if valid_605782 != nil:
    section.add "X-Amz-Algorithm", valid_605782
  var valid_605783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605783 = validateParameter(valid_605783, JString, required = false,
                                 default = nil)
  if valid_605783 != nil:
    section.add "X-Amz-SignedHeaders", valid_605783
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_605784 = formData.getOrDefault("AttributeName")
  valid_605784 = validateParameter(valid_605784, JString, required = true,
                                 default = nil)
  if valid_605784 != nil:
    section.add "AttributeName", valid_605784
  var valid_605785 = formData.getOrDefault("ValuesToAdd")
  valid_605785 = validateParameter(valid_605785, JArray, required = false,
                                 default = nil)
  if valid_605785 != nil:
    section.add "ValuesToAdd", valid_605785
  var valid_605786 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_605786 = validateParameter(valid_605786, JString, required = true,
                                 default = nil)
  if valid_605786 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_605786
  var valid_605787 = formData.getOrDefault("ValuesToRemove")
  valid_605787 = validateParameter(valid_605787, JArray, required = false,
                                 default = nil)
  if valid_605787 != nil:
    section.add "ValuesToRemove", valid_605787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605788: Call_PostModifyDBClusterSnapshotAttribute_605772;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605788.validator(path, query, header, formData, body)
  let scheme = call_605788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605788.url(scheme.get, call_605788.host, call_605788.base,
                         call_605788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605788, url, valid)

proc call*(call_605789: Call_PostModifyDBClusterSnapshotAttribute_605772;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_605790 = newJObject()
  var formData_605791 = newJObject()
  add(formData_605791, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_605791.add "ValuesToAdd", ValuesToAdd
  add(formData_605791, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_605790, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_605791.add "ValuesToRemove", ValuesToRemove
  add(query_605790, "Version", newJString(Version))
  result = call_605789.call(nil, query_605790, nil, formData_605791, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_605772(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_605773, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_605774,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_605753 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBClusterSnapshotAttribute_605755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_605754(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605756 = query.getOrDefault("ValuesToRemove")
  valid_605756 = validateParameter(valid_605756, JArray, required = false,
                                 default = nil)
  if valid_605756 != nil:
    section.add "ValuesToRemove", valid_605756
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_605757 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_605757 = validateParameter(valid_605757, JString, required = true,
                                 default = nil)
  if valid_605757 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_605757
  var valid_605758 = query.getOrDefault("Action")
  valid_605758 = validateParameter(valid_605758, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_605758 != nil:
    section.add "Action", valid_605758
  var valid_605759 = query.getOrDefault("AttributeName")
  valid_605759 = validateParameter(valid_605759, JString, required = true,
                                 default = nil)
  if valid_605759 != nil:
    section.add "AttributeName", valid_605759
  var valid_605760 = query.getOrDefault("ValuesToAdd")
  valid_605760 = validateParameter(valid_605760, JArray, required = false,
                                 default = nil)
  if valid_605760 != nil:
    section.add "ValuesToAdd", valid_605760
  var valid_605761 = query.getOrDefault("Version")
  valid_605761 = validateParameter(valid_605761, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605761 != nil:
    section.add "Version", valid_605761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605762 = header.getOrDefault("X-Amz-Signature")
  valid_605762 = validateParameter(valid_605762, JString, required = false,
                                 default = nil)
  if valid_605762 != nil:
    section.add "X-Amz-Signature", valid_605762
  var valid_605763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605763 = validateParameter(valid_605763, JString, required = false,
                                 default = nil)
  if valid_605763 != nil:
    section.add "X-Amz-Content-Sha256", valid_605763
  var valid_605764 = header.getOrDefault("X-Amz-Date")
  valid_605764 = validateParameter(valid_605764, JString, required = false,
                                 default = nil)
  if valid_605764 != nil:
    section.add "X-Amz-Date", valid_605764
  var valid_605765 = header.getOrDefault("X-Amz-Credential")
  valid_605765 = validateParameter(valid_605765, JString, required = false,
                                 default = nil)
  if valid_605765 != nil:
    section.add "X-Amz-Credential", valid_605765
  var valid_605766 = header.getOrDefault("X-Amz-Security-Token")
  valid_605766 = validateParameter(valid_605766, JString, required = false,
                                 default = nil)
  if valid_605766 != nil:
    section.add "X-Amz-Security-Token", valid_605766
  var valid_605767 = header.getOrDefault("X-Amz-Algorithm")
  valid_605767 = validateParameter(valid_605767, JString, required = false,
                                 default = nil)
  if valid_605767 != nil:
    section.add "X-Amz-Algorithm", valid_605767
  var valid_605768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605768 = validateParameter(valid_605768, JString, required = false,
                                 default = nil)
  if valid_605768 != nil:
    section.add "X-Amz-SignedHeaders", valid_605768
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605769: Call_GetModifyDBClusterSnapshotAttribute_605753;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605769.validator(path, query, header, formData, body)
  let scheme = call_605769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605769.url(scheme.get, call_605769.host, call_605769.base,
                         call_605769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605769, url, valid)

proc call*(call_605770: Call_GetModifyDBClusterSnapshotAttribute_605753;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_605771 = newJObject()
  if ValuesToRemove != nil:
    query_605771.add "ValuesToRemove", ValuesToRemove
  add(query_605771, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_605771, "Action", newJString(Action))
  add(query_605771, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_605771.add "ValuesToAdd", ValuesToAdd
  add(query_605771, "Version", newJString(Version))
  result = call_605770.call(nil, query_605771, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_605753(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_605754, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_605755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_605850 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBInstance_605852(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_605851(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605853 = query.getOrDefault("Action")
  valid_605853 = validateParameter(valid_605853, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_605853 != nil:
    section.add "Action", valid_605853
  var valid_605854 = query.getOrDefault("Version")
  valid_605854 = validateParameter(valid_605854, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605854 != nil:
    section.add "Version", valid_605854
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605855 = header.getOrDefault("X-Amz-Security-Token")
  valid_605855 = validateParameter(valid_605855, JString, required = false,
                                 default = nil)
  if valid_605855 != nil:
    section.add "X-Amz-Security-Token", valid_605855
  var valid_605856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605856 = validateParameter(valid_605856, JString, required = false,
                                 default = nil)
  if valid_605856 != nil:
    section.add "X-Amz-SignedHeaders", valid_605856
  var valid_605857 = header.getOrDefault("X-Amz-Signature")
  valid_605857 = validateParameter(valid_605857, JString, required = false,
                                 default = nil)
  if valid_605857 != nil:
    section.add "X-Amz-Signature", valid_605857
  var valid_605858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605858 = validateParameter(valid_605858, JString, required = false,
                                 default = nil)
  if valid_605858 != nil:
    section.add "X-Amz-Content-Sha256", valid_605858
  var valid_605859 = header.getOrDefault("X-Amz-Date")
  valid_605859 = validateParameter(valid_605859, JString, required = false,
                                 default = nil)
  if valid_605859 != nil:
    section.add "X-Amz-Date", valid_605859
  var valid_605860 = header.getOrDefault("X-Amz-Credential")
  valid_605860 = validateParameter(valid_605860, JString, required = false,
                                 default = nil)
  if valid_605860 != nil:
    section.add "X-Amz-Credential", valid_605860
  var valid_605861 = header.getOrDefault("X-Amz-Algorithm")
  valid_605861 = validateParameter(valid_605861, JString, required = false,
                                 default = nil)
  if valid_605861 != nil:
    section.add "X-Amz-Algorithm", valid_605861
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_605862 = formData.getOrDefault("PromotionTier")
  valid_605862 = validateParameter(valid_605862, JInt, required = false, default = nil)
  if valid_605862 != nil:
    section.add "PromotionTier", valid_605862
  var valid_605863 = formData.getOrDefault("MultiAZ")
  valid_605863 = validateParameter(valid_605863, JBool, required = false, default = nil)
  if valid_605863 != nil:
    section.add "MultiAZ", valid_605863
  var valid_605864 = formData.getOrDefault("MonitoringRoleArn")
  valid_605864 = validateParameter(valid_605864, JString, required = false,
                                 default = nil)
  if valid_605864 != nil:
    section.add "MonitoringRoleArn", valid_605864
  var valid_605865 = formData.getOrDefault("CACertificateIdentifier")
  valid_605865 = validateParameter(valid_605865, JString, required = false,
                                 default = nil)
  if valid_605865 != nil:
    section.add "CACertificateIdentifier", valid_605865
  var valid_605866 = formData.getOrDefault("MonitoringInterval")
  valid_605866 = validateParameter(valid_605866, JInt, required = false, default = nil)
  if valid_605866 != nil:
    section.add "MonitoringInterval", valid_605866
  var valid_605867 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605867 = validateParameter(valid_605867, JArray, required = false,
                                 default = nil)
  if valid_605867 != nil:
    section.add "VpcSecurityGroupIds", valid_605867
  var valid_605868 = formData.getOrDefault("EnablePerformanceInsights")
  valid_605868 = validateParameter(valid_605868, JBool, required = false, default = nil)
  if valid_605868 != nil:
    section.add "EnablePerformanceInsights", valid_605868
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605869 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605869 = validateParameter(valid_605869, JString, required = true,
                                 default = nil)
  if valid_605869 != nil:
    section.add "DBInstanceIdentifier", valid_605869
  var valid_605870 = formData.getOrDefault("TdeCredentialArn")
  valid_605870 = validateParameter(valid_605870, JString, required = false,
                                 default = nil)
  if valid_605870 != nil:
    section.add "TdeCredentialArn", valid_605870
  var valid_605871 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605871 = validateParameter(valid_605871, JInt, required = false, default = nil)
  if valid_605871 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605871
  var valid_605872 = formData.getOrDefault("DBSubnetGroupName")
  valid_605872 = validateParameter(valid_605872, JString, required = false,
                                 default = nil)
  if valid_605872 != nil:
    section.add "DBSubnetGroupName", valid_605872
  var valid_605873 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_605873 = validateParameter(valid_605873, JBool, required = false, default = nil)
  if valid_605873 != nil:
    section.add "AllowMajorVersionUpgrade", valid_605873
  var valid_605874 = formData.getOrDefault("CertificateRotationRestart")
  valid_605874 = validateParameter(valid_605874, JBool, required = false, default = nil)
  if valid_605874 != nil:
    section.add "CertificateRotationRestart", valid_605874
  var valid_605875 = formData.getOrDefault("StorageType")
  valid_605875 = validateParameter(valid_605875, JString, required = false,
                                 default = nil)
  if valid_605875 != nil:
    section.add "StorageType", valid_605875
  var valid_605876 = formData.getOrDefault("MaxAllocatedStorage")
  valid_605876 = validateParameter(valid_605876, JInt, required = false, default = nil)
  if valid_605876 != nil:
    section.add "MaxAllocatedStorage", valid_605876
  var valid_605877 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_605877 = validateParameter(valid_605877, JBool, required = false, default = nil)
  if valid_605877 != nil:
    section.add "CopyTagsToSnapshot", valid_605877
  var valid_605878 = formData.getOrDefault("DeletionProtection")
  valid_605878 = validateParameter(valid_605878, JBool, required = false, default = nil)
  if valid_605878 != nil:
    section.add "DeletionProtection", valid_605878
  var valid_605879 = formData.getOrDefault("ProcessorFeatures")
  valid_605879 = validateParameter(valid_605879, JArray, required = false,
                                 default = nil)
  if valid_605879 != nil:
    section.add "ProcessorFeatures", valid_605879
  var valid_605880 = formData.getOrDefault("AllocatedStorage")
  valid_605880 = validateParameter(valid_605880, JInt, required = false, default = nil)
  if valid_605880 != nil:
    section.add "AllocatedStorage", valid_605880
  var valid_605881 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_605881 = validateParameter(valid_605881, JString, required = false,
                                 default = nil)
  if valid_605881 != nil:
    section.add "PreferredMaintenanceWindow", valid_605881
  var valid_605882 = formData.getOrDefault("DBInstanceClass")
  valid_605882 = validateParameter(valid_605882, JString, required = false,
                                 default = nil)
  if valid_605882 != nil:
    section.add "DBInstanceClass", valid_605882
  var valid_605883 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_605883 = validateParameter(valid_605883, JBool, required = false, default = nil)
  if valid_605883 != nil:
    section.add "UseDefaultProcessorFeatures", valid_605883
  var valid_605884 = formData.getOrDefault("PreferredBackupWindow")
  valid_605884 = validateParameter(valid_605884, JString, required = false,
                                 default = nil)
  if valid_605884 != nil:
    section.add "PreferredBackupWindow", valid_605884
  var valid_605885 = formData.getOrDefault("MasterUserPassword")
  valid_605885 = validateParameter(valid_605885, JString, required = false,
                                 default = nil)
  if valid_605885 != nil:
    section.add "MasterUserPassword", valid_605885
  var valid_605886 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_605886 = validateParameter(valid_605886, JArray, required = false,
                                 default = nil)
  if valid_605886 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_605886
  var valid_605887 = formData.getOrDefault("Domain")
  valid_605887 = validateParameter(valid_605887, JString, required = false,
                                 default = nil)
  if valid_605887 != nil:
    section.add "Domain", valid_605887
  var valid_605888 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_605888 = validateParameter(valid_605888, JArray, required = false,
                                 default = nil)
  if valid_605888 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_605888
  var valid_605889 = formData.getOrDefault("DBParameterGroupName")
  valid_605889 = validateParameter(valid_605889, JString, required = false,
                                 default = nil)
  if valid_605889 != nil:
    section.add "DBParameterGroupName", valid_605889
  var valid_605890 = formData.getOrDefault("EngineVersion")
  valid_605890 = validateParameter(valid_605890, JString, required = false,
                                 default = nil)
  if valid_605890 != nil:
    section.add "EngineVersion", valid_605890
  var valid_605891 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605891 = validateParameter(valid_605891, JBool, required = false, default = nil)
  if valid_605891 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605891
  var valid_605892 = formData.getOrDefault("BackupRetentionPeriod")
  valid_605892 = validateParameter(valid_605892, JInt, required = false, default = nil)
  if valid_605892 != nil:
    section.add "BackupRetentionPeriod", valid_605892
  var valid_605893 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_605893 = validateParameter(valid_605893, JBool, required = false, default = nil)
  if valid_605893 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605893
  var valid_605894 = formData.getOrDefault("TdeCredentialPassword")
  valid_605894 = validateParameter(valid_605894, JString, required = false,
                                 default = nil)
  if valid_605894 != nil:
    section.add "TdeCredentialPassword", valid_605894
  var valid_605895 = formData.getOrDefault("ApplyImmediately")
  valid_605895 = validateParameter(valid_605895, JBool, required = false, default = nil)
  if valid_605895 != nil:
    section.add "ApplyImmediately", valid_605895
  var valid_605896 = formData.getOrDefault("Iops")
  valid_605896 = validateParameter(valid_605896, JInt, required = false, default = nil)
  if valid_605896 != nil:
    section.add "Iops", valid_605896
  var valid_605897 = formData.getOrDefault("PubliclyAccessible")
  valid_605897 = validateParameter(valid_605897, JBool, required = false, default = nil)
  if valid_605897 != nil:
    section.add "PubliclyAccessible", valid_605897
  var valid_605898 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605898 = validateParameter(valid_605898, JString, required = false,
                                 default = nil)
  if valid_605898 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605898
  var valid_605899 = formData.getOrDefault("LicenseModel")
  valid_605899 = validateParameter(valid_605899, JString, required = false,
                                 default = nil)
  if valid_605899 != nil:
    section.add "LicenseModel", valid_605899
  var valid_605900 = formData.getOrDefault("DomainIAMRoleName")
  valid_605900 = validateParameter(valid_605900, JString, required = false,
                                 default = nil)
  if valid_605900 != nil:
    section.add "DomainIAMRoleName", valid_605900
  var valid_605901 = formData.getOrDefault("OptionGroupName")
  valid_605901 = validateParameter(valid_605901, JString, required = false,
                                 default = nil)
  if valid_605901 != nil:
    section.add "OptionGroupName", valid_605901
  var valid_605902 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_605902 = validateParameter(valid_605902, JString, required = false,
                                 default = nil)
  if valid_605902 != nil:
    section.add "NewDBInstanceIdentifier", valid_605902
  var valid_605903 = formData.getOrDefault("DBSecurityGroups")
  valid_605903 = validateParameter(valid_605903, JArray, required = false,
                                 default = nil)
  if valid_605903 != nil:
    section.add "DBSecurityGroups", valid_605903
  var valid_605904 = formData.getOrDefault("DBPortNumber")
  valid_605904 = validateParameter(valid_605904, JInt, required = false, default = nil)
  if valid_605904 != nil:
    section.add "DBPortNumber", valid_605904
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605905: Call_PostModifyDBInstance_605850; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_605905.validator(path, query, header, formData, body)
  let scheme = call_605905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605905.url(scheme.get, call_605905.host, call_605905.base,
                         call_605905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605905, url, valid)

proc call*(call_605906: Call_PostModifyDBInstance_605850;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; StorageType: string = "";
          MaxAllocatedStorage: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_605907 = newJObject()
  var formData_605908 = newJObject()
  add(formData_605908, "PromotionTier", newJInt(PromotionTier))
  add(formData_605908, "MultiAZ", newJBool(MultiAZ))
  add(formData_605908, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_605908, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_605908, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_605908.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605908, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_605908, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_605908, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_605907, "Action", newJString(Action))
  add(formData_605908, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_605908, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_605908, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_605908, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_605908, "StorageType", newJString(StorageType))
  add(formData_605908, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_605908, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_605908, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_605908.add "ProcessorFeatures", ProcessorFeatures
  add(formData_605908, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_605908, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_605908, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605908, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_605908, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_605908, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_605908.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_605908, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_605908.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_605908, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_605908, "EngineVersion", newJString(EngineVersion))
  add(formData_605908, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605908, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_605908, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_605908, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_605908, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_605908, "Iops", newJInt(Iops))
  add(formData_605908, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_605908, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_605908, "LicenseModel", newJString(LicenseModel))
  add(formData_605908, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_605908, "OptionGroupName", newJString(OptionGroupName))
  add(formData_605908, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_605907, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_605908.add "DBSecurityGroups", DBSecurityGroups
  add(formData_605908, "DBPortNumber", newJInt(DBPortNumber))
  result = call_605906.call(nil, query_605907, nil, formData_605908, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_605850(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_605851, base: "/",
    url: url_PostModifyDBInstance_605852, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_605792 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBInstance_605794(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_605793(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_605795 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_605795 = validateParameter(valid_605795, JBool, required = false, default = nil)
  if valid_605795 != nil:
    section.add "UseDefaultProcessorFeatures", valid_605795
  var valid_605796 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605796 = validateParameter(valid_605796, JInt, required = false, default = nil)
  if valid_605796 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605796
  var valid_605797 = query.getOrDefault("CopyTagsToSnapshot")
  valid_605797 = validateParameter(valid_605797, JBool, required = false, default = nil)
  if valid_605797 != nil:
    section.add "CopyTagsToSnapshot", valid_605797
  var valid_605798 = query.getOrDefault("MonitoringInterval")
  valid_605798 = validateParameter(valid_605798, JInt, required = false, default = nil)
  if valid_605798 != nil:
    section.add "MonitoringInterval", valid_605798
  var valid_605799 = query.getOrDefault("MonitoringRoleArn")
  valid_605799 = validateParameter(valid_605799, JString, required = false,
                                 default = nil)
  if valid_605799 != nil:
    section.add "MonitoringRoleArn", valid_605799
  var valid_605800 = query.getOrDefault("DBPortNumber")
  valid_605800 = validateParameter(valid_605800, JInt, required = false, default = nil)
  if valid_605800 != nil:
    section.add "DBPortNumber", valid_605800
  var valid_605801 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_605801 = validateParameter(valid_605801, JArray, required = false,
                                 default = nil)
  if valid_605801 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_605801
  var valid_605802 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_605802 = validateParameter(valid_605802, JArray, required = false,
                                 default = nil)
  if valid_605802 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_605802
  var valid_605803 = query.getOrDefault("ProcessorFeatures")
  valid_605803 = validateParameter(valid_605803, JArray, required = false,
                                 default = nil)
  if valid_605803 != nil:
    section.add "ProcessorFeatures", valid_605803
  var valid_605804 = query.getOrDefault("BackupRetentionPeriod")
  valid_605804 = validateParameter(valid_605804, JInt, required = false, default = nil)
  if valid_605804 != nil:
    section.add "BackupRetentionPeriod", valid_605804
  var valid_605805 = query.getOrDefault("EngineVersion")
  valid_605805 = validateParameter(valid_605805, JString, required = false,
                                 default = nil)
  if valid_605805 != nil:
    section.add "EngineVersion", valid_605805
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605806 = query.getOrDefault("Action")
  valid_605806 = validateParameter(valid_605806, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_605806 != nil:
    section.add "Action", valid_605806
  var valid_605807 = query.getOrDefault("Domain")
  valid_605807 = validateParameter(valid_605807, JString, required = false,
                                 default = nil)
  if valid_605807 != nil:
    section.add "Domain", valid_605807
  var valid_605808 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605808 = validateParameter(valid_605808, JArray, required = false,
                                 default = nil)
  if valid_605808 != nil:
    section.add "VpcSecurityGroupIds", valid_605808
  var valid_605809 = query.getOrDefault("AllocatedStorage")
  valid_605809 = validateParameter(valid_605809, JInt, required = false, default = nil)
  if valid_605809 != nil:
    section.add "AllocatedStorage", valid_605809
  var valid_605810 = query.getOrDefault("EnablePerformanceInsights")
  valid_605810 = validateParameter(valid_605810, JBool, required = false, default = nil)
  if valid_605810 != nil:
    section.add "EnablePerformanceInsights", valid_605810
  var valid_605811 = query.getOrDefault("PubliclyAccessible")
  valid_605811 = validateParameter(valid_605811, JBool, required = false, default = nil)
  if valid_605811 != nil:
    section.add "PubliclyAccessible", valid_605811
  var valid_605812 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_605812 = validateParameter(valid_605812, JString, required = false,
                                 default = nil)
  if valid_605812 != nil:
    section.add "NewDBInstanceIdentifier", valid_605812
  var valid_605813 = query.getOrDefault("TdeCredentialPassword")
  valid_605813 = validateParameter(valid_605813, JString, required = false,
                                 default = nil)
  if valid_605813 != nil:
    section.add "TdeCredentialPassword", valid_605813
  var valid_605814 = query.getOrDefault("DeletionProtection")
  valid_605814 = validateParameter(valid_605814, JBool, required = false, default = nil)
  if valid_605814 != nil:
    section.add "DeletionProtection", valid_605814
  var valid_605815 = query.getOrDefault("DBParameterGroupName")
  valid_605815 = validateParameter(valid_605815, JString, required = false,
                                 default = nil)
  if valid_605815 != nil:
    section.add "DBParameterGroupName", valid_605815
  var valid_605816 = query.getOrDefault("MaxAllocatedStorage")
  valid_605816 = validateParameter(valid_605816, JInt, required = false, default = nil)
  if valid_605816 != nil:
    section.add "MaxAllocatedStorage", valid_605816
  var valid_605817 = query.getOrDefault("CertificateRotationRestart")
  valid_605817 = validateParameter(valid_605817, JBool, required = false, default = nil)
  if valid_605817 != nil:
    section.add "CertificateRotationRestart", valid_605817
  var valid_605818 = query.getOrDefault("LicenseModel")
  valid_605818 = validateParameter(valid_605818, JString, required = false,
                                 default = nil)
  if valid_605818 != nil:
    section.add "LicenseModel", valid_605818
  var valid_605819 = query.getOrDefault("DBInstanceIdentifier")
  valid_605819 = validateParameter(valid_605819, JString, required = true,
                                 default = nil)
  if valid_605819 != nil:
    section.add "DBInstanceIdentifier", valid_605819
  var valid_605820 = query.getOrDefault("TdeCredentialArn")
  valid_605820 = validateParameter(valid_605820, JString, required = false,
                                 default = nil)
  if valid_605820 != nil:
    section.add "TdeCredentialArn", valid_605820
  var valid_605821 = query.getOrDefault("PromotionTier")
  valid_605821 = validateParameter(valid_605821, JInt, required = false, default = nil)
  if valid_605821 != nil:
    section.add "PromotionTier", valid_605821
  var valid_605822 = query.getOrDefault("CACertificateIdentifier")
  valid_605822 = validateParameter(valid_605822, JString, required = false,
                                 default = nil)
  if valid_605822 != nil:
    section.add "CACertificateIdentifier", valid_605822
  var valid_605823 = query.getOrDefault("StorageType")
  valid_605823 = validateParameter(valid_605823, JString, required = false,
                                 default = nil)
  if valid_605823 != nil:
    section.add "StorageType", valid_605823
  var valid_605824 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605824 = validateParameter(valid_605824, JBool, required = false, default = nil)
  if valid_605824 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605824
  var valid_605825 = query.getOrDefault("MultiAZ")
  valid_605825 = validateParameter(valid_605825, JBool, required = false, default = nil)
  if valid_605825 != nil:
    section.add "MultiAZ", valid_605825
  var valid_605826 = query.getOrDefault("DBSecurityGroups")
  valid_605826 = validateParameter(valid_605826, JArray, required = false,
                                 default = nil)
  if valid_605826 != nil:
    section.add "DBSecurityGroups", valid_605826
  var valid_605827 = query.getOrDefault("ApplyImmediately")
  valid_605827 = validateParameter(valid_605827, JBool, required = false, default = nil)
  if valid_605827 != nil:
    section.add "ApplyImmediately", valid_605827
  var valid_605828 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_605828 = validateParameter(valid_605828, JBool, required = false, default = nil)
  if valid_605828 != nil:
    section.add "AllowMajorVersionUpgrade", valid_605828
  var valid_605829 = query.getOrDefault("MasterUserPassword")
  valid_605829 = validateParameter(valid_605829, JString, required = false,
                                 default = nil)
  if valid_605829 != nil:
    section.add "MasterUserPassword", valid_605829
  var valid_605830 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605830 = validateParameter(valid_605830, JString, required = false,
                                 default = nil)
  if valid_605830 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605830
  var valid_605831 = query.getOrDefault("OptionGroupName")
  valid_605831 = validateParameter(valid_605831, JString, required = false,
                                 default = nil)
  if valid_605831 != nil:
    section.add "OptionGroupName", valid_605831
  var valid_605832 = query.getOrDefault("DBSubnetGroupName")
  valid_605832 = validateParameter(valid_605832, JString, required = false,
                                 default = nil)
  if valid_605832 != nil:
    section.add "DBSubnetGroupName", valid_605832
  var valid_605833 = query.getOrDefault("PreferredBackupWindow")
  valid_605833 = validateParameter(valid_605833, JString, required = false,
                                 default = nil)
  if valid_605833 != nil:
    section.add "PreferredBackupWindow", valid_605833
  var valid_605834 = query.getOrDefault("DBInstanceClass")
  valid_605834 = validateParameter(valid_605834, JString, required = false,
                                 default = nil)
  if valid_605834 != nil:
    section.add "DBInstanceClass", valid_605834
  var valid_605835 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_605835 = validateParameter(valid_605835, JString, required = false,
                                 default = nil)
  if valid_605835 != nil:
    section.add "PreferredMaintenanceWindow", valid_605835
  var valid_605836 = query.getOrDefault("Version")
  valid_605836 = validateParameter(valid_605836, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605836 != nil:
    section.add "Version", valid_605836
  var valid_605837 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_605837 = validateParameter(valid_605837, JBool, required = false, default = nil)
  if valid_605837 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605837
  var valid_605838 = query.getOrDefault("Iops")
  valid_605838 = validateParameter(valid_605838, JInt, required = false, default = nil)
  if valid_605838 != nil:
    section.add "Iops", valid_605838
  var valid_605839 = query.getOrDefault("DomainIAMRoleName")
  valid_605839 = validateParameter(valid_605839, JString, required = false,
                                 default = nil)
  if valid_605839 != nil:
    section.add "DomainIAMRoleName", valid_605839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605840 = header.getOrDefault("X-Amz-Security-Token")
  valid_605840 = validateParameter(valid_605840, JString, required = false,
                                 default = nil)
  if valid_605840 != nil:
    section.add "X-Amz-Security-Token", valid_605840
  var valid_605841 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605841 = validateParameter(valid_605841, JString, required = false,
                                 default = nil)
  if valid_605841 != nil:
    section.add "X-Amz-SignedHeaders", valid_605841
  var valid_605842 = header.getOrDefault("X-Amz-Signature")
  valid_605842 = validateParameter(valid_605842, JString, required = false,
                                 default = nil)
  if valid_605842 != nil:
    section.add "X-Amz-Signature", valid_605842
  var valid_605843 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605843 = validateParameter(valid_605843, JString, required = false,
                                 default = nil)
  if valid_605843 != nil:
    section.add "X-Amz-Content-Sha256", valid_605843
  var valid_605844 = header.getOrDefault("X-Amz-Date")
  valid_605844 = validateParameter(valid_605844, JString, required = false,
                                 default = nil)
  if valid_605844 != nil:
    section.add "X-Amz-Date", valid_605844
  var valid_605845 = header.getOrDefault("X-Amz-Credential")
  valid_605845 = validateParameter(valid_605845, JString, required = false,
                                 default = nil)
  if valid_605845 != nil:
    section.add "X-Amz-Credential", valid_605845
  var valid_605846 = header.getOrDefault("X-Amz-Algorithm")
  valid_605846 = validateParameter(valid_605846, JString, required = false,
                                 default = nil)
  if valid_605846 != nil:
    section.add "X-Amz-Algorithm", valid_605846
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605847: Call_GetModifyDBInstance_605792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_605847.validator(path, query, header, formData, body)
  let scheme = call_605847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605847.url(scheme.get, call_605847.host, call_605847.base,
                         call_605847.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605847, url, valid)

proc call*(call_605848: Call_GetModifyDBInstance_605792;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          CertificateRotationRestart: bool = false; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          DBInstanceClass: string = ""; PreferredMaintenanceWindow: string = "";
          Version: string = "2014-10-31"; AutoMinorVersionUpgrade: bool = false;
          Iops: int = 0; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_605849 = newJObject()
  add(query_605849, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_605849, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_605849, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_605849, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_605849, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_605849, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_605849.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_605849.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_605849.add "ProcessorFeatures", ProcessorFeatures
  add(query_605849, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_605849, "EngineVersion", newJString(EngineVersion))
  add(query_605849, "Action", newJString(Action))
  add(query_605849, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_605849.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_605849, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_605849, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_605849, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_605849, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_605849, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_605849, "DeletionProtection", newJBool(DeletionProtection))
  add(query_605849, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_605849, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_605849, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_605849, "LicenseModel", newJString(LicenseModel))
  add(query_605849, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605849, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_605849, "PromotionTier", newJInt(PromotionTier))
  add(query_605849, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_605849, "StorageType", newJString(StorageType))
  add(query_605849, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605849, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_605849.add "DBSecurityGroups", DBSecurityGroups
  add(query_605849, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_605849, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_605849, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_605849, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_605849, "OptionGroupName", newJString(OptionGroupName))
  add(query_605849, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605849, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_605849, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_605849, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_605849, "Version", newJString(Version))
  add(query_605849, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_605849, "Iops", newJInt(Iops))
  add(query_605849, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_605848.call(nil, query_605849, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_605792(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_605793, base: "/",
    url: url_GetModifyDBInstance_605794, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_605926 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBParameterGroup_605928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_605927(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605929 = query.getOrDefault("Action")
  valid_605929 = validateParameter(valid_605929, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_605929 != nil:
    section.add "Action", valid_605929
  var valid_605930 = query.getOrDefault("Version")
  valid_605930 = validateParameter(valid_605930, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605930 != nil:
    section.add "Version", valid_605930
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605931 = header.getOrDefault("X-Amz-Signature")
  valid_605931 = validateParameter(valid_605931, JString, required = false,
                                 default = nil)
  if valid_605931 != nil:
    section.add "X-Amz-Signature", valid_605931
  var valid_605932 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605932 = validateParameter(valid_605932, JString, required = false,
                                 default = nil)
  if valid_605932 != nil:
    section.add "X-Amz-Content-Sha256", valid_605932
  var valid_605933 = header.getOrDefault("X-Amz-Date")
  valid_605933 = validateParameter(valid_605933, JString, required = false,
                                 default = nil)
  if valid_605933 != nil:
    section.add "X-Amz-Date", valid_605933
  var valid_605934 = header.getOrDefault("X-Amz-Credential")
  valid_605934 = validateParameter(valid_605934, JString, required = false,
                                 default = nil)
  if valid_605934 != nil:
    section.add "X-Amz-Credential", valid_605934
  var valid_605935 = header.getOrDefault("X-Amz-Security-Token")
  valid_605935 = validateParameter(valid_605935, JString, required = false,
                                 default = nil)
  if valid_605935 != nil:
    section.add "X-Amz-Security-Token", valid_605935
  var valid_605936 = header.getOrDefault("X-Amz-Algorithm")
  valid_605936 = validateParameter(valid_605936, JString, required = false,
                                 default = nil)
  if valid_605936 != nil:
    section.add "X-Amz-Algorithm", valid_605936
  var valid_605937 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605937 = validateParameter(valid_605937, JString, required = false,
                                 default = nil)
  if valid_605937 != nil:
    section.add "X-Amz-SignedHeaders", valid_605937
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_605938 = formData.getOrDefault("DBParameterGroupName")
  valid_605938 = validateParameter(valid_605938, JString, required = true,
                                 default = nil)
  if valid_605938 != nil:
    section.add "DBParameterGroupName", valid_605938
  var valid_605939 = formData.getOrDefault("Parameters")
  valid_605939 = validateParameter(valid_605939, JArray, required = true, default = nil)
  if valid_605939 != nil:
    section.add "Parameters", valid_605939
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605940: Call_PostModifyDBParameterGroup_605926; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605940.validator(path, query, header, formData, body)
  let scheme = call_605940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605940.url(scheme.get, call_605940.host, call_605940.base,
                         call_605940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605940, url, valid)

proc call*(call_605941: Call_PostModifyDBParameterGroup_605926;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_605942 = newJObject()
  var formData_605943 = newJObject()
  add(formData_605943, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_605942, "Action", newJString(Action))
  if Parameters != nil:
    formData_605943.add "Parameters", Parameters
  add(query_605942, "Version", newJString(Version))
  result = call_605941.call(nil, query_605942, nil, formData_605943, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_605926(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_605927, base: "/",
    url: url_PostModifyDBParameterGroup_605928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_605909 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBParameterGroup_605911(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_605910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_605912 = query.getOrDefault("DBParameterGroupName")
  valid_605912 = validateParameter(valid_605912, JString, required = true,
                                 default = nil)
  if valid_605912 != nil:
    section.add "DBParameterGroupName", valid_605912
  var valid_605913 = query.getOrDefault("Parameters")
  valid_605913 = validateParameter(valid_605913, JArray, required = true, default = nil)
  if valid_605913 != nil:
    section.add "Parameters", valid_605913
  var valid_605914 = query.getOrDefault("Action")
  valid_605914 = validateParameter(valid_605914, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_605914 != nil:
    section.add "Action", valid_605914
  var valid_605915 = query.getOrDefault("Version")
  valid_605915 = validateParameter(valid_605915, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605915 != nil:
    section.add "Version", valid_605915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605916 = header.getOrDefault("X-Amz-Signature")
  valid_605916 = validateParameter(valid_605916, JString, required = false,
                                 default = nil)
  if valid_605916 != nil:
    section.add "X-Amz-Signature", valid_605916
  var valid_605917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605917 = validateParameter(valid_605917, JString, required = false,
                                 default = nil)
  if valid_605917 != nil:
    section.add "X-Amz-Content-Sha256", valid_605917
  var valid_605918 = header.getOrDefault("X-Amz-Date")
  valid_605918 = validateParameter(valid_605918, JString, required = false,
                                 default = nil)
  if valid_605918 != nil:
    section.add "X-Amz-Date", valid_605918
  var valid_605919 = header.getOrDefault("X-Amz-Credential")
  valid_605919 = validateParameter(valid_605919, JString, required = false,
                                 default = nil)
  if valid_605919 != nil:
    section.add "X-Amz-Credential", valid_605919
  var valid_605920 = header.getOrDefault("X-Amz-Security-Token")
  valid_605920 = validateParameter(valid_605920, JString, required = false,
                                 default = nil)
  if valid_605920 != nil:
    section.add "X-Amz-Security-Token", valid_605920
  var valid_605921 = header.getOrDefault("X-Amz-Algorithm")
  valid_605921 = validateParameter(valid_605921, JString, required = false,
                                 default = nil)
  if valid_605921 != nil:
    section.add "X-Amz-Algorithm", valid_605921
  var valid_605922 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605922 = validateParameter(valid_605922, JString, required = false,
                                 default = nil)
  if valid_605922 != nil:
    section.add "X-Amz-SignedHeaders", valid_605922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605923: Call_GetModifyDBParameterGroup_605909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605923.validator(path, query, header, formData, body)
  let scheme = call_605923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605923.url(scheme.get, call_605923.host, call_605923.base,
                         call_605923.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605923, url, valid)

proc call*(call_605924: Call_GetModifyDBParameterGroup_605909;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605925 = newJObject()
  add(query_605925, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_605925.add "Parameters", Parameters
  add(query_605925, "Action", newJString(Action))
  add(query_605925, "Version", newJString(Version))
  result = call_605924.call(nil, query_605925, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_605909(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_605910, base: "/",
    url: url_GetModifyDBParameterGroup_605911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_605967 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBProxy_605969(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_605968(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605970 = query.getOrDefault("Action")
  valid_605970 = validateParameter(valid_605970, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_605970 != nil:
    section.add "Action", valid_605970
  var valid_605971 = query.getOrDefault("Version")
  valid_605971 = validateParameter(valid_605971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605971 != nil:
    section.add "Version", valid_605971
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605972 = header.getOrDefault("X-Amz-Signature")
  valid_605972 = validateParameter(valid_605972, JString, required = false,
                                 default = nil)
  if valid_605972 != nil:
    section.add "X-Amz-Signature", valid_605972
  var valid_605973 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605973 = validateParameter(valid_605973, JString, required = false,
                                 default = nil)
  if valid_605973 != nil:
    section.add "X-Amz-Content-Sha256", valid_605973
  var valid_605974 = header.getOrDefault("X-Amz-Date")
  valid_605974 = validateParameter(valid_605974, JString, required = false,
                                 default = nil)
  if valid_605974 != nil:
    section.add "X-Amz-Date", valid_605974
  var valid_605975 = header.getOrDefault("X-Amz-Credential")
  valid_605975 = validateParameter(valid_605975, JString, required = false,
                                 default = nil)
  if valid_605975 != nil:
    section.add "X-Amz-Credential", valid_605975
  var valid_605976 = header.getOrDefault("X-Amz-Security-Token")
  valid_605976 = validateParameter(valid_605976, JString, required = false,
                                 default = nil)
  if valid_605976 != nil:
    section.add "X-Amz-Security-Token", valid_605976
  var valid_605977 = header.getOrDefault("X-Amz-Algorithm")
  valid_605977 = validateParameter(valid_605977, JString, required = false,
                                 default = nil)
  if valid_605977 != nil:
    section.add "X-Amz-Algorithm", valid_605977
  var valid_605978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605978 = validateParameter(valid_605978, JString, required = false,
                                 default = nil)
  if valid_605978 != nil:
    section.add "X-Amz-SignedHeaders", valid_605978
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_605979 = formData.getOrDefault("IdleClientTimeout")
  valid_605979 = validateParameter(valid_605979, JInt, required = false, default = nil)
  if valid_605979 != nil:
    section.add "IdleClientTimeout", valid_605979
  var valid_605980 = formData.getOrDefault("RequireTLS")
  valid_605980 = validateParameter(valid_605980, JBool, required = false, default = nil)
  if valid_605980 != nil:
    section.add "RequireTLS", valid_605980
  var valid_605981 = formData.getOrDefault("DebugLogging")
  valid_605981 = validateParameter(valid_605981, JBool, required = false, default = nil)
  if valid_605981 != nil:
    section.add "DebugLogging", valid_605981
  var valid_605982 = formData.getOrDefault("RoleArn")
  valid_605982 = validateParameter(valid_605982, JString, required = false,
                                 default = nil)
  if valid_605982 != nil:
    section.add "RoleArn", valid_605982
  var valid_605983 = formData.getOrDefault("SecurityGroups")
  valid_605983 = validateParameter(valid_605983, JArray, required = false,
                                 default = nil)
  if valid_605983 != nil:
    section.add "SecurityGroups", valid_605983
  var valid_605984 = formData.getOrDefault("Auth")
  valid_605984 = validateParameter(valid_605984, JArray, required = false,
                                 default = nil)
  if valid_605984 != nil:
    section.add "Auth", valid_605984
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_605985 = formData.getOrDefault("DBProxyName")
  valid_605985 = validateParameter(valid_605985, JString, required = true,
                                 default = nil)
  if valid_605985 != nil:
    section.add "DBProxyName", valid_605985
  var valid_605986 = formData.getOrDefault("NewDBProxyName")
  valid_605986 = validateParameter(valid_605986, JString, required = false,
                                 default = nil)
  if valid_605986 != nil:
    section.add "NewDBProxyName", valid_605986
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605987: Call_PostModifyDBProxy_605967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_605987.validator(path, query, header, formData, body)
  let scheme = call_605987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605987.url(scheme.get, call_605987.host, call_605987.base,
                         call_605987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605987, url, valid)

proc call*(call_605988: Call_PostModifyDBProxy_605967; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; RoleArn: string = "";
          SecurityGroups: JsonNode = nil; Auth: JsonNode = nil;
          NewDBProxyName: string = ""; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605989 = newJObject()
  var formData_605990 = newJObject()
  add(formData_605990, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_605990, "RequireTLS", newJBool(RequireTLS))
  add(formData_605990, "DebugLogging", newJBool(DebugLogging))
  add(formData_605990, "RoleArn", newJString(RoleArn))
  if SecurityGroups != nil:
    formData_605990.add "SecurityGroups", SecurityGroups
  if Auth != nil:
    formData_605990.add "Auth", Auth
  add(formData_605990, "DBProxyName", newJString(DBProxyName))
  add(formData_605990, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_605989, "Action", newJString(Action))
  add(query_605989, "Version", newJString(Version))
  result = call_605988.call(nil, query_605989, nil, formData_605990, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_605967(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_605968,
    base: "/", url: url_PostModifyDBProxy_605969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_605944 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBProxy_605946(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_605945(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  section = newJObject()
  var valid_605947 = query.getOrDefault("IdleClientTimeout")
  valid_605947 = validateParameter(valid_605947, JInt, required = false, default = nil)
  if valid_605947 != nil:
    section.add "IdleClientTimeout", valid_605947
  var valid_605948 = query.getOrDefault("RoleArn")
  valid_605948 = validateParameter(valid_605948, JString, required = false,
                                 default = nil)
  if valid_605948 != nil:
    section.add "RoleArn", valid_605948
  var valid_605949 = query.getOrDefault("Auth")
  valid_605949 = validateParameter(valid_605949, JArray, required = false,
                                 default = nil)
  if valid_605949 != nil:
    section.add "Auth", valid_605949
  var valid_605950 = query.getOrDefault("RequireTLS")
  valid_605950 = validateParameter(valid_605950, JBool, required = false, default = nil)
  if valid_605950 != nil:
    section.add "RequireTLS", valid_605950
  var valid_605951 = query.getOrDefault("NewDBProxyName")
  valid_605951 = validateParameter(valid_605951, JString, required = false,
                                 default = nil)
  if valid_605951 != nil:
    section.add "NewDBProxyName", valid_605951
  var valid_605952 = query.getOrDefault("SecurityGroups")
  valid_605952 = validateParameter(valid_605952, JArray, required = false,
                                 default = nil)
  if valid_605952 != nil:
    section.add "SecurityGroups", valid_605952
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605953 = query.getOrDefault("Action")
  valid_605953 = validateParameter(valid_605953, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_605953 != nil:
    section.add "Action", valid_605953
  var valid_605954 = query.getOrDefault("Version")
  valid_605954 = validateParameter(valid_605954, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605954 != nil:
    section.add "Version", valid_605954
  var valid_605955 = query.getOrDefault("DebugLogging")
  valid_605955 = validateParameter(valid_605955, JBool, required = false, default = nil)
  if valid_605955 != nil:
    section.add "DebugLogging", valid_605955
  var valid_605956 = query.getOrDefault("DBProxyName")
  valid_605956 = validateParameter(valid_605956, JString, required = true,
                                 default = nil)
  if valid_605956 != nil:
    section.add "DBProxyName", valid_605956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605957 = header.getOrDefault("X-Amz-Signature")
  valid_605957 = validateParameter(valid_605957, JString, required = false,
                                 default = nil)
  if valid_605957 != nil:
    section.add "X-Amz-Signature", valid_605957
  var valid_605958 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605958 = validateParameter(valid_605958, JString, required = false,
                                 default = nil)
  if valid_605958 != nil:
    section.add "X-Amz-Content-Sha256", valid_605958
  var valid_605959 = header.getOrDefault("X-Amz-Date")
  valid_605959 = validateParameter(valid_605959, JString, required = false,
                                 default = nil)
  if valid_605959 != nil:
    section.add "X-Amz-Date", valid_605959
  var valid_605960 = header.getOrDefault("X-Amz-Credential")
  valid_605960 = validateParameter(valid_605960, JString, required = false,
                                 default = nil)
  if valid_605960 != nil:
    section.add "X-Amz-Credential", valid_605960
  var valid_605961 = header.getOrDefault("X-Amz-Security-Token")
  valid_605961 = validateParameter(valid_605961, JString, required = false,
                                 default = nil)
  if valid_605961 != nil:
    section.add "X-Amz-Security-Token", valid_605961
  var valid_605962 = header.getOrDefault("X-Amz-Algorithm")
  valid_605962 = validateParameter(valid_605962, JString, required = false,
                                 default = nil)
  if valid_605962 != nil:
    section.add "X-Amz-Algorithm", valid_605962
  var valid_605963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605963 = validateParameter(valid_605963, JString, required = false,
                                 default = nil)
  if valid_605963 != nil:
    section.add "X-Amz-SignedHeaders", valid_605963
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605964: Call_GetModifyDBProxy_605944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_605964.validator(path, query, header, formData, body)
  let scheme = call_605964.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605964.url(scheme.get, call_605964.host, call_605964.base,
                         call_605964.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605964, url, valid)

proc call*(call_605965: Call_GetModifyDBProxy_605944; DBProxyName: string;
          IdleClientTimeout: int = 0; RoleArn: string = ""; Auth: JsonNode = nil;
          RequireTLS: bool = false; NewDBProxyName: string = "";
          SecurityGroups: JsonNode = nil; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"; DebugLogging: bool = false): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  var query_605966 = newJObject()
  add(query_605966, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_605966, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_605966.add "Auth", Auth
  add(query_605966, "RequireTLS", newJBool(RequireTLS))
  add(query_605966, "NewDBProxyName", newJString(NewDBProxyName))
  if SecurityGroups != nil:
    query_605966.add "SecurityGroups", SecurityGroups
  add(query_605966, "Action", newJString(Action))
  add(query_605966, "Version", newJString(Version))
  add(query_605966, "DebugLogging", newJBool(DebugLogging))
  add(query_605966, "DBProxyName", newJString(DBProxyName))
  result = call_605965.call(nil, query_605966, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_605944(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_605945,
    base: "/", url: url_GetModifyDBProxy_605946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_606014 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBProxyTargetGroup_606016(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_606015(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606017 = query.getOrDefault("Action")
  valid_606017 = validateParameter(valid_606017, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_606017 != nil:
    section.add "Action", valid_606017
  var valid_606018 = query.getOrDefault("Version")
  valid_606018 = validateParameter(valid_606018, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606018 != nil:
    section.add "Version", valid_606018
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606019 = header.getOrDefault("X-Amz-Signature")
  valid_606019 = validateParameter(valid_606019, JString, required = false,
                                 default = nil)
  if valid_606019 != nil:
    section.add "X-Amz-Signature", valid_606019
  var valid_606020 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606020 = validateParameter(valid_606020, JString, required = false,
                                 default = nil)
  if valid_606020 != nil:
    section.add "X-Amz-Content-Sha256", valid_606020
  var valid_606021 = header.getOrDefault("X-Amz-Date")
  valid_606021 = validateParameter(valid_606021, JString, required = false,
                                 default = nil)
  if valid_606021 != nil:
    section.add "X-Amz-Date", valid_606021
  var valid_606022 = header.getOrDefault("X-Amz-Credential")
  valid_606022 = validateParameter(valid_606022, JString, required = false,
                                 default = nil)
  if valid_606022 != nil:
    section.add "X-Amz-Credential", valid_606022
  var valid_606023 = header.getOrDefault("X-Amz-Security-Token")
  valid_606023 = validateParameter(valid_606023, JString, required = false,
                                 default = nil)
  if valid_606023 != nil:
    section.add "X-Amz-Security-Token", valid_606023
  var valid_606024 = header.getOrDefault("X-Amz-Algorithm")
  valid_606024 = validateParameter(valid_606024, JString, required = false,
                                 default = nil)
  if valid_606024 != nil:
    section.add "X-Amz-Algorithm", valid_606024
  var valid_606025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606025 = validateParameter(valid_606025, JString, required = false,
                                 default = nil)
  if valid_606025 != nil:
    section.add "X-Amz-SignedHeaders", valid_606025
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  section = newJObject()
  var valid_606026 = formData.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_606026 = validateParameter(valid_606026, JString, required = false,
                                 default = nil)
  if valid_606026 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_606026
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_606027 = formData.getOrDefault("TargetGroupName")
  valid_606027 = validateParameter(valid_606027, JString, required = true,
                                 default = nil)
  if valid_606027 != nil:
    section.add "TargetGroupName", valid_606027
  var valid_606028 = formData.getOrDefault("NewName")
  valid_606028 = validateParameter(valid_606028, JString, required = false,
                                 default = nil)
  if valid_606028 != nil:
    section.add "NewName", valid_606028
  var valid_606029 = formData.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_606029 = validateParameter(valid_606029, JString, required = false,
                                 default = nil)
  if valid_606029 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_606029
  var valid_606030 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_606030 = validateParameter(valid_606030, JString, required = false,
                                 default = nil)
  if valid_606030 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_606030
  var valid_606031 = formData.getOrDefault("DBProxyName")
  valid_606031 = validateParameter(valid_606031, JString, required = true,
                                 default = nil)
  if valid_606031 != nil:
    section.add "DBProxyName", valid_606031
  var valid_606032 = formData.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_606032 = validateParameter(valid_606032, JString, required = false,
                                 default = nil)
  if valid_606032 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_606032
  var valid_606033 = formData.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_606033 = validateParameter(valid_606033, JArray, required = false,
                                 default = nil)
  if valid_606033 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_606033
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606034: Call_PostModifyDBProxyTargetGroup_606014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606034.validator(path, query, header, formData, body)
  let scheme = call_606034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606034.url(scheme.get, call_606034.host, call_606034.base,
                         call_606034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606034, url, valid)

proc call*(call_606035: Call_PostModifyDBProxyTargetGroup_606014;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Action: string (required)
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  var query_606036 = newJObject()
  var formData_606037 = newJObject()
  add(formData_606037, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(formData_606037, "TargetGroupName", newJString(TargetGroupName))
  add(formData_606037, "NewName", newJString(NewName))
  add(formData_606037, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_606037, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(formData_606037, "DBProxyName", newJString(DBProxyName))
  add(query_606036, "Action", newJString(Action))
  add(formData_606037, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_606036, "Version", newJString(Version))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_606037.add "ConnectionPoolConfig.SessionPinningFilters",
                       ConnectionPoolConfigSessionPinningFilters
  result = call_606035.call(nil, query_606036, nil, formData_606037, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_606014(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_606015, base: "/",
    url: url_PostModifyDBProxyTargetGroup_606016,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_605991 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBProxyTargetGroup_605993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_605992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_605994 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_605994 = validateParameter(valid_605994, JArray, required = false,
                                 default = nil)
  if valid_605994 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_605994
  var valid_605995 = query.getOrDefault("NewName")
  valid_605995 = validateParameter(valid_605995, JString, required = false,
                                 default = nil)
  if valid_605995 != nil:
    section.add "NewName", valid_605995
  var valid_605996 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_605996 = validateParameter(valid_605996, JString, required = false,
                                 default = nil)
  if valid_605996 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_605996
  var valid_605997 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_605997 = validateParameter(valid_605997, JString, required = false,
                                 default = nil)
  if valid_605997 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_605997
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_605998 = query.getOrDefault("TargetGroupName")
  valid_605998 = validateParameter(valid_605998, JString, required = true,
                                 default = nil)
  if valid_605998 != nil:
    section.add "TargetGroupName", valid_605998
  var valid_605999 = query.getOrDefault("Action")
  valid_605999 = validateParameter(valid_605999, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_605999 != nil:
    section.add "Action", valid_605999
  var valid_606000 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_606000 = validateParameter(valid_606000, JString, required = false,
                                 default = nil)
  if valid_606000 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_606000
  var valid_606001 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_606001 = validateParameter(valid_606001, JString, required = false,
                                 default = nil)
  if valid_606001 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_606001
  var valid_606002 = query.getOrDefault("Version")
  valid_606002 = validateParameter(valid_606002, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606002 != nil:
    section.add "Version", valid_606002
  var valid_606003 = query.getOrDefault("DBProxyName")
  valid_606003 = validateParameter(valid_606003, JString, required = true,
                                 default = nil)
  if valid_606003 != nil:
    section.add "DBProxyName", valid_606003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606004 = header.getOrDefault("X-Amz-Signature")
  valid_606004 = validateParameter(valid_606004, JString, required = false,
                                 default = nil)
  if valid_606004 != nil:
    section.add "X-Amz-Signature", valid_606004
  var valid_606005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606005 = validateParameter(valid_606005, JString, required = false,
                                 default = nil)
  if valid_606005 != nil:
    section.add "X-Amz-Content-Sha256", valid_606005
  var valid_606006 = header.getOrDefault("X-Amz-Date")
  valid_606006 = validateParameter(valid_606006, JString, required = false,
                                 default = nil)
  if valid_606006 != nil:
    section.add "X-Amz-Date", valid_606006
  var valid_606007 = header.getOrDefault("X-Amz-Credential")
  valid_606007 = validateParameter(valid_606007, JString, required = false,
                                 default = nil)
  if valid_606007 != nil:
    section.add "X-Amz-Credential", valid_606007
  var valid_606008 = header.getOrDefault("X-Amz-Security-Token")
  valid_606008 = validateParameter(valid_606008, JString, required = false,
                                 default = nil)
  if valid_606008 != nil:
    section.add "X-Amz-Security-Token", valid_606008
  var valid_606009 = header.getOrDefault("X-Amz-Algorithm")
  valid_606009 = validateParameter(valid_606009, JString, required = false,
                                 default = nil)
  if valid_606009 != nil:
    section.add "X-Amz-Algorithm", valid_606009
  var valid_606010 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606010 = validateParameter(valid_606010, JString, required = false,
                                 default = nil)
  if valid_606010 != nil:
    section.add "X-Amz-SignedHeaders", valid_606010
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606011: Call_GetModifyDBProxyTargetGroup_605991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606011.validator(path, query, header, formData, body)
  let scheme = call_606011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606011.url(scheme.get, call_606011.host, call_606011.base,
                         call_606011.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606011, url, valid)

proc call*(call_606012: Call_GetModifyDBProxyTargetGroup_605991;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  var query_606013 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_606013.add "ConnectionPoolConfig.SessionPinningFilters",
                    ConnectionPoolConfigSessionPinningFilters
  add(query_606013, "NewName", newJString(NewName))
  add(query_606013, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_606013, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_606013, "TargetGroupName", newJString(TargetGroupName))
  add(query_606013, "Action", newJString(Action))
  add(query_606013, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_606013, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_606013, "Version", newJString(Version))
  add(query_606013, "DBProxyName", newJString(DBProxyName))
  result = call_606012.call(nil, query_606013, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_605991(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_605992, base: "/",
    url: url_GetModifyDBProxyTargetGroup_605993,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_606056 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBSnapshot_606058(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_606057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606059 = query.getOrDefault("Action")
  valid_606059 = validateParameter(valid_606059, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_606059 != nil:
    section.add "Action", valid_606059
  var valid_606060 = query.getOrDefault("Version")
  valid_606060 = validateParameter(valid_606060, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606060 != nil:
    section.add "Version", valid_606060
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606061 = header.getOrDefault("X-Amz-Signature")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Signature", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Content-Sha256", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Date")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Date", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-Credential")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-Credential", valid_606064
  var valid_606065 = header.getOrDefault("X-Amz-Security-Token")
  valid_606065 = validateParameter(valid_606065, JString, required = false,
                                 default = nil)
  if valid_606065 != nil:
    section.add "X-Amz-Security-Token", valid_606065
  var valid_606066 = header.getOrDefault("X-Amz-Algorithm")
  valid_606066 = validateParameter(valid_606066, JString, required = false,
                                 default = nil)
  if valid_606066 != nil:
    section.add "X-Amz-Algorithm", valid_606066
  var valid_606067 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606067 = validateParameter(valid_606067, JString, required = false,
                                 default = nil)
  if valid_606067 != nil:
    section.add "X-Amz-SignedHeaders", valid_606067
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_606068 = formData.getOrDefault("EngineVersion")
  valid_606068 = validateParameter(valid_606068, JString, required = false,
                                 default = nil)
  if valid_606068 != nil:
    section.add "EngineVersion", valid_606068
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_606069 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_606069 = validateParameter(valid_606069, JString, required = true,
                                 default = nil)
  if valid_606069 != nil:
    section.add "DBSnapshotIdentifier", valid_606069
  var valid_606070 = formData.getOrDefault("OptionGroupName")
  valid_606070 = validateParameter(valid_606070, JString, required = false,
                                 default = nil)
  if valid_606070 != nil:
    section.add "OptionGroupName", valid_606070
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606071: Call_PostModifyDBSnapshot_606056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_606071.validator(path, query, header, formData, body)
  let scheme = call_606071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606071.url(scheme.get, call_606071.host, call_606071.base,
                         call_606071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606071, url, valid)

proc call*(call_606072: Call_PostModifyDBSnapshot_606056;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_606073 = newJObject()
  var formData_606074 = newJObject()
  add(formData_606074, "EngineVersion", newJString(EngineVersion))
  add(formData_606074, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606073, "Action", newJString(Action))
  add(formData_606074, "OptionGroupName", newJString(OptionGroupName))
  add(query_606073, "Version", newJString(Version))
  result = call_606072.call(nil, query_606073, nil, formData_606074, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_606056(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_606057, base: "/",
    url: url_PostModifyDBSnapshot_606058, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_606038 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBSnapshot_606040(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_606039(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_606041 = query.getOrDefault("DBSnapshotIdentifier")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = nil)
  if valid_606041 != nil:
    section.add "DBSnapshotIdentifier", valid_606041
  var valid_606042 = query.getOrDefault("EngineVersion")
  valid_606042 = validateParameter(valid_606042, JString, required = false,
                                 default = nil)
  if valid_606042 != nil:
    section.add "EngineVersion", valid_606042
  var valid_606043 = query.getOrDefault("Action")
  valid_606043 = validateParameter(valid_606043, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_606043 != nil:
    section.add "Action", valid_606043
  var valid_606044 = query.getOrDefault("OptionGroupName")
  valid_606044 = validateParameter(valid_606044, JString, required = false,
                                 default = nil)
  if valid_606044 != nil:
    section.add "OptionGroupName", valid_606044
  var valid_606045 = query.getOrDefault("Version")
  valid_606045 = validateParameter(valid_606045, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606045 != nil:
    section.add "Version", valid_606045
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606046 = header.getOrDefault("X-Amz-Signature")
  valid_606046 = validateParameter(valid_606046, JString, required = false,
                                 default = nil)
  if valid_606046 != nil:
    section.add "X-Amz-Signature", valid_606046
  var valid_606047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606047 = validateParameter(valid_606047, JString, required = false,
                                 default = nil)
  if valid_606047 != nil:
    section.add "X-Amz-Content-Sha256", valid_606047
  var valid_606048 = header.getOrDefault("X-Amz-Date")
  valid_606048 = validateParameter(valid_606048, JString, required = false,
                                 default = nil)
  if valid_606048 != nil:
    section.add "X-Amz-Date", valid_606048
  var valid_606049 = header.getOrDefault("X-Amz-Credential")
  valid_606049 = validateParameter(valid_606049, JString, required = false,
                                 default = nil)
  if valid_606049 != nil:
    section.add "X-Amz-Credential", valid_606049
  var valid_606050 = header.getOrDefault("X-Amz-Security-Token")
  valid_606050 = validateParameter(valid_606050, JString, required = false,
                                 default = nil)
  if valid_606050 != nil:
    section.add "X-Amz-Security-Token", valid_606050
  var valid_606051 = header.getOrDefault("X-Amz-Algorithm")
  valid_606051 = validateParameter(valid_606051, JString, required = false,
                                 default = nil)
  if valid_606051 != nil:
    section.add "X-Amz-Algorithm", valid_606051
  var valid_606052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606052 = validateParameter(valid_606052, JString, required = false,
                                 default = nil)
  if valid_606052 != nil:
    section.add "X-Amz-SignedHeaders", valid_606052
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606053: Call_GetModifyDBSnapshot_606038; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_606053.validator(path, query, header, formData, body)
  let scheme = call_606053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606053.url(scheme.get, call_606053.host, call_606053.base,
                         call_606053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606053, url, valid)

proc call*(call_606054: Call_GetModifyDBSnapshot_606038;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_606055 = newJObject()
  add(query_606055, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606055, "EngineVersion", newJString(EngineVersion))
  add(query_606055, "Action", newJString(Action))
  add(query_606055, "OptionGroupName", newJString(OptionGroupName))
  add(query_606055, "Version", newJString(Version))
  result = call_606054.call(nil, query_606055, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_606038(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_606039, base: "/",
    url: url_GetModifyDBSnapshot_606040, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_606094 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBSnapshotAttribute_606096(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_606095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606097 = query.getOrDefault("Action")
  valid_606097 = validateParameter(valid_606097, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_606097 != nil:
    section.add "Action", valid_606097
  var valid_606098 = query.getOrDefault("Version")
  valid_606098 = validateParameter(valid_606098, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606098 != nil:
    section.add "Version", valid_606098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606099 = header.getOrDefault("X-Amz-Signature")
  valid_606099 = validateParameter(valid_606099, JString, required = false,
                                 default = nil)
  if valid_606099 != nil:
    section.add "X-Amz-Signature", valid_606099
  var valid_606100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606100 = validateParameter(valid_606100, JString, required = false,
                                 default = nil)
  if valid_606100 != nil:
    section.add "X-Amz-Content-Sha256", valid_606100
  var valid_606101 = header.getOrDefault("X-Amz-Date")
  valid_606101 = validateParameter(valid_606101, JString, required = false,
                                 default = nil)
  if valid_606101 != nil:
    section.add "X-Amz-Date", valid_606101
  var valid_606102 = header.getOrDefault("X-Amz-Credential")
  valid_606102 = validateParameter(valid_606102, JString, required = false,
                                 default = nil)
  if valid_606102 != nil:
    section.add "X-Amz-Credential", valid_606102
  var valid_606103 = header.getOrDefault("X-Amz-Security-Token")
  valid_606103 = validateParameter(valid_606103, JString, required = false,
                                 default = nil)
  if valid_606103 != nil:
    section.add "X-Amz-Security-Token", valid_606103
  var valid_606104 = header.getOrDefault("X-Amz-Algorithm")
  valid_606104 = validateParameter(valid_606104, JString, required = false,
                                 default = nil)
  if valid_606104 != nil:
    section.add "X-Amz-Algorithm", valid_606104
  var valid_606105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606105 = validateParameter(valid_606105, JString, required = false,
                                 default = nil)
  if valid_606105 != nil:
    section.add "X-Amz-SignedHeaders", valid_606105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_606106 = formData.getOrDefault("AttributeName")
  valid_606106 = validateParameter(valid_606106, JString, required = true,
                                 default = nil)
  if valid_606106 != nil:
    section.add "AttributeName", valid_606106
  var valid_606107 = formData.getOrDefault("ValuesToAdd")
  valid_606107 = validateParameter(valid_606107, JArray, required = false,
                                 default = nil)
  if valid_606107 != nil:
    section.add "ValuesToAdd", valid_606107
  var valid_606108 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_606108 = validateParameter(valid_606108, JString, required = true,
                                 default = nil)
  if valid_606108 != nil:
    section.add "DBSnapshotIdentifier", valid_606108
  var valid_606109 = formData.getOrDefault("ValuesToRemove")
  valid_606109 = validateParameter(valid_606109, JArray, required = false,
                                 default = nil)
  if valid_606109 != nil:
    section.add "ValuesToRemove", valid_606109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606110: Call_PostModifyDBSnapshotAttribute_606094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_606110.validator(path, query, header, formData, body)
  let scheme = call_606110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606110.url(scheme.get, call_606110.host, call_606110.base,
                         call_606110.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606110, url, valid)

proc call*(call_606111: Call_PostModifyDBSnapshotAttribute_606094;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_606112 = newJObject()
  var formData_606113 = newJObject()
  add(formData_606113, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_606113.add "ValuesToAdd", ValuesToAdd
  add(formData_606113, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606112, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_606113.add "ValuesToRemove", ValuesToRemove
  add(query_606112, "Version", newJString(Version))
  result = call_606111.call(nil, query_606112, nil, formData_606113, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_606094(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_606095, base: "/",
    url: url_PostModifyDBSnapshotAttribute_606096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_606075 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBSnapshotAttribute_606077(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_606076(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606078 = query.getOrDefault("ValuesToRemove")
  valid_606078 = validateParameter(valid_606078, JArray, required = false,
                                 default = nil)
  if valid_606078 != nil:
    section.add "ValuesToRemove", valid_606078
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_606079 = query.getOrDefault("DBSnapshotIdentifier")
  valid_606079 = validateParameter(valid_606079, JString, required = true,
                                 default = nil)
  if valid_606079 != nil:
    section.add "DBSnapshotIdentifier", valid_606079
  var valid_606080 = query.getOrDefault("Action")
  valid_606080 = validateParameter(valid_606080, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_606080 != nil:
    section.add "Action", valid_606080
  var valid_606081 = query.getOrDefault("AttributeName")
  valid_606081 = validateParameter(valid_606081, JString, required = true,
                                 default = nil)
  if valid_606081 != nil:
    section.add "AttributeName", valid_606081
  var valid_606082 = query.getOrDefault("ValuesToAdd")
  valid_606082 = validateParameter(valid_606082, JArray, required = false,
                                 default = nil)
  if valid_606082 != nil:
    section.add "ValuesToAdd", valid_606082
  var valid_606083 = query.getOrDefault("Version")
  valid_606083 = validateParameter(valid_606083, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606083 != nil:
    section.add "Version", valid_606083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606084 = header.getOrDefault("X-Amz-Signature")
  valid_606084 = validateParameter(valid_606084, JString, required = false,
                                 default = nil)
  if valid_606084 != nil:
    section.add "X-Amz-Signature", valid_606084
  var valid_606085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606085 = validateParameter(valid_606085, JString, required = false,
                                 default = nil)
  if valid_606085 != nil:
    section.add "X-Amz-Content-Sha256", valid_606085
  var valid_606086 = header.getOrDefault("X-Amz-Date")
  valid_606086 = validateParameter(valid_606086, JString, required = false,
                                 default = nil)
  if valid_606086 != nil:
    section.add "X-Amz-Date", valid_606086
  var valid_606087 = header.getOrDefault("X-Amz-Credential")
  valid_606087 = validateParameter(valid_606087, JString, required = false,
                                 default = nil)
  if valid_606087 != nil:
    section.add "X-Amz-Credential", valid_606087
  var valid_606088 = header.getOrDefault("X-Amz-Security-Token")
  valid_606088 = validateParameter(valid_606088, JString, required = false,
                                 default = nil)
  if valid_606088 != nil:
    section.add "X-Amz-Security-Token", valid_606088
  var valid_606089 = header.getOrDefault("X-Amz-Algorithm")
  valid_606089 = validateParameter(valid_606089, JString, required = false,
                                 default = nil)
  if valid_606089 != nil:
    section.add "X-Amz-Algorithm", valid_606089
  var valid_606090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606090 = validateParameter(valid_606090, JString, required = false,
                                 default = nil)
  if valid_606090 != nil:
    section.add "X-Amz-SignedHeaders", valid_606090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606091: Call_GetModifyDBSnapshotAttribute_606075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_606091.validator(path, query, header, formData, body)
  let scheme = call_606091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606091.url(scheme.get, call_606091.host, call_606091.base,
                         call_606091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606091, url, valid)

proc call*(call_606092: Call_GetModifyDBSnapshotAttribute_606075;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_606093 = newJObject()
  if ValuesToRemove != nil:
    query_606093.add "ValuesToRemove", ValuesToRemove
  add(query_606093, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606093, "Action", newJString(Action))
  add(query_606093, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_606093.add "ValuesToAdd", ValuesToAdd
  add(query_606093, "Version", newJString(Version))
  result = call_606092.call(nil, query_606093, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_606075(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_606076, base: "/",
    url: url_GetModifyDBSnapshotAttribute_606077,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_606132 = ref object of OpenApiRestCall_601389
proc url_PostModifyDBSubnetGroup_606134(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_606133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606135 = query.getOrDefault("Action")
  valid_606135 = validateParameter(valid_606135, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_606135 != nil:
    section.add "Action", valid_606135
  var valid_606136 = query.getOrDefault("Version")
  valid_606136 = validateParameter(valid_606136, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606136 != nil:
    section.add "Version", valid_606136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606137 = header.getOrDefault("X-Amz-Signature")
  valid_606137 = validateParameter(valid_606137, JString, required = false,
                                 default = nil)
  if valid_606137 != nil:
    section.add "X-Amz-Signature", valid_606137
  var valid_606138 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606138 = validateParameter(valid_606138, JString, required = false,
                                 default = nil)
  if valid_606138 != nil:
    section.add "X-Amz-Content-Sha256", valid_606138
  var valid_606139 = header.getOrDefault("X-Amz-Date")
  valid_606139 = validateParameter(valid_606139, JString, required = false,
                                 default = nil)
  if valid_606139 != nil:
    section.add "X-Amz-Date", valid_606139
  var valid_606140 = header.getOrDefault("X-Amz-Credential")
  valid_606140 = validateParameter(valid_606140, JString, required = false,
                                 default = nil)
  if valid_606140 != nil:
    section.add "X-Amz-Credential", valid_606140
  var valid_606141 = header.getOrDefault("X-Amz-Security-Token")
  valid_606141 = validateParameter(valid_606141, JString, required = false,
                                 default = nil)
  if valid_606141 != nil:
    section.add "X-Amz-Security-Token", valid_606141
  var valid_606142 = header.getOrDefault("X-Amz-Algorithm")
  valid_606142 = validateParameter(valid_606142, JString, required = false,
                                 default = nil)
  if valid_606142 != nil:
    section.add "X-Amz-Algorithm", valid_606142
  var valid_606143 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606143 = validateParameter(valid_606143, JString, required = false,
                                 default = nil)
  if valid_606143 != nil:
    section.add "X-Amz-SignedHeaders", valid_606143
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_606144 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_606144 = validateParameter(valid_606144, JString, required = false,
                                 default = nil)
  if valid_606144 != nil:
    section.add "DBSubnetGroupDescription", valid_606144
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_606145 = formData.getOrDefault("DBSubnetGroupName")
  valid_606145 = validateParameter(valid_606145, JString, required = true,
                                 default = nil)
  if valid_606145 != nil:
    section.add "DBSubnetGroupName", valid_606145
  var valid_606146 = formData.getOrDefault("SubnetIds")
  valid_606146 = validateParameter(valid_606146, JArray, required = true, default = nil)
  if valid_606146 != nil:
    section.add "SubnetIds", valid_606146
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606147: Call_PostModifyDBSubnetGroup_606132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606147.validator(path, query, header, formData, body)
  let scheme = call_606147.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606147.url(scheme.get, call_606147.host, call_606147.base,
                         call_606147.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606147, url, valid)

proc call*(call_606148: Call_PostModifyDBSubnetGroup_606132;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_606149 = newJObject()
  var formData_606150 = newJObject()
  add(formData_606150, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606149, "Action", newJString(Action))
  add(formData_606150, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606149, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_606150.add "SubnetIds", SubnetIds
  result = call_606148.call(nil, query_606149, nil, formData_606150, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_606132(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_606133, base: "/",
    url: url_PostModifyDBSubnetGroup_606134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_606114 = ref object of OpenApiRestCall_601389
proc url_GetModifyDBSubnetGroup_606116(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_606115(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_606117 = query.getOrDefault("SubnetIds")
  valid_606117 = validateParameter(valid_606117, JArray, required = true, default = nil)
  if valid_606117 != nil:
    section.add "SubnetIds", valid_606117
  var valid_606118 = query.getOrDefault("Action")
  valid_606118 = validateParameter(valid_606118, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_606118 != nil:
    section.add "Action", valid_606118
  var valid_606119 = query.getOrDefault("DBSubnetGroupDescription")
  valid_606119 = validateParameter(valid_606119, JString, required = false,
                                 default = nil)
  if valid_606119 != nil:
    section.add "DBSubnetGroupDescription", valid_606119
  var valid_606120 = query.getOrDefault("DBSubnetGroupName")
  valid_606120 = validateParameter(valid_606120, JString, required = true,
                                 default = nil)
  if valid_606120 != nil:
    section.add "DBSubnetGroupName", valid_606120
  var valid_606121 = query.getOrDefault("Version")
  valid_606121 = validateParameter(valid_606121, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606121 != nil:
    section.add "Version", valid_606121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606122 = header.getOrDefault("X-Amz-Signature")
  valid_606122 = validateParameter(valid_606122, JString, required = false,
                                 default = nil)
  if valid_606122 != nil:
    section.add "X-Amz-Signature", valid_606122
  var valid_606123 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606123 = validateParameter(valid_606123, JString, required = false,
                                 default = nil)
  if valid_606123 != nil:
    section.add "X-Amz-Content-Sha256", valid_606123
  var valid_606124 = header.getOrDefault("X-Amz-Date")
  valid_606124 = validateParameter(valid_606124, JString, required = false,
                                 default = nil)
  if valid_606124 != nil:
    section.add "X-Amz-Date", valid_606124
  var valid_606125 = header.getOrDefault("X-Amz-Credential")
  valid_606125 = validateParameter(valid_606125, JString, required = false,
                                 default = nil)
  if valid_606125 != nil:
    section.add "X-Amz-Credential", valid_606125
  var valid_606126 = header.getOrDefault("X-Amz-Security-Token")
  valid_606126 = validateParameter(valid_606126, JString, required = false,
                                 default = nil)
  if valid_606126 != nil:
    section.add "X-Amz-Security-Token", valid_606126
  var valid_606127 = header.getOrDefault("X-Amz-Algorithm")
  valid_606127 = validateParameter(valid_606127, JString, required = false,
                                 default = nil)
  if valid_606127 != nil:
    section.add "X-Amz-Algorithm", valid_606127
  var valid_606128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606128 = validateParameter(valid_606128, JString, required = false,
                                 default = nil)
  if valid_606128 != nil:
    section.add "X-Amz-SignedHeaders", valid_606128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606129: Call_GetModifyDBSubnetGroup_606114; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606129.validator(path, query, header, formData, body)
  let scheme = call_606129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606129.url(scheme.get, call_606129.host, call_606129.base,
                         call_606129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606129, url, valid)

proc call*(call_606130: Call_GetModifyDBSubnetGroup_606114; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606131 = newJObject()
  if SubnetIds != nil:
    query_606131.add "SubnetIds", SubnetIds
  add(query_606131, "Action", newJString(Action))
  add(query_606131, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606131, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606131, "Version", newJString(Version))
  result = call_606130.call(nil, query_606131, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_606114(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_606115, base: "/",
    url: url_GetModifyDBSubnetGroup_606116, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_606171 = ref object of OpenApiRestCall_601389
proc url_PostModifyEventSubscription_606173(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_606172(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606174 = query.getOrDefault("Action")
  valid_606174 = validateParameter(valid_606174, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_606174 != nil:
    section.add "Action", valid_606174
  var valid_606175 = query.getOrDefault("Version")
  valid_606175 = validateParameter(valid_606175, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606175 != nil:
    section.add "Version", valid_606175
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606176 = header.getOrDefault("X-Amz-Signature")
  valid_606176 = validateParameter(valid_606176, JString, required = false,
                                 default = nil)
  if valid_606176 != nil:
    section.add "X-Amz-Signature", valid_606176
  var valid_606177 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606177 = validateParameter(valid_606177, JString, required = false,
                                 default = nil)
  if valid_606177 != nil:
    section.add "X-Amz-Content-Sha256", valid_606177
  var valid_606178 = header.getOrDefault("X-Amz-Date")
  valid_606178 = validateParameter(valid_606178, JString, required = false,
                                 default = nil)
  if valid_606178 != nil:
    section.add "X-Amz-Date", valid_606178
  var valid_606179 = header.getOrDefault("X-Amz-Credential")
  valid_606179 = validateParameter(valid_606179, JString, required = false,
                                 default = nil)
  if valid_606179 != nil:
    section.add "X-Amz-Credential", valid_606179
  var valid_606180 = header.getOrDefault("X-Amz-Security-Token")
  valid_606180 = validateParameter(valid_606180, JString, required = false,
                                 default = nil)
  if valid_606180 != nil:
    section.add "X-Amz-Security-Token", valid_606180
  var valid_606181 = header.getOrDefault("X-Amz-Algorithm")
  valid_606181 = validateParameter(valid_606181, JString, required = false,
                                 default = nil)
  if valid_606181 != nil:
    section.add "X-Amz-Algorithm", valid_606181
  var valid_606182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606182 = validateParameter(valid_606182, JString, required = false,
                                 default = nil)
  if valid_606182 != nil:
    section.add "X-Amz-SignedHeaders", valid_606182
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_606183 = formData.getOrDefault("SnsTopicArn")
  valid_606183 = validateParameter(valid_606183, JString, required = false,
                                 default = nil)
  if valid_606183 != nil:
    section.add "SnsTopicArn", valid_606183
  var valid_606184 = formData.getOrDefault("Enabled")
  valid_606184 = validateParameter(valid_606184, JBool, required = false, default = nil)
  if valid_606184 != nil:
    section.add "Enabled", valid_606184
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606185 = formData.getOrDefault("SubscriptionName")
  valid_606185 = validateParameter(valid_606185, JString, required = true,
                                 default = nil)
  if valid_606185 != nil:
    section.add "SubscriptionName", valid_606185
  var valid_606186 = formData.getOrDefault("SourceType")
  valid_606186 = validateParameter(valid_606186, JString, required = false,
                                 default = nil)
  if valid_606186 != nil:
    section.add "SourceType", valid_606186
  var valid_606187 = formData.getOrDefault("EventCategories")
  valid_606187 = validateParameter(valid_606187, JArray, required = false,
                                 default = nil)
  if valid_606187 != nil:
    section.add "EventCategories", valid_606187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606188: Call_PostModifyEventSubscription_606171; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_606188.validator(path, query, header, formData, body)
  let scheme = call_606188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606188.url(scheme.get, call_606188.host, call_606188.base,
                         call_606188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606188, url, valid)

proc call*(call_606189: Call_PostModifyEventSubscription_606171;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606190 = newJObject()
  var formData_606191 = newJObject()
  add(formData_606191, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_606191, "Enabled", newJBool(Enabled))
  add(formData_606191, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606191, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_606191.add "EventCategories", EventCategories
  add(query_606190, "Action", newJString(Action))
  add(query_606190, "Version", newJString(Version))
  result = call_606189.call(nil, query_606190, nil, formData_606191, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_606171(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_606172, base: "/",
    url: url_PostModifyEventSubscription_606173,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_606151 = ref object of OpenApiRestCall_601389
proc url_GetModifyEventSubscription_606153(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_606152(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606154 = query.getOrDefault("SourceType")
  valid_606154 = validateParameter(valid_606154, JString, required = false,
                                 default = nil)
  if valid_606154 != nil:
    section.add "SourceType", valid_606154
  var valid_606155 = query.getOrDefault("Enabled")
  valid_606155 = validateParameter(valid_606155, JBool, required = false, default = nil)
  if valid_606155 != nil:
    section.add "Enabled", valid_606155
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_606156 = query.getOrDefault("SubscriptionName")
  valid_606156 = validateParameter(valid_606156, JString, required = true,
                                 default = nil)
  if valid_606156 != nil:
    section.add "SubscriptionName", valid_606156
  var valid_606157 = query.getOrDefault("EventCategories")
  valid_606157 = validateParameter(valid_606157, JArray, required = false,
                                 default = nil)
  if valid_606157 != nil:
    section.add "EventCategories", valid_606157
  var valid_606158 = query.getOrDefault("Action")
  valid_606158 = validateParameter(valid_606158, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_606158 != nil:
    section.add "Action", valid_606158
  var valid_606159 = query.getOrDefault("SnsTopicArn")
  valid_606159 = validateParameter(valid_606159, JString, required = false,
                                 default = nil)
  if valid_606159 != nil:
    section.add "SnsTopicArn", valid_606159
  var valid_606160 = query.getOrDefault("Version")
  valid_606160 = validateParameter(valid_606160, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606160 != nil:
    section.add "Version", valid_606160
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606161 = header.getOrDefault("X-Amz-Signature")
  valid_606161 = validateParameter(valid_606161, JString, required = false,
                                 default = nil)
  if valid_606161 != nil:
    section.add "X-Amz-Signature", valid_606161
  var valid_606162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606162 = validateParameter(valid_606162, JString, required = false,
                                 default = nil)
  if valid_606162 != nil:
    section.add "X-Amz-Content-Sha256", valid_606162
  var valid_606163 = header.getOrDefault("X-Amz-Date")
  valid_606163 = validateParameter(valid_606163, JString, required = false,
                                 default = nil)
  if valid_606163 != nil:
    section.add "X-Amz-Date", valid_606163
  var valid_606164 = header.getOrDefault("X-Amz-Credential")
  valid_606164 = validateParameter(valid_606164, JString, required = false,
                                 default = nil)
  if valid_606164 != nil:
    section.add "X-Amz-Credential", valid_606164
  var valid_606165 = header.getOrDefault("X-Amz-Security-Token")
  valid_606165 = validateParameter(valid_606165, JString, required = false,
                                 default = nil)
  if valid_606165 != nil:
    section.add "X-Amz-Security-Token", valid_606165
  var valid_606166 = header.getOrDefault("X-Amz-Algorithm")
  valid_606166 = validateParameter(valid_606166, JString, required = false,
                                 default = nil)
  if valid_606166 != nil:
    section.add "X-Amz-Algorithm", valid_606166
  var valid_606167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606167 = validateParameter(valid_606167, JString, required = false,
                                 default = nil)
  if valid_606167 != nil:
    section.add "X-Amz-SignedHeaders", valid_606167
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606168: Call_GetModifyEventSubscription_606151; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_606168.validator(path, query, header, formData, body)
  let scheme = call_606168.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606168.url(scheme.get, call_606168.host, call_606168.base,
                         call_606168.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606168, url, valid)

proc call*(call_606169: Call_GetModifyEventSubscription_606151;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_606170 = newJObject()
  add(query_606170, "SourceType", newJString(SourceType))
  add(query_606170, "Enabled", newJBool(Enabled))
  add(query_606170, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_606170.add "EventCategories", EventCategories
  add(query_606170, "Action", newJString(Action))
  add(query_606170, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_606170, "Version", newJString(Version))
  result = call_606169.call(nil, query_606170, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_606151(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_606152, base: "/",
    url: url_GetModifyEventSubscription_606153,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_606210 = ref object of OpenApiRestCall_601389
proc url_PostModifyGlobalCluster_606212(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_606211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606213 = query.getOrDefault("Action")
  valid_606213 = validateParameter(valid_606213, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_606213 != nil:
    section.add "Action", valid_606213
  var valid_606214 = query.getOrDefault("Version")
  valid_606214 = validateParameter(valid_606214, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606214 != nil:
    section.add "Version", valid_606214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606215 = header.getOrDefault("X-Amz-Signature")
  valid_606215 = validateParameter(valid_606215, JString, required = false,
                                 default = nil)
  if valid_606215 != nil:
    section.add "X-Amz-Signature", valid_606215
  var valid_606216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606216 = validateParameter(valid_606216, JString, required = false,
                                 default = nil)
  if valid_606216 != nil:
    section.add "X-Amz-Content-Sha256", valid_606216
  var valid_606217 = header.getOrDefault("X-Amz-Date")
  valid_606217 = validateParameter(valid_606217, JString, required = false,
                                 default = nil)
  if valid_606217 != nil:
    section.add "X-Amz-Date", valid_606217
  var valid_606218 = header.getOrDefault("X-Amz-Credential")
  valid_606218 = validateParameter(valid_606218, JString, required = false,
                                 default = nil)
  if valid_606218 != nil:
    section.add "X-Amz-Credential", valid_606218
  var valid_606219 = header.getOrDefault("X-Amz-Security-Token")
  valid_606219 = validateParameter(valid_606219, JString, required = false,
                                 default = nil)
  if valid_606219 != nil:
    section.add "X-Amz-Security-Token", valid_606219
  var valid_606220 = header.getOrDefault("X-Amz-Algorithm")
  valid_606220 = validateParameter(valid_606220, JString, required = false,
                                 default = nil)
  if valid_606220 != nil:
    section.add "X-Amz-Algorithm", valid_606220
  var valid_606221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606221 = validateParameter(valid_606221, JString, required = false,
                                 default = nil)
  if valid_606221 != nil:
    section.add "X-Amz-SignedHeaders", valid_606221
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_606222 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_606222 = validateParameter(valid_606222, JString, required = false,
                                 default = nil)
  if valid_606222 != nil:
    section.add "GlobalClusterIdentifier", valid_606222
  var valid_606223 = formData.getOrDefault("DeletionProtection")
  valid_606223 = validateParameter(valid_606223, JBool, required = false, default = nil)
  if valid_606223 != nil:
    section.add "DeletionProtection", valid_606223
  var valid_606224 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "NewGlobalClusterIdentifier", valid_606224
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606225: Call_PostModifyGlobalCluster_606210; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606225.validator(path, query, header, formData, body)
  let scheme = call_606225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606225.url(scheme.get, call_606225.host, call_606225.base,
                         call_606225.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606225, url, valid)

proc call*(call_606226: Call_PostModifyGlobalCluster_606210;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_606227 = newJObject()
  var formData_606228 = newJObject()
  add(formData_606228, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_606227, "Action", newJString(Action))
  add(query_606227, "Version", newJString(Version))
  add(formData_606228, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606228, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_606226.call(nil, query_606227, nil, formData_606228, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_606210(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_606211, base: "/",
    url: url_PostModifyGlobalCluster_606212, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_606192 = ref object of OpenApiRestCall_601389
proc url_GetModifyGlobalCluster_606194(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_606193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606195 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_606195 = validateParameter(valid_606195, JString, required = false,
                                 default = nil)
  if valid_606195 != nil:
    section.add "NewGlobalClusterIdentifier", valid_606195
  var valid_606196 = query.getOrDefault("GlobalClusterIdentifier")
  valid_606196 = validateParameter(valid_606196, JString, required = false,
                                 default = nil)
  if valid_606196 != nil:
    section.add "GlobalClusterIdentifier", valid_606196
  var valid_606197 = query.getOrDefault("DeletionProtection")
  valid_606197 = validateParameter(valid_606197, JBool, required = false, default = nil)
  if valid_606197 != nil:
    section.add "DeletionProtection", valid_606197
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606198 = query.getOrDefault("Action")
  valid_606198 = validateParameter(valid_606198, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_606198 != nil:
    section.add "Action", valid_606198
  var valid_606199 = query.getOrDefault("Version")
  valid_606199 = validateParameter(valid_606199, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606199 != nil:
    section.add "Version", valid_606199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606200 = header.getOrDefault("X-Amz-Signature")
  valid_606200 = validateParameter(valid_606200, JString, required = false,
                                 default = nil)
  if valid_606200 != nil:
    section.add "X-Amz-Signature", valid_606200
  var valid_606201 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606201 = validateParameter(valid_606201, JString, required = false,
                                 default = nil)
  if valid_606201 != nil:
    section.add "X-Amz-Content-Sha256", valid_606201
  var valid_606202 = header.getOrDefault("X-Amz-Date")
  valid_606202 = validateParameter(valid_606202, JString, required = false,
                                 default = nil)
  if valid_606202 != nil:
    section.add "X-Amz-Date", valid_606202
  var valid_606203 = header.getOrDefault("X-Amz-Credential")
  valid_606203 = validateParameter(valid_606203, JString, required = false,
                                 default = nil)
  if valid_606203 != nil:
    section.add "X-Amz-Credential", valid_606203
  var valid_606204 = header.getOrDefault("X-Amz-Security-Token")
  valid_606204 = validateParameter(valid_606204, JString, required = false,
                                 default = nil)
  if valid_606204 != nil:
    section.add "X-Amz-Security-Token", valid_606204
  var valid_606205 = header.getOrDefault("X-Amz-Algorithm")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Algorithm", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-SignedHeaders", valid_606206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606207: Call_GetModifyGlobalCluster_606192; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606207.validator(path, query, header, formData, body)
  let scheme = call_606207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606207.url(scheme.get, call_606207.host, call_606207.base,
                         call_606207.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606207, url, valid)

proc call*(call_606208: Call_GetModifyGlobalCluster_606192;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606209 = newJObject()
  add(query_606209, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_606209, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_606209, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606209, "Action", newJString(Action))
  add(query_606209, "Version", newJString(Version))
  result = call_606208.call(nil, query_606209, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_606192(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_606193, base: "/",
    url: url_GetModifyGlobalCluster_606194, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_606248 = ref object of OpenApiRestCall_601389
proc url_PostModifyOptionGroup_606250(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_606249(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606251 = query.getOrDefault("Action")
  valid_606251 = validateParameter(valid_606251, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_606251 != nil:
    section.add "Action", valid_606251
  var valid_606252 = query.getOrDefault("Version")
  valid_606252 = validateParameter(valid_606252, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606252 != nil:
    section.add "Version", valid_606252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606253 = header.getOrDefault("X-Amz-Signature")
  valid_606253 = validateParameter(valid_606253, JString, required = false,
                                 default = nil)
  if valid_606253 != nil:
    section.add "X-Amz-Signature", valid_606253
  var valid_606254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606254 = validateParameter(valid_606254, JString, required = false,
                                 default = nil)
  if valid_606254 != nil:
    section.add "X-Amz-Content-Sha256", valid_606254
  var valid_606255 = header.getOrDefault("X-Amz-Date")
  valid_606255 = validateParameter(valid_606255, JString, required = false,
                                 default = nil)
  if valid_606255 != nil:
    section.add "X-Amz-Date", valid_606255
  var valid_606256 = header.getOrDefault("X-Amz-Credential")
  valid_606256 = validateParameter(valid_606256, JString, required = false,
                                 default = nil)
  if valid_606256 != nil:
    section.add "X-Amz-Credential", valid_606256
  var valid_606257 = header.getOrDefault("X-Amz-Security-Token")
  valid_606257 = validateParameter(valid_606257, JString, required = false,
                                 default = nil)
  if valid_606257 != nil:
    section.add "X-Amz-Security-Token", valid_606257
  var valid_606258 = header.getOrDefault("X-Amz-Algorithm")
  valid_606258 = validateParameter(valid_606258, JString, required = false,
                                 default = nil)
  if valid_606258 != nil:
    section.add "X-Amz-Algorithm", valid_606258
  var valid_606259 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "X-Amz-SignedHeaders", valid_606259
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_606260 = formData.getOrDefault("OptionsToRemove")
  valid_606260 = validateParameter(valid_606260, JArray, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "OptionsToRemove", valid_606260
  var valid_606261 = formData.getOrDefault("ApplyImmediately")
  valid_606261 = validateParameter(valid_606261, JBool, required = false, default = nil)
  if valid_606261 != nil:
    section.add "ApplyImmediately", valid_606261
  var valid_606262 = formData.getOrDefault("OptionsToInclude")
  valid_606262 = validateParameter(valid_606262, JArray, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "OptionsToInclude", valid_606262
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_606263 = formData.getOrDefault("OptionGroupName")
  valid_606263 = validateParameter(valid_606263, JString, required = true,
                                 default = nil)
  if valid_606263 != nil:
    section.add "OptionGroupName", valid_606263
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606264: Call_PostModifyOptionGroup_606248; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_606264.validator(path, query, header, formData, body)
  let scheme = call_606264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606264.url(scheme.get, call_606264.host, call_606264.base,
                         call_606264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606264, url, valid)

proc call*(call_606265: Call_PostModifyOptionGroup_606248; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_606266 = newJObject()
  var formData_606267 = newJObject()
  if OptionsToRemove != nil:
    formData_606267.add "OptionsToRemove", OptionsToRemove
  add(formData_606267, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_606267.add "OptionsToInclude", OptionsToInclude
  add(query_606266, "Action", newJString(Action))
  add(formData_606267, "OptionGroupName", newJString(OptionGroupName))
  add(query_606266, "Version", newJString(Version))
  result = call_606265.call(nil, query_606266, nil, formData_606267, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_606248(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_606249, base: "/",
    url: url_PostModifyOptionGroup_606250, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_606229 = ref object of OpenApiRestCall_601389
proc url_GetModifyOptionGroup_606231(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_606230(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606232 = query.getOrDefault("Action")
  valid_606232 = validateParameter(valid_606232, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_606232 != nil:
    section.add "Action", valid_606232
  var valid_606233 = query.getOrDefault("ApplyImmediately")
  valid_606233 = validateParameter(valid_606233, JBool, required = false, default = nil)
  if valid_606233 != nil:
    section.add "ApplyImmediately", valid_606233
  var valid_606234 = query.getOrDefault("OptionsToRemove")
  valid_606234 = validateParameter(valid_606234, JArray, required = false,
                                 default = nil)
  if valid_606234 != nil:
    section.add "OptionsToRemove", valid_606234
  var valid_606235 = query.getOrDefault("OptionsToInclude")
  valid_606235 = validateParameter(valid_606235, JArray, required = false,
                                 default = nil)
  if valid_606235 != nil:
    section.add "OptionsToInclude", valid_606235
  var valid_606236 = query.getOrDefault("OptionGroupName")
  valid_606236 = validateParameter(valid_606236, JString, required = true,
                                 default = nil)
  if valid_606236 != nil:
    section.add "OptionGroupName", valid_606236
  var valid_606237 = query.getOrDefault("Version")
  valid_606237 = validateParameter(valid_606237, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606237 != nil:
    section.add "Version", valid_606237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606238 = header.getOrDefault("X-Amz-Signature")
  valid_606238 = validateParameter(valid_606238, JString, required = false,
                                 default = nil)
  if valid_606238 != nil:
    section.add "X-Amz-Signature", valid_606238
  var valid_606239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606239 = validateParameter(valid_606239, JString, required = false,
                                 default = nil)
  if valid_606239 != nil:
    section.add "X-Amz-Content-Sha256", valid_606239
  var valid_606240 = header.getOrDefault("X-Amz-Date")
  valid_606240 = validateParameter(valid_606240, JString, required = false,
                                 default = nil)
  if valid_606240 != nil:
    section.add "X-Amz-Date", valid_606240
  var valid_606241 = header.getOrDefault("X-Amz-Credential")
  valid_606241 = validateParameter(valid_606241, JString, required = false,
                                 default = nil)
  if valid_606241 != nil:
    section.add "X-Amz-Credential", valid_606241
  var valid_606242 = header.getOrDefault("X-Amz-Security-Token")
  valid_606242 = validateParameter(valid_606242, JString, required = false,
                                 default = nil)
  if valid_606242 != nil:
    section.add "X-Amz-Security-Token", valid_606242
  var valid_606243 = header.getOrDefault("X-Amz-Algorithm")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Algorithm", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-SignedHeaders", valid_606244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606245: Call_GetModifyOptionGroup_606229; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_606245.validator(path, query, header, formData, body)
  let scheme = call_606245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606245.url(scheme.get, call_606245.host, call_606245.base,
                         call_606245.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606245, url, valid)

proc call*(call_606246: Call_GetModifyOptionGroup_606229; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_606247 = newJObject()
  add(query_606247, "Action", newJString(Action))
  add(query_606247, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_606247.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_606247.add "OptionsToInclude", OptionsToInclude
  add(query_606247, "OptionGroupName", newJString(OptionGroupName))
  add(query_606247, "Version", newJString(Version))
  result = call_606246.call(nil, query_606247, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_606229(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_606230, base: "/",
    url: url_GetModifyOptionGroup_606231, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_606286 = ref object of OpenApiRestCall_601389
proc url_PostPromoteReadReplica_606288(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_606287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606289 = query.getOrDefault("Action")
  valid_606289 = validateParameter(valid_606289, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_606289 != nil:
    section.add "Action", valid_606289
  var valid_606290 = query.getOrDefault("Version")
  valid_606290 = validateParameter(valid_606290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606290 != nil:
    section.add "Version", valid_606290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606291 = header.getOrDefault("X-Amz-Signature")
  valid_606291 = validateParameter(valid_606291, JString, required = false,
                                 default = nil)
  if valid_606291 != nil:
    section.add "X-Amz-Signature", valid_606291
  var valid_606292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606292 = validateParameter(valid_606292, JString, required = false,
                                 default = nil)
  if valid_606292 != nil:
    section.add "X-Amz-Content-Sha256", valid_606292
  var valid_606293 = header.getOrDefault("X-Amz-Date")
  valid_606293 = validateParameter(valid_606293, JString, required = false,
                                 default = nil)
  if valid_606293 != nil:
    section.add "X-Amz-Date", valid_606293
  var valid_606294 = header.getOrDefault("X-Amz-Credential")
  valid_606294 = validateParameter(valid_606294, JString, required = false,
                                 default = nil)
  if valid_606294 != nil:
    section.add "X-Amz-Credential", valid_606294
  var valid_606295 = header.getOrDefault("X-Amz-Security-Token")
  valid_606295 = validateParameter(valid_606295, JString, required = false,
                                 default = nil)
  if valid_606295 != nil:
    section.add "X-Amz-Security-Token", valid_606295
  var valid_606296 = header.getOrDefault("X-Amz-Algorithm")
  valid_606296 = validateParameter(valid_606296, JString, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "X-Amz-Algorithm", valid_606296
  var valid_606297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606297 = validateParameter(valid_606297, JString, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "X-Amz-SignedHeaders", valid_606297
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_606298 = formData.getOrDefault("PreferredBackupWindow")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "PreferredBackupWindow", valid_606298
  var valid_606299 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606299 = validateParameter(valid_606299, JInt, required = false, default = nil)
  if valid_606299 != nil:
    section.add "BackupRetentionPeriod", valid_606299
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606300 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606300 = validateParameter(valid_606300, JString, required = true,
                                 default = nil)
  if valid_606300 != nil:
    section.add "DBInstanceIdentifier", valid_606300
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606301: Call_PostPromoteReadReplica_606286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_606301.validator(path, query, header, formData, body)
  let scheme = call_606301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606301.url(scheme.get, call_606301.host, call_606301.base,
                         call_606301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606301, url, valid)

proc call*(call_606302: Call_PostPromoteReadReplica_606286;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606303 = newJObject()
  var formData_606304 = newJObject()
  add(formData_606304, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606304, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606304, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606303, "Action", newJString(Action))
  add(query_606303, "Version", newJString(Version))
  result = call_606302.call(nil, query_606303, nil, formData_606304, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_606286(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_606287, base: "/",
    url: url_PostPromoteReadReplica_606288, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_606268 = ref object of OpenApiRestCall_601389
proc url_GetPromoteReadReplica_606270(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_606269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606271 = query.getOrDefault("DBInstanceIdentifier")
  valid_606271 = validateParameter(valid_606271, JString, required = true,
                                 default = nil)
  if valid_606271 != nil:
    section.add "DBInstanceIdentifier", valid_606271
  var valid_606272 = query.getOrDefault("BackupRetentionPeriod")
  valid_606272 = validateParameter(valid_606272, JInt, required = false, default = nil)
  if valid_606272 != nil:
    section.add "BackupRetentionPeriod", valid_606272
  var valid_606273 = query.getOrDefault("Action")
  valid_606273 = validateParameter(valid_606273, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_606273 != nil:
    section.add "Action", valid_606273
  var valid_606274 = query.getOrDefault("Version")
  valid_606274 = validateParameter(valid_606274, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606274 != nil:
    section.add "Version", valid_606274
  var valid_606275 = query.getOrDefault("PreferredBackupWindow")
  valid_606275 = validateParameter(valid_606275, JString, required = false,
                                 default = nil)
  if valid_606275 != nil:
    section.add "PreferredBackupWindow", valid_606275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606276 = header.getOrDefault("X-Amz-Signature")
  valid_606276 = validateParameter(valid_606276, JString, required = false,
                                 default = nil)
  if valid_606276 != nil:
    section.add "X-Amz-Signature", valid_606276
  var valid_606277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606277 = validateParameter(valid_606277, JString, required = false,
                                 default = nil)
  if valid_606277 != nil:
    section.add "X-Amz-Content-Sha256", valid_606277
  var valid_606278 = header.getOrDefault("X-Amz-Date")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Date", valid_606278
  var valid_606279 = header.getOrDefault("X-Amz-Credential")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Credential", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Security-Token")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Security-Token", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Algorithm")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Algorithm", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-SignedHeaders", valid_606282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606283: Call_GetPromoteReadReplica_606268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_606283.validator(path, query, header, formData, body)
  let scheme = call_606283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606283.url(scheme.get, call_606283.host, call_606283.base,
                         call_606283.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606283, url, valid)

proc call*(call_606284: Call_GetPromoteReadReplica_606268;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_606285 = newJObject()
  add(query_606285, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606285, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_606285, "Action", newJString(Action))
  add(query_606285, "Version", newJString(Version))
  add(query_606285, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_606284.call(nil, query_606285, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_606268(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_606269, base: "/",
    url: url_GetPromoteReadReplica_606270, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_606321 = ref object of OpenApiRestCall_601389
proc url_PostPromoteReadReplicaDBCluster_606323(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_606322(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606324 = query.getOrDefault("Action")
  valid_606324 = validateParameter(valid_606324, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_606324 != nil:
    section.add "Action", valid_606324
  var valid_606325 = query.getOrDefault("Version")
  valid_606325 = validateParameter(valid_606325, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606325 != nil:
    section.add "Version", valid_606325
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606326 = header.getOrDefault("X-Amz-Signature")
  valid_606326 = validateParameter(valid_606326, JString, required = false,
                                 default = nil)
  if valid_606326 != nil:
    section.add "X-Amz-Signature", valid_606326
  var valid_606327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606327 = validateParameter(valid_606327, JString, required = false,
                                 default = nil)
  if valid_606327 != nil:
    section.add "X-Amz-Content-Sha256", valid_606327
  var valid_606328 = header.getOrDefault("X-Amz-Date")
  valid_606328 = validateParameter(valid_606328, JString, required = false,
                                 default = nil)
  if valid_606328 != nil:
    section.add "X-Amz-Date", valid_606328
  var valid_606329 = header.getOrDefault("X-Amz-Credential")
  valid_606329 = validateParameter(valid_606329, JString, required = false,
                                 default = nil)
  if valid_606329 != nil:
    section.add "X-Amz-Credential", valid_606329
  var valid_606330 = header.getOrDefault("X-Amz-Security-Token")
  valid_606330 = validateParameter(valid_606330, JString, required = false,
                                 default = nil)
  if valid_606330 != nil:
    section.add "X-Amz-Security-Token", valid_606330
  var valid_606331 = header.getOrDefault("X-Amz-Algorithm")
  valid_606331 = validateParameter(valid_606331, JString, required = false,
                                 default = nil)
  if valid_606331 != nil:
    section.add "X-Amz-Algorithm", valid_606331
  var valid_606332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606332 = validateParameter(valid_606332, JString, required = false,
                                 default = nil)
  if valid_606332 != nil:
    section.add "X-Amz-SignedHeaders", valid_606332
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606333 = formData.getOrDefault("DBClusterIdentifier")
  valid_606333 = validateParameter(valid_606333, JString, required = true,
                                 default = nil)
  if valid_606333 != nil:
    section.add "DBClusterIdentifier", valid_606333
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606334: Call_PostPromoteReadReplicaDBCluster_606321;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606334.validator(path, query, header, formData, body)
  let scheme = call_606334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606334.url(scheme.get, call_606334.host, call_606334.base,
                         call_606334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606334, url, valid)

proc call*(call_606335: Call_PostPromoteReadReplicaDBCluster_606321;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_606336 = newJObject()
  var formData_606337 = newJObject()
  add(query_606336, "Action", newJString(Action))
  add(query_606336, "Version", newJString(Version))
  add(formData_606337, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606335.call(nil, query_606336, nil, formData_606337, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_606321(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_606322, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_606323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_606305 = ref object of OpenApiRestCall_601389
proc url_GetPromoteReadReplicaDBCluster_606307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_606306(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606308 = query.getOrDefault("DBClusterIdentifier")
  valid_606308 = validateParameter(valid_606308, JString, required = true,
                                 default = nil)
  if valid_606308 != nil:
    section.add "DBClusterIdentifier", valid_606308
  var valid_606309 = query.getOrDefault("Action")
  valid_606309 = validateParameter(valid_606309, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_606309 != nil:
    section.add "Action", valid_606309
  var valid_606310 = query.getOrDefault("Version")
  valid_606310 = validateParameter(valid_606310, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606310 != nil:
    section.add "Version", valid_606310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606311 = header.getOrDefault("X-Amz-Signature")
  valid_606311 = validateParameter(valid_606311, JString, required = false,
                                 default = nil)
  if valid_606311 != nil:
    section.add "X-Amz-Signature", valid_606311
  var valid_606312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606312 = validateParameter(valid_606312, JString, required = false,
                                 default = nil)
  if valid_606312 != nil:
    section.add "X-Amz-Content-Sha256", valid_606312
  var valid_606313 = header.getOrDefault("X-Amz-Date")
  valid_606313 = validateParameter(valid_606313, JString, required = false,
                                 default = nil)
  if valid_606313 != nil:
    section.add "X-Amz-Date", valid_606313
  var valid_606314 = header.getOrDefault("X-Amz-Credential")
  valid_606314 = validateParameter(valid_606314, JString, required = false,
                                 default = nil)
  if valid_606314 != nil:
    section.add "X-Amz-Credential", valid_606314
  var valid_606315 = header.getOrDefault("X-Amz-Security-Token")
  valid_606315 = validateParameter(valid_606315, JString, required = false,
                                 default = nil)
  if valid_606315 != nil:
    section.add "X-Amz-Security-Token", valid_606315
  var valid_606316 = header.getOrDefault("X-Amz-Algorithm")
  valid_606316 = validateParameter(valid_606316, JString, required = false,
                                 default = nil)
  if valid_606316 != nil:
    section.add "X-Amz-Algorithm", valid_606316
  var valid_606317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-SignedHeaders", valid_606317
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606318: Call_GetPromoteReadReplicaDBCluster_606305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606318.validator(path, query, header, formData, body)
  let scheme = call_606318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606318.url(scheme.get, call_606318.host, call_606318.base,
                         call_606318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606318, url, valid)

proc call*(call_606319: Call_GetPromoteReadReplicaDBCluster_606305;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606320 = newJObject()
  add(query_606320, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606320, "Action", newJString(Action))
  add(query_606320, "Version", newJString(Version))
  result = call_606319.call(nil, query_606320, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_606305(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_606306, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_606307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_606357 = ref object of OpenApiRestCall_601389
proc url_PostPurchaseReservedDBInstancesOffering_606359(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_606358(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606360 = query.getOrDefault("Action")
  valid_606360 = validateParameter(valid_606360, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_606360 != nil:
    section.add "Action", valid_606360
  var valid_606361 = query.getOrDefault("Version")
  valid_606361 = validateParameter(valid_606361, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606361 != nil:
    section.add "Version", valid_606361
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606362 = header.getOrDefault("X-Amz-Signature")
  valid_606362 = validateParameter(valid_606362, JString, required = false,
                                 default = nil)
  if valid_606362 != nil:
    section.add "X-Amz-Signature", valid_606362
  var valid_606363 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606363 = validateParameter(valid_606363, JString, required = false,
                                 default = nil)
  if valid_606363 != nil:
    section.add "X-Amz-Content-Sha256", valid_606363
  var valid_606364 = header.getOrDefault("X-Amz-Date")
  valid_606364 = validateParameter(valid_606364, JString, required = false,
                                 default = nil)
  if valid_606364 != nil:
    section.add "X-Amz-Date", valid_606364
  var valid_606365 = header.getOrDefault("X-Amz-Credential")
  valid_606365 = validateParameter(valid_606365, JString, required = false,
                                 default = nil)
  if valid_606365 != nil:
    section.add "X-Amz-Credential", valid_606365
  var valid_606366 = header.getOrDefault("X-Amz-Security-Token")
  valid_606366 = validateParameter(valid_606366, JString, required = false,
                                 default = nil)
  if valid_606366 != nil:
    section.add "X-Amz-Security-Token", valid_606366
  var valid_606367 = header.getOrDefault("X-Amz-Algorithm")
  valid_606367 = validateParameter(valid_606367, JString, required = false,
                                 default = nil)
  if valid_606367 != nil:
    section.add "X-Amz-Algorithm", valid_606367
  var valid_606368 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606368 = validateParameter(valid_606368, JString, required = false,
                                 default = nil)
  if valid_606368 != nil:
    section.add "X-Amz-SignedHeaders", valid_606368
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_606369 = formData.getOrDefault("ReservedDBInstanceId")
  valid_606369 = validateParameter(valid_606369, JString, required = false,
                                 default = nil)
  if valid_606369 != nil:
    section.add "ReservedDBInstanceId", valid_606369
  var valid_606370 = formData.getOrDefault("Tags")
  valid_606370 = validateParameter(valid_606370, JArray, required = false,
                                 default = nil)
  if valid_606370 != nil:
    section.add "Tags", valid_606370
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_606371 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_606371 = validateParameter(valid_606371, JString, required = true,
                                 default = nil)
  if valid_606371 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_606371
  var valid_606372 = formData.getOrDefault("DBInstanceCount")
  valid_606372 = validateParameter(valid_606372, JInt, required = false, default = nil)
  if valid_606372 != nil:
    section.add "DBInstanceCount", valid_606372
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606373: Call_PostPurchaseReservedDBInstancesOffering_606357;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_606373.validator(path, query, header, formData, body)
  let scheme = call_606373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606373.url(scheme.get, call_606373.host, call_606373.base,
                         call_606373.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606373, url, valid)

proc call*(call_606374: Call_PostPurchaseReservedDBInstancesOffering_606357;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_606375 = newJObject()
  var formData_606376 = newJObject()
  add(formData_606376, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_606375, "Action", newJString(Action))
  if Tags != nil:
    formData_606376.add "Tags", Tags
  add(formData_606376, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_606375, "Version", newJString(Version))
  add(formData_606376, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_606374.call(nil, query_606375, nil, formData_606376, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_606357(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_606358, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_606359,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_606338 = ref object of OpenApiRestCall_601389
proc url_GetPurchaseReservedDBInstancesOffering_606340(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_606339(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606341 = query.getOrDefault("Tags")
  valid_606341 = validateParameter(valid_606341, JArray, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "Tags", valid_606341
  var valid_606342 = query.getOrDefault("DBInstanceCount")
  valid_606342 = validateParameter(valid_606342, JInt, required = false, default = nil)
  if valid_606342 != nil:
    section.add "DBInstanceCount", valid_606342
  var valid_606343 = query.getOrDefault("ReservedDBInstanceId")
  valid_606343 = validateParameter(valid_606343, JString, required = false,
                                 default = nil)
  if valid_606343 != nil:
    section.add "ReservedDBInstanceId", valid_606343
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606344 = query.getOrDefault("Action")
  valid_606344 = validateParameter(valid_606344, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_606344 != nil:
    section.add "Action", valid_606344
  var valid_606345 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_606345 = validateParameter(valid_606345, JString, required = true,
                                 default = nil)
  if valid_606345 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_606345
  var valid_606346 = query.getOrDefault("Version")
  valid_606346 = validateParameter(valid_606346, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606346 != nil:
    section.add "Version", valid_606346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606347 = header.getOrDefault("X-Amz-Signature")
  valid_606347 = validateParameter(valid_606347, JString, required = false,
                                 default = nil)
  if valid_606347 != nil:
    section.add "X-Amz-Signature", valid_606347
  var valid_606348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606348 = validateParameter(valid_606348, JString, required = false,
                                 default = nil)
  if valid_606348 != nil:
    section.add "X-Amz-Content-Sha256", valid_606348
  var valid_606349 = header.getOrDefault("X-Amz-Date")
  valid_606349 = validateParameter(valid_606349, JString, required = false,
                                 default = nil)
  if valid_606349 != nil:
    section.add "X-Amz-Date", valid_606349
  var valid_606350 = header.getOrDefault("X-Amz-Credential")
  valid_606350 = validateParameter(valid_606350, JString, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "X-Amz-Credential", valid_606350
  var valid_606351 = header.getOrDefault("X-Amz-Security-Token")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "X-Amz-Security-Token", valid_606351
  var valid_606352 = header.getOrDefault("X-Amz-Algorithm")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "X-Amz-Algorithm", valid_606352
  var valid_606353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606353 = validateParameter(valid_606353, JString, required = false,
                                 default = nil)
  if valid_606353 != nil:
    section.add "X-Amz-SignedHeaders", valid_606353
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606354: Call_GetPurchaseReservedDBInstancesOffering_606338;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_606354.validator(path, query, header, formData, body)
  let scheme = call_606354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606354.url(scheme.get, call_606354.host, call_606354.base,
                         call_606354.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606354, url, valid)

proc call*(call_606355: Call_GetPurchaseReservedDBInstancesOffering_606338;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_606356 = newJObject()
  if Tags != nil:
    query_606356.add "Tags", Tags
  add(query_606356, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_606356, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_606356, "Action", newJString(Action))
  add(query_606356, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_606356, "Version", newJString(Version))
  result = call_606355.call(nil, query_606356, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_606338(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_606339, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_606340,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_606394 = ref object of OpenApiRestCall_601389
proc url_PostRebootDBInstance_606396(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_606395(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606397 = query.getOrDefault("Action")
  valid_606397 = validateParameter(valid_606397, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_606397 != nil:
    section.add "Action", valid_606397
  var valid_606398 = query.getOrDefault("Version")
  valid_606398 = validateParameter(valid_606398, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606398 != nil:
    section.add "Version", valid_606398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606399 = header.getOrDefault("X-Amz-Signature")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "X-Amz-Signature", valid_606399
  var valid_606400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606400 = validateParameter(valid_606400, JString, required = false,
                                 default = nil)
  if valid_606400 != nil:
    section.add "X-Amz-Content-Sha256", valid_606400
  var valid_606401 = header.getOrDefault("X-Amz-Date")
  valid_606401 = validateParameter(valid_606401, JString, required = false,
                                 default = nil)
  if valid_606401 != nil:
    section.add "X-Amz-Date", valid_606401
  var valid_606402 = header.getOrDefault("X-Amz-Credential")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "X-Amz-Credential", valid_606402
  var valid_606403 = header.getOrDefault("X-Amz-Security-Token")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Security-Token", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Algorithm")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Algorithm", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-SignedHeaders", valid_606405
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_606406 = formData.getOrDefault("ForceFailover")
  valid_606406 = validateParameter(valid_606406, JBool, required = false, default = nil)
  if valid_606406 != nil:
    section.add "ForceFailover", valid_606406
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606407 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606407 = validateParameter(valid_606407, JString, required = true,
                                 default = nil)
  if valid_606407 != nil:
    section.add "DBInstanceIdentifier", valid_606407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606408: Call_PostRebootDBInstance_606394; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606408.validator(path, query, header, formData, body)
  let scheme = call_606408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606408.url(scheme.get, call_606408.host, call_606408.base,
                         call_606408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606408, url, valid)

proc call*(call_606409: Call_PostRebootDBInstance_606394;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606410 = newJObject()
  var formData_606411 = newJObject()
  add(formData_606411, "ForceFailover", newJBool(ForceFailover))
  add(formData_606411, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606410, "Action", newJString(Action))
  add(query_606410, "Version", newJString(Version))
  result = call_606409.call(nil, query_606410, nil, formData_606411, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_606394(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_606395, base: "/",
    url: url_PostRebootDBInstance_606396, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_606377 = ref object of OpenApiRestCall_601389
proc url_GetRebootDBInstance_606379(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_606378(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606380 = query.getOrDefault("ForceFailover")
  valid_606380 = validateParameter(valid_606380, JBool, required = false, default = nil)
  if valid_606380 != nil:
    section.add "ForceFailover", valid_606380
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606381 = query.getOrDefault("DBInstanceIdentifier")
  valid_606381 = validateParameter(valid_606381, JString, required = true,
                                 default = nil)
  if valid_606381 != nil:
    section.add "DBInstanceIdentifier", valid_606381
  var valid_606382 = query.getOrDefault("Action")
  valid_606382 = validateParameter(valid_606382, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_606382 != nil:
    section.add "Action", valid_606382
  var valid_606383 = query.getOrDefault("Version")
  valid_606383 = validateParameter(valid_606383, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606383 != nil:
    section.add "Version", valid_606383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606384 = header.getOrDefault("X-Amz-Signature")
  valid_606384 = validateParameter(valid_606384, JString, required = false,
                                 default = nil)
  if valid_606384 != nil:
    section.add "X-Amz-Signature", valid_606384
  var valid_606385 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606385 = validateParameter(valid_606385, JString, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "X-Amz-Content-Sha256", valid_606385
  var valid_606386 = header.getOrDefault("X-Amz-Date")
  valid_606386 = validateParameter(valid_606386, JString, required = false,
                                 default = nil)
  if valid_606386 != nil:
    section.add "X-Amz-Date", valid_606386
  var valid_606387 = header.getOrDefault("X-Amz-Credential")
  valid_606387 = validateParameter(valid_606387, JString, required = false,
                                 default = nil)
  if valid_606387 != nil:
    section.add "X-Amz-Credential", valid_606387
  var valid_606388 = header.getOrDefault("X-Amz-Security-Token")
  valid_606388 = validateParameter(valid_606388, JString, required = false,
                                 default = nil)
  if valid_606388 != nil:
    section.add "X-Amz-Security-Token", valid_606388
  var valid_606389 = header.getOrDefault("X-Amz-Algorithm")
  valid_606389 = validateParameter(valid_606389, JString, required = false,
                                 default = nil)
  if valid_606389 != nil:
    section.add "X-Amz-Algorithm", valid_606389
  var valid_606390 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606390 = validateParameter(valid_606390, JString, required = false,
                                 default = nil)
  if valid_606390 != nil:
    section.add "X-Amz-SignedHeaders", valid_606390
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606391: Call_GetRebootDBInstance_606377; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606391.validator(path, query, header, formData, body)
  let scheme = call_606391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606391.url(scheme.get, call_606391.host, call_606391.base,
                         call_606391.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606391, url, valid)

proc call*(call_606392: Call_GetRebootDBInstance_606377;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606393 = newJObject()
  add(query_606393, "ForceFailover", newJBool(ForceFailover))
  add(query_606393, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606393, "Action", newJString(Action))
  add(query_606393, "Version", newJString(Version))
  result = call_606392.call(nil, query_606393, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_606377(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_606378, base: "/",
    url: url_GetRebootDBInstance_606379, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_606431 = ref object of OpenApiRestCall_601389
proc url_PostRegisterDBProxyTargets_606433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_606432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606434 = query.getOrDefault("Action")
  valid_606434 = validateParameter(valid_606434, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_606434 != nil:
    section.add "Action", valid_606434
  var valid_606435 = query.getOrDefault("Version")
  valid_606435 = validateParameter(valid_606435, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606435 != nil:
    section.add "Version", valid_606435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606436 = header.getOrDefault("X-Amz-Signature")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-Signature", valid_606436
  var valid_606437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "X-Amz-Content-Sha256", valid_606437
  var valid_606438 = header.getOrDefault("X-Amz-Date")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "X-Amz-Date", valid_606438
  var valid_606439 = header.getOrDefault("X-Amz-Credential")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "X-Amz-Credential", valid_606439
  var valid_606440 = header.getOrDefault("X-Amz-Security-Token")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "X-Amz-Security-Token", valid_606440
  var valid_606441 = header.getOrDefault("X-Amz-Algorithm")
  valid_606441 = validateParameter(valid_606441, JString, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "X-Amz-Algorithm", valid_606441
  var valid_606442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606442 = validateParameter(valid_606442, JString, required = false,
                                 default = nil)
  if valid_606442 != nil:
    section.add "X-Amz-SignedHeaders", valid_606442
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_606443 = formData.getOrDefault("TargetGroupName")
  valid_606443 = validateParameter(valid_606443, JString, required = false,
                                 default = nil)
  if valid_606443 != nil:
    section.add "TargetGroupName", valid_606443
  var valid_606444 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_606444 = validateParameter(valid_606444, JArray, required = false,
                                 default = nil)
  if valid_606444 != nil:
    section.add "DBInstanceIdentifiers", valid_606444
  var valid_606445 = formData.getOrDefault("DBClusterIdentifiers")
  valid_606445 = validateParameter(valid_606445, JArray, required = false,
                                 default = nil)
  if valid_606445 != nil:
    section.add "DBClusterIdentifiers", valid_606445
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_606446 = formData.getOrDefault("DBProxyName")
  valid_606446 = validateParameter(valid_606446, JString, required = true,
                                 default = nil)
  if valid_606446 != nil:
    section.add "DBProxyName", valid_606446
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606447: Call_PostRegisterDBProxyTargets_606431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606447.validator(path, query, header, formData, body)
  let scheme = call_606447.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606447.url(scheme.get, call_606447.host, call_606447.base,
                         call_606447.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606447, url, valid)

proc call*(call_606448: Call_PostRegisterDBProxyTargets_606431;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606449 = newJObject()
  var formData_606450 = newJObject()
  add(formData_606450, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_606450.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_606450.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_606450, "DBProxyName", newJString(DBProxyName))
  add(query_606449, "Action", newJString(Action))
  add(query_606449, "Version", newJString(Version))
  result = call_606448.call(nil, query_606449, nil, formData_606450, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_606431(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_606432, base: "/",
    url: url_PostRegisterDBProxyTargets_606433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_606412 = ref object of OpenApiRestCall_601389
proc url_GetRegisterDBProxyTargets_606414(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_606413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_606415 = query.getOrDefault("DBClusterIdentifiers")
  valid_606415 = validateParameter(valid_606415, JArray, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "DBClusterIdentifiers", valid_606415
  var valid_606416 = query.getOrDefault("DBInstanceIdentifiers")
  valid_606416 = validateParameter(valid_606416, JArray, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "DBInstanceIdentifiers", valid_606416
  var valid_606417 = query.getOrDefault("TargetGroupName")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "TargetGroupName", valid_606417
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606418 = query.getOrDefault("Action")
  valid_606418 = validateParameter(valid_606418, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_606418 != nil:
    section.add "Action", valid_606418
  var valid_606419 = query.getOrDefault("Version")
  valid_606419 = validateParameter(valid_606419, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606419 != nil:
    section.add "Version", valid_606419
  var valid_606420 = query.getOrDefault("DBProxyName")
  valid_606420 = validateParameter(valid_606420, JString, required = true,
                                 default = nil)
  if valid_606420 != nil:
    section.add "DBProxyName", valid_606420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606421 = header.getOrDefault("X-Amz-Signature")
  valid_606421 = validateParameter(valid_606421, JString, required = false,
                                 default = nil)
  if valid_606421 != nil:
    section.add "X-Amz-Signature", valid_606421
  var valid_606422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606422 = validateParameter(valid_606422, JString, required = false,
                                 default = nil)
  if valid_606422 != nil:
    section.add "X-Amz-Content-Sha256", valid_606422
  var valid_606423 = header.getOrDefault("X-Amz-Date")
  valid_606423 = validateParameter(valid_606423, JString, required = false,
                                 default = nil)
  if valid_606423 != nil:
    section.add "X-Amz-Date", valid_606423
  var valid_606424 = header.getOrDefault("X-Amz-Credential")
  valid_606424 = validateParameter(valid_606424, JString, required = false,
                                 default = nil)
  if valid_606424 != nil:
    section.add "X-Amz-Credential", valid_606424
  var valid_606425 = header.getOrDefault("X-Amz-Security-Token")
  valid_606425 = validateParameter(valid_606425, JString, required = false,
                                 default = nil)
  if valid_606425 != nil:
    section.add "X-Amz-Security-Token", valid_606425
  var valid_606426 = header.getOrDefault("X-Amz-Algorithm")
  valid_606426 = validateParameter(valid_606426, JString, required = false,
                                 default = nil)
  if valid_606426 != nil:
    section.add "X-Amz-Algorithm", valid_606426
  var valid_606427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606427 = validateParameter(valid_606427, JString, required = false,
                                 default = nil)
  if valid_606427 != nil:
    section.add "X-Amz-SignedHeaders", valid_606427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606428: Call_GetRegisterDBProxyTargets_606412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606428.validator(path, query, header, formData, body)
  let scheme = call_606428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606428.url(scheme.get, call_606428.host, call_606428.base,
                         call_606428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606428, url, valid)

proc call*(call_606429: Call_GetRegisterDBProxyTargets_606412; DBProxyName: string;
          DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_606430 = newJObject()
  if DBClusterIdentifiers != nil:
    query_606430.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_606430.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_606430, "TargetGroupName", newJString(TargetGroupName))
  add(query_606430, "Action", newJString(Action))
  add(query_606430, "Version", newJString(Version))
  add(query_606430, "DBProxyName", newJString(DBProxyName))
  result = call_606429.call(nil, query_606430, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_606412(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_606413, base: "/",
    url: url_GetRegisterDBProxyTargets_606414,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_606468 = ref object of OpenApiRestCall_601389
proc url_PostRemoveFromGlobalCluster_606470(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_606469(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606471 = query.getOrDefault("Action")
  valid_606471 = validateParameter(valid_606471, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_606471 != nil:
    section.add "Action", valid_606471
  var valid_606472 = query.getOrDefault("Version")
  valid_606472 = validateParameter(valid_606472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606472 != nil:
    section.add "Version", valid_606472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606473 = header.getOrDefault("X-Amz-Signature")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-Signature", valid_606473
  var valid_606474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "X-Amz-Content-Sha256", valid_606474
  var valid_606475 = header.getOrDefault("X-Amz-Date")
  valid_606475 = validateParameter(valid_606475, JString, required = false,
                                 default = nil)
  if valid_606475 != nil:
    section.add "X-Amz-Date", valid_606475
  var valid_606476 = header.getOrDefault("X-Amz-Credential")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Credential", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-Security-Token")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-Security-Token", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-Algorithm")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-Algorithm", valid_606478
  var valid_606479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606479 = validateParameter(valid_606479, JString, required = false,
                                 default = nil)
  if valid_606479 != nil:
    section.add "X-Amz-SignedHeaders", valid_606479
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_606480 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_606480 = validateParameter(valid_606480, JString, required = false,
                                 default = nil)
  if valid_606480 != nil:
    section.add "GlobalClusterIdentifier", valid_606480
  var valid_606481 = formData.getOrDefault("DbClusterIdentifier")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "DbClusterIdentifier", valid_606481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606482: Call_PostRemoveFromGlobalCluster_606468; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606482.validator(path, query, header, formData, body)
  let scheme = call_606482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606482.url(scheme.get, call_606482.host, call_606482.base,
                         call_606482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606482, url, valid)

proc call*(call_606483: Call_PostRemoveFromGlobalCluster_606468;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606484 = newJObject()
  var formData_606485 = newJObject()
  add(formData_606485, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_606485, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_606484, "Action", newJString(Action))
  add(query_606484, "Version", newJString(Version))
  result = call_606483.call(nil, query_606484, nil, formData_606485, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_606468(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_606469, base: "/",
    url: url_PostRemoveFromGlobalCluster_606470,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_606451 = ref object of OpenApiRestCall_601389
proc url_GetRemoveFromGlobalCluster_606453(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_606452(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606454 = query.getOrDefault("GlobalClusterIdentifier")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "GlobalClusterIdentifier", valid_606454
  var valid_606455 = query.getOrDefault("DbClusterIdentifier")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "DbClusterIdentifier", valid_606455
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606456 = query.getOrDefault("Action")
  valid_606456 = validateParameter(valid_606456, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_606456 != nil:
    section.add "Action", valid_606456
  var valid_606457 = query.getOrDefault("Version")
  valid_606457 = validateParameter(valid_606457, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606457 != nil:
    section.add "Version", valid_606457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606458 = header.getOrDefault("X-Amz-Signature")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "X-Amz-Signature", valid_606458
  var valid_606459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606459 = validateParameter(valid_606459, JString, required = false,
                                 default = nil)
  if valid_606459 != nil:
    section.add "X-Amz-Content-Sha256", valid_606459
  var valid_606460 = header.getOrDefault("X-Amz-Date")
  valid_606460 = validateParameter(valid_606460, JString, required = false,
                                 default = nil)
  if valid_606460 != nil:
    section.add "X-Amz-Date", valid_606460
  var valid_606461 = header.getOrDefault("X-Amz-Credential")
  valid_606461 = validateParameter(valid_606461, JString, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "X-Amz-Credential", valid_606461
  var valid_606462 = header.getOrDefault("X-Amz-Security-Token")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = nil)
  if valid_606462 != nil:
    section.add "X-Amz-Security-Token", valid_606462
  var valid_606463 = header.getOrDefault("X-Amz-Algorithm")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "X-Amz-Algorithm", valid_606463
  var valid_606464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606464 = validateParameter(valid_606464, JString, required = false,
                                 default = nil)
  if valid_606464 != nil:
    section.add "X-Amz-SignedHeaders", valid_606464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606465: Call_GetRemoveFromGlobalCluster_606451; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606465.validator(path, query, header, formData, body)
  let scheme = call_606465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606465.url(scheme.get, call_606465.host, call_606465.base,
                         call_606465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606465, url, valid)

proc call*(call_606466: Call_GetRemoveFromGlobalCluster_606451;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606467 = newJObject()
  add(query_606467, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_606467, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_606467, "Action", newJString(Action))
  add(query_606467, "Version", newJString(Version))
  result = call_606466.call(nil, query_606467, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_606451(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_606452, base: "/",
    url: url_GetRemoveFromGlobalCluster_606453,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_606504 = ref object of OpenApiRestCall_601389
proc url_PostRemoveRoleFromDBCluster_606506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_606505(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606507 = query.getOrDefault("Action")
  valid_606507 = validateParameter(valid_606507, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_606507 != nil:
    section.add "Action", valid_606507
  var valid_606508 = query.getOrDefault("Version")
  valid_606508 = validateParameter(valid_606508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606508 != nil:
    section.add "Version", valid_606508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606509 = header.getOrDefault("X-Amz-Signature")
  valid_606509 = validateParameter(valid_606509, JString, required = false,
                                 default = nil)
  if valid_606509 != nil:
    section.add "X-Amz-Signature", valid_606509
  var valid_606510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606510 = validateParameter(valid_606510, JString, required = false,
                                 default = nil)
  if valid_606510 != nil:
    section.add "X-Amz-Content-Sha256", valid_606510
  var valid_606511 = header.getOrDefault("X-Amz-Date")
  valid_606511 = validateParameter(valid_606511, JString, required = false,
                                 default = nil)
  if valid_606511 != nil:
    section.add "X-Amz-Date", valid_606511
  var valid_606512 = header.getOrDefault("X-Amz-Credential")
  valid_606512 = validateParameter(valid_606512, JString, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "X-Amz-Credential", valid_606512
  var valid_606513 = header.getOrDefault("X-Amz-Security-Token")
  valid_606513 = validateParameter(valid_606513, JString, required = false,
                                 default = nil)
  if valid_606513 != nil:
    section.add "X-Amz-Security-Token", valid_606513
  var valid_606514 = header.getOrDefault("X-Amz-Algorithm")
  valid_606514 = validateParameter(valid_606514, JString, required = false,
                                 default = nil)
  if valid_606514 != nil:
    section.add "X-Amz-Algorithm", valid_606514
  var valid_606515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606515 = validateParameter(valid_606515, JString, required = false,
                                 default = nil)
  if valid_606515 != nil:
    section.add "X-Amz-SignedHeaders", valid_606515
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_606516 = formData.getOrDefault("FeatureName")
  valid_606516 = validateParameter(valid_606516, JString, required = false,
                                 default = nil)
  if valid_606516 != nil:
    section.add "FeatureName", valid_606516
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_606517 = formData.getOrDefault("RoleArn")
  valid_606517 = validateParameter(valid_606517, JString, required = true,
                                 default = nil)
  if valid_606517 != nil:
    section.add "RoleArn", valid_606517
  var valid_606518 = formData.getOrDefault("DBClusterIdentifier")
  valid_606518 = validateParameter(valid_606518, JString, required = true,
                                 default = nil)
  if valid_606518 != nil:
    section.add "DBClusterIdentifier", valid_606518
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606519: Call_PostRemoveRoleFromDBCluster_606504; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606519.validator(path, query, header, formData, body)
  let scheme = call_606519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606519.url(scheme.get, call_606519.host, call_606519.base,
                         call_606519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606519, url, valid)

proc call*(call_606520: Call_PostRemoveRoleFromDBCluster_606504; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_606521 = newJObject()
  var formData_606522 = newJObject()
  add(formData_606522, "FeatureName", newJString(FeatureName))
  add(formData_606522, "RoleArn", newJString(RoleArn))
  add(query_606521, "Action", newJString(Action))
  add(query_606521, "Version", newJString(Version))
  add(formData_606522, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606520.call(nil, query_606521, nil, formData_606522, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_606504(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_606505, base: "/",
    url: url_PostRemoveRoleFromDBCluster_606506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_606486 = ref object of OpenApiRestCall_601389
proc url_GetRemoveRoleFromDBCluster_606488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_606487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606489 = query.getOrDefault("RoleArn")
  valid_606489 = validateParameter(valid_606489, JString, required = true,
                                 default = nil)
  if valid_606489 != nil:
    section.add "RoleArn", valid_606489
  var valid_606490 = query.getOrDefault("DBClusterIdentifier")
  valid_606490 = validateParameter(valid_606490, JString, required = true,
                                 default = nil)
  if valid_606490 != nil:
    section.add "DBClusterIdentifier", valid_606490
  var valid_606491 = query.getOrDefault("FeatureName")
  valid_606491 = validateParameter(valid_606491, JString, required = false,
                                 default = nil)
  if valid_606491 != nil:
    section.add "FeatureName", valid_606491
  var valid_606492 = query.getOrDefault("Action")
  valid_606492 = validateParameter(valid_606492, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_606492 != nil:
    section.add "Action", valid_606492
  var valid_606493 = query.getOrDefault("Version")
  valid_606493 = validateParameter(valid_606493, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606493 != nil:
    section.add "Version", valid_606493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606494 = header.getOrDefault("X-Amz-Signature")
  valid_606494 = validateParameter(valid_606494, JString, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "X-Amz-Signature", valid_606494
  var valid_606495 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "X-Amz-Content-Sha256", valid_606495
  var valid_606496 = header.getOrDefault("X-Amz-Date")
  valid_606496 = validateParameter(valid_606496, JString, required = false,
                                 default = nil)
  if valid_606496 != nil:
    section.add "X-Amz-Date", valid_606496
  var valid_606497 = header.getOrDefault("X-Amz-Credential")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "X-Amz-Credential", valid_606497
  var valid_606498 = header.getOrDefault("X-Amz-Security-Token")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "X-Amz-Security-Token", valid_606498
  var valid_606499 = header.getOrDefault("X-Amz-Algorithm")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "X-Amz-Algorithm", valid_606499
  var valid_606500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606500 = validateParameter(valid_606500, JString, required = false,
                                 default = nil)
  if valid_606500 != nil:
    section.add "X-Amz-SignedHeaders", valid_606500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606501: Call_GetRemoveRoleFromDBCluster_606486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606501.validator(path, query, header, formData, body)
  let scheme = call_606501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606501.url(scheme.get, call_606501.host, call_606501.base,
                         call_606501.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606501, url, valid)

proc call*(call_606502: Call_GetRemoveRoleFromDBCluster_606486; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606503 = newJObject()
  add(query_606503, "RoleArn", newJString(RoleArn))
  add(query_606503, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606503, "FeatureName", newJString(FeatureName))
  add(query_606503, "Action", newJString(Action))
  add(query_606503, "Version", newJString(Version))
  result = call_606502.call(nil, query_606503, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_606486(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_606487, base: "/",
    url: url_GetRemoveRoleFromDBCluster_606488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_606541 = ref object of OpenApiRestCall_601389
proc url_PostRemoveRoleFromDBInstance_606543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_606542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606544 = query.getOrDefault("Action")
  valid_606544 = validateParameter(valid_606544, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_606544 != nil:
    section.add "Action", valid_606544
  var valid_606545 = query.getOrDefault("Version")
  valid_606545 = validateParameter(valid_606545, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606545 != nil:
    section.add "Version", valid_606545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606546 = header.getOrDefault("X-Amz-Signature")
  valid_606546 = validateParameter(valid_606546, JString, required = false,
                                 default = nil)
  if valid_606546 != nil:
    section.add "X-Amz-Signature", valid_606546
  var valid_606547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606547 = validateParameter(valid_606547, JString, required = false,
                                 default = nil)
  if valid_606547 != nil:
    section.add "X-Amz-Content-Sha256", valid_606547
  var valid_606548 = header.getOrDefault("X-Amz-Date")
  valid_606548 = validateParameter(valid_606548, JString, required = false,
                                 default = nil)
  if valid_606548 != nil:
    section.add "X-Amz-Date", valid_606548
  var valid_606549 = header.getOrDefault("X-Amz-Credential")
  valid_606549 = validateParameter(valid_606549, JString, required = false,
                                 default = nil)
  if valid_606549 != nil:
    section.add "X-Amz-Credential", valid_606549
  var valid_606550 = header.getOrDefault("X-Amz-Security-Token")
  valid_606550 = validateParameter(valid_606550, JString, required = false,
                                 default = nil)
  if valid_606550 != nil:
    section.add "X-Amz-Security-Token", valid_606550
  var valid_606551 = header.getOrDefault("X-Amz-Algorithm")
  valid_606551 = validateParameter(valid_606551, JString, required = false,
                                 default = nil)
  if valid_606551 != nil:
    section.add "X-Amz-Algorithm", valid_606551
  var valid_606552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606552 = validateParameter(valid_606552, JString, required = false,
                                 default = nil)
  if valid_606552 != nil:
    section.add "X-Amz-SignedHeaders", valid_606552
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_606553 = formData.getOrDefault("FeatureName")
  valid_606553 = validateParameter(valid_606553, JString, required = true,
                                 default = nil)
  if valid_606553 != nil:
    section.add "FeatureName", valid_606553
  var valid_606554 = formData.getOrDefault("RoleArn")
  valid_606554 = validateParameter(valid_606554, JString, required = true,
                                 default = nil)
  if valid_606554 != nil:
    section.add "RoleArn", valid_606554
  var valid_606555 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606555 = validateParameter(valid_606555, JString, required = true,
                                 default = nil)
  if valid_606555 != nil:
    section.add "DBInstanceIdentifier", valid_606555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606556: Call_PostRemoveRoleFromDBInstance_606541; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_606556.validator(path, query, header, formData, body)
  let scheme = call_606556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606556.url(scheme.get, call_606556.host, call_606556.base,
                         call_606556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606556, url, valid)

proc call*(call_606557: Call_PostRemoveRoleFromDBInstance_606541;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606558 = newJObject()
  var formData_606559 = newJObject()
  add(formData_606559, "FeatureName", newJString(FeatureName))
  add(formData_606559, "RoleArn", newJString(RoleArn))
  add(formData_606559, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606558, "Action", newJString(Action))
  add(query_606558, "Version", newJString(Version))
  result = call_606557.call(nil, query_606558, nil, formData_606559, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_606541(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_606542, base: "/",
    url: url_PostRemoveRoleFromDBInstance_606543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_606523 = ref object of OpenApiRestCall_601389
proc url_GetRemoveRoleFromDBInstance_606525(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_606524(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606526 = query.getOrDefault("RoleArn")
  valid_606526 = validateParameter(valid_606526, JString, required = true,
                                 default = nil)
  if valid_606526 != nil:
    section.add "RoleArn", valid_606526
  var valid_606527 = query.getOrDefault("FeatureName")
  valid_606527 = validateParameter(valid_606527, JString, required = true,
                                 default = nil)
  if valid_606527 != nil:
    section.add "FeatureName", valid_606527
  var valid_606528 = query.getOrDefault("DBInstanceIdentifier")
  valid_606528 = validateParameter(valid_606528, JString, required = true,
                                 default = nil)
  if valid_606528 != nil:
    section.add "DBInstanceIdentifier", valid_606528
  var valid_606529 = query.getOrDefault("Action")
  valid_606529 = validateParameter(valid_606529, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_606529 != nil:
    section.add "Action", valid_606529
  var valid_606530 = query.getOrDefault("Version")
  valid_606530 = validateParameter(valid_606530, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606530 != nil:
    section.add "Version", valid_606530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606531 = header.getOrDefault("X-Amz-Signature")
  valid_606531 = validateParameter(valid_606531, JString, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "X-Amz-Signature", valid_606531
  var valid_606532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606532 = validateParameter(valid_606532, JString, required = false,
                                 default = nil)
  if valid_606532 != nil:
    section.add "X-Amz-Content-Sha256", valid_606532
  var valid_606533 = header.getOrDefault("X-Amz-Date")
  valid_606533 = validateParameter(valid_606533, JString, required = false,
                                 default = nil)
  if valid_606533 != nil:
    section.add "X-Amz-Date", valid_606533
  var valid_606534 = header.getOrDefault("X-Amz-Credential")
  valid_606534 = validateParameter(valid_606534, JString, required = false,
                                 default = nil)
  if valid_606534 != nil:
    section.add "X-Amz-Credential", valid_606534
  var valid_606535 = header.getOrDefault("X-Amz-Security-Token")
  valid_606535 = validateParameter(valid_606535, JString, required = false,
                                 default = nil)
  if valid_606535 != nil:
    section.add "X-Amz-Security-Token", valid_606535
  var valid_606536 = header.getOrDefault("X-Amz-Algorithm")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-Algorithm", valid_606536
  var valid_606537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606537 = validateParameter(valid_606537, JString, required = false,
                                 default = nil)
  if valid_606537 != nil:
    section.add "X-Amz-SignedHeaders", valid_606537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606538: Call_GetRemoveRoleFromDBInstance_606523; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_606538.validator(path, query, header, formData, body)
  let scheme = call_606538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606538.url(scheme.get, call_606538.host, call_606538.base,
                         call_606538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606538, url, valid)

proc call*(call_606539: Call_GetRemoveRoleFromDBInstance_606523; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606540 = newJObject()
  add(query_606540, "RoleArn", newJString(RoleArn))
  add(query_606540, "FeatureName", newJString(FeatureName))
  add(query_606540, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606540, "Action", newJString(Action))
  add(query_606540, "Version", newJString(Version))
  result = call_606539.call(nil, query_606540, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_606523(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_606524, base: "/",
    url: url_GetRemoveRoleFromDBInstance_606525,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_606577 = ref object of OpenApiRestCall_601389
proc url_PostRemoveSourceIdentifierFromSubscription_606579(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_606578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606580 = query.getOrDefault("Action")
  valid_606580 = validateParameter(valid_606580, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_606580 != nil:
    section.add "Action", valid_606580
  var valid_606581 = query.getOrDefault("Version")
  valid_606581 = validateParameter(valid_606581, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606581 != nil:
    section.add "Version", valid_606581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606582 = header.getOrDefault("X-Amz-Signature")
  valid_606582 = validateParameter(valid_606582, JString, required = false,
                                 default = nil)
  if valid_606582 != nil:
    section.add "X-Amz-Signature", valid_606582
  var valid_606583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606583 = validateParameter(valid_606583, JString, required = false,
                                 default = nil)
  if valid_606583 != nil:
    section.add "X-Amz-Content-Sha256", valid_606583
  var valid_606584 = header.getOrDefault("X-Amz-Date")
  valid_606584 = validateParameter(valid_606584, JString, required = false,
                                 default = nil)
  if valid_606584 != nil:
    section.add "X-Amz-Date", valid_606584
  var valid_606585 = header.getOrDefault("X-Amz-Credential")
  valid_606585 = validateParameter(valid_606585, JString, required = false,
                                 default = nil)
  if valid_606585 != nil:
    section.add "X-Amz-Credential", valid_606585
  var valid_606586 = header.getOrDefault("X-Amz-Security-Token")
  valid_606586 = validateParameter(valid_606586, JString, required = false,
                                 default = nil)
  if valid_606586 != nil:
    section.add "X-Amz-Security-Token", valid_606586
  var valid_606587 = header.getOrDefault("X-Amz-Algorithm")
  valid_606587 = validateParameter(valid_606587, JString, required = false,
                                 default = nil)
  if valid_606587 != nil:
    section.add "X-Amz-Algorithm", valid_606587
  var valid_606588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606588 = validateParameter(valid_606588, JString, required = false,
                                 default = nil)
  if valid_606588 != nil:
    section.add "X-Amz-SignedHeaders", valid_606588
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606589 = formData.getOrDefault("SubscriptionName")
  valid_606589 = validateParameter(valid_606589, JString, required = true,
                                 default = nil)
  if valid_606589 != nil:
    section.add "SubscriptionName", valid_606589
  var valid_606590 = formData.getOrDefault("SourceIdentifier")
  valid_606590 = validateParameter(valid_606590, JString, required = true,
                                 default = nil)
  if valid_606590 != nil:
    section.add "SourceIdentifier", valid_606590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606591: Call_PostRemoveSourceIdentifierFromSubscription_606577;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_606591.validator(path, query, header, formData, body)
  let scheme = call_606591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606591.url(scheme.get, call_606591.host, call_606591.base,
                         call_606591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606591, url, valid)

proc call*(call_606592: Call_PostRemoveSourceIdentifierFromSubscription_606577;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606593 = newJObject()
  var formData_606594 = newJObject()
  add(formData_606594, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606594, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606593, "Action", newJString(Action))
  add(query_606593, "Version", newJString(Version))
  result = call_606592.call(nil, query_606593, nil, formData_606594, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_606577(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_606578,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_606579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_606560 = ref object of OpenApiRestCall_601389
proc url_GetRemoveSourceIdentifierFromSubscription_606562(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_606561(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_606563 = query.getOrDefault("SourceIdentifier")
  valid_606563 = validateParameter(valid_606563, JString, required = true,
                                 default = nil)
  if valid_606563 != nil:
    section.add "SourceIdentifier", valid_606563
  var valid_606564 = query.getOrDefault("SubscriptionName")
  valid_606564 = validateParameter(valid_606564, JString, required = true,
                                 default = nil)
  if valid_606564 != nil:
    section.add "SubscriptionName", valid_606564
  var valid_606565 = query.getOrDefault("Action")
  valid_606565 = validateParameter(valid_606565, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_606565 != nil:
    section.add "Action", valid_606565
  var valid_606566 = query.getOrDefault("Version")
  valid_606566 = validateParameter(valid_606566, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606566 != nil:
    section.add "Version", valid_606566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606567 = header.getOrDefault("X-Amz-Signature")
  valid_606567 = validateParameter(valid_606567, JString, required = false,
                                 default = nil)
  if valid_606567 != nil:
    section.add "X-Amz-Signature", valid_606567
  var valid_606568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606568 = validateParameter(valid_606568, JString, required = false,
                                 default = nil)
  if valid_606568 != nil:
    section.add "X-Amz-Content-Sha256", valid_606568
  var valid_606569 = header.getOrDefault("X-Amz-Date")
  valid_606569 = validateParameter(valid_606569, JString, required = false,
                                 default = nil)
  if valid_606569 != nil:
    section.add "X-Amz-Date", valid_606569
  var valid_606570 = header.getOrDefault("X-Amz-Credential")
  valid_606570 = validateParameter(valid_606570, JString, required = false,
                                 default = nil)
  if valid_606570 != nil:
    section.add "X-Amz-Credential", valid_606570
  var valid_606571 = header.getOrDefault("X-Amz-Security-Token")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "X-Amz-Security-Token", valid_606571
  var valid_606572 = header.getOrDefault("X-Amz-Algorithm")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "X-Amz-Algorithm", valid_606572
  var valid_606573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "X-Amz-SignedHeaders", valid_606573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606574: Call_GetRemoveSourceIdentifierFromSubscription_606560;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_606574.validator(path, query, header, formData, body)
  let scheme = call_606574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606574.url(scheme.get, call_606574.host, call_606574.base,
                         call_606574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606574, url, valid)

proc call*(call_606575: Call_GetRemoveSourceIdentifierFromSubscription_606560;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606576 = newJObject()
  add(query_606576, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606576, "SubscriptionName", newJString(SubscriptionName))
  add(query_606576, "Action", newJString(Action))
  add(query_606576, "Version", newJString(Version))
  result = call_606575.call(nil, query_606576, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_606560(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_606561,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_606562,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_606612 = ref object of OpenApiRestCall_601389
proc url_PostRemoveTagsFromResource_606614(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_606613(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606615 = query.getOrDefault("Action")
  valid_606615 = validateParameter(valid_606615, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_606615 != nil:
    section.add "Action", valid_606615
  var valid_606616 = query.getOrDefault("Version")
  valid_606616 = validateParameter(valid_606616, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606616 != nil:
    section.add "Version", valid_606616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606617 = header.getOrDefault("X-Amz-Signature")
  valid_606617 = validateParameter(valid_606617, JString, required = false,
                                 default = nil)
  if valid_606617 != nil:
    section.add "X-Amz-Signature", valid_606617
  var valid_606618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606618 = validateParameter(valid_606618, JString, required = false,
                                 default = nil)
  if valid_606618 != nil:
    section.add "X-Amz-Content-Sha256", valid_606618
  var valid_606619 = header.getOrDefault("X-Amz-Date")
  valid_606619 = validateParameter(valid_606619, JString, required = false,
                                 default = nil)
  if valid_606619 != nil:
    section.add "X-Amz-Date", valid_606619
  var valid_606620 = header.getOrDefault("X-Amz-Credential")
  valid_606620 = validateParameter(valid_606620, JString, required = false,
                                 default = nil)
  if valid_606620 != nil:
    section.add "X-Amz-Credential", valid_606620
  var valid_606621 = header.getOrDefault("X-Amz-Security-Token")
  valid_606621 = validateParameter(valid_606621, JString, required = false,
                                 default = nil)
  if valid_606621 != nil:
    section.add "X-Amz-Security-Token", valid_606621
  var valid_606622 = header.getOrDefault("X-Amz-Algorithm")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "X-Amz-Algorithm", valid_606622
  var valid_606623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "X-Amz-SignedHeaders", valid_606623
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_606624 = formData.getOrDefault("TagKeys")
  valid_606624 = validateParameter(valid_606624, JArray, required = true, default = nil)
  if valid_606624 != nil:
    section.add "TagKeys", valid_606624
  var valid_606625 = formData.getOrDefault("ResourceName")
  valid_606625 = validateParameter(valid_606625, JString, required = true,
                                 default = nil)
  if valid_606625 != nil:
    section.add "ResourceName", valid_606625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606626: Call_PostRemoveTagsFromResource_606612; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606626.validator(path, query, header, formData, body)
  let scheme = call_606626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606626.url(scheme.get, call_606626.host, call_606626.base,
                         call_606626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606626, url, valid)

proc call*(call_606627: Call_PostRemoveTagsFromResource_606612; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_606628 = newJObject()
  var formData_606629 = newJObject()
  if TagKeys != nil:
    formData_606629.add "TagKeys", TagKeys
  add(query_606628, "Action", newJString(Action))
  add(query_606628, "Version", newJString(Version))
  add(formData_606629, "ResourceName", newJString(ResourceName))
  result = call_606627.call(nil, query_606628, nil, formData_606629, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_606612(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_606613, base: "/",
    url: url_PostRemoveTagsFromResource_606614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_606595 = ref object of OpenApiRestCall_601389
proc url_GetRemoveTagsFromResource_606597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_606596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_606598 = query.getOrDefault("ResourceName")
  valid_606598 = validateParameter(valid_606598, JString, required = true,
                                 default = nil)
  if valid_606598 != nil:
    section.add "ResourceName", valid_606598
  var valid_606599 = query.getOrDefault("TagKeys")
  valid_606599 = validateParameter(valid_606599, JArray, required = true, default = nil)
  if valid_606599 != nil:
    section.add "TagKeys", valid_606599
  var valid_606600 = query.getOrDefault("Action")
  valid_606600 = validateParameter(valid_606600, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_606600 != nil:
    section.add "Action", valid_606600
  var valid_606601 = query.getOrDefault("Version")
  valid_606601 = validateParameter(valid_606601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606601 != nil:
    section.add "Version", valid_606601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606602 = header.getOrDefault("X-Amz-Signature")
  valid_606602 = validateParameter(valid_606602, JString, required = false,
                                 default = nil)
  if valid_606602 != nil:
    section.add "X-Amz-Signature", valid_606602
  var valid_606603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606603 = validateParameter(valid_606603, JString, required = false,
                                 default = nil)
  if valid_606603 != nil:
    section.add "X-Amz-Content-Sha256", valid_606603
  var valid_606604 = header.getOrDefault("X-Amz-Date")
  valid_606604 = validateParameter(valid_606604, JString, required = false,
                                 default = nil)
  if valid_606604 != nil:
    section.add "X-Amz-Date", valid_606604
  var valid_606605 = header.getOrDefault("X-Amz-Credential")
  valid_606605 = validateParameter(valid_606605, JString, required = false,
                                 default = nil)
  if valid_606605 != nil:
    section.add "X-Amz-Credential", valid_606605
  var valid_606606 = header.getOrDefault("X-Amz-Security-Token")
  valid_606606 = validateParameter(valid_606606, JString, required = false,
                                 default = nil)
  if valid_606606 != nil:
    section.add "X-Amz-Security-Token", valid_606606
  var valid_606607 = header.getOrDefault("X-Amz-Algorithm")
  valid_606607 = validateParameter(valid_606607, JString, required = false,
                                 default = nil)
  if valid_606607 != nil:
    section.add "X-Amz-Algorithm", valid_606607
  var valid_606608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "X-Amz-SignedHeaders", valid_606608
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606609: Call_GetRemoveTagsFromResource_606595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_606609.validator(path, query, header, formData, body)
  let scheme = call_606609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606609.url(scheme.get, call_606609.host, call_606609.base,
                         call_606609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606609, url, valid)

proc call*(call_606610: Call_GetRemoveTagsFromResource_606595;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606611 = newJObject()
  add(query_606611, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_606611.add "TagKeys", TagKeys
  add(query_606611, "Action", newJString(Action))
  add(query_606611, "Version", newJString(Version))
  result = call_606610.call(nil, query_606611, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_606595(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_606596, base: "/",
    url: url_GetRemoveTagsFromResource_606597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_606648 = ref object of OpenApiRestCall_601389
proc url_PostResetDBClusterParameterGroup_606650(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_606649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606651 = query.getOrDefault("Action")
  valid_606651 = validateParameter(valid_606651, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_606651 != nil:
    section.add "Action", valid_606651
  var valid_606652 = query.getOrDefault("Version")
  valid_606652 = validateParameter(valid_606652, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606652 != nil:
    section.add "Version", valid_606652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606653 = header.getOrDefault("X-Amz-Signature")
  valid_606653 = validateParameter(valid_606653, JString, required = false,
                                 default = nil)
  if valid_606653 != nil:
    section.add "X-Amz-Signature", valid_606653
  var valid_606654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606654 = validateParameter(valid_606654, JString, required = false,
                                 default = nil)
  if valid_606654 != nil:
    section.add "X-Amz-Content-Sha256", valid_606654
  var valid_606655 = header.getOrDefault("X-Amz-Date")
  valid_606655 = validateParameter(valid_606655, JString, required = false,
                                 default = nil)
  if valid_606655 != nil:
    section.add "X-Amz-Date", valid_606655
  var valid_606656 = header.getOrDefault("X-Amz-Credential")
  valid_606656 = validateParameter(valid_606656, JString, required = false,
                                 default = nil)
  if valid_606656 != nil:
    section.add "X-Amz-Credential", valid_606656
  var valid_606657 = header.getOrDefault("X-Amz-Security-Token")
  valid_606657 = validateParameter(valid_606657, JString, required = false,
                                 default = nil)
  if valid_606657 != nil:
    section.add "X-Amz-Security-Token", valid_606657
  var valid_606658 = header.getOrDefault("X-Amz-Algorithm")
  valid_606658 = validateParameter(valid_606658, JString, required = false,
                                 default = nil)
  if valid_606658 != nil:
    section.add "X-Amz-Algorithm", valid_606658
  var valid_606659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606659 = validateParameter(valid_606659, JString, required = false,
                                 default = nil)
  if valid_606659 != nil:
    section.add "X-Amz-SignedHeaders", valid_606659
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_606660 = formData.getOrDefault("ResetAllParameters")
  valid_606660 = validateParameter(valid_606660, JBool, required = false, default = nil)
  if valid_606660 != nil:
    section.add "ResetAllParameters", valid_606660
  var valid_606661 = formData.getOrDefault("Parameters")
  valid_606661 = validateParameter(valid_606661, JArray, required = false,
                                 default = nil)
  if valid_606661 != nil:
    section.add "Parameters", valid_606661
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606662 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606662 = validateParameter(valid_606662, JString, required = true,
                                 default = nil)
  if valid_606662 != nil:
    section.add "DBClusterParameterGroupName", valid_606662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606663: Call_PostResetDBClusterParameterGroup_606648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606663.validator(path, query, header, formData, body)
  let scheme = call_606663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606663.url(scheme.get, call_606663.host, call_606663.base,
                         call_606663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606663, url, valid)

proc call*(call_606664: Call_PostResetDBClusterParameterGroup_606648;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_606665 = newJObject()
  var formData_606666 = newJObject()
  add(formData_606666, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_606665, "Action", newJString(Action))
  if Parameters != nil:
    formData_606666.add "Parameters", Parameters
  add(formData_606666, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606665, "Version", newJString(Version))
  result = call_606664.call(nil, query_606665, nil, formData_606666, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_606648(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_606649, base: "/",
    url: url_PostResetDBClusterParameterGroup_606650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_606630 = ref object of OpenApiRestCall_601389
proc url_GetResetDBClusterParameterGroup_606632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_606631(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606633 = query.getOrDefault("Parameters")
  valid_606633 = validateParameter(valid_606633, JArray, required = false,
                                 default = nil)
  if valid_606633 != nil:
    section.add "Parameters", valid_606633
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606634 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606634 = validateParameter(valid_606634, JString, required = true,
                                 default = nil)
  if valid_606634 != nil:
    section.add "DBClusterParameterGroupName", valid_606634
  var valid_606635 = query.getOrDefault("ResetAllParameters")
  valid_606635 = validateParameter(valid_606635, JBool, required = false, default = nil)
  if valid_606635 != nil:
    section.add "ResetAllParameters", valid_606635
  var valid_606636 = query.getOrDefault("Action")
  valid_606636 = validateParameter(valid_606636, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_606636 != nil:
    section.add "Action", valid_606636
  var valid_606637 = query.getOrDefault("Version")
  valid_606637 = validateParameter(valid_606637, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606637 != nil:
    section.add "Version", valid_606637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606638 = header.getOrDefault("X-Amz-Signature")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "X-Amz-Signature", valid_606638
  var valid_606639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "X-Amz-Content-Sha256", valid_606639
  var valid_606640 = header.getOrDefault("X-Amz-Date")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "X-Amz-Date", valid_606640
  var valid_606641 = header.getOrDefault("X-Amz-Credential")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "X-Amz-Credential", valid_606641
  var valid_606642 = header.getOrDefault("X-Amz-Security-Token")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "X-Amz-Security-Token", valid_606642
  var valid_606643 = header.getOrDefault("X-Amz-Algorithm")
  valid_606643 = validateParameter(valid_606643, JString, required = false,
                                 default = nil)
  if valid_606643 != nil:
    section.add "X-Amz-Algorithm", valid_606643
  var valid_606644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606644 = validateParameter(valid_606644, JString, required = false,
                                 default = nil)
  if valid_606644 != nil:
    section.add "X-Amz-SignedHeaders", valid_606644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606645: Call_GetResetDBClusterParameterGroup_606630;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606645.validator(path, query, header, formData, body)
  let scheme = call_606645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606645.url(scheme.get, call_606645.host, call_606645.base,
                         call_606645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606645, url, valid)

proc call*(call_606646: Call_GetResetDBClusterParameterGroup_606630;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606647 = newJObject()
  if Parameters != nil:
    query_606647.add "Parameters", Parameters
  add(query_606647, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606647, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_606647, "Action", newJString(Action))
  add(query_606647, "Version", newJString(Version))
  result = call_606646.call(nil, query_606647, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_606630(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_606631, base: "/",
    url: url_GetResetDBClusterParameterGroup_606632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_606685 = ref object of OpenApiRestCall_601389
proc url_PostResetDBParameterGroup_606687(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_606686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606688 = query.getOrDefault("Action")
  valid_606688 = validateParameter(valid_606688, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_606688 != nil:
    section.add "Action", valid_606688
  var valid_606689 = query.getOrDefault("Version")
  valid_606689 = validateParameter(valid_606689, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606689 != nil:
    section.add "Version", valid_606689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606690 = header.getOrDefault("X-Amz-Signature")
  valid_606690 = validateParameter(valid_606690, JString, required = false,
                                 default = nil)
  if valid_606690 != nil:
    section.add "X-Amz-Signature", valid_606690
  var valid_606691 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606691 = validateParameter(valid_606691, JString, required = false,
                                 default = nil)
  if valid_606691 != nil:
    section.add "X-Amz-Content-Sha256", valid_606691
  var valid_606692 = header.getOrDefault("X-Amz-Date")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "X-Amz-Date", valid_606692
  var valid_606693 = header.getOrDefault("X-Amz-Credential")
  valid_606693 = validateParameter(valid_606693, JString, required = false,
                                 default = nil)
  if valid_606693 != nil:
    section.add "X-Amz-Credential", valid_606693
  var valid_606694 = header.getOrDefault("X-Amz-Security-Token")
  valid_606694 = validateParameter(valid_606694, JString, required = false,
                                 default = nil)
  if valid_606694 != nil:
    section.add "X-Amz-Security-Token", valid_606694
  var valid_606695 = header.getOrDefault("X-Amz-Algorithm")
  valid_606695 = validateParameter(valid_606695, JString, required = false,
                                 default = nil)
  if valid_606695 != nil:
    section.add "X-Amz-Algorithm", valid_606695
  var valid_606696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606696 = validateParameter(valid_606696, JString, required = false,
                                 default = nil)
  if valid_606696 != nil:
    section.add "X-Amz-SignedHeaders", valid_606696
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_606697 = formData.getOrDefault("ResetAllParameters")
  valid_606697 = validateParameter(valid_606697, JBool, required = false, default = nil)
  if valid_606697 != nil:
    section.add "ResetAllParameters", valid_606697
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_606698 = formData.getOrDefault("DBParameterGroupName")
  valid_606698 = validateParameter(valid_606698, JString, required = true,
                                 default = nil)
  if valid_606698 != nil:
    section.add "DBParameterGroupName", valid_606698
  var valid_606699 = formData.getOrDefault("Parameters")
  valid_606699 = validateParameter(valid_606699, JArray, required = false,
                                 default = nil)
  if valid_606699 != nil:
    section.add "Parameters", valid_606699
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606700: Call_PostResetDBParameterGroup_606685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_606700.validator(path, query, header, formData, body)
  let scheme = call_606700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606700.url(scheme.get, call_606700.host, call_606700.base,
                         call_606700.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606700, url, valid)

proc call*(call_606701: Call_PostResetDBParameterGroup_606685;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_606702 = newJObject()
  var formData_606703 = newJObject()
  add(formData_606703, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_606703, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606702, "Action", newJString(Action))
  if Parameters != nil:
    formData_606703.add "Parameters", Parameters
  add(query_606702, "Version", newJString(Version))
  result = call_606701.call(nil, query_606702, nil, formData_606703, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_606685(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_606686, base: "/",
    url: url_PostResetDBParameterGroup_606687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_606667 = ref object of OpenApiRestCall_601389
proc url_GetResetDBParameterGroup_606669(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_606668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_606670 = query.getOrDefault("DBParameterGroupName")
  valid_606670 = validateParameter(valid_606670, JString, required = true,
                                 default = nil)
  if valid_606670 != nil:
    section.add "DBParameterGroupName", valid_606670
  var valid_606671 = query.getOrDefault("Parameters")
  valid_606671 = validateParameter(valid_606671, JArray, required = false,
                                 default = nil)
  if valid_606671 != nil:
    section.add "Parameters", valid_606671
  var valid_606672 = query.getOrDefault("ResetAllParameters")
  valid_606672 = validateParameter(valid_606672, JBool, required = false, default = nil)
  if valid_606672 != nil:
    section.add "ResetAllParameters", valid_606672
  var valid_606673 = query.getOrDefault("Action")
  valid_606673 = validateParameter(valid_606673, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_606673 != nil:
    section.add "Action", valid_606673
  var valid_606674 = query.getOrDefault("Version")
  valid_606674 = validateParameter(valid_606674, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606674 != nil:
    section.add "Version", valid_606674
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606675 = header.getOrDefault("X-Amz-Signature")
  valid_606675 = validateParameter(valid_606675, JString, required = false,
                                 default = nil)
  if valid_606675 != nil:
    section.add "X-Amz-Signature", valid_606675
  var valid_606676 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "X-Amz-Content-Sha256", valid_606676
  var valid_606677 = header.getOrDefault("X-Amz-Date")
  valid_606677 = validateParameter(valid_606677, JString, required = false,
                                 default = nil)
  if valid_606677 != nil:
    section.add "X-Amz-Date", valid_606677
  var valid_606678 = header.getOrDefault("X-Amz-Credential")
  valid_606678 = validateParameter(valid_606678, JString, required = false,
                                 default = nil)
  if valid_606678 != nil:
    section.add "X-Amz-Credential", valid_606678
  var valid_606679 = header.getOrDefault("X-Amz-Security-Token")
  valid_606679 = validateParameter(valid_606679, JString, required = false,
                                 default = nil)
  if valid_606679 != nil:
    section.add "X-Amz-Security-Token", valid_606679
  var valid_606680 = header.getOrDefault("X-Amz-Algorithm")
  valid_606680 = validateParameter(valid_606680, JString, required = false,
                                 default = nil)
  if valid_606680 != nil:
    section.add "X-Amz-Algorithm", valid_606680
  var valid_606681 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606681 = validateParameter(valid_606681, JString, required = false,
                                 default = nil)
  if valid_606681 != nil:
    section.add "X-Amz-SignedHeaders", valid_606681
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606682: Call_GetResetDBParameterGroup_606667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_606682.validator(path, query, header, formData, body)
  let scheme = call_606682.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606682.url(scheme.get, call_606682.host, call_606682.base,
                         call_606682.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606682, url, valid)

proc call*(call_606683: Call_GetResetDBParameterGroup_606667;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606684 = newJObject()
  add(query_606684, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_606684.add "Parameters", Parameters
  add(query_606684, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_606684, "Action", newJString(Action))
  add(query_606684, "Version", newJString(Version))
  result = call_606683.call(nil, query_606684, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_606667(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_606668, base: "/",
    url: url_GetResetDBParameterGroup_606669, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_606748 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBClusterFromS3_606750(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_606749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606751 = query.getOrDefault("Action")
  valid_606751 = validateParameter(valid_606751, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_606751 != nil:
    section.add "Action", valid_606751
  var valid_606752 = query.getOrDefault("Version")
  valid_606752 = validateParameter(valid_606752, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606752 != nil:
    section.add "Version", valid_606752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606753 = header.getOrDefault("X-Amz-Signature")
  valid_606753 = validateParameter(valid_606753, JString, required = false,
                                 default = nil)
  if valid_606753 != nil:
    section.add "X-Amz-Signature", valid_606753
  var valid_606754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606754 = validateParameter(valid_606754, JString, required = false,
                                 default = nil)
  if valid_606754 != nil:
    section.add "X-Amz-Content-Sha256", valid_606754
  var valid_606755 = header.getOrDefault("X-Amz-Date")
  valid_606755 = validateParameter(valid_606755, JString, required = false,
                                 default = nil)
  if valid_606755 != nil:
    section.add "X-Amz-Date", valid_606755
  var valid_606756 = header.getOrDefault("X-Amz-Credential")
  valid_606756 = validateParameter(valid_606756, JString, required = false,
                                 default = nil)
  if valid_606756 != nil:
    section.add "X-Amz-Credential", valid_606756
  var valid_606757 = header.getOrDefault("X-Amz-Security-Token")
  valid_606757 = validateParameter(valid_606757, JString, required = false,
                                 default = nil)
  if valid_606757 != nil:
    section.add "X-Amz-Security-Token", valid_606757
  var valid_606758 = header.getOrDefault("X-Amz-Algorithm")
  valid_606758 = validateParameter(valid_606758, JString, required = false,
                                 default = nil)
  if valid_606758 != nil:
    section.add "X-Amz-Algorithm", valid_606758
  var valid_606759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606759 = validateParameter(valid_606759, JString, required = false,
                                 default = nil)
  if valid_606759 != nil:
    section.add "X-Amz-SignedHeaders", valid_606759
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_606760 = formData.getOrDefault("S3Prefix")
  valid_606760 = validateParameter(valid_606760, JString, required = false,
                                 default = nil)
  if valid_606760 != nil:
    section.add "S3Prefix", valid_606760
  var valid_606761 = formData.getOrDefault("Port")
  valid_606761 = validateParameter(valid_606761, JInt, required = false, default = nil)
  if valid_606761 != nil:
    section.add "Port", valid_606761
  var valid_606762 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606762 = validateParameter(valid_606762, JString, required = false,
                                 default = nil)
  if valid_606762 != nil:
    section.add "PreferredMaintenanceWindow", valid_606762
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_606763 = formData.getOrDefault("S3IngestionRoleArn")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = nil)
  if valid_606763 != nil:
    section.add "S3IngestionRoleArn", valid_606763
  var valid_606764 = formData.getOrDefault("PreferredBackupWindow")
  valid_606764 = validateParameter(valid_606764, JString, required = false,
                                 default = nil)
  if valid_606764 != nil:
    section.add "PreferredBackupWindow", valid_606764
  var valid_606765 = formData.getOrDefault("MasterUserPassword")
  valid_606765 = validateParameter(valid_606765, JString, required = true,
                                 default = nil)
  if valid_606765 != nil:
    section.add "MasterUserPassword", valid_606765
  var valid_606766 = formData.getOrDefault("MasterUsername")
  valid_606766 = validateParameter(valid_606766, JString, required = true,
                                 default = nil)
  if valid_606766 != nil:
    section.add "MasterUsername", valid_606766
  var valid_606767 = formData.getOrDefault("SourceEngine")
  valid_606767 = validateParameter(valid_606767, JString, required = true,
                                 default = nil)
  if valid_606767 != nil:
    section.add "SourceEngine", valid_606767
  var valid_606768 = formData.getOrDefault("EngineVersion")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "EngineVersion", valid_606768
  var valid_606769 = formData.getOrDefault("BacktrackWindow")
  valid_606769 = validateParameter(valid_606769, JInt, required = false, default = nil)
  if valid_606769 != nil:
    section.add "BacktrackWindow", valid_606769
  var valid_606770 = formData.getOrDefault("DatabaseName")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "DatabaseName", valid_606770
  var valid_606771 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606771 = validateParameter(valid_606771, JArray, required = false,
                                 default = nil)
  if valid_606771 != nil:
    section.add "VpcSecurityGroupIds", valid_606771
  var valid_606772 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606772 = validateParameter(valid_606772, JBool, required = false, default = nil)
  if valid_606772 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606772
  var valid_606773 = formData.getOrDefault("AvailabilityZones")
  valid_606773 = validateParameter(valid_606773, JArray, required = false,
                                 default = nil)
  if valid_606773 != nil:
    section.add "AvailabilityZones", valid_606773
  var valid_606774 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606774 = validateParameter(valid_606774, JInt, required = false, default = nil)
  if valid_606774 != nil:
    section.add "BackupRetentionPeriod", valid_606774
  var valid_606775 = formData.getOrDefault("Engine")
  valid_606775 = validateParameter(valid_606775, JString, required = true,
                                 default = nil)
  if valid_606775 != nil:
    section.add "Engine", valid_606775
  var valid_606776 = formData.getOrDefault("KmsKeyId")
  valid_606776 = validateParameter(valid_606776, JString, required = false,
                                 default = nil)
  if valid_606776 != nil:
    section.add "KmsKeyId", valid_606776
  var valid_606777 = formData.getOrDefault("S3BucketName")
  valid_606777 = validateParameter(valid_606777, JString, required = true,
                                 default = nil)
  if valid_606777 != nil:
    section.add "S3BucketName", valid_606777
  var valid_606778 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606778 = validateParameter(valid_606778, JArray, required = false,
                                 default = nil)
  if valid_606778 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606778
  var valid_606779 = formData.getOrDefault("SourceEngineVersion")
  valid_606779 = validateParameter(valid_606779, JString, required = true,
                                 default = nil)
  if valid_606779 != nil:
    section.add "SourceEngineVersion", valid_606779
  var valid_606780 = formData.getOrDefault("Tags")
  valid_606780 = validateParameter(valid_606780, JArray, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "Tags", valid_606780
  var valid_606781 = formData.getOrDefault("DBSubnetGroupName")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "DBSubnetGroupName", valid_606781
  var valid_606782 = formData.getOrDefault("OptionGroupName")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "OptionGroupName", valid_606782
  var valid_606783 = formData.getOrDefault("CharacterSetName")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "CharacterSetName", valid_606783
  var valid_606784 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "DBClusterParameterGroupName", valid_606784
  var valid_606785 = formData.getOrDefault("StorageEncrypted")
  valid_606785 = validateParameter(valid_606785, JBool, required = false, default = nil)
  if valid_606785 != nil:
    section.add "StorageEncrypted", valid_606785
  var valid_606786 = formData.getOrDefault("DBClusterIdentifier")
  valid_606786 = validateParameter(valid_606786, JString, required = true,
                                 default = nil)
  if valid_606786 != nil:
    section.add "DBClusterIdentifier", valid_606786
  var valid_606787 = formData.getOrDefault("DeletionProtection")
  valid_606787 = validateParameter(valid_606787, JBool, required = false, default = nil)
  if valid_606787 != nil:
    section.add "DeletionProtection", valid_606787
  var valid_606788 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606788 = validateParameter(valid_606788, JBool, required = false, default = nil)
  if valid_606788 != nil:
    section.add "CopyTagsToSnapshot", valid_606788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606789: Call_PostRestoreDBClusterFromS3_606748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606789.validator(path, query, header, formData, body)
  let scheme = call_606789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606789.url(scheme.get, call_606789.host, call_606789.base,
                         call_606789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606789, url, valid)

proc call*(call_606790: Call_PostRestoreDBClusterFromS3_606748;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_606791 = newJObject()
  var formData_606792 = newJObject()
  add(formData_606792, "S3Prefix", newJString(S3Prefix))
  add(formData_606792, "Port", newJInt(Port))
  add(formData_606792, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606792, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_606792, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606792, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606792, "MasterUsername", newJString(MasterUsername))
  add(formData_606792, "SourceEngine", newJString(SourceEngine))
  add(formData_606792, "EngineVersion", newJString(EngineVersion))
  add(formData_606792, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_606792, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_606792.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606792, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_606792.add "AvailabilityZones", AvailabilityZones
  add(formData_606792, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606792, "Engine", newJString(Engine))
  add(formData_606792, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606792, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_606792.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_606792, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_606791, "Action", newJString(Action))
  if Tags != nil:
    formData_606792.add "Tags", Tags
  add(formData_606792, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606792, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606792, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606792, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606791, "Version", newJString(Version))
  add(formData_606792, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606792, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606792, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606792, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_606790.call(nil, query_606791, nil, formData_606792, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_606748(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_606749, base: "/",
    url: url_PostRestoreDBClusterFromS3_606750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_606704 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBClusterFromS3_606706(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_606705(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606707 = query.getOrDefault("DatabaseName")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "DatabaseName", valid_606707
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_606708 = query.getOrDefault("SourceEngineVersion")
  valid_606708 = validateParameter(valid_606708, JString, required = true,
                                 default = nil)
  if valid_606708 != nil:
    section.add "SourceEngineVersion", valid_606708
  var valid_606709 = query.getOrDefault("StorageEncrypted")
  valid_606709 = validateParameter(valid_606709, JBool, required = false, default = nil)
  if valid_606709 != nil:
    section.add "StorageEncrypted", valid_606709
  var valid_606710 = query.getOrDefault("Engine")
  valid_606710 = validateParameter(valid_606710, JString, required = true,
                                 default = nil)
  if valid_606710 != nil:
    section.add "Engine", valid_606710
  var valid_606711 = query.getOrDefault("SourceEngine")
  valid_606711 = validateParameter(valid_606711, JString, required = true,
                                 default = nil)
  if valid_606711 != nil:
    section.add "SourceEngine", valid_606711
  var valid_606712 = query.getOrDefault("DeletionProtection")
  valid_606712 = validateParameter(valid_606712, JBool, required = false, default = nil)
  if valid_606712 != nil:
    section.add "DeletionProtection", valid_606712
  var valid_606713 = query.getOrDefault("CharacterSetName")
  valid_606713 = validateParameter(valid_606713, JString, required = false,
                                 default = nil)
  if valid_606713 != nil:
    section.add "CharacterSetName", valid_606713
  var valid_606714 = query.getOrDefault("S3Prefix")
  valid_606714 = validateParameter(valid_606714, JString, required = false,
                                 default = nil)
  if valid_606714 != nil:
    section.add "S3Prefix", valid_606714
  var valid_606715 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606715 = validateParameter(valid_606715, JBool, required = false, default = nil)
  if valid_606715 != nil:
    section.add "CopyTagsToSnapshot", valid_606715
  var valid_606716 = query.getOrDefault("Tags")
  valid_606716 = validateParameter(valid_606716, JArray, required = false,
                                 default = nil)
  if valid_606716 != nil:
    section.add "Tags", valid_606716
  var valid_606717 = query.getOrDefault("KmsKeyId")
  valid_606717 = validateParameter(valid_606717, JString, required = false,
                                 default = nil)
  if valid_606717 != nil:
    section.add "KmsKeyId", valid_606717
  var valid_606718 = query.getOrDefault("DBClusterIdentifier")
  valid_606718 = validateParameter(valid_606718, JString, required = true,
                                 default = nil)
  if valid_606718 != nil:
    section.add "DBClusterIdentifier", valid_606718
  var valid_606719 = query.getOrDefault("BacktrackWindow")
  valid_606719 = validateParameter(valid_606719, JInt, required = false, default = nil)
  if valid_606719 != nil:
    section.add "BacktrackWindow", valid_606719
  var valid_606720 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606720 = validateParameter(valid_606720, JString, required = false,
                                 default = nil)
  if valid_606720 != nil:
    section.add "DBClusterParameterGroupName", valid_606720
  var valid_606721 = query.getOrDefault("S3BucketName")
  valid_606721 = validateParameter(valid_606721, JString, required = true,
                                 default = nil)
  if valid_606721 != nil:
    section.add "S3BucketName", valid_606721
  var valid_606722 = query.getOrDefault("AvailabilityZones")
  valid_606722 = validateParameter(valid_606722, JArray, required = false,
                                 default = nil)
  if valid_606722 != nil:
    section.add "AvailabilityZones", valid_606722
  var valid_606723 = query.getOrDefault("MasterUsername")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = nil)
  if valid_606723 != nil:
    section.add "MasterUsername", valid_606723
  var valid_606724 = query.getOrDefault("BackupRetentionPeriod")
  valid_606724 = validateParameter(valid_606724, JInt, required = false, default = nil)
  if valid_606724 != nil:
    section.add "BackupRetentionPeriod", valid_606724
  var valid_606725 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606725 = validateParameter(valid_606725, JBool, required = false, default = nil)
  if valid_606725 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606725
  var valid_606726 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606726 = validateParameter(valid_606726, JArray, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606726
  var valid_606727 = query.getOrDefault("EngineVersion")
  valid_606727 = validateParameter(valid_606727, JString, required = false,
                                 default = nil)
  if valid_606727 != nil:
    section.add "EngineVersion", valid_606727
  var valid_606728 = query.getOrDefault("Action")
  valid_606728 = validateParameter(valid_606728, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_606728 != nil:
    section.add "Action", valid_606728
  var valid_606729 = query.getOrDefault("Port")
  valid_606729 = validateParameter(valid_606729, JInt, required = false, default = nil)
  if valid_606729 != nil:
    section.add "Port", valid_606729
  var valid_606730 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606730 = validateParameter(valid_606730, JArray, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "VpcSecurityGroupIds", valid_606730
  var valid_606731 = query.getOrDefault("MasterUserPassword")
  valid_606731 = validateParameter(valid_606731, JString, required = true,
                                 default = nil)
  if valid_606731 != nil:
    section.add "MasterUserPassword", valid_606731
  var valid_606732 = query.getOrDefault("OptionGroupName")
  valid_606732 = validateParameter(valid_606732, JString, required = false,
                                 default = nil)
  if valid_606732 != nil:
    section.add "OptionGroupName", valid_606732
  var valid_606733 = query.getOrDefault("DBSubnetGroupName")
  valid_606733 = validateParameter(valid_606733, JString, required = false,
                                 default = nil)
  if valid_606733 != nil:
    section.add "DBSubnetGroupName", valid_606733
  var valid_606734 = query.getOrDefault("PreferredBackupWindow")
  valid_606734 = validateParameter(valid_606734, JString, required = false,
                                 default = nil)
  if valid_606734 != nil:
    section.add "PreferredBackupWindow", valid_606734
  var valid_606735 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606735 = validateParameter(valid_606735, JString, required = false,
                                 default = nil)
  if valid_606735 != nil:
    section.add "PreferredMaintenanceWindow", valid_606735
  var valid_606736 = query.getOrDefault("S3IngestionRoleArn")
  valid_606736 = validateParameter(valid_606736, JString, required = true,
                                 default = nil)
  if valid_606736 != nil:
    section.add "S3IngestionRoleArn", valid_606736
  var valid_606737 = query.getOrDefault("Version")
  valid_606737 = validateParameter(valid_606737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606737 != nil:
    section.add "Version", valid_606737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606738 = header.getOrDefault("X-Amz-Signature")
  valid_606738 = validateParameter(valid_606738, JString, required = false,
                                 default = nil)
  if valid_606738 != nil:
    section.add "X-Amz-Signature", valid_606738
  var valid_606739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606739 = validateParameter(valid_606739, JString, required = false,
                                 default = nil)
  if valid_606739 != nil:
    section.add "X-Amz-Content-Sha256", valid_606739
  var valid_606740 = header.getOrDefault("X-Amz-Date")
  valid_606740 = validateParameter(valid_606740, JString, required = false,
                                 default = nil)
  if valid_606740 != nil:
    section.add "X-Amz-Date", valid_606740
  var valid_606741 = header.getOrDefault("X-Amz-Credential")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-Credential", valid_606741
  var valid_606742 = header.getOrDefault("X-Amz-Security-Token")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "X-Amz-Security-Token", valid_606742
  var valid_606743 = header.getOrDefault("X-Amz-Algorithm")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Algorithm", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-SignedHeaders", valid_606744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606745: Call_GetRestoreDBClusterFromS3_606704; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606745.validator(path, query, header, formData, body)
  let scheme = call_606745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606745.url(scheme.get, call_606745.host, call_606745.base,
                         call_606745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606745, url, valid)

proc call*(call_606746: Call_GetRestoreDBClusterFromS3_606704;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_606747 = newJObject()
  add(query_606747, "DatabaseName", newJString(DatabaseName))
  add(query_606747, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_606747, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606747, "Engine", newJString(Engine))
  add(query_606747, "SourceEngine", newJString(SourceEngine))
  add(query_606747, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606747, "CharacterSetName", newJString(CharacterSetName))
  add(query_606747, "S3Prefix", newJString(S3Prefix))
  add(query_606747, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_606747.add "Tags", Tags
  add(query_606747, "KmsKeyId", newJString(KmsKeyId))
  add(query_606747, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606747, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_606747, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606747, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_606747.add "AvailabilityZones", AvailabilityZones
  add(query_606747, "MasterUsername", newJString(MasterUsername))
  add(query_606747, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_606747, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_606747.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606747, "EngineVersion", newJString(EngineVersion))
  add(query_606747, "Action", newJString(Action))
  add(query_606747, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_606747.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606747, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606747, "OptionGroupName", newJString(OptionGroupName))
  add(query_606747, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606747, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606747, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606747, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_606747, "Version", newJString(Version))
  result = call_606746.call(nil, query_606747, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_606704(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_606705, base: "/",
    url: url_GetRestoreDBClusterFromS3_606706,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_606832 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBClusterFromSnapshot_606834(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_606833(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606835 = query.getOrDefault("Action")
  valid_606835 = validateParameter(valid_606835, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_606835 != nil:
    section.add "Action", valid_606835
  var valid_606836 = query.getOrDefault("Version")
  valid_606836 = validateParameter(valid_606836, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606836 != nil:
    section.add "Version", valid_606836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606837 = header.getOrDefault("X-Amz-Signature")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-Signature", valid_606837
  var valid_606838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606838 = validateParameter(valid_606838, JString, required = false,
                                 default = nil)
  if valid_606838 != nil:
    section.add "X-Amz-Content-Sha256", valid_606838
  var valid_606839 = header.getOrDefault("X-Amz-Date")
  valid_606839 = validateParameter(valid_606839, JString, required = false,
                                 default = nil)
  if valid_606839 != nil:
    section.add "X-Amz-Date", valid_606839
  var valid_606840 = header.getOrDefault("X-Amz-Credential")
  valid_606840 = validateParameter(valid_606840, JString, required = false,
                                 default = nil)
  if valid_606840 != nil:
    section.add "X-Amz-Credential", valid_606840
  var valid_606841 = header.getOrDefault("X-Amz-Security-Token")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Security-Token", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-Algorithm")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-Algorithm", valid_606842
  var valid_606843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606843 = validateParameter(valid_606843, JString, required = false,
                                 default = nil)
  if valid_606843 != nil:
    section.add "X-Amz-SignedHeaders", valid_606843
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_606844 = formData.getOrDefault("Port")
  valid_606844 = validateParameter(valid_606844, JInt, required = false, default = nil)
  if valid_606844 != nil:
    section.add "Port", valid_606844
  var valid_606845 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_606845 = validateParameter(valid_606845, JString, required = false,
                                 default = nil)
  if valid_606845 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_606845
  var valid_606846 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_606846 = validateParameter(valid_606846, JString, required = false,
                                 default = nil)
  if valid_606846 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_606846
  var valid_606847 = formData.getOrDefault("EngineVersion")
  valid_606847 = validateParameter(valid_606847, JString, required = false,
                                 default = nil)
  if valid_606847 != nil:
    section.add "EngineVersion", valid_606847
  var valid_606848 = formData.getOrDefault("BacktrackWindow")
  valid_606848 = validateParameter(valid_606848, JInt, required = false, default = nil)
  if valid_606848 != nil:
    section.add "BacktrackWindow", valid_606848
  var valid_606849 = formData.getOrDefault("DatabaseName")
  valid_606849 = validateParameter(valid_606849, JString, required = false,
                                 default = nil)
  if valid_606849 != nil:
    section.add "DatabaseName", valid_606849
  var valid_606850 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606850 = validateParameter(valid_606850, JArray, required = false,
                                 default = nil)
  if valid_606850 != nil:
    section.add "VpcSecurityGroupIds", valid_606850
  var valid_606851 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606851 = validateParameter(valid_606851, JBool, required = false, default = nil)
  if valid_606851 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606851
  var valid_606852 = formData.getOrDefault("AvailabilityZones")
  valid_606852 = validateParameter(valid_606852, JArray, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "AvailabilityZones", valid_606852
  var valid_606853 = formData.getOrDefault("KmsKeyId")
  valid_606853 = validateParameter(valid_606853, JString, required = false,
                                 default = nil)
  if valid_606853 != nil:
    section.add "KmsKeyId", valid_606853
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_606854 = formData.getOrDefault("Engine")
  valid_606854 = validateParameter(valid_606854, JString, required = true,
                                 default = nil)
  if valid_606854 != nil:
    section.add "Engine", valid_606854
  var valid_606855 = formData.getOrDefault("EngineMode")
  valid_606855 = validateParameter(valid_606855, JString, required = false,
                                 default = nil)
  if valid_606855 != nil:
    section.add "EngineMode", valid_606855
  var valid_606856 = formData.getOrDefault("SnapshotIdentifier")
  valid_606856 = validateParameter(valid_606856, JString, required = true,
                                 default = nil)
  if valid_606856 != nil:
    section.add "SnapshotIdentifier", valid_606856
  var valid_606857 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606857 = validateParameter(valid_606857, JArray, required = false,
                                 default = nil)
  if valid_606857 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606857
  var valid_606858 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_606858 = validateParameter(valid_606858, JString, required = false,
                                 default = nil)
  if valid_606858 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_606858
  var valid_606859 = formData.getOrDefault("Tags")
  valid_606859 = validateParameter(valid_606859, JArray, required = false,
                                 default = nil)
  if valid_606859 != nil:
    section.add "Tags", valid_606859
  var valid_606860 = formData.getOrDefault("DBSubnetGroupName")
  valid_606860 = validateParameter(valid_606860, JString, required = false,
                                 default = nil)
  if valid_606860 != nil:
    section.add "DBSubnetGroupName", valid_606860
  var valid_606861 = formData.getOrDefault("OptionGroupName")
  valid_606861 = validateParameter(valid_606861, JString, required = false,
                                 default = nil)
  if valid_606861 != nil:
    section.add "OptionGroupName", valid_606861
  var valid_606862 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_606862 = validateParameter(valid_606862, JString, required = false,
                                 default = nil)
  if valid_606862 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_606862
  var valid_606863 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606863 = validateParameter(valid_606863, JString, required = false,
                                 default = nil)
  if valid_606863 != nil:
    section.add "DBClusterParameterGroupName", valid_606863
  var valid_606864 = formData.getOrDefault("DBClusterIdentifier")
  valid_606864 = validateParameter(valid_606864, JString, required = true,
                                 default = nil)
  if valid_606864 != nil:
    section.add "DBClusterIdentifier", valid_606864
  var valid_606865 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_606865
  var valid_606866 = formData.getOrDefault("DeletionProtection")
  valid_606866 = validateParameter(valid_606866, JBool, required = false, default = nil)
  if valid_606866 != nil:
    section.add "DeletionProtection", valid_606866
  var valid_606867 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606867 = validateParameter(valid_606867, JBool, required = false, default = nil)
  if valid_606867 != nil:
    section.add "CopyTagsToSnapshot", valid_606867
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606868: Call_PostRestoreDBClusterFromSnapshot_606832;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606868.validator(path, query, header, formData, body)
  let scheme = call_606868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606868.url(scheme.get, call_606868.host, call_606868.base,
                         call_606868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606868, url, valid)

proc call*(call_606869: Call_PostRestoreDBClusterFromSnapshot_606832;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_606870 = newJObject()
  var formData_606871 = newJObject()
  add(formData_606871, "Port", newJInt(Port))
  add(formData_606871, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_606871, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_606871, "EngineVersion", newJString(EngineVersion))
  add(formData_606871, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_606871, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_606871.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606871, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_606871.add "AvailabilityZones", AvailabilityZones
  add(formData_606871, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606871, "Engine", newJString(Engine))
  add(formData_606871, "EngineMode", newJString(EngineMode))
  add(formData_606871, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_606871.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_606871, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_606870, "Action", newJString(Action))
  if Tags != nil:
    formData_606871.add "Tags", Tags
  add(formData_606871, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606871, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606871, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_606871, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606870, "Version", newJString(Version))
  add(formData_606871, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606871, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_606871, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606871, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_606869.call(nil, query_606870, nil, formData_606871, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_606832(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_606833, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_606834,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_606793 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBClusterFromSnapshot_606795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_606794(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_606796 = query.getOrDefault("DatabaseName")
  valid_606796 = validateParameter(valid_606796, JString, required = false,
                                 default = nil)
  if valid_606796 != nil:
    section.add "DatabaseName", valid_606796
  var valid_606797 = query.getOrDefault("DeletionProtection")
  valid_606797 = validateParameter(valid_606797, JBool, required = false, default = nil)
  if valid_606797 != nil:
    section.add "DeletionProtection", valid_606797
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606798 = query.getOrDefault("Engine")
  valid_606798 = validateParameter(valid_606798, JString, required = true,
                                 default = nil)
  if valid_606798 != nil:
    section.add "Engine", valid_606798
  var valid_606799 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606799 = validateParameter(valid_606799, JBool, required = false, default = nil)
  if valid_606799 != nil:
    section.add "CopyTagsToSnapshot", valid_606799
  var valid_606800 = query.getOrDefault("SnapshotIdentifier")
  valid_606800 = validateParameter(valid_606800, JString, required = true,
                                 default = nil)
  if valid_606800 != nil:
    section.add "SnapshotIdentifier", valid_606800
  var valid_606801 = query.getOrDefault("Tags")
  valid_606801 = validateParameter(valid_606801, JArray, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "Tags", valid_606801
  var valid_606802 = query.getOrDefault("KmsKeyId")
  valid_606802 = validateParameter(valid_606802, JString, required = false,
                                 default = nil)
  if valid_606802 != nil:
    section.add "KmsKeyId", valid_606802
  var valid_606803 = query.getOrDefault("DBClusterIdentifier")
  valid_606803 = validateParameter(valid_606803, JString, required = true,
                                 default = nil)
  if valid_606803 != nil:
    section.add "DBClusterIdentifier", valid_606803
  var valid_606804 = query.getOrDefault("BacktrackWindow")
  valid_606804 = validateParameter(valid_606804, JInt, required = false, default = nil)
  if valid_606804 != nil:
    section.add "BacktrackWindow", valid_606804
  var valid_606805 = query.getOrDefault("EngineMode")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "EngineMode", valid_606805
  var valid_606806 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "DBClusterParameterGroupName", valid_606806
  var valid_606807 = query.getOrDefault("AvailabilityZones")
  valid_606807 = validateParameter(valid_606807, JArray, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "AvailabilityZones", valid_606807
  var valid_606808 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_606808 = validateParameter(valid_606808, JString, required = false,
                                 default = nil)
  if valid_606808 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_606808
  var valid_606809 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_606809 = validateParameter(valid_606809, JString, required = false,
                                 default = nil)
  if valid_606809 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_606809
  var valid_606810 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_606810 = validateParameter(valid_606810, JString, required = false,
                                 default = nil)
  if valid_606810 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_606810
  var valid_606811 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606811 = validateParameter(valid_606811, JBool, required = false, default = nil)
  if valid_606811 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606811
  var valid_606812 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_606812 = validateParameter(valid_606812, JString, required = false,
                                 default = nil)
  if valid_606812 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_606812
  var valid_606813 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606813 = validateParameter(valid_606813, JArray, required = false,
                                 default = nil)
  if valid_606813 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606813
  var valid_606814 = query.getOrDefault("EngineVersion")
  valid_606814 = validateParameter(valid_606814, JString, required = false,
                                 default = nil)
  if valid_606814 != nil:
    section.add "EngineVersion", valid_606814
  var valid_606815 = query.getOrDefault("Action")
  valid_606815 = validateParameter(valid_606815, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_606815 != nil:
    section.add "Action", valid_606815
  var valid_606816 = query.getOrDefault("Port")
  valid_606816 = validateParameter(valid_606816, JInt, required = false, default = nil)
  if valid_606816 != nil:
    section.add "Port", valid_606816
  var valid_606817 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606817 = validateParameter(valid_606817, JArray, required = false,
                                 default = nil)
  if valid_606817 != nil:
    section.add "VpcSecurityGroupIds", valid_606817
  var valid_606818 = query.getOrDefault("OptionGroupName")
  valid_606818 = validateParameter(valid_606818, JString, required = false,
                                 default = nil)
  if valid_606818 != nil:
    section.add "OptionGroupName", valid_606818
  var valid_606819 = query.getOrDefault("DBSubnetGroupName")
  valid_606819 = validateParameter(valid_606819, JString, required = false,
                                 default = nil)
  if valid_606819 != nil:
    section.add "DBSubnetGroupName", valid_606819
  var valid_606820 = query.getOrDefault("Version")
  valid_606820 = validateParameter(valid_606820, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606820 != nil:
    section.add "Version", valid_606820
  var valid_606821 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_606821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606822 = header.getOrDefault("X-Amz-Signature")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-Signature", valid_606822
  var valid_606823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606823 = validateParameter(valid_606823, JString, required = false,
                                 default = nil)
  if valid_606823 != nil:
    section.add "X-Amz-Content-Sha256", valid_606823
  var valid_606824 = header.getOrDefault("X-Amz-Date")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "X-Amz-Date", valid_606824
  var valid_606825 = header.getOrDefault("X-Amz-Credential")
  valid_606825 = validateParameter(valid_606825, JString, required = false,
                                 default = nil)
  if valid_606825 != nil:
    section.add "X-Amz-Credential", valid_606825
  var valid_606826 = header.getOrDefault("X-Amz-Security-Token")
  valid_606826 = validateParameter(valid_606826, JString, required = false,
                                 default = nil)
  if valid_606826 != nil:
    section.add "X-Amz-Security-Token", valid_606826
  var valid_606827 = header.getOrDefault("X-Amz-Algorithm")
  valid_606827 = validateParameter(valid_606827, JString, required = false,
                                 default = nil)
  if valid_606827 != nil:
    section.add "X-Amz-Algorithm", valid_606827
  var valid_606828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606828 = validateParameter(valid_606828, JString, required = false,
                                 default = nil)
  if valid_606828 != nil:
    section.add "X-Amz-SignedHeaders", valid_606828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606829: Call_GetRestoreDBClusterFromSnapshot_606793;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606829.validator(path, query, header, formData, body)
  let scheme = call_606829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606829.url(scheme.get, call_606829.host, call_606829.base,
                         call_606829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606829, url, valid)

proc call*(call_606830: Call_GetRestoreDBClusterFromSnapshot_606793;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_606831 = newJObject()
  add(query_606831, "DatabaseName", newJString(DatabaseName))
  add(query_606831, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606831, "Engine", newJString(Engine))
  add(query_606831, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606831, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_606831.add "Tags", Tags
  add(query_606831, "KmsKeyId", newJString(KmsKeyId))
  add(query_606831, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606831, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_606831, "EngineMode", newJString(EngineMode))
  add(query_606831, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_606831.add "AvailabilityZones", AvailabilityZones
  add(query_606831, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_606831, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_606831, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_606831, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_606831, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_606831.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606831, "EngineVersion", newJString(EngineVersion))
  add(query_606831, "Action", newJString(Action))
  add(query_606831, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_606831.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606831, "OptionGroupName", newJString(OptionGroupName))
  add(query_606831, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606831, "Version", newJString(Version))
  add(query_606831, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_606830.call(nil, query_606831, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_606793(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_606794, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_606795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_606904 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBClusterToPointInTime_606906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_606905(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606907 = query.getOrDefault("Action")
  valid_606907 = validateParameter(valid_606907, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_606907 != nil:
    section.add "Action", valid_606907
  var valid_606908 = query.getOrDefault("Version")
  valid_606908 = validateParameter(valid_606908, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606908 != nil:
    section.add "Version", valid_606908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606909 = header.getOrDefault("X-Amz-Signature")
  valid_606909 = validateParameter(valid_606909, JString, required = false,
                                 default = nil)
  if valid_606909 != nil:
    section.add "X-Amz-Signature", valid_606909
  var valid_606910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606910 = validateParameter(valid_606910, JString, required = false,
                                 default = nil)
  if valid_606910 != nil:
    section.add "X-Amz-Content-Sha256", valid_606910
  var valid_606911 = header.getOrDefault("X-Amz-Date")
  valid_606911 = validateParameter(valid_606911, JString, required = false,
                                 default = nil)
  if valid_606911 != nil:
    section.add "X-Amz-Date", valid_606911
  var valid_606912 = header.getOrDefault("X-Amz-Credential")
  valid_606912 = validateParameter(valid_606912, JString, required = false,
                                 default = nil)
  if valid_606912 != nil:
    section.add "X-Amz-Credential", valid_606912
  var valid_606913 = header.getOrDefault("X-Amz-Security-Token")
  valid_606913 = validateParameter(valid_606913, JString, required = false,
                                 default = nil)
  if valid_606913 != nil:
    section.add "X-Amz-Security-Token", valid_606913
  var valid_606914 = header.getOrDefault("X-Amz-Algorithm")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-Algorithm", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-SignedHeaders", valid_606915
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_606916 = formData.getOrDefault("Port")
  valid_606916 = validateParameter(valid_606916, JInt, required = false, default = nil)
  if valid_606916 != nil:
    section.add "Port", valid_606916
  var valid_606917 = formData.getOrDefault("BacktrackWindow")
  valid_606917 = validateParameter(valid_606917, JInt, required = false, default = nil)
  if valid_606917 != nil:
    section.add "BacktrackWindow", valid_606917
  var valid_606918 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606918 = validateParameter(valid_606918, JArray, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "VpcSecurityGroupIds", valid_606918
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_606919 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_606919 = validateParameter(valid_606919, JString, required = true,
                                 default = nil)
  if valid_606919 != nil:
    section.add "SourceDBClusterIdentifier", valid_606919
  var valid_606920 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606920 = validateParameter(valid_606920, JBool, required = false, default = nil)
  if valid_606920 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606920
  var valid_606921 = formData.getOrDefault("KmsKeyId")
  valid_606921 = validateParameter(valid_606921, JString, required = false,
                                 default = nil)
  if valid_606921 != nil:
    section.add "KmsKeyId", valid_606921
  var valid_606922 = formData.getOrDefault("RestoreType")
  valid_606922 = validateParameter(valid_606922, JString, required = false,
                                 default = nil)
  if valid_606922 != nil:
    section.add "RestoreType", valid_606922
  var valid_606923 = formData.getOrDefault("UseLatestRestorableTime")
  valid_606923 = validateParameter(valid_606923, JBool, required = false, default = nil)
  if valid_606923 != nil:
    section.add "UseLatestRestorableTime", valid_606923
  var valid_606924 = formData.getOrDefault("RestoreToTime")
  valid_606924 = validateParameter(valid_606924, JString, required = false,
                                 default = nil)
  if valid_606924 != nil:
    section.add "RestoreToTime", valid_606924
  var valid_606925 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606925 = validateParameter(valid_606925, JArray, required = false,
                                 default = nil)
  if valid_606925 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606925
  var valid_606926 = formData.getOrDefault("Tags")
  valid_606926 = validateParameter(valid_606926, JArray, required = false,
                                 default = nil)
  if valid_606926 != nil:
    section.add "Tags", valid_606926
  var valid_606927 = formData.getOrDefault("DBSubnetGroupName")
  valid_606927 = validateParameter(valid_606927, JString, required = false,
                                 default = nil)
  if valid_606927 != nil:
    section.add "DBSubnetGroupName", valid_606927
  var valid_606928 = formData.getOrDefault("OptionGroupName")
  valid_606928 = validateParameter(valid_606928, JString, required = false,
                                 default = nil)
  if valid_606928 != nil:
    section.add "OptionGroupName", valid_606928
  var valid_606929 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606929 = validateParameter(valid_606929, JString, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "DBClusterParameterGroupName", valid_606929
  var valid_606930 = formData.getOrDefault("DBClusterIdentifier")
  valid_606930 = validateParameter(valid_606930, JString, required = true,
                                 default = nil)
  if valid_606930 != nil:
    section.add "DBClusterIdentifier", valid_606930
  var valid_606931 = formData.getOrDefault("DeletionProtection")
  valid_606931 = validateParameter(valid_606931, JBool, required = false, default = nil)
  if valid_606931 != nil:
    section.add "DeletionProtection", valid_606931
  var valid_606932 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606932 = validateParameter(valid_606932, JBool, required = false, default = nil)
  if valid_606932 != nil:
    section.add "CopyTagsToSnapshot", valid_606932
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606933: Call_PostRestoreDBClusterToPointInTime_606904;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606933.validator(path, query, header, formData, body)
  let scheme = call_606933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606933.url(scheme.get, call_606933.host, call_606933.base,
                         call_606933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606933, url, valid)

proc call*(call_606934: Call_PostRestoreDBClusterToPointInTime_606904;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_606935 = newJObject()
  var formData_606936 = newJObject()
  add(formData_606936, "Port", newJInt(Port))
  add(formData_606936, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_606936.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606936, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_606936, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_606936, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606936, "RestoreType", newJString(RestoreType))
  add(formData_606936, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_606936, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_606936.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606935, "Action", newJString(Action))
  if Tags != nil:
    formData_606936.add "Tags", Tags
  add(formData_606936, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606936, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606936, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606935, "Version", newJString(Version))
  add(formData_606936, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606936, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606936, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_606934.call(nil, query_606935, nil, formData_606936, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_606904(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_606905, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_606906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_606872 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBClusterToPointInTime_606874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_606873(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606875 = query.getOrDefault("DeletionProtection")
  valid_606875 = validateParameter(valid_606875, JBool, required = false, default = nil)
  if valid_606875 != nil:
    section.add "DeletionProtection", valid_606875
  var valid_606876 = query.getOrDefault("RestoreType")
  valid_606876 = validateParameter(valid_606876, JString, required = false,
                                 default = nil)
  if valid_606876 != nil:
    section.add "RestoreType", valid_606876
  var valid_606877 = query.getOrDefault("UseLatestRestorableTime")
  valid_606877 = validateParameter(valid_606877, JBool, required = false, default = nil)
  if valid_606877 != nil:
    section.add "UseLatestRestorableTime", valid_606877
  var valid_606878 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606878 = validateParameter(valid_606878, JBool, required = false, default = nil)
  if valid_606878 != nil:
    section.add "CopyTagsToSnapshot", valid_606878
  var valid_606879 = query.getOrDefault("Tags")
  valid_606879 = validateParameter(valid_606879, JArray, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "Tags", valid_606879
  var valid_606880 = query.getOrDefault("KmsKeyId")
  valid_606880 = validateParameter(valid_606880, JString, required = false,
                                 default = nil)
  if valid_606880 != nil:
    section.add "KmsKeyId", valid_606880
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606881 = query.getOrDefault("DBClusterIdentifier")
  valid_606881 = validateParameter(valid_606881, JString, required = true,
                                 default = nil)
  if valid_606881 != nil:
    section.add "DBClusterIdentifier", valid_606881
  var valid_606882 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_606882 = validateParameter(valid_606882, JString, required = true,
                                 default = nil)
  if valid_606882 != nil:
    section.add "SourceDBClusterIdentifier", valid_606882
  var valid_606883 = query.getOrDefault("BacktrackWindow")
  valid_606883 = validateParameter(valid_606883, JInt, required = false, default = nil)
  if valid_606883 != nil:
    section.add "BacktrackWindow", valid_606883
  var valid_606884 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606884 = validateParameter(valid_606884, JString, required = false,
                                 default = nil)
  if valid_606884 != nil:
    section.add "DBClusterParameterGroupName", valid_606884
  var valid_606885 = query.getOrDefault("RestoreToTime")
  valid_606885 = validateParameter(valid_606885, JString, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "RestoreToTime", valid_606885
  var valid_606886 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606886 = validateParameter(valid_606886, JBool, required = false, default = nil)
  if valid_606886 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606886
  var valid_606887 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606887 = validateParameter(valid_606887, JArray, required = false,
                                 default = nil)
  if valid_606887 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606887
  var valid_606888 = query.getOrDefault("Action")
  valid_606888 = validateParameter(valid_606888, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_606888 != nil:
    section.add "Action", valid_606888
  var valid_606889 = query.getOrDefault("Port")
  valid_606889 = validateParameter(valid_606889, JInt, required = false, default = nil)
  if valid_606889 != nil:
    section.add "Port", valid_606889
  var valid_606890 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606890 = validateParameter(valid_606890, JArray, required = false,
                                 default = nil)
  if valid_606890 != nil:
    section.add "VpcSecurityGroupIds", valid_606890
  var valid_606891 = query.getOrDefault("OptionGroupName")
  valid_606891 = validateParameter(valid_606891, JString, required = false,
                                 default = nil)
  if valid_606891 != nil:
    section.add "OptionGroupName", valid_606891
  var valid_606892 = query.getOrDefault("DBSubnetGroupName")
  valid_606892 = validateParameter(valid_606892, JString, required = false,
                                 default = nil)
  if valid_606892 != nil:
    section.add "DBSubnetGroupName", valid_606892
  var valid_606893 = query.getOrDefault("Version")
  valid_606893 = validateParameter(valid_606893, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606893 != nil:
    section.add "Version", valid_606893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606894 = header.getOrDefault("X-Amz-Signature")
  valid_606894 = validateParameter(valid_606894, JString, required = false,
                                 default = nil)
  if valid_606894 != nil:
    section.add "X-Amz-Signature", valid_606894
  var valid_606895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606895 = validateParameter(valid_606895, JString, required = false,
                                 default = nil)
  if valid_606895 != nil:
    section.add "X-Amz-Content-Sha256", valid_606895
  var valid_606896 = header.getOrDefault("X-Amz-Date")
  valid_606896 = validateParameter(valid_606896, JString, required = false,
                                 default = nil)
  if valid_606896 != nil:
    section.add "X-Amz-Date", valid_606896
  var valid_606897 = header.getOrDefault("X-Amz-Credential")
  valid_606897 = validateParameter(valid_606897, JString, required = false,
                                 default = nil)
  if valid_606897 != nil:
    section.add "X-Amz-Credential", valid_606897
  var valid_606898 = header.getOrDefault("X-Amz-Security-Token")
  valid_606898 = validateParameter(valid_606898, JString, required = false,
                                 default = nil)
  if valid_606898 != nil:
    section.add "X-Amz-Security-Token", valid_606898
  var valid_606899 = header.getOrDefault("X-Amz-Algorithm")
  valid_606899 = validateParameter(valid_606899, JString, required = false,
                                 default = nil)
  if valid_606899 != nil:
    section.add "X-Amz-Algorithm", valid_606899
  var valid_606900 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-SignedHeaders", valid_606900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606901: Call_GetRestoreDBClusterToPointInTime_606872;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606901.validator(path, query, header, formData, body)
  let scheme = call_606901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606901.url(scheme.get, call_606901.host, call_606901.base,
                         call_606901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606901, url, valid)

proc call*(call_606902: Call_GetRestoreDBClusterToPointInTime_606872;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606903 = newJObject()
  add(query_606903, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606903, "RestoreType", newJString(RestoreType))
  add(query_606903, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_606903, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_606903.add "Tags", Tags
  add(query_606903, "KmsKeyId", newJString(KmsKeyId))
  add(query_606903, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606903, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_606903, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_606903, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606903, "RestoreToTime", newJString(RestoreToTime))
  add(query_606903, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_606903.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606903, "Action", newJString(Action))
  add(query_606903, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_606903.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606903, "OptionGroupName", newJString(OptionGroupName))
  add(query_606903, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606903, "Version", newJString(Version))
  result = call_606902.call(nil, query_606903, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_606872(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_606873, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_606874,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_606980 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBInstanceFromDBSnapshot_606982(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_606981(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606983 = query.getOrDefault("Action")
  valid_606983 = validateParameter(valid_606983, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_606983 != nil:
    section.add "Action", valid_606983
  var valid_606984 = query.getOrDefault("Version")
  valid_606984 = validateParameter(valid_606984, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606984 != nil:
    section.add "Version", valid_606984
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606985 = header.getOrDefault("X-Amz-Signature")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Signature", valid_606985
  var valid_606986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Content-Sha256", valid_606986
  var valid_606987 = header.getOrDefault("X-Amz-Date")
  valid_606987 = validateParameter(valid_606987, JString, required = false,
                                 default = nil)
  if valid_606987 != nil:
    section.add "X-Amz-Date", valid_606987
  var valid_606988 = header.getOrDefault("X-Amz-Credential")
  valid_606988 = validateParameter(valid_606988, JString, required = false,
                                 default = nil)
  if valid_606988 != nil:
    section.add "X-Amz-Credential", valid_606988
  var valid_606989 = header.getOrDefault("X-Amz-Security-Token")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-Security-Token", valid_606989
  var valid_606990 = header.getOrDefault("X-Amz-Algorithm")
  valid_606990 = validateParameter(valid_606990, JString, required = false,
                                 default = nil)
  if valid_606990 != nil:
    section.add "X-Amz-Algorithm", valid_606990
  var valid_606991 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606991 = validateParameter(valid_606991, JString, required = false,
                                 default = nil)
  if valid_606991 != nil:
    section.add "X-Amz-SignedHeaders", valid_606991
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_606992 = formData.getOrDefault("Port")
  valid_606992 = validateParameter(valid_606992, JInt, required = false, default = nil)
  if valid_606992 != nil:
    section.add "Port", valid_606992
  var valid_606993 = formData.getOrDefault("DBInstanceClass")
  valid_606993 = validateParameter(valid_606993, JString, required = false,
                                 default = nil)
  if valid_606993 != nil:
    section.add "DBInstanceClass", valid_606993
  var valid_606994 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_606994 = validateParameter(valid_606994, JBool, required = false, default = nil)
  if valid_606994 != nil:
    section.add "UseDefaultProcessorFeatures", valid_606994
  var valid_606995 = formData.getOrDefault("MultiAZ")
  valid_606995 = validateParameter(valid_606995, JBool, required = false, default = nil)
  if valid_606995 != nil:
    section.add "MultiAZ", valid_606995
  var valid_606996 = formData.getOrDefault("Domain")
  valid_606996 = validateParameter(valid_606996, JString, required = false,
                                 default = nil)
  if valid_606996 != nil:
    section.add "Domain", valid_606996
  var valid_606997 = formData.getOrDefault("DBParameterGroupName")
  valid_606997 = validateParameter(valid_606997, JString, required = false,
                                 default = nil)
  if valid_606997 != nil:
    section.add "DBParameterGroupName", valid_606997
  var valid_606998 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606998 = validateParameter(valid_606998, JArray, required = false,
                                 default = nil)
  if valid_606998 != nil:
    section.add "VpcSecurityGroupIds", valid_606998
  var valid_606999 = formData.getOrDefault("AvailabilityZone")
  valid_606999 = validateParameter(valid_606999, JString, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "AvailabilityZone", valid_606999
  var valid_607000 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607000 = validateParameter(valid_607000, JBool, required = false, default = nil)
  if valid_607000 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607000
  var valid_607001 = formData.getOrDefault("Engine")
  valid_607001 = validateParameter(valid_607001, JString, required = false,
                                 default = nil)
  if valid_607001 != nil:
    section.add "Engine", valid_607001
  var valid_607002 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607002 = validateParameter(valid_607002, JBool, required = false, default = nil)
  if valid_607002 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607002
  var valid_607003 = formData.getOrDefault("TdeCredentialPassword")
  valid_607003 = validateParameter(valid_607003, JString, required = false,
                                 default = nil)
  if valid_607003 != nil:
    section.add "TdeCredentialPassword", valid_607003
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607004 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607004 = validateParameter(valid_607004, JString, required = true,
                                 default = nil)
  if valid_607004 != nil:
    section.add "DBInstanceIdentifier", valid_607004
  var valid_607005 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607005 = validateParameter(valid_607005, JString, required = true,
                                 default = nil)
  if valid_607005 != nil:
    section.add "DBSnapshotIdentifier", valid_607005
  var valid_607006 = formData.getOrDefault("DBName")
  valid_607006 = validateParameter(valid_607006, JString, required = false,
                                 default = nil)
  if valid_607006 != nil:
    section.add "DBName", valid_607006
  var valid_607007 = formData.getOrDefault("Iops")
  valid_607007 = validateParameter(valid_607007, JInt, required = false, default = nil)
  if valid_607007 != nil:
    section.add "Iops", valid_607007
  var valid_607008 = formData.getOrDefault("TdeCredentialArn")
  valid_607008 = validateParameter(valid_607008, JString, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "TdeCredentialArn", valid_607008
  var valid_607009 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_607009 = validateParameter(valid_607009, JArray, required = false,
                                 default = nil)
  if valid_607009 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607009
  var valid_607010 = formData.getOrDefault("PubliclyAccessible")
  valid_607010 = validateParameter(valid_607010, JBool, required = false, default = nil)
  if valid_607010 != nil:
    section.add "PubliclyAccessible", valid_607010
  var valid_607011 = formData.getOrDefault("LicenseModel")
  valid_607011 = validateParameter(valid_607011, JString, required = false,
                                 default = nil)
  if valid_607011 != nil:
    section.add "LicenseModel", valid_607011
  var valid_607012 = formData.getOrDefault("Tags")
  valid_607012 = validateParameter(valid_607012, JArray, required = false,
                                 default = nil)
  if valid_607012 != nil:
    section.add "Tags", valid_607012
  var valid_607013 = formData.getOrDefault("DBSubnetGroupName")
  valid_607013 = validateParameter(valid_607013, JString, required = false,
                                 default = nil)
  if valid_607013 != nil:
    section.add "DBSubnetGroupName", valid_607013
  var valid_607014 = formData.getOrDefault("DomainIAMRoleName")
  valid_607014 = validateParameter(valid_607014, JString, required = false,
                                 default = nil)
  if valid_607014 != nil:
    section.add "DomainIAMRoleName", valid_607014
  var valid_607015 = formData.getOrDefault("OptionGroupName")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "OptionGroupName", valid_607015
  var valid_607016 = formData.getOrDefault("StorageType")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "StorageType", valid_607016
  var valid_607017 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_607017 = validateParameter(valid_607017, JBool, required = false, default = nil)
  if valid_607017 != nil:
    section.add "CopyTagsToSnapshot", valid_607017
  var valid_607018 = formData.getOrDefault("DeletionProtection")
  valid_607018 = validateParameter(valid_607018, JBool, required = false, default = nil)
  if valid_607018 != nil:
    section.add "DeletionProtection", valid_607018
  var valid_607019 = formData.getOrDefault("ProcessorFeatures")
  valid_607019 = validateParameter(valid_607019, JArray, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "ProcessorFeatures", valid_607019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607020: Call_PostRestoreDBInstanceFromDBSnapshot_606980;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_607020.validator(path, query, header, formData, body)
  let scheme = call_607020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607020.url(scheme.get, call_607020.host, call_607020.base,
                         call_607020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607020, url, valid)

proc call*(call_607021: Call_PostRestoreDBInstanceFromDBSnapshot_606980;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_607022 = newJObject()
  var formData_607023 = newJObject()
  add(formData_607023, "Port", newJInt(Port))
  add(formData_607023, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607023, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_607023, "MultiAZ", newJBool(MultiAZ))
  add(formData_607023, "Domain", newJString(Domain))
  add(formData_607023, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_607023.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607023, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_607023, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607023, "Engine", newJString(Engine))
  add(formData_607023, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607023, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_607023, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607023, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_607023, "DBName", newJString(DBName))
  add(formData_607023, "Iops", newJInt(Iops))
  add(formData_607023, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_607023.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_607023, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607022, "Action", newJString(Action))
  add(formData_607023, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_607023.add "Tags", Tags
  add(formData_607023, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_607023, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_607023, "OptionGroupName", newJString(OptionGroupName))
  add(query_607022, "Version", newJString(Version))
  add(formData_607023, "StorageType", newJString(StorageType))
  add(formData_607023, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_607023, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_607023.add "ProcessorFeatures", ProcessorFeatures
  result = call_607021.call(nil, query_607022, nil, formData_607023, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_606980(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_606981, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_606982,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_606937 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBInstanceFromDBSnapshot_606939(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_606938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_606940 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_606940 = validateParameter(valid_606940, JBool, required = false, default = nil)
  if valid_606940 != nil:
    section.add "UseDefaultProcessorFeatures", valid_606940
  var valid_606941 = query.getOrDefault("DBName")
  valid_606941 = validateParameter(valid_606941, JString, required = false,
                                 default = nil)
  if valid_606941 != nil:
    section.add "DBName", valid_606941
  var valid_606942 = query.getOrDefault("TdeCredentialPassword")
  valid_606942 = validateParameter(valid_606942, JString, required = false,
                                 default = nil)
  if valid_606942 != nil:
    section.add "TdeCredentialPassword", valid_606942
  var valid_606943 = query.getOrDefault("DeletionProtection")
  valid_606943 = validateParameter(valid_606943, JBool, required = false, default = nil)
  if valid_606943 != nil:
    section.add "DeletionProtection", valid_606943
  var valid_606944 = query.getOrDefault("Engine")
  valid_606944 = validateParameter(valid_606944, JString, required = false,
                                 default = nil)
  if valid_606944 != nil:
    section.add "Engine", valid_606944
  var valid_606945 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606945 = validateParameter(valid_606945, JBool, required = false, default = nil)
  if valid_606945 != nil:
    section.add "CopyTagsToSnapshot", valid_606945
  var valid_606946 = query.getOrDefault("DBParameterGroupName")
  valid_606946 = validateParameter(valid_606946, JString, required = false,
                                 default = nil)
  if valid_606946 != nil:
    section.add "DBParameterGroupName", valid_606946
  var valid_606947 = query.getOrDefault("Tags")
  valid_606947 = validateParameter(valid_606947, JArray, required = false,
                                 default = nil)
  if valid_606947 != nil:
    section.add "Tags", valid_606947
  var valid_606948 = query.getOrDefault("LicenseModel")
  valid_606948 = validateParameter(valid_606948, JString, required = false,
                                 default = nil)
  if valid_606948 != nil:
    section.add "LicenseModel", valid_606948
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606949 = query.getOrDefault("DBInstanceIdentifier")
  valid_606949 = validateParameter(valid_606949, JString, required = true,
                                 default = nil)
  if valid_606949 != nil:
    section.add "DBInstanceIdentifier", valid_606949
  var valid_606950 = query.getOrDefault("DBSnapshotIdentifier")
  valid_606950 = validateParameter(valid_606950, JString, required = true,
                                 default = nil)
  if valid_606950 != nil:
    section.add "DBSnapshotIdentifier", valid_606950
  var valid_606951 = query.getOrDefault("TdeCredentialArn")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "TdeCredentialArn", valid_606951
  var valid_606952 = query.getOrDefault("ProcessorFeatures")
  valid_606952 = validateParameter(valid_606952, JArray, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "ProcessorFeatures", valid_606952
  var valid_606953 = query.getOrDefault("StorageType")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "StorageType", valid_606953
  var valid_606954 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606954 = validateParameter(valid_606954, JBool, required = false, default = nil)
  if valid_606954 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606954
  var valid_606955 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606955 = validateParameter(valid_606955, JArray, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606955
  var valid_606956 = query.getOrDefault("Action")
  valid_606956 = validateParameter(valid_606956, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_606956 != nil:
    section.add "Action", valid_606956
  var valid_606957 = query.getOrDefault("MultiAZ")
  valid_606957 = validateParameter(valid_606957, JBool, required = false, default = nil)
  if valid_606957 != nil:
    section.add "MultiAZ", valid_606957
  var valid_606958 = query.getOrDefault("Port")
  valid_606958 = validateParameter(valid_606958, JInt, required = false, default = nil)
  if valid_606958 != nil:
    section.add "Port", valid_606958
  var valid_606959 = query.getOrDefault("Domain")
  valid_606959 = validateParameter(valid_606959, JString, required = false,
                                 default = nil)
  if valid_606959 != nil:
    section.add "Domain", valid_606959
  var valid_606960 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606960 = validateParameter(valid_606960, JArray, required = false,
                                 default = nil)
  if valid_606960 != nil:
    section.add "VpcSecurityGroupIds", valid_606960
  var valid_606961 = query.getOrDefault("AvailabilityZone")
  valid_606961 = validateParameter(valid_606961, JString, required = false,
                                 default = nil)
  if valid_606961 != nil:
    section.add "AvailabilityZone", valid_606961
  var valid_606962 = query.getOrDefault("OptionGroupName")
  valid_606962 = validateParameter(valid_606962, JString, required = false,
                                 default = nil)
  if valid_606962 != nil:
    section.add "OptionGroupName", valid_606962
  var valid_606963 = query.getOrDefault("DBSubnetGroupName")
  valid_606963 = validateParameter(valid_606963, JString, required = false,
                                 default = nil)
  if valid_606963 != nil:
    section.add "DBSubnetGroupName", valid_606963
  var valid_606964 = query.getOrDefault("Version")
  valid_606964 = validateParameter(valid_606964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606964 != nil:
    section.add "Version", valid_606964
  var valid_606965 = query.getOrDefault("DBInstanceClass")
  valid_606965 = validateParameter(valid_606965, JString, required = false,
                                 default = nil)
  if valid_606965 != nil:
    section.add "DBInstanceClass", valid_606965
  var valid_606966 = query.getOrDefault("PubliclyAccessible")
  valid_606966 = validateParameter(valid_606966, JBool, required = false, default = nil)
  if valid_606966 != nil:
    section.add "PubliclyAccessible", valid_606966
  var valid_606967 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606967 = validateParameter(valid_606967, JBool, required = false, default = nil)
  if valid_606967 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606967
  var valid_606968 = query.getOrDefault("Iops")
  valid_606968 = validateParameter(valid_606968, JInt, required = false, default = nil)
  if valid_606968 != nil:
    section.add "Iops", valid_606968
  var valid_606969 = query.getOrDefault("DomainIAMRoleName")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "DomainIAMRoleName", valid_606969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606970 = header.getOrDefault("X-Amz-Signature")
  valid_606970 = validateParameter(valid_606970, JString, required = false,
                                 default = nil)
  if valid_606970 != nil:
    section.add "X-Amz-Signature", valid_606970
  var valid_606971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606971 = validateParameter(valid_606971, JString, required = false,
                                 default = nil)
  if valid_606971 != nil:
    section.add "X-Amz-Content-Sha256", valid_606971
  var valid_606972 = header.getOrDefault("X-Amz-Date")
  valid_606972 = validateParameter(valid_606972, JString, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "X-Amz-Date", valid_606972
  var valid_606973 = header.getOrDefault("X-Amz-Credential")
  valid_606973 = validateParameter(valid_606973, JString, required = false,
                                 default = nil)
  if valid_606973 != nil:
    section.add "X-Amz-Credential", valid_606973
  var valid_606974 = header.getOrDefault("X-Amz-Security-Token")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "X-Amz-Security-Token", valid_606974
  var valid_606975 = header.getOrDefault("X-Amz-Algorithm")
  valid_606975 = validateParameter(valid_606975, JString, required = false,
                                 default = nil)
  if valid_606975 != nil:
    section.add "X-Amz-Algorithm", valid_606975
  var valid_606976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606976 = validateParameter(valid_606976, JString, required = false,
                                 default = nil)
  if valid_606976 != nil:
    section.add "X-Amz-SignedHeaders", valid_606976
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606977: Call_GetRestoreDBInstanceFromDBSnapshot_606937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_606977.validator(path, query, header, formData, body)
  let scheme = call_606977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606977.url(scheme.get, call_606977.host, call_606977.base,
                         call_606977.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606977, url, valid)

proc call*(call_606978: Call_GetRestoreDBInstanceFromDBSnapshot_606937;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_606979 = newJObject()
  add(query_606979, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_606979, "DBName", newJString(DBName))
  add(query_606979, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_606979, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606979, "Engine", newJString(Engine))
  add(query_606979, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606979, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_606979.add "Tags", Tags
  add(query_606979, "LicenseModel", newJString(LicenseModel))
  add(query_606979, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606979, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606979, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_606979.add "ProcessorFeatures", ProcessorFeatures
  add(query_606979, "StorageType", newJString(StorageType))
  add(query_606979, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_606979.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606979, "Action", newJString(Action))
  add(query_606979, "MultiAZ", newJBool(MultiAZ))
  add(query_606979, "Port", newJInt(Port))
  add(query_606979, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_606979.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606979, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_606979, "OptionGroupName", newJString(OptionGroupName))
  add(query_606979, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606979, "Version", newJString(Version))
  add(query_606979, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_606979, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_606979, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_606979, "Iops", newJInt(Iops))
  add(query_606979, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_606978.call(nil, query_606979, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_606937(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_606938, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_606939,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_607082 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBInstanceFromS3_607084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_607083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607085 = query.getOrDefault("Action")
  valid_607085 = validateParameter(valid_607085, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_607085 != nil:
    section.add "Action", valid_607085
  var valid_607086 = query.getOrDefault("Version")
  valid_607086 = validateParameter(valid_607086, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607086 != nil:
    section.add "Version", valid_607086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_607087 = header.getOrDefault("X-Amz-Security-Token")
  valid_607087 = validateParameter(valid_607087, JString, required = false,
                                 default = nil)
  if valid_607087 != nil:
    section.add "X-Amz-Security-Token", valid_607087
  var valid_607088 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607088 = validateParameter(valid_607088, JString, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "X-Amz-SignedHeaders", valid_607088
  var valid_607089 = header.getOrDefault("X-Amz-Signature")
  valid_607089 = validateParameter(valid_607089, JString, required = false,
                                 default = nil)
  if valid_607089 != nil:
    section.add "X-Amz-Signature", valid_607089
  var valid_607090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607090 = validateParameter(valid_607090, JString, required = false,
                                 default = nil)
  if valid_607090 != nil:
    section.add "X-Amz-Content-Sha256", valid_607090
  var valid_607091 = header.getOrDefault("X-Amz-Date")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Date", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-Credential")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-Credential", valid_607092
  var valid_607093 = header.getOrDefault("X-Amz-Algorithm")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-Algorithm", valid_607093
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_607094 = formData.getOrDefault("S3IngestionRoleArn")
  valid_607094 = validateParameter(valid_607094, JString, required = true,
                                 default = nil)
  if valid_607094 != nil:
    section.add "S3IngestionRoleArn", valid_607094
  var valid_607095 = formData.getOrDefault("Port")
  valid_607095 = validateParameter(valid_607095, JInt, required = false, default = nil)
  if valid_607095 != nil:
    section.add "Port", valid_607095
  var valid_607096 = formData.getOrDefault("MultiAZ")
  valid_607096 = validateParameter(valid_607096, JBool, required = false, default = nil)
  if valid_607096 != nil:
    section.add "MultiAZ", valid_607096
  var valid_607097 = formData.getOrDefault("MasterUsername")
  valid_607097 = validateParameter(valid_607097, JString, required = false,
                                 default = nil)
  if valid_607097 != nil:
    section.add "MasterUsername", valid_607097
  var valid_607098 = formData.getOrDefault("MonitoringRoleArn")
  valid_607098 = validateParameter(valid_607098, JString, required = false,
                                 default = nil)
  if valid_607098 != nil:
    section.add "MonitoringRoleArn", valid_607098
  var valid_607099 = formData.getOrDefault("MonitoringInterval")
  valid_607099 = validateParameter(valid_607099, JInt, required = false, default = nil)
  if valid_607099 != nil:
    section.add "MonitoringInterval", valid_607099
  var valid_607100 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607100 = validateParameter(valid_607100, JArray, required = false,
                                 default = nil)
  if valid_607100 != nil:
    section.add "VpcSecurityGroupIds", valid_607100
  var valid_607101 = formData.getOrDefault("AvailabilityZone")
  valid_607101 = validateParameter(valid_607101, JString, required = false,
                                 default = nil)
  if valid_607101 != nil:
    section.add "AvailabilityZone", valid_607101
  var valid_607102 = formData.getOrDefault("EnablePerformanceInsights")
  valid_607102 = validateParameter(valid_607102, JBool, required = false, default = nil)
  if valid_607102 != nil:
    section.add "EnablePerformanceInsights", valid_607102
  var valid_607103 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607103 = validateParameter(valid_607103, JString, required = true,
                                 default = nil)
  if valid_607103 != nil:
    section.add "DBInstanceIdentifier", valid_607103
  var valid_607104 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_607104 = validateParameter(valid_607104, JArray, required = false,
                                 default = nil)
  if valid_607104 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607104
  var valid_607105 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_607105 = validateParameter(valid_607105, JInt, required = false, default = nil)
  if valid_607105 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_607105
  var valid_607106 = formData.getOrDefault("DBSubnetGroupName")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "DBSubnetGroupName", valid_607106
  var valid_607107 = formData.getOrDefault("StorageType")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "StorageType", valid_607107
  var valid_607108 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_607108 = validateParameter(valid_607108, JBool, required = false, default = nil)
  if valid_607108 != nil:
    section.add "CopyTagsToSnapshot", valid_607108
  var valid_607109 = formData.getOrDefault("DeletionProtection")
  valid_607109 = validateParameter(valid_607109, JBool, required = false, default = nil)
  if valid_607109 != nil:
    section.add "DeletionProtection", valid_607109
  var valid_607110 = formData.getOrDefault("ProcessorFeatures")
  valid_607110 = validateParameter(valid_607110, JArray, required = false,
                                 default = nil)
  if valid_607110 != nil:
    section.add "ProcessorFeatures", valid_607110
  var valid_607111 = formData.getOrDefault("AllocatedStorage")
  valid_607111 = validateParameter(valid_607111, JInt, required = false, default = nil)
  if valid_607111 != nil:
    section.add "AllocatedStorage", valid_607111
  var valid_607112 = formData.getOrDefault("S3Prefix")
  valid_607112 = validateParameter(valid_607112, JString, required = false,
                                 default = nil)
  if valid_607112 != nil:
    section.add "S3Prefix", valid_607112
  var valid_607113 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "PreferredMaintenanceWindow", valid_607113
  var valid_607114 = formData.getOrDefault("DBInstanceClass")
  valid_607114 = validateParameter(valid_607114, JString, required = true,
                                 default = nil)
  if valid_607114 != nil:
    section.add "DBInstanceClass", valid_607114
  var valid_607115 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_607115 = validateParameter(valid_607115, JBool, required = false, default = nil)
  if valid_607115 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607115
  var valid_607116 = formData.getOrDefault("PreferredBackupWindow")
  valid_607116 = validateParameter(valid_607116, JString, required = false,
                                 default = nil)
  if valid_607116 != nil:
    section.add "PreferredBackupWindow", valid_607116
  var valid_607117 = formData.getOrDefault("MasterUserPassword")
  valid_607117 = validateParameter(valid_607117, JString, required = false,
                                 default = nil)
  if valid_607117 != nil:
    section.add "MasterUserPassword", valid_607117
  var valid_607118 = formData.getOrDefault("SourceEngine")
  valid_607118 = validateParameter(valid_607118, JString, required = true,
                                 default = nil)
  if valid_607118 != nil:
    section.add "SourceEngine", valid_607118
  var valid_607119 = formData.getOrDefault("DBParameterGroupName")
  valid_607119 = validateParameter(valid_607119, JString, required = false,
                                 default = nil)
  if valid_607119 != nil:
    section.add "DBParameterGroupName", valid_607119
  var valid_607120 = formData.getOrDefault("EngineVersion")
  valid_607120 = validateParameter(valid_607120, JString, required = false,
                                 default = nil)
  if valid_607120 != nil:
    section.add "EngineVersion", valid_607120
  var valid_607121 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607121 = validateParameter(valid_607121, JBool, required = false, default = nil)
  if valid_607121 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607121
  var valid_607122 = formData.getOrDefault("BackupRetentionPeriod")
  valid_607122 = validateParameter(valid_607122, JInt, required = false, default = nil)
  if valid_607122 != nil:
    section.add "BackupRetentionPeriod", valid_607122
  var valid_607123 = formData.getOrDefault("KmsKeyId")
  valid_607123 = validateParameter(valid_607123, JString, required = false,
                                 default = nil)
  if valid_607123 != nil:
    section.add "KmsKeyId", valid_607123
  var valid_607124 = formData.getOrDefault("Engine")
  valid_607124 = validateParameter(valid_607124, JString, required = true,
                                 default = nil)
  if valid_607124 != nil:
    section.add "Engine", valid_607124
  var valid_607125 = formData.getOrDefault("S3BucketName")
  valid_607125 = validateParameter(valid_607125, JString, required = true,
                                 default = nil)
  if valid_607125 != nil:
    section.add "S3BucketName", valid_607125
  var valid_607126 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607126 = validateParameter(valid_607126, JBool, required = false, default = nil)
  if valid_607126 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607126
  var valid_607127 = formData.getOrDefault("DBName")
  valid_607127 = validateParameter(valid_607127, JString, required = false,
                                 default = nil)
  if valid_607127 != nil:
    section.add "DBName", valid_607127
  var valid_607128 = formData.getOrDefault("Iops")
  valid_607128 = validateParameter(valid_607128, JInt, required = false, default = nil)
  if valid_607128 != nil:
    section.add "Iops", valid_607128
  var valid_607129 = formData.getOrDefault("PubliclyAccessible")
  valid_607129 = validateParameter(valid_607129, JBool, required = false, default = nil)
  if valid_607129 != nil:
    section.add "PubliclyAccessible", valid_607129
  var valid_607130 = formData.getOrDefault("SourceEngineVersion")
  valid_607130 = validateParameter(valid_607130, JString, required = true,
                                 default = nil)
  if valid_607130 != nil:
    section.add "SourceEngineVersion", valid_607130
  var valid_607131 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_607131
  var valid_607132 = formData.getOrDefault("LicenseModel")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "LicenseModel", valid_607132
  var valid_607133 = formData.getOrDefault("Tags")
  valid_607133 = validateParameter(valid_607133, JArray, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "Tags", valid_607133
  var valid_607134 = formData.getOrDefault("OptionGroupName")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "OptionGroupName", valid_607134
  var valid_607135 = formData.getOrDefault("DBSecurityGroups")
  valid_607135 = validateParameter(valid_607135, JArray, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "DBSecurityGroups", valid_607135
  var valid_607136 = formData.getOrDefault("StorageEncrypted")
  valid_607136 = validateParameter(valid_607136, JBool, required = false, default = nil)
  if valid_607136 != nil:
    section.add "StorageEncrypted", valid_607136
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607137: Call_PostRestoreDBInstanceFromS3_607082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_607137.validator(path, query, header, formData, body)
  let scheme = call_607137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607137.url(scheme.get, call_607137.host, call_607137.base,
                         call_607137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607137, url, valid)

proc call*(call_607138: Call_PostRestoreDBInstanceFromS3_607082;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_607139 = newJObject()
  var formData_607140 = newJObject()
  add(formData_607140, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_607140, "Port", newJInt(Port))
  add(formData_607140, "MultiAZ", newJBool(MultiAZ))
  add(formData_607140, "MasterUsername", newJString(MasterUsername))
  add(formData_607140, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_607140, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_607140.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607140, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_607140, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_607140, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_607140.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_607139, "Action", newJString(Action))
  add(formData_607140, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_607140, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_607140, "StorageType", newJString(StorageType))
  add(formData_607140, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_607140, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_607140.add "ProcessorFeatures", ProcessorFeatures
  add(formData_607140, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_607140, "S3Prefix", newJString(S3Prefix))
  add(formData_607140, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607140, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607140, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_607140, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_607140, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_607140, "SourceEngine", newJString(SourceEngine))
  add(formData_607140, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607140, "EngineVersion", newJString(EngineVersion))
  add(formData_607140, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607140, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_607140, "KmsKeyId", newJString(KmsKeyId))
  add(formData_607140, "Engine", newJString(Engine))
  add(formData_607140, "S3BucketName", newJString(S3BucketName))
  add(formData_607140, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607140, "DBName", newJString(DBName))
  add(formData_607140, "Iops", newJInt(Iops))
  add(formData_607140, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_607140, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_607140, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_607140, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_607140.add "Tags", Tags
  add(formData_607140, "OptionGroupName", newJString(OptionGroupName))
  add(query_607139, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_607140.add "DBSecurityGroups", DBSecurityGroups
  add(formData_607140, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_607138.call(nil, query_607139, nil, formData_607140, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_607082(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_607083, base: "/",
    url: url_PostRestoreDBInstanceFromS3_607084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_607024 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBInstanceFromS3_607026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_607025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_607027 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_607027 = validateParameter(valid_607027, JBool, required = false, default = nil)
  if valid_607027 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607027
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_607028 = query.getOrDefault("SourceEngineVersion")
  valid_607028 = validateParameter(valid_607028, JString, required = true,
                                 default = nil)
  if valid_607028 != nil:
    section.add "SourceEngineVersion", valid_607028
  var valid_607029 = query.getOrDefault("SourceEngine")
  valid_607029 = validateParameter(valid_607029, JString, required = true,
                                 default = nil)
  if valid_607029 != nil:
    section.add "SourceEngine", valid_607029
  var valid_607030 = query.getOrDefault("Engine")
  valid_607030 = validateParameter(valid_607030, JString, required = true,
                                 default = nil)
  if valid_607030 != nil:
    section.add "Engine", valid_607030
  var valid_607031 = query.getOrDefault("CopyTagsToSnapshot")
  valid_607031 = validateParameter(valid_607031, JBool, required = false, default = nil)
  if valid_607031 != nil:
    section.add "CopyTagsToSnapshot", valid_607031
  var valid_607032 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_607032 = validateParameter(valid_607032, JInt, required = false, default = nil)
  if valid_607032 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_607032
  var valid_607033 = query.getOrDefault("MonitoringInterval")
  valid_607033 = validateParameter(valid_607033, JInt, required = false, default = nil)
  if valid_607033 != nil:
    section.add "MonitoringInterval", valid_607033
  var valid_607034 = query.getOrDefault("KmsKeyId")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "KmsKeyId", valid_607034
  var valid_607035 = query.getOrDefault("MonitoringRoleArn")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "MonitoringRoleArn", valid_607035
  var valid_607036 = query.getOrDefault("S3BucketName")
  valid_607036 = validateParameter(valid_607036, JString, required = true,
                                 default = nil)
  if valid_607036 != nil:
    section.add "S3BucketName", valid_607036
  var valid_607037 = query.getOrDefault("ProcessorFeatures")
  valid_607037 = validateParameter(valid_607037, JArray, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "ProcessorFeatures", valid_607037
  var valid_607038 = query.getOrDefault("MasterUsername")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "MasterUsername", valid_607038
  var valid_607039 = query.getOrDefault("BackupRetentionPeriod")
  valid_607039 = validateParameter(valid_607039, JInt, required = false, default = nil)
  if valid_607039 != nil:
    section.add "BackupRetentionPeriod", valid_607039
  var valid_607040 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_607040 = validateParameter(valid_607040, JArray, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607040
  var valid_607041 = query.getOrDefault("EngineVersion")
  valid_607041 = validateParameter(valid_607041, JString, required = false,
                                 default = nil)
  if valid_607041 != nil:
    section.add "EngineVersion", valid_607041
  var valid_607042 = query.getOrDefault("Action")
  valid_607042 = validateParameter(valid_607042, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_607042 != nil:
    section.add "Action", valid_607042
  var valid_607043 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607043 = validateParameter(valid_607043, JArray, required = false,
                                 default = nil)
  if valid_607043 != nil:
    section.add "VpcSecurityGroupIds", valid_607043
  var valid_607044 = query.getOrDefault("AllocatedStorage")
  valid_607044 = validateParameter(valid_607044, JInt, required = false, default = nil)
  if valid_607044 != nil:
    section.add "AllocatedStorage", valid_607044
  var valid_607045 = query.getOrDefault("EnablePerformanceInsights")
  valid_607045 = validateParameter(valid_607045, JBool, required = false, default = nil)
  if valid_607045 != nil:
    section.add "EnablePerformanceInsights", valid_607045
  var valid_607046 = query.getOrDefault("PubliclyAccessible")
  valid_607046 = validateParameter(valid_607046, JBool, required = false, default = nil)
  if valid_607046 != nil:
    section.add "PubliclyAccessible", valid_607046
  var valid_607047 = query.getOrDefault("S3IngestionRoleArn")
  valid_607047 = validateParameter(valid_607047, JString, required = true,
                                 default = nil)
  if valid_607047 != nil:
    section.add "S3IngestionRoleArn", valid_607047
  var valid_607048 = query.getOrDefault("DBName")
  valid_607048 = validateParameter(valid_607048, JString, required = false,
                                 default = nil)
  if valid_607048 != nil:
    section.add "DBName", valid_607048
  var valid_607049 = query.getOrDefault("StorageEncrypted")
  valid_607049 = validateParameter(valid_607049, JBool, required = false, default = nil)
  if valid_607049 != nil:
    section.add "StorageEncrypted", valid_607049
  var valid_607050 = query.getOrDefault("DBParameterGroupName")
  valid_607050 = validateParameter(valid_607050, JString, required = false,
                                 default = nil)
  if valid_607050 != nil:
    section.add "DBParameterGroupName", valid_607050
  var valid_607051 = query.getOrDefault("DeletionProtection")
  valid_607051 = validateParameter(valid_607051, JBool, required = false, default = nil)
  if valid_607051 != nil:
    section.add "DeletionProtection", valid_607051
  var valid_607052 = query.getOrDefault("S3Prefix")
  valid_607052 = validateParameter(valid_607052, JString, required = false,
                                 default = nil)
  if valid_607052 != nil:
    section.add "S3Prefix", valid_607052
  var valid_607053 = query.getOrDefault("Tags")
  valid_607053 = validateParameter(valid_607053, JArray, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "Tags", valid_607053
  var valid_607054 = query.getOrDefault("LicenseModel")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "LicenseModel", valid_607054
  var valid_607055 = query.getOrDefault("DBInstanceIdentifier")
  valid_607055 = validateParameter(valid_607055, JString, required = true,
                                 default = nil)
  if valid_607055 != nil:
    section.add "DBInstanceIdentifier", valid_607055
  var valid_607056 = query.getOrDefault("StorageType")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "StorageType", valid_607056
  var valid_607057 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607057 = validateParameter(valid_607057, JBool, required = false, default = nil)
  if valid_607057 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607057
  var valid_607058 = query.getOrDefault("MultiAZ")
  valid_607058 = validateParameter(valid_607058, JBool, required = false, default = nil)
  if valid_607058 != nil:
    section.add "MultiAZ", valid_607058
  var valid_607059 = query.getOrDefault("DBSecurityGroups")
  valid_607059 = validateParameter(valid_607059, JArray, required = false,
                                 default = nil)
  if valid_607059 != nil:
    section.add "DBSecurityGroups", valid_607059
  var valid_607060 = query.getOrDefault("Port")
  valid_607060 = validateParameter(valid_607060, JInt, required = false, default = nil)
  if valid_607060 != nil:
    section.add "Port", valid_607060
  var valid_607061 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_607061 = validateParameter(valid_607061, JString, required = false,
                                 default = nil)
  if valid_607061 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_607061
  var valid_607062 = query.getOrDefault("MasterUserPassword")
  valid_607062 = validateParameter(valid_607062, JString, required = false,
                                 default = nil)
  if valid_607062 != nil:
    section.add "MasterUserPassword", valid_607062
  var valid_607063 = query.getOrDefault("AvailabilityZone")
  valid_607063 = validateParameter(valid_607063, JString, required = false,
                                 default = nil)
  if valid_607063 != nil:
    section.add "AvailabilityZone", valid_607063
  var valid_607064 = query.getOrDefault("OptionGroupName")
  valid_607064 = validateParameter(valid_607064, JString, required = false,
                                 default = nil)
  if valid_607064 != nil:
    section.add "OptionGroupName", valid_607064
  var valid_607065 = query.getOrDefault("DBSubnetGroupName")
  valid_607065 = validateParameter(valid_607065, JString, required = false,
                                 default = nil)
  if valid_607065 != nil:
    section.add "DBSubnetGroupName", valid_607065
  var valid_607066 = query.getOrDefault("PreferredBackupWindow")
  valid_607066 = validateParameter(valid_607066, JString, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "PreferredBackupWindow", valid_607066
  var valid_607067 = query.getOrDefault("DBInstanceClass")
  valid_607067 = validateParameter(valid_607067, JString, required = true,
                                 default = nil)
  if valid_607067 != nil:
    section.add "DBInstanceClass", valid_607067
  var valid_607068 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "PreferredMaintenanceWindow", valid_607068
  var valid_607069 = query.getOrDefault("Version")
  valid_607069 = validateParameter(valid_607069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607069 != nil:
    section.add "Version", valid_607069
  var valid_607070 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_607070 = validateParameter(valid_607070, JBool, required = false, default = nil)
  if valid_607070 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607070
  var valid_607071 = query.getOrDefault("Iops")
  valid_607071 = validateParameter(valid_607071, JInt, required = false, default = nil)
  if valid_607071 != nil:
    section.add "Iops", valid_607071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_607072 = header.getOrDefault("X-Amz-Security-Token")
  valid_607072 = validateParameter(valid_607072, JString, required = false,
                                 default = nil)
  if valid_607072 != nil:
    section.add "X-Amz-Security-Token", valid_607072
  var valid_607073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607073 = validateParameter(valid_607073, JString, required = false,
                                 default = nil)
  if valid_607073 != nil:
    section.add "X-Amz-SignedHeaders", valid_607073
  var valid_607074 = header.getOrDefault("X-Amz-Signature")
  valid_607074 = validateParameter(valid_607074, JString, required = false,
                                 default = nil)
  if valid_607074 != nil:
    section.add "X-Amz-Signature", valid_607074
  var valid_607075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607075 = validateParameter(valid_607075, JString, required = false,
                                 default = nil)
  if valid_607075 != nil:
    section.add "X-Amz-Content-Sha256", valid_607075
  var valid_607076 = header.getOrDefault("X-Amz-Date")
  valid_607076 = validateParameter(valid_607076, JString, required = false,
                                 default = nil)
  if valid_607076 != nil:
    section.add "X-Amz-Date", valid_607076
  var valid_607077 = header.getOrDefault("X-Amz-Credential")
  valid_607077 = validateParameter(valid_607077, JString, required = false,
                                 default = nil)
  if valid_607077 != nil:
    section.add "X-Amz-Credential", valid_607077
  var valid_607078 = header.getOrDefault("X-Amz-Algorithm")
  valid_607078 = validateParameter(valid_607078, JString, required = false,
                                 default = nil)
  if valid_607078 != nil:
    section.add "X-Amz-Algorithm", valid_607078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607079: Call_GetRestoreDBInstanceFromS3_607024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_607079.validator(path, query, header, formData, body)
  let scheme = call_607079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607079.url(scheme.get, call_607079.host, call_607079.base,
                         call_607079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607079, url, valid)

proc call*(call_607080: Call_GetRestoreDBInstanceFromS3_607024;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_607081 = newJObject()
  add(query_607081, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_607081, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_607081, "SourceEngine", newJString(SourceEngine))
  add(query_607081, "Engine", newJString(Engine))
  add(query_607081, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_607081, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_607081, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_607081, "KmsKeyId", newJString(KmsKeyId))
  add(query_607081, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_607081, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_607081.add "ProcessorFeatures", ProcessorFeatures
  add(query_607081, "MasterUsername", newJString(MasterUsername))
  add(query_607081, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_607081.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_607081, "EngineVersion", newJString(EngineVersion))
  add(query_607081, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_607081.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_607081, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_607081, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_607081, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607081, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_607081, "DBName", newJString(DBName))
  add(query_607081, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_607081, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607081, "DeletionProtection", newJBool(DeletionProtection))
  add(query_607081, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_607081.add "Tags", Tags
  add(query_607081, "LicenseModel", newJString(LicenseModel))
  add(query_607081, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607081, "StorageType", newJString(StorageType))
  add(query_607081, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_607081, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_607081.add "DBSecurityGroups", DBSecurityGroups
  add(query_607081, "Port", newJInt(Port))
  add(query_607081, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_607081, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_607081, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_607081, "OptionGroupName", newJString(OptionGroupName))
  add(query_607081, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607081, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_607081, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_607081, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_607081, "Version", newJString(Version))
  add(query_607081, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_607081, "Iops", newJInt(Iops))
  result = call_607080.call(nil, query_607081, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_607024(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_607025, base: "/",
    url: url_GetRestoreDBInstanceFromS3_607026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_607187 = ref object of OpenApiRestCall_601389
proc url_PostRestoreDBInstanceToPointInTime_607189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_607188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607190 = query.getOrDefault("Action")
  valid_607190 = validateParameter(valid_607190, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_607190 != nil:
    section.add "Action", valid_607190
  var valid_607191 = query.getOrDefault("Version")
  valid_607191 = validateParameter(valid_607191, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607191 != nil:
    section.add "Version", valid_607191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607192 = header.getOrDefault("X-Amz-Signature")
  valid_607192 = validateParameter(valid_607192, JString, required = false,
                                 default = nil)
  if valid_607192 != nil:
    section.add "X-Amz-Signature", valid_607192
  var valid_607193 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607193 = validateParameter(valid_607193, JString, required = false,
                                 default = nil)
  if valid_607193 != nil:
    section.add "X-Amz-Content-Sha256", valid_607193
  var valid_607194 = header.getOrDefault("X-Amz-Date")
  valid_607194 = validateParameter(valid_607194, JString, required = false,
                                 default = nil)
  if valid_607194 != nil:
    section.add "X-Amz-Date", valid_607194
  var valid_607195 = header.getOrDefault("X-Amz-Credential")
  valid_607195 = validateParameter(valid_607195, JString, required = false,
                                 default = nil)
  if valid_607195 != nil:
    section.add "X-Amz-Credential", valid_607195
  var valid_607196 = header.getOrDefault("X-Amz-Security-Token")
  valid_607196 = validateParameter(valid_607196, JString, required = false,
                                 default = nil)
  if valid_607196 != nil:
    section.add "X-Amz-Security-Token", valid_607196
  var valid_607197 = header.getOrDefault("X-Amz-Algorithm")
  valid_607197 = validateParameter(valid_607197, JString, required = false,
                                 default = nil)
  if valid_607197 != nil:
    section.add "X-Amz-Algorithm", valid_607197
  var valid_607198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "X-Amz-SignedHeaders", valid_607198
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_607199 = formData.getOrDefault("Port")
  valid_607199 = validateParameter(valid_607199, JInt, required = false, default = nil)
  if valid_607199 != nil:
    section.add "Port", valid_607199
  var valid_607200 = formData.getOrDefault("DBInstanceClass")
  valid_607200 = validateParameter(valid_607200, JString, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "DBInstanceClass", valid_607200
  var valid_607201 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_607201 = validateParameter(valid_607201, JBool, required = false, default = nil)
  if valid_607201 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607201
  var valid_607202 = formData.getOrDefault("MultiAZ")
  valid_607202 = validateParameter(valid_607202, JBool, required = false, default = nil)
  if valid_607202 != nil:
    section.add "MultiAZ", valid_607202
  var valid_607203 = formData.getOrDefault("Domain")
  valid_607203 = validateParameter(valid_607203, JString, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "Domain", valid_607203
  var valid_607204 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "SourceDBInstanceIdentifier", valid_607204
  var valid_607205 = formData.getOrDefault("DBParameterGroupName")
  valid_607205 = validateParameter(valid_607205, JString, required = false,
                                 default = nil)
  if valid_607205 != nil:
    section.add "DBParameterGroupName", valid_607205
  var valid_607206 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607206 = validateParameter(valid_607206, JArray, required = false,
                                 default = nil)
  if valid_607206 != nil:
    section.add "VpcSecurityGroupIds", valid_607206
  var valid_607207 = formData.getOrDefault("AvailabilityZone")
  valid_607207 = validateParameter(valid_607207, JString, required = false,
                                 default = nil)
  if valid_607207 != nil:
    section.add "AvailabilityZone", valid_607207
  var valid_607208 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607208 = validateParameter(valid_607208, JBool, required = false, default = nil)
  if valid_607208 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607208
  var valid_607209 = formData.getOrDefault("Engine")
  valid_607209 = validateParameter(valid_607209, JString, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "Engine", valid_607209
  var valid_607210 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607210 = validateParameter(valid_607210, JBool, required = false, default = nil)
  if valid_607210 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607210
  var valid_607211 = formData.getOrDefault("TdeCredentialPassword")
  valid_607211 = validateParameter(valid_607211, JString, required = false,
                                 default = nil)
  if valid_607211 != nil:
    section.add "TdeCredentialPassword", valid_607211
  var valid_607212 = formData.getOrDefault("UseLatestRestorableTime")
  valid_607212 = validateParameter(valid_607212, JBool, required = false, default = nil)
  if valid_607212 != nil:
    section.add "UseLatestRestorableTime", valid_607212
  var valid_607213 = formData.getOrDefault("DBName")
  valid_607213 = validateParameter(valid_607213, JString, required = false,
                                 default = nil)
  if valid_607213 != nil:
    section.add "DBName", valid_607213
  var valid_607214 = formData.getOrDefault("Iops")
  valid_607214 = validateParameter(valid_607214, JInt, required = false, default = nil)
  if valid_607214 != nil:
    section.add "Iops", valid_607214
  var valid_607215 = formData.getOrDefault("TdeCredentialArn")
  valid_607215 = validateParameter(valid_607215, JString, required = false,
                                 default = nil)
  if valid_607215 != nil:
    section.add "TdeCredentialArn", valid_607215
  var valid_607216 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_607216 = validateParameter(valid_607216, JArray, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607216
  var valid_607217 = formData.getOrDefault("PubliclyAccessible")
  valid_607217 = validateParameter(valid_607217, JBool, required = false, default = nil)
  if valid_607217 != nil:
    section.add "PubliclyAccessible", valid_607217
  var valid_607218 = formData.getOrDefault("LicenseModel")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "LicenseModel", valid_607218
  var valid_607219 = formData.getOrDefault("Tags")
  valid_607219 = validateParameter(valid_607219, JArray, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "Tags", valid_607219
  var valid_607220 = formData.getOrDefault("DBSubnetGroupName")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "DBSubnetGroupName", valid_607220
  var valid_607221 = formData.getOrDefault("DomainIAMRoleName")
  valid_607221 = validateParameter(valid_607221, JString, required = false,
                                 default = nil)
  if valid_607221 != nil:
    section.add "DomainIAMRoleName", valid_607221
  var valid_607222 = formData.getOrDefault("OptionGroupName")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "OptionGroupName", valid_607222
  var valid_607223 = formData.getOrDefault("RestoreTime")
  valid_607223 = validateParameter(valid_607223, JString, required = false,
                                 default = nil)
  if valid_607223 != nil:
    section.add "RestoreTime", valid_607223
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_607224 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_607224 = validateParameter(valid_607224, JString, required = true,
                                 default = nil)
  if valid_607224 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607224
  var valid_607225 = formData.getOrDefault("StorageType")
  valid_607225 = validateParameter(valid_607225, JString, required = false,
                                 default = nil)
  if valid_607225 != nil:
    section.add "StorageType", valid_607225
  var valid_607226 = formData.getOrDefault("SourceDbiResourceId")
  valid_607226 = validateParameter(valid_607226, JString, required = false,
                                 default = nil)
  if valid_607226 != nil:
    section.add "SourceDbiResourceId", valid_607226
  var valid_607227 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_607227 = validateParameter(valid_607227, JBool, required = false, default = nil)
  if valid_607227 != nil:
    section.add "CopyTagsToSnapshot", valid_607227
  var valid_607228 = formData.getOrDefault("DeletionProtection")
  valid_607228 = validateParameter(valid_607228, JBool, required = false, default = nil)
  if valid_607228 != nil:
    section.add "DeletionProtection", valid_607228
  var valid_607229 = formData.getOrDefault("ProcessorFeatures")
  valid_607229 = validateParameter(valid_607229, JArray, required = false,
                                 default = nil)
  if valid_607229 != nil:
    section.add "ProcessorFeatures", valid_607229
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607230: Call_PostRestoreDBInstanceToPointInTime_607187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_607230.validator(path, query, header, formData, body)
  let scheme = call_607230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607230.url(scheme.get, call_607230.host, call_607230.base,
                         call_607230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607230, url, valid)

proc call*(call_607231: Call_PostRestoreDBInstanceToPointInTime_607187;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_607232 = newJObject()
  var formData_607233 = newJObject()
  add(formData_607233, "Port", newJInt(Port))
  add(formData_607233, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607233, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_607233, "MultiAZ", newJBool(MultiAZ))
  add(formData_607233, "Domain", newJString(Domain))
  add(formData_607233, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_607233, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_607233.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607233, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_607233, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607233, "Engine", newJString(Engine))
  add(formData_607233, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607233, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_607233, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_607233, "DBName", newJString(DBName))
  add(formData_607233, "Iops", newJInt(Iops))
  add(formData_607233, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_607233.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_607233, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607232, "Action", newJString(Action))
  add(formData_607233, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_607233.add "Tags", Tags
  add(formData_607233, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_607233, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_607233, "OptionGroupName", newJString(OptionGroupName))
  add(formData_607233, "RestoreTime", newJString(RestoreTime))
  add(formData_607233, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607232, "Version", newJString(Version))
  add(formData_607233, "StorageType", newJString(StorageType))
  add(formData_607233, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_607233, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_607233, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_607233.add "ProcessorFeatures", ProcessorFeatures
  result = call_607231.call(nil, query_607232, nil, formData_607233, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_607187(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_607188, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_607189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_607141 = ref object of OpenApiRestCall_601389
proc url_GetRestoreDBInstanceToPointInTime_607143(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_607142(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_607144 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_607144 = validateParameter(valid_607144, JBool, required = false, default = nil)
  if valid_607144 != nil:
    section.add "UseDefaultProcessorFeatures", valid_607144
  var valid_607145 = query.getOrDefault("DBName")
  valid_607145 = validateParameter(valid_607145, JString, required = false,
                                 default = nil)
  if valid_607145 != nil:
    section.add "DBName", valid_607145
  var valid_607146 = query.getOrDefault("TdeCredentialPassword")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "TdeCredentialPassword", valid_607146
  var valid_607147 = query.getOrDefault("DeletionProtection")
  valid_607147 = validateParameter(valid_607147, JBool, required = false, default = nil)
  if valid_607147 != nil:
    section.add "DeletionProtection", valid_607147
  var valid_607148 = query.getOrDefault("Engine")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "Engine", valid_607148
  var valid_607149 = query.getOrDefault("UseLatestRestorableTime")
  valid_607149 = validateParameter(valid_607149, JBool, required = false, default = nil)
  if valid_607149 != nil:
    section.add "UseLatestRestorableTime", valid_607149
  var valid_607150 = query.getOrDefault("CopyTagsToSnapshot")
  valid_607150 = validateParameter(valid_607150, JBool, required = false, default = nil)
  if valid_607150 != nil:
    section.add "CopyTagsToSnapshot", valid_607150
  var valid_607151 = query.getOrDefault("DBParameterGroupName")
  valid_607151 = validateParameter(valid_607151, JString, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "DBParameterGroupName", valid_607151
  var valid_607152 = query.getOrDefault("Tags")
  valid_607152 = validateParameter(valid_607152, JArray, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "Tags", valid_607152
  var valid_607153 = query.getOrDefault("LicenseModel")
  valid_607153 = validateParameter(valid_607153, JString, required = false,
                                 default = nil)
  if valid_607153 != nil:
    section.add "LicenseModel", valid_607153
  var valid_607154 = query.getOrDefault("TdeCredentialArn")
  valid_607154 = validateParameter(valid_607154, JString, required = false,
                                 default = nil)
  if valid_607154 != nil:
    section.add "TdeCredentialArn", valid_607154
  var valid_607155 = query.getOrDefault("ProcessorFeatures")
  valid_607155 = validateParameter(valid_607155, JArray, required = false,
                                 default = nil)
  if valid_607155 != nil:
    section.add "ProcessorFeatures", valid_607155
  var valid_607156 = query.getOrDefault("StorageType")
  valid_607156 = validateParameter(valid_607156, JString, required = false,
                                 default = nil)
  if valid_607156 != nil:
    section.add "StorageType", valid_607156
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_607157 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_607157 = validateParameter(valid_607157, JString, required = true,
                                 default = nil)
  if valid_607157 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607157
  var valid_607158 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607158 = validateParameter(valid_607158, JBool, required = false, default = nil)
  if valid_607158 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607158
  var valid_607159 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_607159 = validateParameter(valid_607159, JArray, required = false,
                                 default = nil)
  if valid_607159 != nil:
    section.add "EnableCloudwatchLogsExports", valid_607159
  var valid_607160 = query.getOrDefault("Action")
  valid_607160 = validateParameter(valid_607160, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_607160 != nil:
    section.add "Action", valid_607160
  var valid_607161 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_607161 = validateParameter(valid_607161, JString, required = false,
                                 default = nil)
  if valid_607161 != nil:
    section.add "SourceDBInstanceIdentifier", valid_607161
  var valid_607162 = query.getOrDefault("MultiAZ")
  valid_607162 = validateParameter(valid_607162, JBool, required = false, default = nil)
  if valid_607162 != nil:
    section.add "MultiAZ", valid_607162
  var valid_607163 = query.getOrDefault("Port")
  valid_607163 = validateParameter(valid_607163, JInt, required = false, default = nil)
  if valid_607163 != nil:
    section.add "Port", valid_607163
  var valid_607164 = query.getOrDefault("Domain")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "Domain", valid_607164
  var valid_607165 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607165 = validateParameter(valid_607165, JArray, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "VpcSecurityGroupIds", valid_607165
  var valid_607166 = query.getOrDefault("SourceDbiResourceId")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "SourceDbiResourceId", valid_607166
  var valid_607167 = query.getOrDefault("AvailabilityZone")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "AvailabilityZone", valid_607167
  var valid_607168 = query.getOrDefault("OptionGroupName")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "OptionGroupName", valid_607168
  var valid_607169 = query.getOrDefault("DBSubnetGroupName")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "DBSubnetGroupName", valid_607169
  var valid_607170 = query.getOrDefault("RestoreTime")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "RestoreTime", valid_607170
  var valid_607171 = query.getOrDefault("DBInstanceClass")
  valid_607171 = validateParameter(valid_607171, JString, required = false,
                                 default = nil)
  if valid_607171 != nil:
    section.add "DBInstanceClass", valid_607171
  var valid_607172 = query.getOrDefault("PubliclyAccessible")
  valid_607172 = validateParameter(valid_607172, JBool, required = false, default = nil)
  if valid_607172 != nil:
    section.add "PubliclyAccessible", valid_607172
  var valid_607173 = query.getOrDefault("Version")
  valid_607173 = validateParameter(valid_607173, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607173 != nil:
    section.add "Version", valid_607173
  var valid_607174 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_607174 = validateParameter(valid_607174, JBool, required = false, default = nil)
  if valid_607174 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607174
  var valid_607175 = query.getOrDefault("Iops")
  valid_607175 = validateParameter(valid_607175, JInt, required = false, default = nil)
  if valid_607175 != nil:
    section.add "Iops", valid_607175
  var valid_607176 = query.getOrDefault("DomainIAMRoleName")
  valid_607176 = validateParameter(valid_607176, JString, required = false,
                                 default = nil)
  if valid_607176 != nil:
    section.add "DomainIAMRoleName", valid_607176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607177 = header.getOrDefault("X-Amz-Signature")
  valid_607177 = validateParameter(valid_607177, JString, required = false,
                                 default = nil)
  if valid_607177 != nil:
    section.add "X-Amz-Signature", valid_607177
  var valid_607178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607178 = validateParameter(valid_607178, JString, required = false,
                                 default = nil)
  if valid_607178 != nil:
    section.add "X-Amz-Content-Sha256", valid_607178
  var valid_607179 = header.getOrDefault("X-Amz-Date")
  valid_607179 = validateParameter(valid_607179, JString, required = false,
                                 default = nil)
  if valid_607179 != nil:
    section.add "X-Amz-Date", valid_607179
  var valid_607180 = header.getOrDefault("X-Amz-Credential")
  valid_607180 = validateParameter(valid_607180, JString, required = false,
                                 default = nil)
  if valid_607180 != nil:
    section.add "X-Amz-Credential", valid_607180
  var valid_607181 = header.getOrDefault("X-Amz-Security-Token")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Security-Token", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Algorithm")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Algorithm", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-SignedHeaders", valid_607183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607184: Call_GetRestoreDBInstanceToPointInTime_607141;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_607184.validator(path, query, header, formData, body)
  let scheme = call_607184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607184.url(scheme.get, call_607184.host, call_607184.base,
                         call_607184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607184, url, valid)

proc call*(call_607185: Call_GetRestoreDBInstanceToPointInTime_607141;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_607186 = newJObject()
  add(query_607186, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_607186, "DBName", newJString(DBName))
  add(query_607186, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_607186, "DeletionProtection", newJBool(DeletionProtection))
  add(query_607186, "Engine", newJString(Engine))
  add(query_607186, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_607186, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_607186, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_607186.add "Tags", Tags
  add(query_607186, "LicenseModel", newJString(LicenseModel))
  add(query_607186, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_607186.add "ProcessorFeatures", ProcessorFeatures
  add(query_607186, "StorageType", newJString(StorageType))
  add(query_607186, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607186, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_607186.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_607186, "Action", newJString(Action))
  add(query_607186, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_607186, "MultiAZ", newJBool(MultiAZ))
  add(query_607186, "Port", newJInt(Port))
  add(query_607186, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_607186.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_607186, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_607186, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_607186, "OptionGroupName", newJString(OptionGroupName))
  add(query_607186, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607186, "RestoreTime", newJString(RestoreTime))
  add(query_607186, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_607186, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_607186, "Version", newJString(Version))
  add(query_607186, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_607186, "Iops", newJInt(Iops))
  add(query_607186, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_607185.call(nil, query_607186, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_607141(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_607142, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_607143,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_607254 = ref object of OpenApiRestCall_601389
proc url_PostRevokeDBSecurityGroupIngress_607256(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_607255(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607257 = query.getOrDefault("Action")
  valid_607257 = validateParameter(valid_607257, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_607257 != nil:
    section.add "Action", valid_607257
  var valid_607258 = query.getOrDefault("Version")
  valid_607258 = validateParameter(valid_607258, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607258 != nil:
    section.add "Version", valid_607258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607259 = header.getOrDefault("X-Amz-Signature")
  valid_607259 = validateParameter(valid_607259, JString, required = false,
                                 default = nil)
  if valid_607259 != nil:
    section.add "X-Amz-Signature", valid_607259
  var valid_607260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607260 = validateParameter(valid_607260, JString, required = false,
                                 default = nil)
  if valid_607260 != nil:
    section.add "X-Amz-Content-Sha256", valid_607260
  var valid_607261 = header.getOrDefault("X-Amz-Date")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Date", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Credential")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Credential", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Security-Token")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Security-Token", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Algorithm")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Algorithm", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-SignedHeaders", valid_607265
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_607266 = formData.getOrDefault("DBSecurityGroupName")
  valid_607266 = validateParameter(valid_607266, JString, required = true,
                                 default = nil)
  if valid_607266 != nil:
    section.add "DBSecurityGroupName", valid_607266
  var valid_607267 = formData.getOrDefault("EC2SecurityGroupName")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "EC2SecurityGroupName", valid_607267
  var valid_607268 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_607268 = validateParameter(valid_607268, JString, required = false,
                                 default = nil)
  if valid_607268 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_607268
  var valid_607269 = formData.getOrDefault("EC2SecurityGroupId")
  valid_607269 = validateParameter(valid_607269, JString, required = false,
                                 default = nil)
  if valid_607269 != nil:
    section.add "EC2SecurityGroupId", valid_607269
  var valid_607270 = formData.getOrDefault("CIDRIP")
  valid_607270 = validateParameter(valid_607270, JString, required = false,
                                 default = nil)
  if valid_607270 != nil:
    section.add "CIDRIP", valid_607270
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607271: Call_PostRevokeDBSecurityGroupIngress_607254;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_607271.validator(path, query, header, formData, body)
  let scheme = call_607271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607271.url(scheme.get, call_607271.host, call_607271.base,
                         call_607271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607271, url, valid)

proc call*(call_607272: Call_PostRevokeDBSecurityGroupIngress_607254;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607273 = newJObject()
  var formData_607274 = newJObject()
  add(formData_607274, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_607274, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_607274, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_607274, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_607274, "CIDRIP", newJString(CIDRIP))
  add(query_607273, "Action", newJString(Action))
  add(query_607273, "Version", newJString(Version))
  result = call_607272.call(nil, query_607273, nil, formData_607274, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_607254(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_607255, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_607256,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_607234 = ref object of OpenApiRestCall_601389
proc url_GetRevokeDBSecurityGroupIngress_607236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_607235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_607237 = query.getOrDefault("EC2SecurityGroupName")
  valid_607237 = validateParameter(valid_607237, JString, required = false,
                                 default = nil)
  if valid_607237 != nil:
    section.add "EC2SecurityGroupName", valid_607237
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_607238 = query.getOrDefault("DBSecurityGroupName")
  valid_607238 = validateParameter(valid_607238, JString, required = true,
                                 default = nil)
  if valid_607238 != nil:
    section.add "DBSecurityGroupName", valid_607238
  var valid_607239 = query.getOrDefault("EC2SecurityGroupId")
  valid_607239 = validateParameter(valid_607239, JString, required = false,
                                 default = nil)
  if valid_607239 != nil:
    section.add "EC2SecurityGroupId", valid_607239
  var valid_607240 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_607240 = validateParameter(valid_607240, JString, required = false,
                                 default = nil)
  if valid_607240 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_607240
  var valid_607241 = query.getOrDefault("Action")
  valid_607241 = validateParameter(valid_607241, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_607241 != nil:
    section.add "Action", valid_607241
  var valid_607242 = query.getOrDefault("Version")
  valid_607242 = validateParameter(valid_607242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607242 != nil:
    section.add "Version", valid_607242
  var valid_607243 = query.getOrDefault("CIDRIP")
  valid_607243 = validateParameter(valid_607243, JString, required = false,
                                 default = nil)
  if valid_607243 != nil:
    section.add "CIDRIP", valid_607243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607244 = header.getOrDefault("X-Amz-Signature")
  valid_607244 = validateParameter(valid_607244, JString, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "X-Amz-Signature", valid_607244
  var valid_607245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "X-Amz-Content-Sha256", valid_607245
  var valid_607246 = header.getOrDefault("X-Amz-Date")
  valid_607246 = validateParameter(valid_607246, JString, required = false,
                                 default = nil)
  if valid_607246 != nil:
    section.add "X-Amz-Date", valid_607246
  var valid_607247 = header.getOrDefault("X-Amz-Credential")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Credential", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Security-Token")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Security-Token", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-Algorithm")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-Algorithm", valid_607249
  var valid_607250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-SignedHeaders", valid_607250
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607251: Call_GetRevokeDBSecurityGroupIngress_607234;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_607251.validator(path, query, header, formData, body)
  let scheme = call_607251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607251.url(scheme.get, call_607251.host, call_607251.base,
                         call_607251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607251, url, valid)

proc call*(call_607252: Call_GetRevokeDBSecurityGroupIngress_607234;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_607253 = newJObject()
  add(query_607253, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_607253, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_607253, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_607253, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_607253, "Action", newJString(Action))
  add(query_607253, "Version", newJString(Version))
  add(query_607253, "CIDRIP", newJString(CIDRIP))
  result = call_607252.call(nil, query_607253, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_607234(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_607235, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_607236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_607294 = ref object of OpenApiRestCall_601389
proc url_PostStartActivityStream_607296(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_607295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607297 = query.getOrDefault("Action")
  valid_607297 = validateParameter(valid_607297, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_607297 != nil:
    section.add "Action", valid_607297
  var valid_607298 = query.getOrDefault("Version")
  valid_607298 = validateParameter(valid_607298, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607298 != nil:
    section.add "Version", valid_607298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607299 = header.getOrDefault("X-Amz-Signature")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Signature", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-Content-Sha256", valid_607300
  var valid_607301 = header.getOrDefault("X-Amz-Date")
  valid_607301 = validateParameter(valid_607301, JString, required = false,
                                 default = nil)
  if valid_607301 != nil:
    section.add "X-Amz-Date", valid_607301
  var valid_607302 = header.getOrDefault("X-Amz-Credential")
  valid_607302 = validateParameter(valid_607302, JString, required = false,
                                 default = nil)
  if valid_607302 != nil:
    section.add "X-Amz-Credential", valid_607302
  var valid_607303 = header.getOrDefault("X-Amz-Security-Token")
  valid_607303 = validateParameter(valid_607303, JString, required = false,
                                 default = nil)
  if valid_607303 != nil:
    section.add "X-Amz-Security-Token", valid_607303
  var valid_607304 = header.getOrDefault("X-Amz-Algorithm")
  valid_607304 = validateParameter(valid_607304, JString, required = false,
                                 default = nil)
  if valid_607304 != nil:
    section.add "X-Amz-Algorithm", valid_607304
  var valid_607305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607305 = validateParameter(valid_607305, JString, required = false,
                                 default = nil)
  if valid_607305 != nil:
    section.add "X-Amz-SignedHeaders", valid_607305
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_607306 = formData.getOrDefault("ResourceArn")
  valid_607306 = validateParameter(valid_607306, JString, required = true,
                                 default = nil)
  if valid_607306 != nil:
    section.add "ResourceArn", valid_607306
  var valid_607307 = formData.getOrDefault("Mode")
  valid_607307 = validateParameter(valid_607307, JString, required = true,
                                 default = newJString("sync"))
  if valid_607307 != nil:
    section.add "Mode", valid_607307
  var valid_607308 = formData.getOrDefault("KmsKeyId")
  valid_607308 = validateParameter(valid_607308, JString, required = true,
                                 default = nil)
  if valid_607308 != nil:
    section.add "KmsKeyId", valid_607308
  var valid_607309 = formData.getOrDefault("ApplyImmediately")
  valid_607309 = validateParameter(valid_607309, JBool, required = false, default = nil)
  if valid_607309 != nil:
    section.add "ApplyImmediately", valid_607309
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607310: Call_PostStartActivityStream_607294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_607310.validator(path, query, header, formData, body)
  let scheme = call_607310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607310.url(scheme.get, call_607310.host, call_607310.base,
                         call_607310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607310, url, valid)

proc call*(call_607311: Call_PostStartActivityStream_607294; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607312 = newJObject()
  var formData_607313 = newJObject()
  add(formData_607313, "ResourceArn", newJString(ResourceArn))
  add(formData_607313, "Mode", newJString(Mode))
  add(formData_607313, "KmsKeyId", newJString(KmsKeyId))
  add(formData_607313, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607312, "Action", newJString(Action))
  add(query_607312, "Version", newJString(Version))
  result = call_607311.call(nil, query_607312, nil, formData_607313, nil)

var postStartActivityStream* = Call_PostStartActivityStream_607294(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_607295, base: "/",
    url: url_PostStartActivityStream_607296, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_607275 = ref object of OpenApiRestCall_601389
proc url_GetStartActivityStream_607277(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_607276(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_607278 = query.getOrDefault("KmsKeyId")
  valid_607278 = validateParameter(valid_607278, JString, required = true,
                                 default = nil)
  if valid_607278 != nil:
    section.add "KmsKeyId", valid_607278
  var valid_607279 = query.getOrDefault("ResourceArn")
  valid_607279 = validateParameter(valid_607279, JString, required = true,
                                 default = nil)
  if valid_607279 != nil:
    section.add "ResourceArn", valid_607279
  var valid_607280 = query.getOrDefault("Mode")
  valid_607280 = validateParameter(valid_607280, JString, required = true,
                                 default = newJString("sync"))
  if valid_607280 != nil:
    section.add "Mode", valid_607280
  var valid_607281 = query.getOrDefault("Action")
  valid_607281 = validateParameter(valid_607281, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_607281 != nil:
    section.add "Action", valid_607281
  var valid_607282 = query.getOrDefault("ApplyImmediately")
  valid_607282 = validateParameter(valid_607282, JBool, required = false, default = nil)
  if valid_607282 != nil:
    section.add "ApplyImmediately", valid_607282
  var valid_607283 = query.getOrDefault("Version")
  valid_607283 = validateParameter(valid_607283, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607283 != nil:
    section.add "Version", valid_607283
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607284 = header.getOrDefault("X-Amz-Signature")
  valid_607284 = validateParameter(valid_607284, JString, required = false,
                                 default = nil)
  if valid_607284 != nil:
    section.add "X-Amz-Signature", valid_607284
  var valid_607285 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "X-Amz-Content-Sha256", valid_607285
  var valid_607286 = header.getOrDefault("X-Amz-Date")
  valid_607286 = validateParameter(valid_607286, JString, required = false,
                                 default = nil)
  if valid_607286 != nil:
    section.add "X-Amz-Date", valid_607286
  var valid_607287 = header.getOrDefault("X-Amz-Credential")
  valid_607287 = validateParameter(valid_607287, JString, required = false,
                                 default = nil)
  if valid_607287 != nil:
    section.add "X-Amz-Credential", valid_607287
  var valid_607288 = header.getOrDefault("X-Amz-Security-Token")
  valid_607288 = validateParameter(valid_607288, JString, required = false,
                                 default = nil)
  if valid_607288 != nil:
    section.add "X-Amz-Security-Token", valid_607288
  var valid_607289 = header.getOrDefault("X-Amz-Algorithm")
  valid_607289 = validateParameter(valid_607289, JString, required = false,
                                 default = nil)
  if valid_607289 != nil:
    section.add "X-Amz-Algorithm", valid_607289
  var valid_607290 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607290 = validateParameter(valid_607290, JString, required = false,
                                 default = nil)
  if valid_607290 != nil:
    section.add "X-Amz-SignedHeaders", valid_607290
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607291: Call_GetStartActivityStream_607275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_607291.validator(path, query, header, formData, body)
  let scheme = call_607291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607291.url(scheme.get, call_607291.host, call_607291.base,
                         call_607291.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607291, url, valid)

proc call*(call_607292: Call_GetStartActivityStream_607275; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_607293 = newJObject()
  add(query_607293, "KmsKeyId", newJString(KmsKeyId))
  add(query_607293, "ResourceArn", newJString(ResourceArn))
  add(query_607293, "Mode", newJString(Mode))
  add(query_607293, "Action", newJString(Action))
  add(query_607293, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607293, "Version", newJString(Version))
  result = call_607292.call(nil, query_607293, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_607275(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_607276, base: "/",
    url: url_GetStartActivityStream_607277, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_607330 = ref object of OpenApiRestCall_601389
proc url_PostStartDBCluster_607332(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_607331(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607333 = query.getOrDefault("Action")
  valid_607333 = validateParameter(valid_607333, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_607333 != nil:
    section.add "Action", valid_607333
  var valid_607334 = query.getOrDefault("Version")
  valid_607334 = validateParameter(valid_607334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607334 != nil:
    section.add "Version", valid_607334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607335 = header.getOrDefault("X-Amz-Signature")
  valid_607335 = validateParameter(valid_607335, JString, required = false,
                                 default = nil)
  if valid_607335 != nil:
    section.add "X-Amz-Signature", valid_607335
  var valid_607336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607336 = validateParameter(valid_607336, JString, required = false,
                                 default = nil)
  if valid_607336 != nil:
    section.add "X-Amz-Content-Sha256", valid_607336
  var valid_607337 = header.getOrDefault("X-Amz-Date")
  valid_607337 = validateParameter(valid_607337, JString, required = false,
                                 default = nil)
  if valid_607337 != nil:
    section.add "X-Amz-Date", valid_607337
  var valid_607338 = header.getOrDefault("X-Amz-Credential")
  valid_607338 = validateParameter(valid_607338, JString, required = false,
                                 default = nil)
  if valid_607338 != nil:
    section.add "X-Amz-Credential", valid_607338
  var valid_607339 = header.getOrDefault("X-Amz-Security-Token")
  valid_607339 = validateParameter(valid_607339, JString, required = false,
                                 default = nil)
  if valid_607339 != nil:
    section.add "X-Amz-Security-Token", valid_607339
  var valid_607340 = header.getOrDefault("X-Amz-Algorithm")
  valid_607340 = validateParameter(valid_607340, JString, required = false,
                                 default = nil)
  if valid_607340 != nil:
    section.add "X-Amz-Algorithm", valid_607340
  var valid_607341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607341 = validateParameter(valid_607341, JString, required = false,
                                 default = nil)
  if valid_607341 != nil:
    section.add "X-Amz-SignedHeaders", valid_607341
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607342 = formData.getOrDefault("DBClusterIdentifier")
  valid_607342 = validateParameter(valid_607342, JString, required = true,
                                 default = nil)
  if valid_607342 != nil:
    section.add "DBClusterIdentifier", valid_607342
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607343: Call_PostStartDBCluster_607330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607343.validator(path, query, header, formData, body)
  let scheme = call_607343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607343.url(scheme.get, call_607343.host, call_607343.base,
                         call_607343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607343, url, valid)

proc call*(call_607344: Call_PostStartDBCluster_607330;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_607345 = newJObject()
  var formData_607346 = newJObject()
  add(query_607345, "Action", newJString(Action))
  add(query_607345, "Version", newJString(Version))
  add(formData_607346, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607344.call(nil, query_607345, nil, formData_607346, nil)

var postStartDBCluster* = Call_PostStartDBCluster_607330(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_607331, base: "/",
    url: url_PostStartDBCluster_607332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_607314 = ref object of OpenApiRestCall_601389
proc url_GetStartDBCluster_607316(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_607315(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607317 = query.getOrDefault("DBClusterIdentifier")
  valid_607317 = validateParameter(valid_607317, JString, required = true,
                                 default = nil)
  if valid_607317 != nil:
    section.add "DBClusterIdentifier", valid_607317
  var valid_607318 = query.getOrDefault("Action")
  valid_607318 = validateParameter(valid_607318, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_607318 != nil:
    section.add "Action", valid_607318
  var valid_607319 = query.getOrDefault("Version")
  valid_607319 = validateParameter(valid_607319, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607319 != nil:
    section.add "Version", valid_607319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607320 = header.getOrDefault("X-Amz-Signature")
  valid_607320 = validateParameter(valid_607320, JString, required = false,
                                 default = nil)
  if valid_607320 != nil:
    section.add "X-Amz-Signature", valid_607320
  var valid_607321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607321 = validateParameter(valid_607321, JString, required = false,
                                 default = nil)
  if valid_607321 != nil:
    section.add "X-Amz-Content-Sha256", valid_607321
  var valid_607322 = header.getOrDefault("X-Amz-Date")
  valid_607322 = validateParameter(valid_607322, JString, required = false,
                                 default = nil)
  if valid_607322 != nil:
    section.add "X-Amz-Date", valid_607322
  var valid_607323 = header.getOrDefault("X-Amz-Credential")
  valid_607323 = validateParameter(valid_607323, JString, required = false,
                                 default = nil)
  if valid_607323 != nil:
    section.add "X-Amz-Credential", valid_607323
  var valid_607324 = header.getOrDefault("X-Amz-Security-Token")
  valid_607324 = validateParameter(valid_607324, JString, required = false,
                                 default = nil)
  if valid_607324 != nil:
    section.add "X-Amz-Security-Token", valid_607324
  var valid_607325 = header.getOrDefault("X-Amz-Algorithm")
  valid_607325 = validateParameter(valid_607325, JString, required = false,
                                 default = nil)
  if valid_607325 != nil:
    section.add "X-Amz-Algorithm", valid_607325
  var valid_607326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607326 = validateParameter(valid_607326, JString, required = false,
                                 default = nil)
  if valid_607326 != nil:
    section.add "X-Amz-SignedHeaders", valid_607326
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607327: Call_GetStartDBCluster_607314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607327.validator(path, query, header, formData, body)
  let scheme = call_607327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607327.url(scheme.get, call_607327.host, call_607327.base,
                         call_607327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607327, url, valid)

proc call*(call_607328: Call_GetStartDBCluster_607314; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607329 = newJObject()
  add(query_607329, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607329, "Action", newJString(Action))
  add(query_607329, "Version", newJString(Version))
  result = call_607328.call(nil, query_607329, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_607314(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_607315,
    base: "/", url: url_GetStartDBCluster_607316,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_607363 = ref object of OpenApiRestCall_601389
proc url_PostStartDBInstance_607365(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_607364(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607366 = query.getOrDefault("Action")
  valid_607366 = validateParameter(valid_607366, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_607366 != nil:
    section.add "Action", valid_607366
  var valid_607367 = query.getOrDefault("Version")
  valid_607367 = validateParameter(valid_607367, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607367 != nil:
    section.add "Version", valid_607367
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607368 = header.getOrDefault("X-Amz-Signature")
  valid_607368 = validateParameter(valid_607368, JString, required = false,
                                 default = nil)
  if valid_607368 != nil:
    section.add "X-Amz-Signature", valid_607368
  var valid_607369 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607369 = validateParameter(valid_607369, JString, required = false,
                                 default = nil)
  if valid_607369 != nil:
    section.add "X-Amz-Content-Sha256", valid_607369
  var valid_607370 = header.getOrDefault("X-Amz-Date")
  valid_607370 = validateParameter(valid_607370, JString, required = false,
                                 default = nil)
  if valid_607370 != nil:
    section.add "X-Amz-Date", valid_607370
  var valid_607371 = header.getOrDefault("X-Amz-Credential")
  valid_607371 = validateParameter(valid_607371, JString, required = false,
                                 default = nil)
  if valid_607371 != nil:
    section.add "X-Amz-Credential", valid_607371
  var valid_607372 = header.getOrDefault("X-Amz-Security-Token")
  valid_607372 = validateParameter(valid_607372, JString, required = false,
                                 default = nil)
  if valid_607372 != nil:
    section.add "X-Amz-Security-Token", valid_607372
  var valid_607373 = header.getOrDefault("X-Amz-Algorithm")
  valid_607373 = validateParameter(valid_607373, JString, required = false,
                                 default = nil)
  if valid_607373 != nil:
    section.add "X-Amz-Algorithm", valid_607373
  var valid_607374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607374 = validateParameter(valid_607374, JString, required = false,
                                 default = nil)
  if valid_607374 != nil:
    section.add "X-Amz-SignedHeaders", valid_607374
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607375 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607375 = validateParameter(valid_607375, JString, required = true,
                                 default = nil)
  if valid_607375 != nil:
    section.add "DBInstanceIdentifier", valid_607375
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607376: Call_PostStartDBInstance_607363; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_607376.validator(path, query, header, formData, body)
  let scheme = call_607376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607376.url(scheme.get, call_607376.host, call_607376.base,
                         call_607376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607376, url, valid)

proc call*(call_607377: Call_PostStartDBInstance_607363;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607378 = newJObject()
  var formData_607379 = newJObject()
  add(formData_607379, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607378, "Action", newJString(Action))
  add(query_607378, "Version", newJString(Version))
  result = call_607377.call(nil, query_607378, nil, formData_607379, nil)

var postStartDBInstance* = Call_PostStartDBInstance_607363(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_607364, base: "/",
    url: url_PostStartDBInstance_607365, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_607347 = ref object of OpenApiRestCall_601389
proc url_GetStartDBInstance_607349(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_607348(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607350 = query.getOrDefault("DBInstanceIdentifier")
  valid_607350 = validateParameter(valid_607350, JString, required = true,
                                 default = nil)
  if valid_607350 != nil:
    section.add "DBInstanceIdentifier", valid_607350
  var valid_607351 = query.getOrDefault("Action")
  valid_607351 = validateParameter(valid_607351, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_607351 != nil:
    section.add "Action", valid_607351
  var valid_607352 = query.getOrDefault("Version")
  valid_607352 = validateParameter(valid_607352, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607352 != nil:
    section.add "Version", valid_607352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607353 = header.getOrDefault("X-Amz-Signature")
  valid_607353 = validateParameter(valid_607353, JString, required = false,
                                 default = nil)
  if valid_607353 != nil:
    section.add "X-Amz-Signature", valid_607353
  var valid_607354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607354 = validateParameter(valid_607354, JString, required = false,
                                 default = nil)
  if valid_607354 != nil:
    section.add "X-Amz-Content-Sha256", valid_607354
  var valid_607355 = header.getOrDefault("X-Amz-Date")
  valid_607355 = validateParameter(valid_607355, JString, required = false,
                                 default = nil)
  if valid_607355 != nil:
    section.add "X-Amz-Date", valid_607355
  var valid_607356 = header.getOrDefault("X-Amz-Credential")
  valid_607356 = validateParameter(valid_607356, JString, required = false,
                                 default = nil)
  if valid_607356 != nil:
    section.add "X-Amz-Credential", valid_607356
  var valid_607357 = header.getOrDefault("X-Amz-Security-Token")
  valid_607357 = validateParameter(valid_607357, JString, required = false,
                                 default = nil)
  if valid_607357 != nil:
    section.add "X-Amz-Security-Token", valid_607357
  var valid_607358 = header.getOrDefault("X-Amz-Algorithm")
  valid_607358 = validateParameter(valid_607358, JString, required = false,
                                 default = nil)
  if valid_607358 != nil:
    section.add "X-Amz-Algorithm", valid_607358
  var valid_607359 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607359 = validateParameter(valid_607359, JString, required = false,
                                 default = nil)
  if valid_607359 != nil:
    section.add "X-Amz-SignedHeaders", valid_607359
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607360: Call_GetStartDBInstance_607347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_607360.validator(path, query, header, formData, body)
  let scheme = call_607360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607360.url(scheme.get, call_607360.host, call_607360.base,
                         call_607360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607360, url, valid)

proc call*(call_607361: Call_GetStartDBInstance_607347;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607362 = newJObject()
  add(query_607362, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607362, "Action", newJString(Action))
  add(query_607362, "Version", newJString(Version))
  result = call_607361.call(nil, query_607362, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_607347(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_607348,
    base: "/", url: url_GetStartDBInstance_607349,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_607397 = ref object of OpenApiRestCall_601389
proc url_PostStopActivityStream_607399(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_607398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607400 = query.getOrDefault("Action")
  valid_607400 = validateParameter(valid_607400, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_607400 != nil:
    section.add "Action", valid_607400
  var valid_607401 = query.getOrDefault("Version")
  valid_607401 = validateParameter(valid_607401, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607401 != nil:
    section.add "Version", valid_607401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607402 = header.getOrDefault("X-Amz-Signature")
  valid_607402 = validateParameter(valid_607402, JString, required = false,
                                 default = nil)
  if valid_607402 != nil:
    section.add "X-Amz-Signature", valid_607402
  var valid_607403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607403 = validateParameter(valid_607403, JString, required = false,
                                 default = nil)
  if valid_607403 != nil:
    section.add "X-Amz-Content-Sha256", valid_607403
  var valid_607404 = header.getOrDefault("X-Amz-Date")
  valid_607404 = validateParameter(valid_607404, JString, required = false,
                                 default = nil)
  if valid_607404 != nil:
    section.add "X-Amz-Date", valid_607404
  var valid_607405 = header.getOrDefault("X-Amz-Credential")
  valid_607405 = validateParameter(valid_607405, JString, required = false,
                                 default = nil)
  if valid_607405 != nil:
    section.add "X-Amz-Credential", valid_607405
  var valid_607406 = header.getOrDefault("X-Amz-Security-Token")
  valid_607406 = validateParameter(valid_607406, JString, required = false,
                                 default = nil)
  if valid_607406 != nil:
    section.add "X-Amz-Security-Token", valid_607406
  var valid_607407 = header.getOrDefault("X-Amz-Algorithm")
  valid_607407 = validateParameter(valid_607407, JString, required = false,
                                 default = nil)
  if valid_607407 != nil:
    section.add "X-Amz-Algorithm", valid_607407
  var valid_607408 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607408 = validateParameter(valid_607408, JString, required = false,
                                 default = nil)
  if valid_607408 != nil:
    section.add "X-Amz-SignedHeaders", valid_607408
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_607409 = formData.getOrDefault("ResourceArn")
  valid_607409 = validateParameter(valid_607409, JString, required = true,
                                 default = nil)
  if valid_607409 != nil:
    section.add "ResourceArn", valid_607409
  var valid_607410 = formData.getOrDefault("ApplyImmediately")
  valid_607410 = validateParameter(valid_607410, JBool, required = false, default = nil)
  if valid_607410 != nil:
    section.add "ApplyImmediately", valid_607410
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607411: Call_PostStopActivityStream_607397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_607411.validator(path, query, header, formData, body)
  let scheme = call_607411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607411.url(scheme.get, call_607411.host, call_607411.base,
                         call_607411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607411, url, valid)

proc call*(call_607412: Call_PostStopActivityStream_607397; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607413 = newJObject()
  var formData_607414 = newJObject()
  add(formData_607414, "ResourceArn", newJString(ResourceArn))
  add(formData_607414, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607413, "Action", newJString(Action))
  add(query_607413, "Version", newJString(Version))
  result = call_607412.call(nil, query_607413, nil, formData_607414, nil)

var postStopActivityStream* = Call_PostStopActivityStream_607397(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_607398, base: "/",
    url: url_PostStopActivityStream_607399, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_607380 = ref object of OpenApiRestCall_601389
proc url_GetStopActivityStream_607382(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_607381(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_607383 = query.getOrDefault("ResourceArn")
  valid_607383 = validateParameter(valid_607383, JString, required = true,
                                 default = nil)
  if valid_607383 != nil:
    section.add "ResourceArn", valid_607383
  var valid_607384 = query.getOrDefault("Action")
  valid_607384 = validateParameter(valid_607384, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_607384 != nil:
    section.add "Action", valid_607384
  var valid_607385 = query.getOrDefault("ApplyImmediately")
  valid_607385 = validateParameter(valid_607385, JBool, required = false, default = nil)
  if valid_607385 != nil:
    section.add "ApplyImmediately", valid_607385
  var valid_607386 = query.getOrDefault("Version")
  valid_607386 = validateParameter(valid_607386, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607386 != nil:
    section.add "Version", valid_607386
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607387 = header.getOrDefault("X-Amz-Signature")
  valid_607387 = validateParameter(valid_607387, JString, required = false,
                                 default = nil)
  if valid_607387 != nil:
    section.add "X-Amz-Signature", valid_607387
  var valid_607388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607388 = validateParameter(valid_607388, JString, required = false,
                                 default = nil)
  if valid_607388 != nil:
    section.add "X-Amz-Content-Sha256", valid_607388
  var valid_607389 = header.getOrDefault("X-Amz-Date")
  valid_607389 = validateParameter(valid_607389, JString, required = false,
                                 default = nil)
  if valid_607389 != nil:
    section.add "X-Amz-Date", valid_607389
  var valid_607390 = header.getOrDefault("X-Amz-Credential")
  valid_607390 = validateParameter(valid_607390, JString, required = false,
                                 default = nil)
  if valid_607390 != nil:
    section.add "X-Amz-Credential", valid_607390
  var valid_607391 = header.getOrDefault("X-Amz-Security-Token")
  valid_607391 = validateParameter(valid_607391, JString, required = false,
                                 default = nil)
  if valid_607391 != nil:
    section.add "X-Amz-Security-Token", valid_607391
  var valid_607392 = header.getOrDefault("X-Amz-Algorithm")
  valid_607392 = validateParameter(valid_607392, JString, required = false,
                                 default = nil)
  if valid_607392 != nil:
    section.add "X-Amz-Algorithm", valid_607392
  var valid_607393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607393 = validateParameter(valid_607393, JString, required = false,
                                 default = nil)
  if valid_607393 != nil:
    section.add "X-Amz-SignedHeaders", valid_607393
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607394: Call_GetStopActivityStream_607380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_607394.validator(path, query, header, formData, body)
  let scheme = call_607394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607394.url(scheme.get, call_607394.host, call_607394.base,
                         call_607394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607394, url, valid)

proc call*(call_607395: Call_GetStopActivityStream_607380; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_607396 = newJObject()
  add(query_607396, "ResourceArn", newJString(ResourceArn))
  add(query_607396, "Action", newJString(Action))
  add(query_607396, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607396, "Version", newJString(Version))
  result = call_607395.call(nil, query_607396, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_607380(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_607381, base: "/",
    url: url_GetStopActivityStream_607382, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_607431 = ref object of OpenApiRestCall_601389
proc url_PostStopDBCluster_607433(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_607432(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607434 = query.getOrDefault("Action")
  valid_607434 = validateParameter(valid_607434, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_607434 != nil:
    section.add "Action", valid_607434
  var valid_607435 = query.getOrDefault("Version")
  valid_607435 = validateParameter(valid_607435, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607435 != nil:
    section.add "Version", valid_607435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607436 = header.getOrDefault("X-Amz-Signature")
  valid_607436 = validateParameter(valid_607436, JString, required = false,
                                 default = nil)
  if valid_607436 != nil:
    section.add "X-Amz-Signature", valid_607436
  var valid_607437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607437 = validateParameter(valid_607437, JString, required = false,
                                 default = nil)
  if valid_607437 != nil:
    section.add "X-Amz-Content-Sha256", valid_607437
  var valid_607438 = header.getOrDefault("X-Amz-Date")
  valid_607438 = validateParameter(valid_607438, JString, required = false,
                                 default = nil)
  if valid_607438 != nil:
    section.add "X-Amz-Date", valid_607438
  var valid_607439 = header.getOrDefault("X-Amz-Credential")
  valid_607439 = validateParameter(valid_607439, JString, required = false,
                                 default = nil)
  if valid_607439 != nil:
    section.add "X-Amz-Credential", valid_607439
  var valid_607440 = header.getOrDefault("X-Amz-Security-Token")
  valid_607440 = validateParameter(valid_607440, JString, required = false,
                                 default = nil)
  if valid_607440 != nil:
    section.add "X-Amz-Security-Token", valid_607440
  var valid_607441 = header.getOrDefault("X-Amz-Algorithm")
  valid_607441 = validateParameter(valid_607441, JString, required = false,
                                 default = nil)
  if valid_607441 != nil:
    section.add "X-Amz-Algorithm", valid_607441
  var valid_607442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607442 = validateParameter(valid_607442, JString, required = false,
                                 default = nil)
  if valid_607442 != nil:
    section.add "X-Amz-SignedHeaders", valid_607442
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607443 = formData.getOrDefault("DBClusterIdentifier")
  valid_607443 = validateParameter(valid_607443, JString, required = true,
                                 default = nil)
  if valid_607443 != nil:
    section.add "DBClusterIdentifier", valid_607443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607444: Call_PostStopDBCluster_607431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607444.validator(path, query, header, formData, body)
  let scheme = call_607444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607444.url(scheme.get, call_607444.host, call_607444.base,
                         call_607444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607444, url, valid)

proc call*(call_607445: Call_PostStopDBCluster_607431; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_607446 = newJObject()
  var formData_607447 = newJObject()
  add(query_607446, "Action", newJString(Action))
  add(query_607446, "Version", newJString(Version))
  add(formData_607447, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607445.call(nil, query_607446, nil, formData_607447, nil)

var postStopDBCluster* = Call_PostStopDBCluster_607431(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_607432,
    base: "/", url: url_PostStopDBCluster_607433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_607415 = ref object of OpenApiRestCall_601389
proc url_GetStopDBCluster_607417(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_607416(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607418 = query.getOrDefault("DBClusterIdentifier")
  valid_607418 = validateParameter(valid_607418, JString, required = true,
                                 default = nil)
  if valid_607418 != nil:
    section.add "DBClusterIdentifier", valid_607418
  var valid_607419 = query.getOrDefault("Action")
  valid_607419 = validateParameter(valid_607419, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_607419 != nil:
    section.add "Action", valid_607419
  var valid_607420 = query.getOrDefault("Version")
  valid_607420 = validateParameter(valid_607420, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607420 != nil:
    section.add "Version", valid_607420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607421 = header.getOrDefault("X-Amz-Signature")
  valid_607421 = validateParameter(valid_607421, JString, required = false,
                                 default = nil)
  if valid_607421 != nil:
    section.add "X-Amz-Signature", valid_607421
  var valid_607422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607422 = validateParameter(valid_607422, JString, required = false,
                                 default = nil)
  if valid_607422 != nil:
    section.add "X-Amz-Content-Sha256", valid_607422
  var valid_607423 = header.getOrDefault("X-Amz-Date")
  valid_607423 = validateParameter(valid_607423, JString, required = false,
                                 default = nil)
  if valid_607423 != nil:
    section.add "X-Amz-Date", valid_607423
  var valid_607424 = header.getOrDefault("X-Amz-Credential")
  valid_607424 = validateParameter(valid_607424, JString, required = false,
                                 default = nil)
  if valid_607424 != nil:
    section.add "X-Amz-Credential", valid_607424
  var valid_607425 = header.getOrDefault("X-Amz-Security-Token")
  valid_607425 = validateParameter(valid_607425, JString, required = false,
                                 default = nil)
  if valid_607425 != nil:
    section.add "X-Amz-Security-Token", valid_607425
  var valid_607426 = header.getOrDefault("X-Amz-Algorithm")
  valid_607426 = validateParameter(valid_607426, JString, required = false,
                                 default = nil)
  if valid_607426 != nil:
    section.add "X-Amz-Algorithm", valid_607426
  var valid_607427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607427 = validateParameter(valid_607427, JString, required = false,
                                 default = nil)
  if valid_607427 != nil:
    section.add "X-Amz-SignedHeaders", valid_607427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607428: Call_GetStopDBCluster_607415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607428.validator(path, query, header, formData, body)
  let scheme = call_607428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607428.url(scheme.get, call_607428.host, call_607428.base,
                         call_607428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607428, url, valid)

proc call*(call_607429: Call_GetStopDBCluster_607415; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607430 = newJObject()
  add(query_607430, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607430, "Action", newJString(Action))
  add(query_607430, "Version", newJString(Version))
  result = call_607429.call(nil, query_607430, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_607415(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_607416,
    base: "/", url: url_GetStopDBCluster_607417,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_607465 = ref object of OpenApiRestCall_601389
proc url_PostStopDBInstance_607467(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_607466(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607468 = query.getOrDefault("Action")
  valid_607468 = validateParameter(valid_607468, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_607468 != nil:
    section.add "Action", valid_607468
  var valid_607469 = query.getOrDefault("Version")
  valid_607469 = validateParameter(valid_607469, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607469 != nil:
    section.add "Version", valid_607469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607470 = header.getOrDefault("X-Amz-Signature")
  valid_607470 = validateParameter(valid_607470, JString, required = false,
                                 default = nil)
  if valid_607470 != nil:
    section.add "X-Amz-Signature", valid_607470
  var valid_607471 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607471 = validateParameter(valid_607471, JString, required = false,
                                 default = nil)
  if valid_607471 != nil:
    section.add "X-Amz-Content-Sha256", valid_607471
  var valid_607472 = header.getOrDefault("X-Amz-Date")
  valid_607472 = validateParameter(valid_607472, JString, required = false,
                                 default = nil)
  if valid_607472 != nil:
    section.add "X-Amz-Date", valid_607472
  var valid_607473 = header.getOrDefault("X-Amz-Credential")
  valid_607473 = validateParameter(valid_607473, JString, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "X-Amz-Credential", valid_607473
  var valid_607474 = header.getOrDefault("X-Amz-Security-Token")
  valid_607474 = validateParameter(valid_607474, JString, required = false,
                                 default = nil)
  if valid_607474 != nil:
    section.add "X-Amz-Security-Token", valid_607474
  var valid_607475 = header.getOrDefault("X-Amz-Algorithm")
  valid_607475 = validateParameter(valid_607475, JString, required = false,
                                 default = nil)
  if valid_607475 != nil:
    section.add "X-Amz-Algorithm", valid_607475
  var valid_607476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607476 = validateParameter(valid_607476, JString, required = false,
                                 default = nil)
  if valid_607476 != nil:
    section.add "X-Amz-SignedHeaders", valid_607476
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607477 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607477 = validateParameter(valid_607477, JString, required = true,
                                 default = nil)
  if valid_607477 != nil:
    section.add "DBInstanceIdentifier", valid_607477
  var valid_607478 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607478 = validateParameter(valid_607478, JString, required = false,
                                 default = nil)
  if valid_607478 != nil:
    section.add "DBSnapshotIdentifier", valid_607478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607479: Call_PostStopDBInstance_607465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_607479.validator(path, query, header, formData, body)
  let scheme = call_607479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607479.url(scheme.get, call_607479.host, call_607479.base,
                         call_607479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607479, url, valid)

proc call*(call_607480: Call_PostStopDBInstance_607465;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607481 = newJObject()
  var formData_607482 = newJObject()
  add(formData_607482, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607482, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607481, "Action", newJString(Action))
  add(query_607481, "Version", newJString(Version))
  result = call_607480.call(nil, query_607481, nil, formData_607482, nil)

var postStopDBInstance* = Call_PostStopDBInstance_607465(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_607466, base: "/",
    url: url_PostStopDBInstance_607467, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_607448 = ref object of OpenApiRestCall_601389
proc url_GetStopDBInstance_607450(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_607449(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607451 = query.getOrDefault("DBInstanceIdentifier")
  valid_607451 = validateParameter(valid_607451, JString, required = true,
                                 default = nil)
  if valid_607451 != nil:
    section.add "DBInstanceIdentifier", valid_607451
  var valid_607452 = query.getOrDefault("DBSnapshotIdentifier")
  valid_607452 = validateParameter(valid_607452, JString, required = false,
                                 default = nil)
  if valid_607452 != nil:
    section.add "DBSnapshotIdentifier", valid_607452
  var valid_607453 = query.getOrDefault("Action")
  valid_607453 = validateParameter(valid_607453, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_607453 != nil:
    section.add "Action", valid_607453
  var valid_607454 = query.getOrDefault("Version")
  valid_607454 = validateParameter(valid_607454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607454 != nil:
    section.add "Version", valid_607454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607455 = header.getOrDefault("X-Amz-Signature")
  valid_607455 = validateParameter(valid_607455, JString, required = false,
                                 default = nil)
  if valid_607455 != nil:
    section.add "X-Amz-Signature", valid_607455
  var valid_607456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607456 = validateParameter(valid_607456, JString, required = false,
                                 default = nil)
  if valid_607456 != nil:
    section.add "X-Amz-Content-Sha256", valid_607456
  var valid_607457 = header.getOrDefault("X-Amz-Date")
  valid_607457 = validateParameter(valid_607457, JString, required = false,
                                 default = nil)
  if valid_607457 != nil:
    section.add "X-Amz-Date", valid_607457
  var valid_607458 = header.getOrDefault("X-Amz-Credential")
  valid_607458 = validateParameter(valid_607458, JString, required = false,
                                 default = nil)
  if valid_607458 != nil:
    section.add "X-Amz-Credential", valid_607458
  var valid_607459 = header.getOrDefault("X-Amz-Security-Token")
  valid_607459 = validateParameter(valid_607459, JString, required = false,
                                 default = nil)
  if valid_607459 != nil:
    section.add "X-Amz-Security-Token", valid_607459
  var valid_607460 = header.getOrDefault("X-Amz-Algorithm")
  valid_607460 = validateParameter(valid_607460, JString, required = false,
                                 default = nil)
  if valid_607460 != nil:
    section.add "X-Amz-Algorithm", valid_607460
  var valid_607461 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607461 = validateParameter(valid_607461, JString, required = false,
                                 default = nil)
  if valid_607461 != nil:
    section.add "X-Amz-SignedHeaders", valid_607461
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607462: Call_GetStopDBInstance_607448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_607462.validator(path, query, header, formData, body)
  let scheme = call_607462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607462.url(scheme.get, call_607462.host, call_607462.base,
                         call_607462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607462, url, valid)

proc call*(call_607463: Call_GetStopDBInstance_607448;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607464 = newJObject()
  add(query_607464, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607464, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607464, "Action", newJString(Action))
  add(query_607464, "Version", newJString(Version))
  result = call_607463.call(nil, query_607464, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_607448(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_607449,
    base: "/", url: url_GetStopDBInstance_607450,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.atozSign(input.getOrDefault("query"), SHA256)
